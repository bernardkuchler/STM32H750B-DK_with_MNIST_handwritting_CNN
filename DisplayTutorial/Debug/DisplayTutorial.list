
DisplayTutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161cc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022f8  08016470  08016470  00017470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018768  08018768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018770  08018770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018774  08018774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000d74  24000000  08018778  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000091dc  24000d80  080194ec  0001ad80  2**5
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  0001b000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001ad74  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038fae  00000000  00000000  0001ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006b41  00000000  00000000  00053d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029c8  00000000  00000000  0005a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000208b  00000000  00000000  0005d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000d22c  00000000  00000000  0005f2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d5e1  00000000  00000000  0006c517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001b8526  00000000  00000000  000a9af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  0026201e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c6f4  00000000  00000000  002620a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  0026e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000d80 	.word	0x24000d80
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016454 	.word	0x08016454

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000d84 	.word	0x24000d84
 80002dc:	08016454 	.word	0x08016454

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	f5ad 6d51 	sub.w	sp, sp, #3344	@ 0xd10
 800077e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	
		//MX_USART3_UART_Init();

	  /* MPU Configuration--------------------------------------------------------*/
          MPU_Config();
 8000780:	f000 feae 	bl	80014e0 <MPU_Config>

	  /* Enable the CPU Cache */
	  CPU_CACHE_Enable();
 8000784:	f000 fdbe 	bl	8001304 <CPU_CACHE_Enable>
	  /* STM32H7xx HAL library initialization:
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 4
	       - Low Level Initialization
	     */
	  HAL_Init();
 8000788:	f005 fa56 	bl	8005c38 <HAL_Init>

	  /* Configure the system clock to 400 MHz */
	  SystemClock_Config();
 800078c:	f000 fd24 	bl	80011d8 <SystemClock_Config>

	  /* Configure LED1 */
	  BSP_LED_Init(LED1);
 8000790:	2000      	movs	r0, #0
 8000792:	f002 fe0f 	bl	80033b4 <BSP_LED_Init>

	  /* Configure User button */
	  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f002 fe87 	bl	80034ac <BSP_PB_Init>

	  /*##-1- LCD Initialization #################################################*/
	  /* Initialize the LCD */
	  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800079e:	2101      	movs	r1, #1
 80007a0:	2000      	movs	r0, #0
 80007a2:	f003 fba7 	bl	8003ef4 <BSP_LCD_Init>
	  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80007a6:	48cb      	ldr	r0, [pc, #812]	@ (8000ad4 <main+0x35c>)
 80007a8:	f000 ff7e 	bl	80016a8 <UTIL_LCD_SetFuncDriver>

	  /* Set Foreground Layer */
	  UTIL_LCD_SetLayer(0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 ffd1 	bl	8001754 <UTIL_LCD_SetLayer>

	  /* Clear the LCD Background layer */
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	f001 f8e3 	bl	8001980 <UTIL_LCD_Clear>
	  uint32_t x_size, y_size;

	  BSP_LCD_GetXSize(0, &x_size);
 80007ba:	f607 43bc 	addw	r3, r7, #3260	@ 0xcbc
 80007be:	4619      	mov	r1, r3
 80007c0:	2000      	movs	r0, #0
 80007c2:	f003 fd73 	bl	80042ac <BSP_LCD_GetXSize>
	  BSP_LCD_GetYSize(0, &y_size);
 80007c6:	f607 43b8 	addw	r3, r7, #3256	@ 0xcb8
 80007ca:	4619      	mov	r1, r3
 80007cc:	2000      	movs	r0, #0
 80007ce:	f003 fd8b 	bl	80042e8 <BSP_LCD_GetYSize>
	  hTSs->Width = x_size;
 80007d2:	4bc1      	ldr	r3, [pc, #772]	@ (8000ad8 <main+0x360>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f8d7 2cbc 	ldr.w	r2, [r7, #3260]	@ 0xcbc
 80007da:	601a      	str	r2, [r3, #0]
	  hTSs->Height = y_size;
 80007dc:	4bbe      	ldr	r3, [pc, #760]	@ (8000ad8 <main+0x360>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8d7 2cb8 	ldr.w	r2, [r7, #3256]	@ 0xcb8
 80007e4:	605a      	str	r2, [r3, #4]
	  hTSs->Orientation = TS_SWAP_XY;
 80007e6:	4bbc      	ldr	r3, [pc, #752]	@ (8000ad8 <main+0x360>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2208      	movs	r2, #8
 80007ec:	609a      	str	r2, [r3, #8]
	  hTSs->Accuracy = 5;
 80007ee:	4bba      	ldr	r3, [pc, #744]	@ (8000ad8 <main+0x360>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2205      	movs	r2, #5
 80007f4:	60da      	str	r2, [r3, #12]
	  /* Touchscreen initialization */
	  BSP_TS_Init(0, hTSs);
 80007f6:	4bb8      	ldr	r3, [pc, #736]	@ (8000ad8 <main+0x360>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2000      	movs	r0, #0
 80007fe:	f004 fffd 	bl	80057fc <BSP_TS_Init>

	  srand(time(NULL));   // Initialization, should only be called once.
 8000802:	2000      	movs	r0, #0
 8000804:	f012 fbba 	bl	8012f7c <time>
 8000808:	4602      	mov	r2, r0
 800080a:	460b      	mov	r3, r1
 800080c:	4610      	mov	r0, r2
 800080e:	4619      	mov	r1, r3
 8000810:	f011 fae2 	bl	8011dd8 <srand>
	  HAL_IncTick();
 8000814:	f005 fa82 	bl	8005d1c <HAL_IncTick>

	  UTIL_LCD_DisplayStringAt(x_size/2-50, y_size/2, (uint8_t *)"Press Me Onec", LEFT_MODE);
	  */

	  //DISPLAY MAIN LCD SCREEN
	  control_panel_set();
 8000818:	f000 fe0e 	bl	8001438 <control_panel_set>
	  //uint8_t num_press=0;

	  //uint8_t touch=0;

	  // X-CUBE-AI
	  MX_X_CUBE_AI_Init();	  
 800081c:	f00e f88e 	bl	800e93c <MX_X_CUBE_AI_Init>

	  ai_float nn_input_data[NN_INPUT_IMAGE_HEIGHT][NN_INPUT_IMAGE_WIDTH];
	  ai_float nn_output_data[NUM_CLASSES];

	  pred_probType _1st_pred, _2nd_pred;
	  _1st_pred.prob = _2nd_pred.prob = 0.0;
 8000820:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000824:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8000828:	f04f 0200 	mov.w	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000832:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800083c:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8000840:	601a      	str	r2, [r3, #0]
	  char _1st_pred_str[10];
	  //char _2nd_pred_str[10];
	  char all_pred_str[50];

	  // Emtpy out nn input data and output prediction
	  mnist_game_reset(&nn_input_data, &_1st_pred, &_2nd_pred);
 8000842:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000846:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800084a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fdc6 	bl	80013e0 <mnist_game_reset>


	  /* Infinite loop */
	  while (1)
	  {
		  BSP_TS_GetState(0, &TS_State);
 8000854:	49a1      	ldr	r1, [pc, #644]	@ (8000adc <main+0x364>)
 8000856:	2000      	movs	r0, #0
 8000858:	f005 f876 	bl	8005948 <BSP_TS_GetState>
		  }
		  if(TS_State.TouchDetected==0){
			  touch=0;
		  }
		  */
		  if (TS_State.TouchDetected) {
 800085c:	4b9f      	ldr	r3, [pc, #636]	@ (8000adc <main+0x364>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 834c 	beq.w	8000efe <main+0x786>
			  if (TS_State.TouchX > DRAW_IMG_X1 && TS_State.TouchX < DRAW_IMG_X2 && TS_State.TouchY > DRAW_IMG_Y1 && TS_State.TouchY < DRAW_IMG_Y2) {
 8000866:	4b9d      	ldr	r3, [pc, #628]	@ (8000adc <main+0x364>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	f240 832b 	bls.w	8000ec6 <main+0x74e>
 8000870:	4b9a      	ldr	r3, [pc, #616]	@ (8000adc <main+0x364>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2be5      	cmp	r3, #229	@ 0xe5
 8000876:	f200 8326 	bhi.w	8000ec6 <main+0x74e>
 800087a:	4b98      	ldr	r3, [pc, #608]	@ (8000adc <main+0x364>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	f240 8321 	bls.w	8000ec6 <main+0x74e>
 8000884:	4b95      	ldr	r3, [pc, #596]	@ (8000adc <main+0x364>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	2be5      	cmp	r3, #229	@ 0xe5
 800088a:	f200 831c 	bhi.w	8000ec6 <main+0x74e>
				  UTIL_LCD_FillCircle(TS_State.TouchX, TS_State.TouchY, 6, UTIL_LCD_COLOR_BLACK);
 800088e:	4b93      	ldr	r3, [pc, #588]	@ (8000adc <main+0x364>)
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	4b92      	ldr	r3, [pc, #584]	@ (8000adc <main+0x364>)
 8000894:	6899      	ldr	r1, [r3, #8]
 8000896:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800089a:	2206      	movs	r2, #6
 800089c:	f001 fad8 	bl	8001e50 <UTIL_LCD_FillCircle>

				  // Smaller 28x28 image for NN
				  int x = TS_State.TouchX * ((float) NN_INPUT_IMAGE_WIDTH/LCD_INPUT_IMAGE_WIDTH);
 80008a0:	4b8e      	ldr	r3, [pc, #568]	@ (8000adc <main+0x364>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ac:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000ae0 <main+0x368>
 80008b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b8:	ee17 3a90 	vmov	r3, s15
 80008bc:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
				  int y = TS_State.TouchY * ((float) NN_INPUT_IMAGE_HEIGHT/LCD_INPUT_IMAGE_HEIGHT);
 80008c0:	4b86      	ldr	r3, [pc, #536]	@ (8000adc <main+0x364>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008cc:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8000ae0 <main+0x368>
 80008d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d8:	ee17 3a90 	vmov	r3, s15
 80008dc:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4

				  // Draw smaller representation of image (each dot is represented as 3x3 pixels)
				  UTIL_LCD_SetPixel(x + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y + 1, UTIL_LCD_COLOR_BLACK);
 80008e0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80008ea:	b298      	uxth	r0, r3
 80008ec:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3306      	adds	r3, #6
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80008fa:	4619      	mov	r1, r3
 80008fc:	f001 f80c 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y - 1, UTIL_LCD_COLOR_BLACK);
 8000900:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000904:	b29b      	uxth	r3, r3
 8000906:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800090a:	b298      	uxth	r0, r3
 800090c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000910:	b29b      	uxth	r3, r3
 8000912:	3304      	adds	r3, #4
 8000914:	b29b      	uxth	r3, r3
 8000916:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800091a:	4619      	mov	r1, r3
 800091c:	f000 fffc 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y, UTIL_LCD_COLOR_BLACK);
 8000920:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000924:	b29b      	uxth	r3, r3
 8000926:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800092a:	b298      	uxth	r0, r3
 800092c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000930:	b29b      	uxth	r3, r3
 8000932:	3305      	adds	r3, #5
 8000934:	b29b      	uxth	r3, r3
 8000936:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800093a:	4619      	mov	r1, r3
 800093c:	f000 ffec 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y, UTIL_LCD_COLOR_BLACK);
 8000940:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000944:	b29b      	uxth	r3, r3
 8000946:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800094a:	b298      	uxth	r0, r3
 800094c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000950:	b29b      	uxth	r3, r3
 8000952:	3305      	adds	r3, #5
 8000954:	b29b      	uxth	r3, r3
 8000956:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800095a:	4619      	mov	r1, r3
 800095c:	f000 ffdc 	bl	8001918 <UTIL_LCD_SetPixel>

				  UTIL_LCD_SetPixel(x + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y, UTIL_LCD_COLOR_BLACK);
 8000960:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000964:	b29b      	uxth	r3, r3
 8000966:	f203 13bf 	addw	r3, r3, #447	@ 0x1bf
 800096a:	b298      	uxth	r0, r3
 800096c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000970:	b29b      	uxth	r3, r3
 8000972:	3305      	adds	r3, #5
 8000974:	b29b      	uxth	r3, r3
 8000976:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800097a:	4619      	mov	r1, r3
 800097c:	f000 ffcc 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y + 1, UTIL_LCD_COLOR_BLACK);
 8000980:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000984:	b29b      	uxth	r3, r3
 8000986:	f203 13bf 	addw	r3, r3, #447	@ 0x1bf
 800098a:	b298      	uxth	r0, r3
 800098c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000990:	b29b      	uxth	r3, r3
 8000992:	3306      	adds	r3, #6
 8000994:	b29b      	uxth	r3, r3
 8000996:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800099a:	4619      	mov	r1, r3
 800099c:	f000 ffbc 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y - 1, UTIL_LCD_COLOR_BLACK);
 80009a0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	f203 13bf 	addw	r3, r3, #447	@ 0x1bf
 80009aa:	b298      	uxth	r0, r3
 80009ac:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3304      	adds	r3, #4
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80009ba:	4619      	mov	r1, r3
 80009bc:	f000 ffac 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y - 1, UTIL_LCD_COLOR_BLACK);
 80009c0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 80009ca:	b298      	uxth	r0, r3
 80009cc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	3304      	adds	r3, #4
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80009da:	4619      	mov	r1, r3
 80009dc:	f000 ff9c 	bl	8001918 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y + 1, UTIL_LCD_COLOR_BLACK);
 80009e0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80009ea:	b298      	uxth	r0, r3
 80009ec:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	3306      	adds	r3, #6
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80009fa:	4619      	mov	r1, r3
 80009fc:	f000 ff8c 	bl	8001918 <UTIL_LCD_SetPixel>
				  nn_input_data[y-1][x+1] = PXL_SET; // /2;
				  nn_input_data[y][x]     = PXL_SET;
				  */

				  // Use smaller representation of image as input to NN
				  ai_float sidePx = 0.99; //0.9
 8000a00:	4b38      	ldr	r3, [pc, #224]	@ (8000ae4 <main+0x36c>)
 8000a02:	f507 624f 	add.w	r2, r7, #3312	@ 0xcf0
 8000a06:	6013      	str	r3, [r2, #0]
				  ai_float sidePxCorner = 0.99;//0.6;
 8000a08:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <main+0x36c>)
 8000a0a:	f607 42ec 	addw	r2, r7, #3308	@ 0xcec
 8000a0e:	6013      	str	r3, [r2, #0]
				  ai_float extraSidePx = 0.3;
 8000a10:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <main+0x370>)
 8000a12:	f607 42e8 	addw	r2, r7, #3304	@ 0xce8
 8000a16:	6013      	str	r3, [r2, #0]
				  //ai_float extraSidePxBetween = 0.5;
				  //ai_float extraSidePxCorner = 0.4;
				  int maxX= (27 >= x+2) ? x+2 : 27;
 8000a18:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000a1c:	2b19      	cmp	r3, #25
 8000a1e:	bfa8      	it	ge
 8000a20:	2319      	movge	r3, #25
 8000a22:	3302      	adds	r3, #2
 8000a24:	f8c7 3ce4 	str.w	r3, [r7, #3300]	@ 0xce4
				  int upX= (27 >= x+1) ? x+1 : 27;
 8000a28:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000a2c:	2b1a      	cmp	r3, #26
 8000a2e:	bfa8      	it	ge
 8000a30:	231a      	movge	r3, #26
 8000a32:	3301      	adds	r3, #1
 8000a34:	f8c7 3ce0 	str.w	r3, [r7, #3296]	@ 0xce0
				  int minX= (0 <= x-2) ? x-2 : 0;
 8000a38:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	bfb8      	it	lt
 8000a40:	2302      	movlt	r3, #2
 8000a42:	3b02      	subs	r3, #2
 8000a44:	f8c7 3cdc 	str.w	r3, [r7, #3292]	@ 0xcdc
				  int downX= (0 <= x-1) ? x-1 : 0;
 8000a48:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	bfb8      	it	lt
 8000a50:	2301      	movlt	r3, #1
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f8c7 3cd8 	str.w	r3, [r7, #3288]	@ 0xcd8

				  int maxY= (27 >= y+2) ? y+2 : 27;
 8000a58:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000a5c:	2b19      	cmp	r3, #25
 8000a5e:	bfa8      	it	ge
 8000a60:	2319      	movge	r3, #25
 8000a62:	3302      	adds	r3, #2
 8000a64:	f8c7 3cd4 	str.w	r3, [r7, #3284]	@ 0xcd4
				  int upY= (27 >= y+1) ? y+1 : 27;
 8000a68:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000a6c:	2b1a      	cmp	r3, #26
 8000a6e:	bfa8      	it	ge
 8000a70:	231a      	movge	r3, #26
 8000a72:	3301      	adds	r3, #1
 8000a74:	f8c7 3cd0 	str.w	r3, [r7, #3280]	@ 0xcd0
				  int minY= (0 <= y-2) ? y-2 : 0;
 8000a78:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	bfb8      	it	lt
 8000a80:	2302      	movlt	r3, #2
 8000a82:	3b02      	subs	r3, #2
 8000a84:	f8c7 3ccc 	str.w	r3, [r7, #3276]	@ 0xccc
				  int downY= (0 <= y-1) ? y-1 : 0;
 8000a88:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	bfb8      	it	lt
 8000a90:	2301      	movlt	r3, #1
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f8c7 3cc8 	str.w	r3, [r7, #3272]	@ 0xcc8

				  nn_input_data[upY][upX] = (sidePxCorner > nn_input_data[upY][upX]) ? sidePxCorner : nn_input_data[upY][upX];//PXL_SET; // /2;
 8000a98:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000a9c:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000aa0:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	@ 0xcd0
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	@ 0xce0
 8000ab0:	4413      	add	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000abe:	ed93 7a00 	vldr	s14, [r3]
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	dd0f      	ble.n	8000aec <main+0x374>
 8000acc:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	e01b      	b.n	8000b0c <main+0x394>
 8000ad4:	08018120 	.word	0x08018120
 8000ad8:	24000e80 	.word	0x24000e80
 8000adc:	24000e84 	.word	0x24000e84
 8000ae0:	3deeeeef 	.word	0x3deeeeef
 8000ae4:	3f7d70a4 	.word	0x3f7d70a4
 8000ae8:	3e99999a 	.word	0x3e99999a
 8000aec:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000af0:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000af4:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	@ 0xcd0
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	@ 0xce0
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000b10:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000b14:	f8d7 1cd0 	ldr.w	r1, [r7, #3280]	@ 0xcd0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	f8d7 1ce0 	ldr.w	r1, [r7, #3296]	@ 0xce0
 8000b24:	440b      	add	r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4403      	add	r3, r0
 8000b2a:	601a      	str	r2, [r3, #0]
				  nn_input_data[downY][downX] = (sidePxCorner > nn_input_data[downY][downX]) ? sidePxCorner : nn_input_data[downY][downX];//PXL_SET; // /2;
 8000b2c:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000b30:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000b34:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	@ 0xcc8
 8000b38:	4613      	mov	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	@ 0xcd8
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	edd3 7a00 	vldr	s15, [r3]
 8000b4e:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000b52:	ed93 7a00 	vldr	s14, [r3]
 8000b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5e:	dd03      	ble.n	8000b68 <main+0x3f0>
 8000b60:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	e00f      	b.n	8000b88 <main+0x410>
 8000b68:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000b6c:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000b70:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	@ 0xcc8
 8000b74:	4613      	mov	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	@ 0xcd8
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000b8c:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000b90:	f8d7 1cc8 	ldr.w	r1, [r7, #3272]	@ 0xcc8
 8000b94:	460b      	mov	r3, r1
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	f8d7 1cd8 	ldr.w	r1, [r7, #3288]	@ 0xcd8
 8000ba0:	440b      	add	r3, r1
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4403      	add	r3, r0
 8000ba6:	601a      	str	r2, [r3, #0]
				  nn_input_data[upY][x]   = (sidePx > nn_input_data[upY][x]) ? sidePx : nn_input_data[upY][x];//PXL_SET; // /2;
 8000ba8:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000bac:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000bb0:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	@ 0xcd0
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	@ 0xcf8
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000bce:	ed93 7a00 	vldr	s14, [r3]
 8000bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bda:	dd03      	ble.n	8000be4 <main+0x46c>
 8000bdc:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	e00f      	b.n	8000c04 <main+0x48c>
 8000be4:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000be8:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000bec:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	@ 0xcd0
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	@ 0xcf8
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000c08:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000c0c:	f8d7 1cd0 	ldr.w	r1, [r7, #3280]	@ 0xcd0
 8000c10:	460b      	mov	r3, r1
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	f8d7 1cf8 	ldr.w	r1, [r7, #3320]	@ 0xcf8
 8000c1c:	440b      	add	r3, r1
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4403      	add	r3, r0
 8000c22:	601a      	str	r2, [r3, #0]
				  nn_input_data[downY][x]   = (sidePx > nn_input_data[downY][x]) ? sidePx : nn_input_data[downY][x];//PXL_SET; // /2;
 8000c24:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000c28:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000c2c:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	@ 0xcc8
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	@ 0xcf8
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000c4a:	ed93 7a00 	vldr	s14, [r3]
 8000c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	dd03      	ble.n	8000c60 <main+0x4e8>
 8000c58:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	e00f      	b.n	8000c80 <main+0x508>
 8000c60:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000c64:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000c68:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	@ 0xcc8
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	@ 0xcf8
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000c84:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000c88:	f8d7 1cc8 	ldr.w	r1, [r7, #3272]	@ 0xcc8
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f8d7 1cf8 	ldr.w	r1, [r7, #3320]	@ 0xcf8
 8000c98:	440b      	add	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4403      	add	r3, r0
 8000c9e:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][upX]   = (sidePx > nn_input_data[y][upX]) ? sidePx : nn_input_data[y][upX];//PXL_SET; // /2;
 8000ca0:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000ca4:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000ca8:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	@ 0xce0
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000cc6:	ed93 7a00 	vldr	s14, [r3]
 8000cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	dd03      	ble.n	8000cdc <main+0x564>
 8000cd4:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	e00f      	b.n	8000cfc <main+0x584>
 8000cdc:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000ce0:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000ce4:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8000ce8:	4613      	mov	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	@ 0xce0
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000d00:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000d04:	f8d7 1cf4 	ldr.w	r1, [r7, #3316]	@ 0xcf4
 8000d08:	460b      	mov	r3, r1
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	f8d7 1ce0 	ldr.w	r1, [r7, #3296]	@ 0xce0
 8000d14:	440b      	add	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][downX]   = (sidePx > nn_input_data[y][downX]) ? sidePx : nn_input_data[y][downX];//PXL_SET; // /2;
 8000d1c:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000d20:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000d24:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8000d28:	4613      	mov	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	@ 0xcd8
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	edd3 7a00 	vldr	s15, [r3]
 8000d3e:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000d42:	ed93 7a00 	vldr	s14, [r3]
 8000d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	dd03      	ble.n	8000d58 <main+0x5e0>
 8000d50:	f507 634f 	add.w	r3, r7, #3312	@ 0xcf0
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	e00f      	b.n	8000d78 <main+0x600>
 8000d58:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000d5c:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000d60:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8000d64:	4613      	mov	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	@ 0xcd8
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000d7c:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000d80:	f8d7 1cf4 	ldr.w	r1, [r7, #3316]	@ 0xcf4
 8000d84:	460b      	mov	r3, r1
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	f8d7 1cd8 	ldr.w	r1, [r7, #3288]	@ 0xcd8
 8000d90:	440b      	add	r3, r1
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4403      	add	r3, r0
 8000d96:	601a      	str	r2, [r3, #0]
				  nn_input_data[upY][downX] = (sidePxCorner > nn_input_data[upY][downX]) ? sidePxCorner : nn_input_data[upY][downX];//PXL_SET; // /2;
 8000d98:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000d9c:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000da0:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	@ 0xcd0
 8000da4:	4613      	mov	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	@ 0xcd8
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000dbe:	ed93 7a00 	vldr	s14, [r3]
 8000dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	dd03      	ble.n	8000dd4 <main+0x65c>
 8000dcc:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	e00f      	b.n	8000df4 <main+0x67c>
 8000dd4:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000dd8:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000ddc:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	@ 0xcd0
 8000de0:	4613      	mov	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	@ 0xcd8
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000df8:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000dfc:	f8d7 1cd0 	ldr.w	r1, [r7, #3280]	@ 0xcd0
 8000e00:	460b      	mov	r3, r1
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	f8d7 1cd8 	ldr.w	r1, [r7, #3288]	@ 0xcd8
 8000e0c:	440b      	add	r3, r1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4403      	add	r3, r0
 8000e12:	601a      	str	r2, [r3, #0]
				  nn_input_data[downY][upX] = (sidePxCorner > nn_input_data[downY][upX]) ? sidePxCorner : nn_input_data[downY][upX];//PXL_SET; // /2;
 8000e14:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000e18:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000e1c:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	@ 0xcc8
 8000e20:	4613      	mov	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	@ 0xce0
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000e3a:	ed93 7a00 	vldr	s14, [r3]
 8000e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e46:	dd03      	ble.n	8000e50 <main+0x6d8>
 8000e48:	f607 43ec 	addw	r3, r7, #3308	@ 0xcec
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	e00f      	b.n	8000e70 <main+0x6f8>
 8000e50:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000e54:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000e58:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	@ 0xcc8
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	@ 0xce0
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000e74:	f5a3 6049 	sub.w	r0, r3, #3216	@ 0xc90
 8000e78:	f8d7 1cc8 	ldr.w	r1, [r7, #3272]	@ 0xcc8
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	f8d7 1ce0 	ldr.w	r1, [r7, #3296]	@ 0xce0
 8000e88:	440b      	add	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][x]     = PXL_SET;
 8000e90:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000e94:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000e98:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	@ 0xcf8
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000eb2:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][maxX]   = (extraSidePx > nn_input_data[y][x+2]) ? extraSidePx : nn_input_data[y][x+2];//PXL_SET; // /2;
				  nn_input_data[y][minX]   = (extraSidePx > nn_input_data[y][x-2]) ? extraSidePx : nn_input_data[y][x-2];//PXL_SET; // /2;
				  */


				  printf("X = %d, Y = %d\r\n", TS_State.TouchX, TS_State.TouchY);
 8000eb4:	4bb4      	ldr	r3, [pc, #720]	@ (8001188 <main+0xa10>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4ab3      	ldr	r2, [pc, #716]	@ (8001188 <main+0xa10>)
 8000eba:	6892      	ldr	r2, [r2, #8]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	48b3      	ldr	r0, [pc, #716]	@ (800118c <main+0xa14>)
 8000ec0:	f011 feec 	bl	8012c9c <iprintf>
			  if (TS_State.TouchX > DRAW_IMG_X1 && TS_State.TouchX < DRAW_IMG_X2 && TS_State.TouchY > DRAW_IMG_Y1 && TS_State.TouchY < DRAW_IMG_Y2) {
 8000ec4:	e01b      	b.n	8000efe <main+0x786>

			  }
			  else if (TS_State.TouchX > ERASE_BUTTON_X1 && TS_State.TouchX < ERASE_BUTTON_X2 && TS_State.TouchY > ERASE_BUTTON_Y1 && TS_State.TouchY < ERASE_BUTTON_Y2) {
 8000ec6:	4bb0      	ldr	r3, [pc, #704]	@ (8001188 <main+0xa10>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2bf5      	cmp	r3, #245	@ 0xf5
 8000ecc:	d917      	bls.n	8000efe <main+0x786>
 8000ece:	4bae      	ldr	r3, [pc, #696]	@ (8001188 <main+0xa10>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 7fed 	cmp.w	r3, #474	@ 0x1da
 8000ed6:	d812      	bhi.n	8000efe <main+0x786>
 8000ed8:	4bab      	ldr	r3, [pc, #684]	@ (8001188 <main+0xa10>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b28      	cmp	r3, #40	@ 0x28
 8000ede:	d90e      	bls.n	8000efe <main+0x786>
 8000ee0:	4ba9      	ldr	r3, [pc, #676]	@ (8001188 <main+0xa10>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b45      	cmp	r3, #69	@ 0x45
 8000ee6:	d80a      	bhi.n	8000efe <main+0x786>

				  // Reset user interface
				  control_panel_set();
 8000ee8:	f000 faa6 	bl	8001438 <control_panel_set>

				  // Emtpy out nn input data and output prediction
				  mnist_game_reset(&nn_input_data, &_1st_pred, &_2nd_pred);
 8000eec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000ef0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000ef4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fa71 	bl	80013e0 <mnist_game_reset>
			  }
		  }

		  HAL_Delay(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f004 ff2c 	bl	8005d5c <HAL_Delay>

		  if(BSP_PB_GetState(BUTTON_USER)) {
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 fb43 	bl	8003590 <BSP_PB_GetState>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f43f aca1 	beq.w	8000854 <main+0xdc>
			  /*
			  ai_float squashedInput[28*28];
			  int squashedCounter = 0;
			  */

			  int startX = 420;//350;
 8000f12:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8000f16:	f8c7 3cc4 	str.w	r3, [r7, #3268]	@ 0xcc4
			  int startY = 5; //70;//136;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	f8c7 3cc0 	str.w	r3, [r7, #3264]	@ 0xcc0
			  for (int i = 0; i < 28; i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 8000f26:	e03b      	b.n	8000fa0 <main+0x828>
				  for (int j = 0; j < 28; j++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 8000f2e:	e02e      	b.n	8000f8e <main+0x816>
					  if (nn_input_data[i][j]) {
 8000f30:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000f34:	f5a3 6149 	sub.w	r1, r3, #3216	@ 0xc90
 8000f38:	f8d7 2d04 	ldr.w	r2, [r7, #3332]	@ 0xd04
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	@ 0xd00
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d013      	beq.n	8000f84 <main+0x80c>
						  UTIL_LCD_SetPixel(startX + j, startY + i, UTIL_LCD_COLOR_BLUE);
 8000f5c:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	@ 0xcc4
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	@ 0xcc0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4a84      	ldr	r2, [pc, #528]	@ (8001190 <main+0xa18>)
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f000 fcca 	bl	8001918 <UTIL_LCD_SetPixel>
				  for (int j = 0; j < 28; j++) {
 8000f84:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 8000f8e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8000f92:	2b1b      	cmp	r3, #27
 8000f94:	ddcc      	ble.n	8000f30 <main+0x7b8>
			  for (int i = 0; i < 28; i++) {
 8000f96:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 8000fa0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8000fa4:	2b1b      	cmp	r3, #27
 8000fa6:	ddbf      	ble.n	8000f28 <main+0x7b0>
			  }

			  MX_X_CUBE_AI_Process(nn_input_dataTEST, nn_output_dataTEST);
			  */

			  MX_X_CUBE_AI_Process(nn_input_data, nn_output_data);
 8000fa8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000fac:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00d fce2 	bl	800e97c <MX_X_CUBE_AI_Process>

			  // Get highest 2 predictions for drawn image/number

			  for(int i = 0; i < NUM_CLASSES; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 8000fbe:	e098      	b.n	80010f2 <main+0x97a>
				  if(_1st_pred.prob < nn_output_data[i]) {
 8000fc0:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000fc4:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000fd0:	f6a3 42b8 	subw	r2, r3, #3256	@ 0xcb8
 8000fd4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d52a      	bpl.n	8001040 <main+0x8c8>
					  _2nd_pred.label = _1st_pred.label;
 8000fea:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000fee:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8000ff2:	791a      	ldrb	r2, [r3, #4]
 8000ff4:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8000ff8:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8000ffc:	711a      	strb	r2, [r3, #4]
					  _2nd_pred.prob = _1st_pred.prob;
 8000ffe:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001002:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800100c:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8001010:	601a      	str	r2, [r3, #0]

					  _1st_pred.prob = nn_output_data[i];
 8001012:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001016:	f6a3 42b8 	subw	r2, r3, #3256	@ 0xcb8
 800101a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001028:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 800102c:	601a      	str	r2, [r3, #0]
					  _1st_pred.label = i;
 800102e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8001032:	b2da      	uxtb	r2, r3
 8001034:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001038:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e02a      	b.n	8001096 <main+0x91e>

				  }
				  else if (_2nd_pred.prob < nn_output_data[i]) {
 8001040:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001044:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001050:	f6a3 42b8 	subw	r2, r3, #3256	@ 0xcb8
 8001054:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d515      	bpl.n	8001096 <main+0x91e>
					  _2nd_pred.label = i;
 800106a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 800106e:	b2da      	uxtb	r2, r3
 8001070:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001074:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8001078:	711a      	strb	r2, [r3, #4]
					  _2nd_pred.prob = nn_output_data[i];
 800107a:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800107e:	f6a3 42b8 	subw	r2, r3, #3256	@ 0xcb8
 8001082:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001090:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8001094:	601a      	str	r2, [r3, #0]
				  }

				  sprintf(all_pred_str, "Napoved-%d : %f", i, nn_output_data[i]);
 8001096:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800109a:	f6a3 42b8 	subw	r2, r3, #3256	@ 0xcb8
 800109e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ae:	463b      	mov	r3, r7
 80010b0:	ed8d 7b00 	vstr	d7, [sp]
 80010b4:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	@ 0xcfc
 80010b8:	4936      	ldr	r1, [pc, #216]	@ (8001194 <main+0xa1c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f011 fe5e 	bl	8012d7c <siprintf>

				  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80010c0:	4833      	ldr	r0, [pc, #204]	@ (8001190 <main+0xa18>)
 80010c2:	f000 fb65 	bl	8001790 <UTIL_LCD_SetTextColor>
				  UTIL_LCD_SetFont(&Font16);
 80010c6:	4834      	ldr	r0, [pc, #208]	@ (8001198 <main+0xa20>)
 80010c8:	f000 fb8a 	bl	80017e0 <UTIL_LCD_SetFont>
				  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fb72 	bl	80017b8 <UTIL_LCD_SetBackColor>
				  UTIL_LCD_DisplayStringAt(242, 80 + 16 * i, (uint8_t *) all_pred_str, LEFT_MODE);
 80010d4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80010d8:	3305      	adds	r3, #5
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	463a      	mov	r2, r7
 80010e0:	2303      	movs	r3, #3
 80010e2:	20f2      	movs	r0, #242	@ 0xf2
 80010e4:	f000 fc98 	bl	8001a18 <UTIL_LCD_DisplayStringAt>
			  for(int i = 0; i < NUM_CLASSES; i++) {
 80010e8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80010ec:	3301      	adds	r3, #1
 80010ee:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 80010f2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	f77f af62 	ble.w	8000fc0 <main+0x848>
			  }
			  */


			  // Show results/predictions
			  printf("AI prva napoved: %f %d", _1st_pred.label, _1st_pred.prob);
 80010fc:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001100:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	4619      	mov	r1, r3
 8001108:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800110c:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001118:	ec53 2b17 	vmov	r2, r3, d7
 800111c:	481f      	ldr	r0, [pc, #124]	@ (800119c <main+0xa24>)
 800111e:	f011 fdbd 	bl	8012c9c <iprintf>
			  printf("AI druga napoved: %f %d", _2nd_pred.label, _2nd_pred.prob);
 8001122:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001126:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 800112a:	791b      	ldrb	r3, [r3, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 8001132:	f6a3 43c8 	subw	r3, r3, #3272	@ 0xcc8
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113e:	ec53 2b17 	vmov	r2, r3, d7
 8001142:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <main+0xa28>)
 8001144:	f011 fdaa 	bl	8012c9c <iprintf>

			  sprintf(_1st_pred_str, "%d", _1st_pred.label);
 8001148:	f607 5308 	addw	r3, r7, #3336	@ 0xd08
 800114c:	f5a3 634c 	sub.w	r3, r3, #3264	@ 0xcc0
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	461a      	mov	r2, r3
 8001154:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001158:	4912      	ldr	r1, [pc, #72]	@ (80011a4 <main+0xa2c>)
 800115a:	4618      	mov	r0, r3
 800115c:	f011 fe0e 	bl	8012d7c <siprintf>

			  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8001160:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <main+0xa30>)
 8001162:	f000 fb15 	bl	8001790 <UTIL_LCD_SetTextColor>
			  UTIL_LCD_SetFont(&Font20);
 8001166:	4811      	ldr	r0, [pc, #68]	@ (80011ac <main+0xa34>)
 8001168:	f000 fb3a 	bl	80017e0 <UTIL_LCD_SetFont>
			  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 fb22 	bl	80017b8 <UTIL_LCD_SetBackColor>
			  UTIL_LCD_DisplayStringAt(330, 8, (uint8_t *) _1st_pred_str, LEFT_MODE);
 8001174:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001178:	2303      	movs	r3, #3
 800117a:	2108      	movs	r1, #8
 800117c:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8001180:	f000 fc4a 	bl	8001a18 <UTIL_LCD_DisplayStringAt>
		  BSP_TS_GetState(0, &TS_State);
 8001184:	f7ff bb66 	b.w	8000854 <main+0xdc>
 8001188:	24000e84 	.word	0x24000e84
 800118c:	0801647c 	.word	0x0801647c
 8001190:	ff0000ff 	.word	0xff0000ff
 8001194:	08016490 	.word	0x08016490
 8001198:	24000008 	.word	0x24000008
 800119c:	080164a0 	.word	0x080164a0
 80011a0:	080164b8 	.word	0x080164b8
 80011a4:	080164d0 	.word	0x080164d0
 80011a8:	ffff0000 	.word	0xffff0000
 80011ac:	24000000 	.word	0x24000000

080011b0 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <BSP_PB_Callback+0x24>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	24000d9c 	.word	0x24000d9c

080011d8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09e      	sub	sp, #120	@ 0x78
 80011dc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011e4:	2002      	movs	r0, #2
 80011e6:	f008 fde7 	bl	8009db8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <SystemClock_Config+0x120>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f2:	4a41      	ldr	r2, [pc, #260]	@ (80012f8 <SystemClock_Config+0x120>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <SystemClock_Config+0x120>)
 80011fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <SystemClock_Config+0x124>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a3c      	ldr	r2, [pc, #240]	@ (80012fc <SystemClock_Config+0x124>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b3a      	ldr	r3, [pc, #232]	@ (80012fc <SystemClock_Config+0x124>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800121c:	bf00      	nop
 800121e:	4b37      	ldr	r3, [pc, #220]	@ (80012fc <SystemClock_Config+0x124>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800122a:	d1f8      	bne.n	800121e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	2302      	movs	r3, #2
 8001244:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8001246:	2305      	movs	r3, #5
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800124a:	23a0      	movs	r3, #160	@ 0xa0
 800124c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800125e:	2300      	movs	r3, #0
 8001260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001262:	2308      	movs	r3, #8
 8001264:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f009 fa8e 	bl	800a78c <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 8001276:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800127e:	f000 f95c 	bl	800153a <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001282:	233f      	movs	r3, #63	@ 0x3f
 8001284:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2303      	movs	r3, #3
 8001288:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800128e:	2308      	movs	r3, #8
 8001290:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001292:	2340      	movs	r3, #64	@ 0x40
 8001294:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001296:	2340      	movs	r3, #64	@ 0x40
 8001298:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800129a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80012a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a8:	2104      	movs	r1, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f009 fec8 	bl	800b040 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 80012b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80012be:	f000 f93c 	bl	800153a <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <SystemClock_Config+0x128>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <SystemClock_Config+0x128>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012cc:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <SystemClock_Config+0x128>)
 80012d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SystemClock_Config+0x128>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <SystemClock_Config+0x128>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80012ec:	f004 fd66 	bl	8005dbc <HAL_EnableCompensationCell>
}
 80012f0:	bf00      	nop
 80012f2:	3778      	adds	r7, #120	@ 0x78
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	58000400 	.word	0x58000400
 80012fc:	58024800 	.word	0x58024800
 8001300:	58024400 	.word	0x58024400

08001304 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d11b      	bne.n	800134e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001316:	f3bf 8f4f 	dsb	sy
}
 800131a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131c:	f3bf 8f6f 	isb	sy
}
 8001320:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001322:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 8001324:	2200      	movs	r2, #0
 8001326:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800132a:	f3bf 8f4f 	dsb	sy
}
 800132e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001330:	f3bf 8f6f 	isb	sy
}
 8001334:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001336:	4b29      	ldr	r3, [pc, #164]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001340:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001342:	f3bf 8f4f 	dsb	sy
}
 8001346:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001348:	f3bf 8f6f 	isb	sy
}
 800134c:	e000      	b.n	8001350 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800134e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d138      	bne.n	80013ce <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001364:	f3bf 8f4f 	dsb	sy
}
 8001368:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 800136c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001370:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	0b5b      	lsrs	r3, r3, #13
 8001376:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800137a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001384:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800138e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001394:	4911      	ldr	r1, [pc, #68]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 8001396:	4313      	orrs	r3, r2
 8001398:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ef      	bne.n	8001386 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e5      	bne.n	800137c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80013b0:	f3bf 8f4f 	dsb	sy
}
 80013b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <CPU_CACHE_Enable+0xd8>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	e000      	b.n	80013d0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80013ce:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <mnist_game_reset>:

}

/* USER CODE BEGIN 4 */

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]

	memset(in_data, 0.0, sizeof(in_data[0][0]) * NN_INPUT_IMAGE_WIDTH * NN_INPUT_IMAGE_HEIGHT);
 80013ec:	f44f 6244 	mov.w	r2, #3136	@ 0xc40
 80013f0:	2100      	movs	r1, #0
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f011 fdba 	bl	8012f6c <memset>

	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob = 0.0;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2200      	movs	r2, #0
 8001404:	711a      	strb	r2, [r3, #4]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	edc3 7a00 	vstr	s15, [r3]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001422:	edc7 7a00 	vstr	s15, [r7]
 8001426:	783b      	ldrb	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	711a      	strb	r2, [r3, #4]
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <control_panel_set>:
	BSP_LCD_DrawRect(2,2,237,237);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
}
*/

void control_panel_set() { // x = 480, y = 272
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af02      	add	r7, sp, #8
	UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f000 fa9d 	bl	8001980 <UTIL_LCD_Clear>

	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001446:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800144a:	f000 f9a1 	bl	8001790 <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetFont(&Font16);
 800144e:	4820      	ldr	r0, [pc, #128]	@ (80014d0 <control_panel_set+0x98>)
 8001450:	f000 f9c6 	bl	80017e0 <UTIL_LCD_SetFont>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f9ae 	bl	80017b8 <UTIL_LCD_SetBackColor>
	//UTIL_LCD_DisplayStringAt(5, 255, (uint8_t *) "Napoved:", LEFT_MODE);
	UTIL_LCD_DisplayStringAt(245, 10, (uint8_t *) "Napoved:", LEFT_MODE); // 245, 5
 800145c:	2303      	movs	r3, #3
 800145e:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <control_panel_set+0x9c>)
 8001460:	210a      	movs	r1, #10
 8001462:	20f5      	movs	r0, #245	@ 0xf5
 8001464:	f000 fad8 	bl	8001a18 <UTIL_LCD_DisplayStringAt>

	//UTIL_LCD_DrawRect(200, 250, 28, 28, UTIL_LCD_COLOR_BLACK);
	UTIL_LCD_DrawRect(447, 5, 28, 28, UTIL_LCD_COLOR_BLACK);
 8001468:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	231c      	movs	r3, #28
 8001470:	221c      	movs	r2, #28
 8001472:	2105      	movs	r1, #5
 8001474:	f240 10bf 	movw	r0, #447	@ 0x1bf
 8001478:	f000 fb7c 	bl	8001b74 <UTIL_LCD_DrawRect>
	//UTIL_LCD_FillRect(5, 285, 230, 30, UTIL_LCD_COLOR_BLUE);
	UTIL_LCD_FillRect(245, 40, 230, 30, UTIL_LCD_COLOR_BLUE);
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <control_panel_set+0xa0>)
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	231e      	movs	r3, #30
 8001482:	22e6      	movs	r2, #230	@ 0xe6
 8001484:	2128      	movs	r1, #40	@ 0x28
 8001486:	20f5      	movs	r0, #245	@ 0xf5
 8001488:	f000 fca8 	bl	8001ddc <UTIL_LCD_FillRect>

	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f97e 	bl	8001790 <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetFont(&Font16);
 8001494:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <control_panel_set+0x98>)
 8001496:	f000 f9a3 	bl	80017e0 <UTIL_LCD_SetFont>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800149a:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <control_panel_set+0xa0>)
 800149c:	f000 f98c 	bl	80017b8 <UTIL_LCD_SetBackColor>
	//UTIL_LCD_DisplayStringAt(330, 291, (uint8_t*) "Brisi", LEFT_MODE);
	UTIL_LCD_DisplayStringAt(330, 50, (uint8_t*) "Brisi", LEFT_MODE);
 80014a0:	2303      	movs	r3, #3
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <control_panel_set+0xa4>)
 80014a4:	2132      	movs	r1, #50	@ 0x32
 80014a6:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 80014aa:	f000 fab5 	bl	8001a18 <UTIL_LCD_DisplayStringAt>

	UTIL_LCD_DrawRect(2, 2, 237, 237, UTIL_LCD_COLOR_BLACK);
 80014ae:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	23ed      	movs	r3, #237	@ 0xed
 80014b6:	22ed      	movs	r2, #237	@ 0xed
 80014b8:	2102      	movs	r1, #2
 80014ba:	2002      	movs	r0, #2
 80014bc:	f000 fb5a 	bl	8001b74 <UTIL_LCD_DrawRect>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 80014c0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80014c4:	f000 f964 	bl	8001790 <UTIL_LCD_SetTextColor>
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000008 	.word	0x24000008
 80014d4:	080164d4 	.word	0x080164d4
 80014d8:	ff0000ff 	.word	0xff0000ff
 80014dc:	080164e0 	.word	0x080164e0

080014e0 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014f2:	f004 fd83 	bl	8005ffc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80014fe:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8001502:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8001504:	231a      	movs	r3, #26
 8001506:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001508:	2300      	movs	r3, #0
 800150a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800150c:	2300      	movs	r3, #0
 800150e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001510:	2303      	movs	r3, #3
 8001512:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800151c:	2301      	movs	r3, #1
 800151e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001524:	463b      	mov	r3, r7
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fda0 	bl	800606c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800152c:	2004      	movs	r0, #4
 800152e:	f004 fd7d 	bl	800602c <HAL_MPU_Enable>

}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800153e:	b672      	cpsid	i
}
 8001540:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8001542:	2001      	movs	r0, #1
 8001544:	f001 ff94 	bl	8003470 <BSP_LED_On>
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <Error_Handler+0xe>

0800154c <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db04      	blt.n	8001564 <_isatty+0x18>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	dc01      	bgt.n	8001564 <_isatty+0x18>
    return 1;
 8001560:	2301      	movs	r3, #1
 8001562:	e005      	b.n	8001570 <_isatty+0x24>

  errno = EBADF;
 8001564:	f011 fd92 	bl	801308c <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	2209      	movs	r2, #9
 800156c:	601a      	str	r2, [r3, #0]
  return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_close>:

int _close(int fd) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db04      	blt.n	8001590 <_close+0x18>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b02      	cmp	r3, #2
 800158a:	dc01      	bgt.n	8001590 <_close+0x18>
    return 0;
 800158c:	2300      	movs	r3, #0
 800158e:	e006      	b.n	800159e <_close+0x26>

  errno = EBADF;
 8001590:	f011 fd7c 	bl	801308c <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	2209      	movs	r2, #9
 8001598:	601a      	str	r2, [r3, #0]
  return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80015b2:	f011 fd6b 	bl	801308c <__errno>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2209      	movs	r2, #9
 80015ba:	601a      	str	r2, [r3, #0]
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_fstat>:



int _fstat(int fd, struct stat* st) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db08      	blt.n	80015ea <_fstat+0x22>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	dc05      	bgt.n	80015ea <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e4:	605a      	str	r2, [r3, #4]
    return 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e005      	b.n	80015f6 <_fstat+0x2e>
  }

  errno = EBADF;
 80015ea:	f011 fd4f 	bl	801308c <__errno>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2209      	movs	r2, #9
 80015f2:	601a      	str	r2, [r3, #0]
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <_read>:


int _read(int fd, char* ptr, int len) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d110      	bne.n	8001634 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <_read+0x4c>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	2201      	movs	r2, #1
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	f00b fff5 	bl	800d60c <HAL_UART_Receive>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <_read+0x30>
      return 1;
 800162c:	2301      	movs	r3, #1
 800162e:	e008      	b.n	8001642 <_read+0x42>
    else
      return EIO;
 8001630:	2305      	movs	r3, #5
 8001632:	e006      	b.n	8001642 <_read+0x42>
  }
  errno = EBADF;
 8001634:	f011 fd2a 	bl	801308c <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	2209      	movs	r2, #9
 800163c:	601a      	str	r2, [r3, #0]
  return -1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	24000e90 	.word	0x24000e90

08001650 <_write>:

int _write(int fd, char* ptr, int len) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d002      	beq.n	8001668 <_write+0x18>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d111      	bne.n	800168c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <_write+0x54>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b29a      	uxth	r2, r3
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	f00b ff3b 	bl	800d4f0 <HAL_UART_Transmit>
 800167a:	4603      	mov	r3, r0
 800167c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <_write+0x38>
      return len;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	e008      	b.n	800169a <_write+0x4a>
    else
      return EIO;
 8001688:	2305      	movs	r3, #5
 800168a:	e006      	b.n	800169a <_write+0x4a>
  }
  errno = EBADF;
 800168c:	f011 fcfe 	bl	801308c <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	2209      	movs	r2, #9
 8001694:	601a      	str	r2, [r3, #0]
  return -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	24000e90 	.word	0x24000e90

080016a8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a22      	ldr	r2, [pc, #136]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016b6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a20      	ldr	r2, [pc, #128]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016be:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016c6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016ce:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016d6:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016de:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016e6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016ee:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016f6:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 80016fe:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001704:	4a0e      	ldr	r2, [pc, #56]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 8001706:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <UTIL_LCD_SetFuncDriver+0x9c>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <UTIL_LCD_SetFuncDriver+0x9c>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <UTIL_LCD_SetFuncDriver+0xa0>)
 800171a:	4611      	mov	r1, r2
 800171c:	2000      	movs	r0, #0
 800171e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a09      	ldr	r2, [pc, #36]	@ (800174c <UTIL_LCD_SetFuncDriver+0xa4>)
 8001726:	4611      	mov	r1, r2
 8001728:	2000      	movs	r0, #0
 800172a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <UTIL_LCD_SetFuncDriver+0x98>)
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <UTIL_LCD_SetFuncDriver+0xa8>)
 8001732:	4611      	mov	r1, r2
 8001734:	2000      	movs	r0, #0
 8001736:	4798      	blx	r3
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	24000ed4 	.word	0x24000ed4
 8001744:	24000e94 	.word	0x24000e94
 8001748:	24000ea8 	.word	0x24000ea8
 800174c:	24000eac 	.word	0x24000eac
 8001750:	24000eb0 	.word	0x24000eb0

08001754 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <UTIL_LCD_SetLayer+0x34>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00c      	beq.n	800177e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <UTIL_LCD_SetLayer+0x34>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	4a08      	ldr	r2, [pc, #32]	@ (800178c <UTIL_LCD_SetLayer+0x38>)
 800176a:	6912      	ldr	r2, [r2, #16]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4610      	mov	r0, r2
 8001770:	4798      	blx	r3
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8001778:	4a04      	ldr	r2, [pc, #16]	@ (800178c <UTIL_LCD_SetLayer+0x38>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60d3      	str	r3, [r2, #12]
    }
  }
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	24000ed4 	.word	0x24000ed4
 800178c:	24000e94 	.word	0x24000e94

08001790 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <UTIL_LCD_SetTextColor+0x24>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <UTIL_LCD_SetTextColor+0x24>)
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	4413      	add	r3, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	24000e94 	.word	0x24000e94

080017b8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <UTIL_LCD_SetBackColor+0x24>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <UTIL_LCD_SetBackColor+0x24>)
 80017c6:	015b      	lsls	r3, r3, #5
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	24000e94 	.word	0x24000e94

080017e0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <UTIL_LCD_SetFont+0x24>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <UTIL_LCD_SetFont+0x24>)
 80017ee:	015b      	lsls	r3, r3, #5
 80017f0:	4413      	add	r3, r2
 80017f2:	3308      	adds	r3, #8
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	24000e94 	.word	0x24000e94

08001808 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <UTIL_LCD_FillRGBRect+0x30>)
 8001818:	685c      	ldr	r4, [r3, #4]
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <UTIL_LCD_FillRGBRect+0x34>)
 800181c:	6918      	ldr	r0, [r3, #16]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	68f9      	ldr	r1, [r7, #12]
 800182c:	47a0      	blx	r4
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	24000ed4 	.word	0x24000ed4
 800183c:	24000e94 	.word	0x24000e94

08001840 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b087      	sub	sp, #28
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <UTIL_LCD_DrawHLine+0x64>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d118      	bne.n	8001888 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <UTIL_LCD_DrawHLine+0x68>)
 8001858:	689c      	ldr	r4, [r3, #8]
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <UTIL_LCD_DrawHLine+0x64>)
 800185c:	6918      	ldr	r0, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f003 021f 	and.w	r2, r3, #31
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	0a9b      	lsrs	r3, r3, #10
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001870:	431a      	orrs	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	0cdb      	lsrs	r3, r3, #19
 8001876:	02db      	lsls	r3, r3, #11
 8001878:	b29b      	uxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001886:	e009      	b.n	800189c <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <UTIL_LCD_DrawHLine+0x68>)
 800188a:	689c      	ldr	r4, [r3, #8]
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <UTIL_LCD_DrawHLine+0x64>)
 800188e:	6918      	ldr	r0, [r3, #16]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	47a0      	blx	r4
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	24000e94 	.word	0x24000e94
 80018a8:	24000ed4 	.word	0x24000ed4

080018ac <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <UTIL_LCD_DrawVLine+0x64>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d118      	bne.n	80018f4 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <UTIL_LCD_DrawVLine+0x68>)
 80018c4:	68dc      	ldr	r4, [r3, #12]
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <UTIL_LCD_DrawVLine+0x64>)
 80018c8:	6918      	ldr	r0, [r3, #16]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	08db      	lsrs	r3, r3, #3
 80018ce:	f003 021f 	and.w	r2, r3, #31
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	0a9b      	lsrs	r3, r3, #10
 80018d6:	015b      	lsls	r3, r3, #5
 80018d8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80018dc:	431a      	orrs	r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	0cdb      	lsrs	r3, r3, #19
 80018e2:	02db      	lsls	r3, r3, #11
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80018f2:	e009      	b.n	8001908 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <UTIL_LCD_DrawVLine+0x68>)
 80018f6:	68dc      	ldr	r4, [r3, #12]
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <UTIL_LCD_DrawVLine+0x64>)
 80018fa:	6918      	ldr	r0, [r3, #16]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	47a0      	blx	r4
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	24000e94 	.word	0x24000e94
 8001914:	24000ed4 	.word	0x24000ed4

08001918 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	603a      	str	r2, [r7, #0]
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	460b      	mov	r3, r1
 8001926:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <UTIL_LCD_SetPixel+0x60>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d117      	bne.n	8001960 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <UTIL_LCD_SetPixel+0x64>)
 8001932:	699c      	ldr	r4, [r3, #24]
 8001934:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <UTIL_LCD_SetPixel+0x60>)
 8001936:	6918      	ldr	r0, [r3, #16]
 8001938:	88f9      	ldrh	r1, [r7, #6]
 800193a:	88bd      	ldrh	r5, [r7, #4]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	015b      	lsls	r3, r3, #5
 800194a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800194e:	431a      	orrs	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	0cdb      	lsrs	r3, r3, #19
 8001954:	02db      	lsls	r3, r3, #11
 8001956:	b29b      	uxth	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	462a      	mov	r2, r5
 800195c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800195e:	e007      	b.n	8001970 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <UTIL_LCD_SetPixel+0x64>)
 8001962:	699c      	ldr	r4, [r3, #24]
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <UTIL_LCD_SetPixel+0x60>)
 8001966:	6918      	ldr	r0, [r3, #16]
 8001968:	88f9      	ldrh	r1, [r7, #6]
 800196a:	88ba      	ldrh	r2, [r7, #4]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	47a0      	blx	r4
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	24000e94 	.word	0x24000e94
 800197c:	24000ed4 	.word	0x24000ed4

08001980 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <UTIL_LCD_Clear+0x28>)
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <UTIL_LCD_Clear+0x28>)
 800198e:	6999      	ldr	r1, [r3, #24]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	460b      	mov	r3, r1
 8001996:	2100      	movs	r1, #0
 8001998:	2000      	movs	r0, #0
 800199a:	f000 fa1f 	bl	8001ddc <UTIL_LCD_FillRect>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	24000e94 	.word	0x24000e94

080019ac <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	4613      	mov	r3, r2
 80019b8:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <UTIL_LCD_DisplayChar+0x68>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	4a15      	ldr	r2, [pc, #84]	@ (8001a14 <UTIL_LCD_DisplayChar+0x68>)
 80019c0:	015b      	lsls	r3, r3, #5
 80019c2:	4413      	add	r3, r2
 80019c4:	3308      	adds	r3, #8
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80019ce:	4911      	ldr	r1, [pc, #68]	@ (8001a14 <UTIL_LCD_DisplayChar+0x68>)
 80019d0:	68c9      	ldr	r1, [r1, #12]
 80019d2:	4810      	ldr	r0, [pc, #64]	@ (8001a14 <UTIL_LCD_DisplayChar+0x68>)
 80019d4:	0149      	lsls	r1, r1, #5
 80019d6:	4401      	add	r1, r0
 80019d8:	3108      	adds	r1, #8
 80019da:	6809      	ldr	r1, [r1, #0]
 80019dc:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80019de:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <UTIL_LCD_DisplayChar+0x68>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <UTIL_LCD_DisplayChar+0x68>)
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	4403      	add	r3, r0
 80019ec:	3308      	adds	r3, #8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	889b      	ldrh	r3, [r3, #4]
 80019f2:	3307      	adds	r3, #7
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	da00      	bge.n	80019fa <UTIL_LCD_DisplayChar+0x4e>
 80019f8:	3307      	adds	r3, #7
 80019fa:	10db      	asrs	r3, r3, #3
 80019fc:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001a00:	4413      	add	r3, r2
 8001a02:	461a      	mov	r2, r3
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 face 	bl	8001fa8 <DrawChar>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	24000e94 	.word	0x24000e94

08001a18 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001a26:	2301      	movs	r3, #1
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001a3a:	e002      	b.n	8001a42 <UTIL_LCD_DisplayStringAt+0x2a>
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	61ba      	str	r2, [r7, #24]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f6      	bne.n	8001a3c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001a4e:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a47      	ldr	r2, [pc, #284]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a54:	68d2      	ldr	r2, [r2, #12]
 8001a56:	4946      	ldr	r1, [pc, #280]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a58:	0152      	lsls	r2, r2, #5
 8001a5a:	440a      	add	r2, r1
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	8892      	ldrh	r2, [r2, #4]
 8001a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d018      	beq.n	8001aa0 <UTIL_LCD_DisplayStringAt+0x88>
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	dc2a      	bgt.n	8001ac8 <UTIL_LCD_DisplayStringAt+0xb0>
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d002      	beq.n	8001a7c <UTIL_LCD_DisplayStringAt+0x64>
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d015      	beq.n	8001aa6 <UTIL_LCD_DisplayStringAt+0x8e>
 8001a7a:	e025      	b.n	8001ac8 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	4a3b      	ldr	r2, [pc, #236]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	493a      	ldr	r1, [pc, #232]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001a88:	0152      	lsls	r2, r2, #5
 8001a8a:	440a      	add	r2, r1
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	8892      	ldrh	r2, [r2, #4]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001a9e:	e016      	b.n	8001ace <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001aa4:	e013      	b.n	8001ace <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a30      	ldr	r2, [pc, #192]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001aae:	68d2      	ldr	r2, [r2, #12]
 8001ab0:	492f      	ldr	r1, [pc, #188]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001ab2:	0152      	lsls	r2, r2, #5
 8001ab4:	440a      	add	r2, r1
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	8892      	ldrh	r2, [r2, #4]
 8001abc:	fb03 f202 	mul.w	r2, r3, r2
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001ac6:	e002      	b.n	8001ace <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8001acc:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <UTIL_LCD_DisplayStringAt+0xc4>
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ada:	d31b      	bcc.n	8001b14 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001ae0:	e018      	b.n	8001b14 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001aec:	f7ff ff5e 	bl	80019ac <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001af6:	015b      	lsls	r3, r3, #5
 8001af8:	4413      	add	r3, r2
 8001afa:	3308      	adds	r3, #8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	461a      	mov	r2, r3
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	4413      	add	r3, r2
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	607b      	str	r3, [r7, #4]
    i++;
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	3301      	adds	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b24:	6959      	ldr	r1, [r3, #20]
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4811      	ldr	r0, [pc, #68]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	4403      	add	r3, r0
 8001b30:	3308      	adds	r3, #8
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	889b      	ldrh	r3, [r3, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	fb00 f303 	mul.w	r3, r0, r3
 8001b3e:	1acb      	subs	r3, r1, r3
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	490b      	ldr	r1, [pc, #44]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b44:	68c9      	ldr	r1, [r1, #12]
 8001b46:	480a      	ldr	r0, [pc, #40]	@ (8001b70 <UTIL_LCD_DisplayStringAt+0x158>)
 8001b48:	0149      	lsls	r1, r1, #5
 8001b4a:	4401      	add	r1, r0
 8001b4c:	3108      	adds	r1, #8
 8001b4e:	6809      	ldr	r1, [r1, #0]
 8001b50:	8889      	ldrh	r1, [r1, #4]
 8001b52:	428b      	cmp	r3, r1
 8001b54:	bf2c      	ite	cs
 8001b56:	2301      	movcs	r3, #1
 8001b58:	2300      	movcc	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1be      	bne.n	8001ae2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	24000e94 	.word	0x24000e94

08001b74 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f7ff fe59 	bl	8001840 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	1e59      	subs	r1, r3, #1
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7ff fe50 	bl	8001840 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fe80 	bl	80018ac <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	1e58      	subs	r0, r3, #1
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	f7ff fe77 	bl	80018ac <UTIL_LCD_DrawVLine>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	f1c3 0303 	rsb	r3, r3, #3
 8001bde:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001be8:	e0eb      	b.n	8001dc2 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	1ad2      	subs	r2, r2, r3
 8001bf0:	4b79      	ldr	r3, [pc, #484]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d22d      	bcs.n	8001c54 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	4b76      	ldr	r3, [pc, #472]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d20f      	bcs.n	8001c26 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	b298      	uxth	r0, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7ff fe79 	bl	8001918 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad2      	subs	r2, r2, r3
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d20f      	bcs.n	8001c54 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7ff fe62 	bl	8001918 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	1ad2      	subs	r2, r2, r3
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d22d      	bcs.n	8001cbe <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	441a      	add	r2, r3
 8001c68:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d20f      	bcs.n	8001c90 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	b298      	uxth	r0, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7ff fe44 	bl	8001918 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad2      	subs	r2, r2, r3
 8001c96:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d20f      	bcs.n	8001cbe <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b298      	uxth	r0, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7ff fe2d 	bl	8001918 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	4b44      	ldr	r3, [pc, #272]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d22d      	bcs.n	8001d28 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	441a      	add	r2, r3
 8001cd2:	4b41      	ldr	r3, [pc, #260]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20f      	bcs.n	8001cfa <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b298      	uxth	r0, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7ff fe0f 	bl	8001918 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad2      	subs	r2, r2, r3
 8001d00:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d20f      	bcs.n	8001d28 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b298      	uxth	r0, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7ff fdf8 	bl	8001918 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	441a      	add	r2, r3
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d22d      	bcs.n	8001d92 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d20f      	bcs.n	8001d64 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7ff fdda 	bl	8001918 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad2      	subs	r2, r2, r3
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <UTIL_LCD_DrawCircle+0x210>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d20f      	bcs.n	8001d92 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	b298      	uxth	r0, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7ff fdc3 	bl	8001918 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da06      	bge.n	8001da6 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	009a      	lsls	r2, r3, #2
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3306      	adds	r3, #6
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e00a      	b.n	8001dbc <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	009a      	lsls	r2, r3, #2
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	330a      	adds	r3, #10
 8001db4:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	f67f af0f 	bls.w	8001bea <UTIL_LCD_DrawCircle+0x22>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	24000e94 	.word	0x24000e94

08001ddc <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <UTIL_LCD_FillRect+0x6c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d11a      	bne.n	8001e28 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <UTIL_LCD_FillRect+0x70>)
 8001df4:	691c      	ldr	r4, [r3, #16]
 8001df6:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <UTIL_LCD_FillRect+0x6c>)
 8001df8:	6918      	ldr	r0, [r3, #16]
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	0a9b      	lsrs	r3, r3, #10
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	0cdb      	lsrs	r3, r3, #19
 8001e12:	02db      	lsls	r3, r3, #11
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001e26:	e00b      	b.n	8001e40 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <UTIL_LCD_FillRect+0x70>)
 8001e2a:	691c      	ldr	r4, [r3, #16]
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <UTIL_LCD_FillRect+0x6c>)
 8001e2e:	6918      	ldr	r0, [r3, #16]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	47a0      	blx	r4
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	24000e94 	.word	0x24000e94
 8001e4c:	24000ed4 	.word	0x24000ed4

08001e50 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	f1c3 0303 	rsb	r3, r3, #3
 8001e66:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001e70:	e08b      	b.n	8001f8a <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d036      	beq.n	8001ee6 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d31c      	bcc.n	8001eba <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	18d0      	adds	r0, r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005a      	lsls	r2, r3, #1
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1acb      	subs	r3, r1, r3
 8001e90:	441a      	add	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4601      	mov	r1, r0
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fcd2 	bl	8001840 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad0      	subs	r0, r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	68f9      	ldr	r1, [r7, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	1acb      	subs	r3, r1, r3
 8001eac:	441a      	add	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fcc4 	bl	8001840 <UTIL_LCD_DrawHLine>
 8001eb8:	e015      	b.n	8001ee6 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad0      	subs	r0, r2, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	18d1      	adds	r1, r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	005a      	lsls	r2, r3, #1
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f7ff fcb8 	bl	8001840 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1ad0      	subs	r0, r2, r3
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1ad1      	subs	r1, r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005a      	lsls	r2, r3, #1
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f7ff fcad 	bl	8001840 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d036      	beq.n	8001f5a <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d31c      	bcc.n	8001f2e <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad0      	subs	r0, r2, r3
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	005a      	lsls	r2, r3, #1
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	441a      	add	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	4601      	mov	r1, r0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fc98 	bl	8001840 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	18d0      	adds	r0, r2, r3
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	005a      	lsls	r2, r3, #1
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	441a      	add	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	4601      	mov	r1, r0
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fc8a 	bl	8001840 <UTIL_LCD_DrawHLine>
 8001f2c:	e015      	b.n	8001f5a <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad0      	subs	r0, r2, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad1      	subs	r1, r2, r3
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	005a      	lsls	r2, r3, #1
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f7ff fc7e 	bl	8001840 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	1ad0      	subs	r0, r2, r3
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	18d1      	adds	r1, r2, r3
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	005a      	lsls	r2, r3, #1
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f7ff fc73 	bl	8001840 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da06      	bge.n	8001f6e <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	3306      	adds	r3, #6
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	e00a      	b.n	8001f84 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	009a      	lsls	r2, r3, #2
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	330a      	adds	r3, #10
 8001f7c:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	f67f af6f 	bls.w	8001e72 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fe14 	bl	8001bc8 <UTIL_LCD_DrawCircle>
}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0b2      	sub	sp, #200	@ 0xc8
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001fc0:	4ba5      	ldr	r3, [pc, #660]	@ (8002258 <DrawChar+0x2b0>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4aa4      	ldr	r2, [pc, #656]	@ (8002258 <DrawChar+0x2b0>)
 8001fc6:	015b      	lsls	r3, r3, #5
 8001fc8:	4413      	add	r3, r2
 8001fca:	3308      	adds	r3, #8
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	88db      	ldrh	r3, [r3, #6]
 8001fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001fd4:	4ba0      	ldr	r3, [pc, #640]	@ (8002258 <DrawChar+0x2b0>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a9f      	ldr	r2, [pc, #636]	@ (8002258 <DrawChar+0x2b0>)
 8001fda:	015b      	lsls	r3, r3, #5
 8001fdc:	4413      	add	r3, r2
 8001fde:	3308      	adds	r3, #8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8001fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fec:	3307      	adds	r3, #7
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002002:	e11c      	b.n	800223e <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8002004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002008:	3307      	adds	r3, #7
 800200a:	08db      	lsrs	r3, r3, #3
 800200c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 800201c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002020:	3307      	adds	r3, #7
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <DrawChar+0x86>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d006      	beq.n	800203a <DrawChar+0x92>
 800202c:	e011      	b.n	8002052 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800202e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8002038:	e01d      	b.n	8002076 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800203a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002046:	3201      	adds	r2, #1
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8002050:	e011      	b.n	8002076 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	041a      	lsls	r2, r3, #16
 800205a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800205e:	3301      	adds	r3, #1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	4313      	orrs	r3, r2
 8002066:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800206a:	3202      	adds	r2, #2
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8002074:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002076:	4b78      	ldr	r3, [pc, #480]	@ (8002258 <DrawChar+0x2b0>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	4a77      	ldr	r2, [pc, #476]	@ (8002258 <DrawChar+0x2b0>)
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	4413      	add	r3, r2
 8002080:	331c      	adds	r3, #28
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b02      	cmp	r3, #2
 8002086:	f040 808c 	bne.w	80021a2 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002090:	e074      	b.n	800217c <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8002092:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800209a:	1ad2      	subs	r2, r2, r3
 800209c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020a0:	4413      	add	r3, r2
 80020a2:	3b01      	subs	r3, #1
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02d      	beq.n	8002112 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80020b6:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <DrawChar+0x2b0>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4a67      	ldr	r2, [pc, #412]	@ (8002258 <DrawChar+0x2b0>)
 80020bc:	015b      	lsls	r3, r3, #5
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	08db      	lsrs	r3, r3, #3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b62      	ldr	r3, [pc, #392]	@ (8002258 <DrawChar+0x2b0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4961      	ldr	r1, [pc, #388]	@ (8002258 <DrawChar+0x2b0>)
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	440b      	add	r3, r1
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0a9b      	lsrs	r3, r3, #10
 80020da:	b29b      	uxth	r3, r3
 80020dc:	015b      	lsls	r3, r3, #5
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002258 <DrawChar+0x2b0>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	495a      	ldr	r1, [pc, #360]	@ (8002258 <DrawChar+0x2b0>)
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	440b      	add	r3, r1
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0cdb      	lsrs	r3, r3, #19
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	02db      	lsls	r3, r3, #11
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b29a      	uxth	r2, r3
 8002102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	33c0      	adds	r3, #192	@ 0xc0
 800210a:	443b      	add	r3, r7
 800210c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8002110:	e02f      	b.n	8002172 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8002112:	4b51      	ldr	r3, [pc, #324]	@ (8002258 <DrawChar+0x2b0>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <DrawChar+0x2b0>)
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	b29b      	uxth	r3, r3
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b4b      	ldr	r3, [pc, #300]	@ (8002258 <DrawChar+0x2b0>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	494a      	ldr	r1, [pc, #296]	@ (8002258 <DrawChar+0x2b0>)
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	440b      	add	r3, r1
 8002134:	3304      	adds	r3, #4
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0a9b      	lsrs	r3, r3, #10
 800213a:	b29b      	uxth	r3, r3
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	b29b      	uxth	r3, r3
 8002140:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002144:	b29b      	uxth	r3, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <DrawChar+0x2b0>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4942      	ldr	r1, [pc, #264]	@ (8002258 <DrawChar+0x2b0>)
 8002150:	015b      	lsls	r3, r3, #5
 8002152:	440b      	add	r3, r1
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0cdb      	lsrs	r3, r3, #19
 800215a:	b29b      	uxth	r3, r3
 800215c:	02db      	lsls	r3, r3, #11
 800215e:	b29b      	uxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b29a      	uxth	r2, r3
 8002164:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	33c0      	adds	r3, #192	@ 0xc0
 800216c:	443b      	add	r3, r7
 800216e:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8002172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002176:	3301      	adds	r3, #1
 8002178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800217c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002184:	429a      	cmp	r2, r3
 8002186:	d384      	bcc.n	8002092 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	1c4b      	adds	r3, r1, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002192:	2301      	movs	r3, #1
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f7ff fb34 	bl	8001808 <UTIL_LCD_FillRGBRect>
 80021a0:	e048      	b.n	8002234 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021a8:	e032      	b.n	8002210 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 80021aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80021ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021b8:	4413      	add	r3, r2
 80021ba:	3b01      	subs	r3, #1
 80021bc:	2201      	movs	r2, #1
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80021ce:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <DrawChar+0x2b0>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a21      	ldr	r2, [pc, #132]	@ (8002258 <DrawChar+0x2b0>)
 80021d4:	015b      	lsls	r3, r3, #5
 80021d6:	4413      	add	r3, r2
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	33c0      	adds	r3, #192	@ 0xc0
 80021e2:	443b      	add	r3, r7
 80021e4:	f843 2cac 	str.w	r2, [r3, #-172]
 80021e8:	e00d      	b.n	8002206 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <DrawChar+0x2b0>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <DrawChar+0x2b0>)
 80021f0:	015b      	lsls	r3, r3, #5
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	33c0      	adds	r3, #192	@ 0xc0
 8002200:	443b      	add	r3, r7
 8002202:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8002206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800220a:	3301      	adds	r3, #1
 800220c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002210:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002218:	429a      	cmp	r2, r3
 800221a:	d3c6      	bcc.n	80021aa <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	1c4b      	adds	r3, r1, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	f107 0214 	add.w	r2, r7, #20
 8002226:	2301      	movs	r3, #1
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff faea 	bl	8001808 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8002234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002238:	3301      	adds	r3, #1
 800223a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800223e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002246:	429a      	cmp	r2, r3
 8002248:	f4ff aedc 	bcc.w	8002004 <DrawChar+0x5c>
    }
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	37c0      	adds	r7, #192	@ 0xc0
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	24000e94 	.word	0x24000e94

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_MspInit+0x74>)
 8002264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002268:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_MspInit+0x74>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002272:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <HAL_MspInit+0x74>)
 8002274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	210f      	movs	r1, #15
 8002284:	f06f 0001 	mvn.w	r0, #1
 8002288:	f003 fe83 	bl	8005f92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800228c:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_MspInit+0x74>)
 800228e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002292:	4a0f      	ldr	r2, [pc, #60]	@ (80022d0 <HAL_MspInit+0x74>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_MspInit+0x74>)
 800229e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022aa:	2308      	movs	r3, #8
 80022ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4619      	mov	r1, r3
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <HAL_MspInit+0x78>)
 80022c2:	f005 fedf 	bl	8008084 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	58024400 	.word	0x58024400
 80022d4:	58021000 	.word	0x58021000

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <NMI_Handler+0x4>

080022e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <HardFault_Handler+0x4>

080022e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <MemManage_Handler+0x4>

080022f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <UsageFault_Handler+0x4>

08002300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002312:	f003 fd03 	bl	8005d1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002316:	f00c f9d1 	bl	800e6bc <xTaskGetSchedulerState>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d001      	beq.n	8002324 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002320:	f00c fa3a 	bl	800e798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 800232c:	2000      	movs	r0, #0
 800232e:	f001 f945 	bl	80035bc <BSP_PB_IRQHandler>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM3_IRQHandler+0x10>)
 800233e:	f00a fecd 	bl	800d0dc <HAL_TIM_IRQHandler>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	24000e34 	.word	0x24000e34

0800234c <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <USART3_IRQHandler+0x10>)
 8002352:	f00b fa23 	bl	800d79c <HAL_UART_IRQHandler>
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	24000da0 	.word	0x24000da0

08002360 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8002364:	2000      	movs	r0, #0
 8002366:	f001 f943 	bl	80035f0 <BSP_AUDIO_OUT_IRQHandler>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <DMA2_Stream4_IRQHandler+0x14>)
 8002376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fc1e 	bl	8006bbc <HAL_DMA_IRQHandler>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	24000fb4 	.word	0x24000fb4

08002388 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 800238c:	2130      	movs	r1, #48	@ 0x30
 800238e:	2001      	movs	r0, #1
 8002390:	f001 f942 	bl	8003618 <BSP_AUDIO_IN_IRQHandler>

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 800239c:	2000      	movs	r0, #0
 800239e:	f003 f919 	bl	80055d4 <BSP_SDRAM_IRQHandler>

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  return 1;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_kill>:

int _kill(int pid, int sig)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023c0:	f010 fe64 	bl	801308c <__errno>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2216      	movs	r2, #22
 80023c8:	601a      	str	r2, [r3, #0]
  return -1;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_exit>:

void _exit (int status)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023de:	f04f 31ff 	mov.w	r1, #4294967295
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffe7 	bl	80023b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <_exit+0x12>

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f010 fe36 	bl	801308c <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	24080000 	.word	0x24080000
 800244c:	00000800 	.word	0x00000800
 8002450:	24000f00 	.word	0x24000f00
 8002454:	20000000 	.word	0x20000000

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800245c:	4b37      	ldr	r3, [pc, #220]	@ (800253c <SystemInit+0xe4>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	4a36      	ldr	r2, [pc, #216]	@ (800253c <SystemInit+0xe4>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800246c:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <SystemInit+0xe8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	2b06      	cmp	r3, #6
 8002476:	d807      	bhi.n	8002488 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002478:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <SystemInit+0xe8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 030f 	bic.w	r3, r3, #15
 8002480:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <SystemInit+0xe8>)
 8002482:	f043 0307 	orr.w	r3, r3, #7
 8002486:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002488:	4b2e      	ldr	r3, [pc, #184]	@ (8002544 <SystemInit+0xec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2d      	ldr	r2, [pc, #180]	@ (8002544 <SystemInit+0xec>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002494:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <SystemInit+0xec>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800249a:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <SystemInit+0xec>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4929      	ldr	r1, [pc, #164]	@ (8002544 <SystemInit+0xec>)
 80024a0:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <SystemInit+0xf0>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024a6:	4b26      	ldr	r3, [pc, #152]	@ (8002540 <SystemInit+0xe8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <SystemInit+0xe8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 030f 	bic.w	r3, r3, #15
 80024ba:	4a21      	ldr	r2, [pc, #132]	@ (8002540 <SystemInit+0xe8>)
 80024bc:	f043 0307 	orr.w	r3, r3, #7
 80024c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024c2:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <SystemInit+0xec>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <SystemInit+0xec>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <SystemInit+0xec>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <SystemInit+0xec>)
 80024d6:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <SystemInit+0xf4>)
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <SystemInit+0xec>)
 80024dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002550 <SystemInit+0xf8>)
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <SystemInit+0xec>)
 80024e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <SystemInit+0xfc>)
 80024e4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <SystemInit+0xec>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <SystemInit+0xec>)
 80024ee:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <SystemInit+0xfc>)
 80024f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024f2:	4b14      	ldr	r3, [pc, #80]	@ (8002544 <SystemInit+0xec>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024f8:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <SystemInit+0xec>)
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <SystemInit+0xfc>)
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <SystemInit+0xec>)
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <SystemInit+0xec>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <SystemInit+0xec>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800250e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <SystemInit+0xec>)
 8002512:	2200      	movs	r2, #0
 8002514:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <SystemInit+0x100>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <SystemInit+0x104>)
 800251c:	4013      	ands	r3, r2
 800251e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002522:	d202      	bcs.n	800252a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <SystemInit+0x108>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800252a:	4b0e      	ldr	r3, [pc, #56]	@ (8002564 <SystemInit+0x10c>)
 800252c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002530:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	52002000 	.word	0x52002000
 8002544:	58024400 	.word	0x58024400
 8002548:	eaf6ed7f 	.word	0xeaf6ed7f
 800254c:	02020200 	.word	0x02020200
 8002550:	01ff0000 	.word	0x01ff0000
 8002554:	01010280 	.word	0x01010280
 8002558:	5c001000 	.word	0x5c001000
 800255c:	ffff0000 	.word	0xffff0000
 8002560:	51008108 	.word	0x51008108
 8002564:	52004000 	.word	0x52004000

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800256c:	f7ff ff74 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002570:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002572:	490d      	ldr	r1, [pc, #52]	@ (80025a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0a      	ldr	r2, [pc, #40]	@ (80025b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002588:	4c0a      	ldr	r4, [pc, #40]	@ (80025b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002596:	f010 fd7f 	bl	8013098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7fe f8ed 	bl	8000778 <main>
  bx  lr
 800259e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025a8:	24000d74 	.word	0x24000d74
  ldr r2, =_sidata
 80025ac:	08018778 	.word	0x08018778
  ldr r2, =_sbss
 80025b0:	24000d80 	.word	0x24000d80
  ldr r4, =_ebss
 80025b4:	24009f5c 	.word	0x24009f5c

080025b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC3_IRQHandler>
	...

080025bc <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	e02c      	b.n	800262e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	891a      	ldrh	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a0c      	ldr	r2, [pc, #48]	@ (8002638 <FT5336_RegisterBusIO+0x7c>)
 8002608:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a0b      	ldr	r2, [pc, #44]	@ (800263c <FT5336_RegisterBusIO+0x80>)
 800260e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4798      	blx	r3
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	e002      	b.n	800262e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	08002a35 	.word	0x08002a35
 800263c:	08002a69 	.word	0x08002a69

08002640 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2205      	movs	r2, #5
 800265a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002662:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800266a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10d      	bne.n	80026ac <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f987 	bl	80029aa <FT5336_DisableIT>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d103      	bne.n	80026e0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f103 0218 	add.w	r2, r3, #24
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 fa25 	bl	8002b56 <ft5336_radian_value>
 800270c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f103 0218 	add.w	r2, r3, #24
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f000 fa2b 	bl	8002b78 <ft5336_offset_left_right>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f103 0218 	add.w	r2, r3, #24
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f000 fa2e 	bl	8002b9a <ft5336_offset_up_down>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0218 	add.w	r2, r3, #24
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f000 fa31 	bl	8002bbc <ft5336_disatnce_left_right>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0218 	add.w	r2, r3, #24
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f000 fa34 	bl	8002bde <ft5336_distance_up_down>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f103 0218 	add.w	r2, r3, #24
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f000 fa37 	bl	8002c00 <ft5336_distance_zoom>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3318      	adds	r3, #24
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fa3f 	bl	8002c44 <ft5336_chip_id>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f908 	bl	80029f4 <FT5336_DetectTouch>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f103 0018 	add.w	r0, r3, #24
 80027f2:	f107 0208 	add.w	r2, r7, #8
 80027f6:	2304      	movs	r3, #4
 80027f8:	2103      	movs	r1, #3
 80027fa:	f000 f94f 	bl	8002a9c <ft5336_read_reg>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e00f      	b.n	800282c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800280c:	7a3b      	ldrb	r3, [r7, #8]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002814:	7a7a      	ldrb	r2, [r7, #9]
 8002816:	431a      	orrs	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002824:	7afa      	ldrb	r2, [r7, #11]
 8002826:	431a      	orrs	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800282c:	68fb      	ldr	r3, [r7, #12]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08c      	sub	sp, #48	@ 0x30
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8d5 	bl	80029f4 <FT5336_DetectTouch>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 0018 	add.w	r0, r3, #24
 8002858:	f107 0208 	add.w	r2, r7, #8
 800285c:	231e      	movs	r3, #30
 800285e:	2103      	movs	r1, #3
 8002860:	f000 f91c 	bl	8002a9c <ft5336_read_reg>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002870:	e077      	b.n	8002962 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002876:	e071      	b.n	800295c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	3330      	adds	r3, #48	@ 0x30
 8002884:	443b      	add	r3, r7
 8002886:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8002890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	3301      	adds	r3, #1
 800289c:	3330      	adds	r3, #48	@ 0x30
 800289e:	443b      	add	r3, r7
 80028a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a4:	ea41 0203 	orr.w	r2, r1, r3
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80028b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	3302      	adds	r3, #2
 80028be:	3330      	adds	r3, #48	@ 0x30
 80028c0:	443b      	add	r3, r7
 80028c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 80028cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	3303      	adds	r3, #3
 80028d8:	3330      	adds	r3, #48	@ 0x30
 80028da:	443b      	add	r3, r7
 80028dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028e0:	4319      	orrs	r1, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028e6:	3206      	adds	r2, #6
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80028ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	3330      	adds	r3, #48	@ 0x30
 80028f8:	443b      	add	r3, r7
 80028fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4619      	mov	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002908:	3210      	adds	r2, #16
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800290e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	3304      	adds	r3, #4
 800291a:	3330      	adds	r3, #48	@ 0x30
 800291c:	443b      	add	r3, r7
 800291e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002922:	4619      	mov	r1, r3
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	330a      	adds	r3, #10
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8002930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	3305      	adds	r3, #5
 800293c:	3330      	adds	r3, #48	@ 0x30
 800293e:	443b      	add	r3, r7
 8002940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	3314      	adds	r3, #20
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	3301      	adds	r3, #1
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	2b04      	cmp	r3, #4
 8002960:	d98a      	bls.n	8002878 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002964:	4618      	mov	r0, r3
 8002966:	3730      	adds	r7, #48	@ 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3318      	adds	r3, #24
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f8bb 	bl	8002af8 <ft5336_gest_id>
 8002982:	4603      	mov	r3, r0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3318      	adds	r3, #24
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f941 	bl	8002c22 <ft5336_g_mode>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3318      	adds	r3, #24
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f932 	bl	8002c22 <ft5336_g_mode>
 80029be:	4603      	mov	r3, r0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3318      	adds	r3, #24
 8002a00:	f107 020b 	add.w	r2, r7, #11
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f886 	bl	8002b18 <ft5336_td_status>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e007      	b.n	8002a2a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d902      	bls.n	8002a26 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e001      	b.n	8002a2a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	72fb      	strb	r3, [r7, #11]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	691c      	ldr	r4, [r3, #16]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	8918      	ldrh	r0, [r3, #8]
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	b299      	uxth	r1, r3
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	47a0      	blx	r4
 8002a5e:	4603      	mov	r3, r0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd90      	pop	{r4, r7, pc}

08002a68 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	68dc      	ldr	r4, [r3, #12]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	8918      	ldrh	r0, [r3, #8]
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	b299      	uxth	r1, r3
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	47a0      	blx	r4
 8002a92:	4603      	mov	r3, r0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd90      	pop	{r4, r7, pc}

08002a9c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	72fb      	strb	r3, [r7, #11]
 8002aac:	4613      	mov	r3, r2
 8002aae:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685c      	ldr	r4, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6898      	ldr	r0, [r3, #8]
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	7af9      	ldrb	r1, [r7, #11]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	47a0      	blx	r4
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}

08002aca <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002aca:	b590      	push	{r4, r7, lr}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	72fb      	strb	r3, [r7, #11]
 8002ada:	4613      	mov	r3, r2
 8002adc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681c      	ldr	r4, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6898      	ldr	r0, [r3, #8]
 8002ae6:	893b      	ldrh	r3, [r7, #8]
 8002ae8:	7af9      	ldrb	r1, [r7, #11]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	47a0      	blx	r4
 8002aee:	4603      	mov	r3, r0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8002b02:	2301      	movs	r3, #1
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	2101      	movs	r1, #1
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ffc7 	bl	8002a9c <ft5336_read_reg>
 8002b0e:	4603      	mov	r3, r0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8002b22:	2301      	movs	r3, #1
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	2102      	movs	r1, #2
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffb7 	bl	8002a9c <ft5336_read_reg>
 8002b2e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	781a      	ldrb	r2, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8002b62:	1cfa      	adds	r2, r7, #3
 8002b64:	2301      	movs	r3, #1
 8002b66:	2191      	movs	r1, #145	@ 0x91
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ffae 	bl	8002aca <ft5336_write_reg>
 8002b6e:	4603      	mov	r3, r0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8002b84:	1cfa      	adds	r2, r7, #3
 8002b86:	2301      	movs	r3, #1
 8002b88:	2192      	movs	r1, #146	@ 0x92
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff9d 	bl	8002aca <ft5336_write_reg>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8002ba6:	1cfa      	adds	r2, r7, #3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	2193      	movs	r1, #147	@ 0x93
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff8c 	bl	8002aca <ft5336_write_reg>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8002bc8:	1cfa      	adds	r2, r7, #3
 8002bca:	2301      	movs	r3, #1
 8002bcc:	2194      	movs	r1, #148	@ 0x94
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff7b 	bl	8002aca <ft5336_write_reg>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8002bea:	1cfa      	adds	r2, r7, #3
 8002bec:	2301      	movs	r3, #1
 8002bee:	2195      	movs	r1, #149	@ 0x95
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff6a 	bl	8002aca <ft5336_write_reg>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8002c0c:	1cfa      	adds	r2, r7, #3
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2196      	movs	r1, #150	@ 0x96
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff59 	bl	8002aca <ft5336_write_reg>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8002c2e:	1cfa      	adds	r2, r7, #3
 8002c30:	2301      	movs	r3, #1
 8002c32:	21a4      	movs	r1, #164	@ 0xa4
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff48 	bl	8002aca <ft5336_write_reg>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8002c4e:	2301      	movs	r3, #1
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	21a8      	movs	r1, #168	@ 0xa8
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff21 	bl	8002a9c <ft5336_read_reg>
 8002c5a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c8a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c92:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c9a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b090      	sub	sp, #64	@ 0x40
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d102      	bne.n	8002ce2 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8002cdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ce0:	e001      	b.n	8002ce6 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8002ce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ce6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8002ce8:	23b7      	movs	r3, #183	@ 0xb7
 8002cea:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f860 	bl	8002dd2 <MT25TL01G_WriteEnable>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002d18:	f06f 0301 	mvn.w	r3, #1
 8002d1c:	e019      	b.n	8002d52 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4619      	mov	r1, r3
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f007 f8fd 	bl	8009f28 <HAL_QSPI_Command>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002d34:	f06f 0301 	mvn.w	r3, #1
 8002d38:	e00b      	b.n	8002d52 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f80b 	bl	8002d5a <MT25TL01G_AutoPollingMemReady>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002d4a:	f06f 0301 	mvn.w	r3, #1
 8002d4e:	e000      	b.n	8002d52 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3740      	adds	r7, #64	@ 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b096      	sub	sp, #88	@ 0x58
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002d66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8002d6c:	2305      	movs	r3, #5
 8002d6e:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d78:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 2;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d86:	2300      	movs	r3, #0
 8002d88:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8002d96:	2310      	movs	r3, #16
 8002d98:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002d9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d9e:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8002da0:	f240 1301 	movw	r3, #257	@ 0x101
 8002da4:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8002da6:	2302      	movs	r3, #2
 8002da8:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002daa:	f107 0208 	add.w	r2, r7, #8
 8002dae:	f107 0120 	add.w	r1, r7, #32
 8002db2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f007 fa43 	bl	800a242 <HAL_QSPI_AutoPolling>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002dc2:	f06f 0304 	mvn.w	r3, #4
 8002dc6:	e000      	b.n	8002dca <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8002dc8:	2300      	movs	r3, #0

}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3758      	adds	r7, #88	@ 0x58
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b096      	sub	sp, #88	@ 0x58
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d102      	bne.n	8002dea <MT25TL01G_WriteEnable+0x18>
 8002de4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002de8:	e001      	b.n	8002dee <MT25TL01G_WriteEnable+0x1c>
 8002dea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dee:	63bb      	str	r3, [r7, #56]	@ 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8002df0:	2306      	movs	r3, #6
 8002df2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e10:	f107 0320 	add.w	r3, r7, #32
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f007 f884 	bl	8009f28 <HAL_QSPI_Command>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002e26:	f06f 0301 	mvn.w	r3, #1
 8002e2a:	e029      	b.n	8002e80 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002e2c:	f240 2302 	movw	r3, #514	@ 0x202
 8002e30:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002e32:	f240 2302 	movw	r3, #514	@ 0x202
 8002e36:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002e40:	2310      	movs	r3, #16
 8002e42:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002e44:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e48:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d102      	bne.n	8002e5a <MT25TL01G_WriteEnable+0x88>
 8002e54:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002e58:	e001      	b.n	8002e5e <MT25TL01G_WriteEnable+0x8c>
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e5e:	647b      	str	r3, [r7, #68]	@ 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e60:	f107 0208 	add.w	r2, r7, #8
 8002e64:	f107 0120 	add.w	r1, r7, #32
 8002e68:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f007 f9e8 	bl	800a242 <HAL_QSPI_AutoPolling>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002e78:	f06f 0304 	mvn.w	r3, #4
 8002e7c:	e000      	b.n	8002e80 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3758      	adds	r7, #88	@ 0x58
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b090      	sub	sp, #64	@ 0x40
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e94:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002e96:	2335      	movs	r3, #53	@ 0x35
 8002e98:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f007 f831 	bl	8009f28 <HAL_QSPI_Command>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002ecc:	f06f 0301 	mvn.w	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3740      	adds	r7, #64	@ 0x40
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b090      	sub	sp, #64	@ 0x40
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ee8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8002eea:	23f5      	movs	r3, #245	@ 0xf5
 8002eec:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f02:	2300      	movs	r3, #0
 8002f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f06:	2300      	movs	r3, #0
 8002f08:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f007 f807 	bl	8009f28 <HAL_QSPI_Command>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002f20:	f06f 0301 	mvn.w	r3, #1
 8002f24:	e000      	b.n	8002f28 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3740      	adds	r7, #64	@ 0x40
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b092      	sub	sp, #72	@ 0x48
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d83a      	bhi.n	8002fb8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 8002f42:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f89 	.word	0x08002f89
 8002f54:	08002fa1 	.word	0x08002fa1
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8002f5e:	230e      	movs	r3, #14
 8002f60:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8002f6e:	e023      	b.n	8002fb8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f74:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8002f76:	233d      	movs	r3, #61	@ 0x3d
 8002f78:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8002f80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8002f86:	e017      	b.n	8002fb8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8002f8e:	23ee      	movs	r3, #238	@ 0xee
 8002f90:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002f92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002f98:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8002f9e:	e00b      	b.n	8002fb8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002fa0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8002fa6:	23ed      	movs	r3, #237	@ 0xed
 8002fa8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002faa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002fb0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002fb4:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8002fb6:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002fb8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002fbc:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8002fc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002fd0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002fde:	f107 0208 	add.w	r2, r7, #8
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f007 f9a1 	bl	800a330 <HAL_QSPI_MemoryMapped>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8002ff4:	f06f 0305 	mvn.w	r3, #5
 8002ff8:	e000      	b.n	8002ffc <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3748      	adds	r7, #72	@ 0x48
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b092      	sub	sp, #72	@ 0x48
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d83a      	bhi.n	800308c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003045 	.word	0x08003045
 8003024:	0800305d 	.word	0x0800305d
 8003028:	08003075 	.word	0x08003075
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800302c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003030:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8003032:	230c      	movs	r3, #12
 8003034:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800303a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800303c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34


    break;
 8003042:	e023      	b.n	800308c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800304a:	23bc      	movs	r3, #188	@ 0xbc
 800304c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800304e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8003054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800305a:	e017      	b.n	800308c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800305c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8003062:	23ec      	movs	r3, #236	@ 0xec
 8003064:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003066:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800306c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8003070:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8003072:	e00b      	b.n	800308c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003074:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003078:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800307a:	23eb      	movs	r3, #235	@ 0xeb
 800307c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800307e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003084:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800308a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800308c:	2308      	movs	r3, #8
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003090:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003094:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003096:	2300      	movs	r3, #0
 8003098:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800309e:	2300      	movs	r3, #0
 80030a0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030a2:	2300      	movs	r3, #0
 80030a4:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80030ae:	f107 0208 	add.w	r2, r7, #8
 80030b2:	f107 0310 	add.w	r3, r7, #16
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f007 f939 	bl	800a330 <HAL_QSPI_MemoryMapped>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80030c4:	f06f 0305 	mvn.w	r3, #5
 80030c8:	e000      	b.n	80030cc <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3748      	adds	r7, #72	@ 0x48
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b090      	sub	sp, #64	@ 0x40
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d102      	bne.n	80030ec <MT25TL01G_ResetEnable+0x18>
 80030e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030ea:	e001      	b.n	80030f0 <MT25TL01G_ResetEnable+0x1c>
 80030ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030f0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80030f2:	2366      	movs	r3, #102	@ 0x66
 80030f4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800310a:	2300      	movs	r3, #0
 800310c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800310e:	2300      	movs	r3, #0
 8003110:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f006 ff03 	bl	8009f28 <HAL_QSPI_Command>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8003128:	f06f 0301 	mvn.w	r3, #1
 800312c:	e000      	b.n	8003130 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3740      	adds	r7, #64	@ 0x40
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b090      	sub	sp, #64	@ 0x40
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d102      	bne.n	8003150 <MT25TL01G_ResetMemory+0x18>
 800314a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800314e:	e001      	b.n	8003154 <MT25TL01G_ResetMemory+0x1c>
 8003150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003154:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8003156:	2399      	movs	r3, #153	@ 0x99
 8003158:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800315e:	2300      	movs	r3, #0
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003162:	2300      	movs	r3, #0
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800316e:	2300      	movs	r3, #0
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003172:	2300      	movs	r3, #0
 8003174:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f006 fed1 	bl	8009f28 <HAL_QSPI_Command>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800318c:	f06f 0301 	mvn.w	r3, #1
 8003190:	e000      	b.n	8003194 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3740      	adds	r7, #64	@ 0x40
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f832 	bl	800321c <MT48LC4M32B2_ClockEnable>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d128      	bne.n	8003210 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 80031be:	2001      	movs	r0, #1
 80031c0:	f000 f8e2 	bl	8003388 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f84a 	bl	8003264 <MT48LC4M32B2_Precharge>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11c      	bne.n	8003210 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f897 	bl	8003314 <MT48LC4M32B2_RefreshMode>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f85c 	bl	80032ac <MT48LC4M32B2_ModeRegConfig>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8ad 	bl	8003360 <MT48LC4M32B2_RefreshRate>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8003210:	68fb      	ldr	r3, [r7, #12]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8003226:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <MT48LC4M32B2_ClockEnable+0x44>)
 8003228:	2201      	movs	r2, #1
 800322a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800322c:	4a0c      	ldr	r2, [pc, #48]	@ (8003260 <MT48LC4M32B2_ClockEnable+0x44>)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <MT48LC4M32B2_ClockEnable+0x44>)
 8003234:	2201      	movs	r2, #1
 8003236:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <MT48LC4M32B2_ClockEnable+0x44>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800323e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003242:	4907      	ldr	r1, [pc, #28]	@ (8003260 <MT48LC4M32B2_ClockEnable+0x44>)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f009 fe25 	bl	800ce94 <HAL_SDRAM_SendCommand>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	e000      	b.n	8003258 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003256:	2300      	movs	r3, #0
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	24000f04 	.word	0x24000f04

08003264 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800326e:	4b0e      	ldr	r3, [pc, #56]	@ (80032a8 <MT48LC4M32B2_Precharge+0x44>)
 8003270:	2202      	movs	r2, #2
 8003272:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8003274:	4a0c      	ldr	r2, [pc, #48]	@ (80032a8 <MT48LC4M32B2_Precharge+0x44>)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800327a:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <MT48LC4M32B2_Precharge+0x44>)
 800327c:	2201      	movs	r2, #1
 800327e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <MT48LC4M32B2_Precharge+0x44>)
 8003282:	2200      	movs	r2, #0
 8003284:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800328a:	4907      	ldr	r1, [pc, #28]	@ (80032a8 <MT48LC4M32B2_Precharge+0x44>)
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f009 fe01 	bl	800ce94 <HAL_SDRAM_SendCommand>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	e000      	b.n	80032a0 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800329e:	2300      	movs	r3, #0
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	24000f04 	.word	0x24000f04

080032ac <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80032be:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80032c4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80032ca:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 80032d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032d6:	2204      	movs	r2, #4
 80032d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032e0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80032e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80032e8:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80032ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032f2:	4907      	ldr	r1, [pc, #28]	@ (8003310 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f009 fdcd 	bl	800ce94 <HAL_SDRAM_SendCommand>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	e000      	b.n	8003308 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003306:	2300      	movs	r3, #0
  }
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	24000f04 	.word	0x24000f04

08003314 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8003320:	4a0e      	ldr	r2, [pc, #56]	@ (800335c <MT48LC4M32B2_RefreshMode+0x48>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8003326:	4a0d      	ldr	r2, [pc, #52]	@ (800335c <MT48LC4M32B2_RefreshMode+0x48>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <MT48LC4M32B2_RefreshMode+0x48>)
 800332e:	2208      	movs	r2, #8
 8003330:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <MT48LC4M32B2_RefreshMode+0x48>)
 8003334:	2200      	movs	r2, #0
 8003336:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800333c:	4907      	ldr	r1, [pc, #28]	@ (800335c <MT48LC4M32B2_RefreshMode+0x48>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f009 fda8 	bl	800ce94 <HAL_SDRAM_SendCommand>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
 800334e:	e000      	b.n	8003352 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003350:	2300      	movs	r3, #0
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	24000f04 	.word	0x24000f04

08003360 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f009 fdc6 	bl	800cefe <HAL_SDRAM_ProgramRefreshRate>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8003378:	f04f 33ff 	mov.w	r3, #4294967295
 800337c:	e000      	b.n	8003380 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800337e:	2300      	movs	r3, #0
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8003390:	f002 fcd8 	bl	8005d44 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8003396:	bf00      	nop
 8003398:	f002 fcd4 	bl	8005d44 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d8f7      	bhi.n	8003398 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	@ 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10f      	bne.n	80033e8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 80033c8:	4b26      	ldr	r3, [pc, #152]	@ (8003464 <BSP_LED_Init+0xb0>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ce:	4a25      	ldr	r2, [pc, #148]	@ (8003464 <BSP_LED_Init+0xb0>)
 80033d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033d8:	4b22      	ldr	r3, [pc, #136]	@ (8003464 <BSP_LED_Init+0xb0>)
 80033da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	e015      	b.n	8003414 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d10f      	bne.n	800340e <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <BSP_LED_Init+0xb0>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <BSP_LED_Init+0xb0>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033fe:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <BSP_LED_Init+0xb0>)
 8003400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	e002      	b.n	8003414 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800340e:	f06f 0301 	mvn.w	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4a14      	ldr	r2, [pc, #80]	@ (8003468 <BSP_LED_Init+0xb4>)
 8003418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	4a0f      	ldr	r2, [pc, #60]	@ (800346c <BSP_LED_Init+0xb8>)
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	f107 0210 	add.w	r2, r7, #16
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f004 fe23 	bl	8008084 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <BSP_LED_Init+0xb8>)
 8003442:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <BSP_LED_Init+0xb4>)
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	b29b      	uxth	r3, r3
 8003450:	2201      	movs	r2, #1
 8003452:	4619      	mov	r1, r3
 8003454:	f005 f8e8 	bl	8008628 <HAL_GPIO_WritePin>
  return ret;
 8003458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  }
 800345a:	4618      	mov	r0, r3
 800345c:	3728      	adds	r7, #40	@ 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	58024400 	.word	0x58024400
 8003468:	08018090 	.word	0x08018090
 800346c:	24000048 	.word	0x24000048

08003470 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	4a08      	ldr	r2, [pc, #32]	@ (80034a4 <BSP_LED_On+0x34>)
 8003482:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	4a07      	ldr	r2, [pc, #28]	@ (80034a8 <BSP_LED_On+0x38>)
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	b29b      	uxth	r3, r3
 8003490:	2200      	movs	r2, #0
 8003492:	4619      	mov	r1, r3
 8003494:	f005 f8c8 	bl	8008628 <HAL_GPIO_WritePin>
  return ret;
 8003498:	68fb      	ldr	r3, [r7, #12]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	24000048 	.word	0x24000048
 80034a8:	08018090 	.word	0x08018090

080034ac <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	460a      	mov	r2, r1
 80034b6:	71fb      	strb	r3, [r7, #7]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 80034bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003578 <BSP_PB_Init+0xcc>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003578 <BSP_PB_Init+0xcc>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003578 <BSP_PB_Init+0xcc>)
 80034ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80034da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034de:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80034e0:	2302      	movs	r3, #2
 80034e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80034e4:	2302      	movs	r3, #2
 80034e6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80034e8:	79bb      	ldrb	r3, [r7, #6]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	4a21      	ldr	r2, [pc, #132]	@ (800357c <BSP_PB_Init+0xd0>)
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	f107 020c 	add.w	r2, r7, #12
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f004 fdbf 	bl	8008084 <HAL_GPIO_Init>
 8003506:	e031      	b.n	800356c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003508:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800350c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <BSP_PB_Init+0xd0>)
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	f107 020c 	add.w	r2, r7, #12
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fdb1 	bl	8008084 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <BSP_PB_Init+0xd4>)
 8003528:	441a      	add	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	4915      	ldr	r1, [pc, #84]	@ (8003584 <BSP_PB_Init+0xd8>)
 800352e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f004 fd60 	bl	8007ffa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4a10      	ldr	r2, [pc, #64]	@ (8003580 <BSP_PB_Init+0xd4>)
 8003540:	1898      	adds	r0, r3, r2
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	4a10      	ldr	r2, [pc, #64]	@ (8003588 <BSP_PB_Init+0xdc>)
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	461a      	mov	r2, r3
 800354c:	2100      	movs	r1, #0
 800354e:	f004 fd35 	bl	8007fbc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003552:	2028      	movs	r0, #40	@ 0x28
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <BSP_PB_Init+0xe0>)
 8003558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355c:	2200      	movs	r2, #0
 800355e:	4619      	mov	r1, r3
 8003560:	f002 fd17 	bl	8005f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003564:	2328      	movs	r3, #40	@ 0x28
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fd2d 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	58024400 	.word	0x58024400
 800357c:	24000050 	.word	0x24000050
 8003580:	24000f14 	.word	0x24000f14
 8003584:	08018098 	.word	0x08018098
 8003588:	24000054 	.word	0x24000054
 800358c:	24000058 	.word	0x24000058

08003590 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	4a06      	ldr	r2, [pc, #24]	@ (80035b8 <BSP_PB_GetState+0x28>)
 800359e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 f825 	bl	80085f8 <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	24000050 	.word	0x24000050

080035bc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4a04      	ldr	r2, [pc, #16]	@ (80035dc <BSP_PB_IRQHandler+0x20>)
 80035cc:	4413      	add	r3, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fd28 	bl	8008024 <HAL_EXTI_IRQHandler>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	24000f14 	.word	0x24000f14

080035e0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fd fde3 	bl	80011b0 <BSP_PB_Callback>
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8003600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003604:	4618      	mov	r0, r3
 8003606:	f003 fad9 	bl	8006bbc <HAL_DMA_IRQHandler>
  }
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	24000f1c 	.word	0x24000f1c

08003618 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b30      	cmp	r3, #48	@ 0x30
 8003626:	d002      	beq.n	800362e <BSP_AUDIO_IN_IRQHandler+0x16>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800362e:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8003630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003634:	4618      	mov	r0, r3
 8003636:	f003 fac1 	bl	8006bbc <HAL_DMA_IRQHandler>
  }

}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	24000fb4 	.word	0x24000fb4

08003648 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <BSP_I2C4_Init+0x64>)
 8003654:	4a16      	ldr	r2, [pc, #88]	@ (80036b0 <BSP_I2C4_Init+0x68>)
 8003656:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003658:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <BSP_I2C4_Init+0x6c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11f      	bne.n	80036a0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003660:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <BSP_I2C4_Init+0x6c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a13      	ldr	r2, [pc, #76]	@ (80036b4 <BSP_I2C4_Init+0x6c>)
 8003668:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800366a:	4810      	ldr	r0, [pc, #64]	@ (80036ac <BSP_I2C4_Init+0x64>)
 800366c:	f005 faf8 	bl	8008c60 <HAL_I2C_GetState>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d114      	bne.n	80036a0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8003676:	480d      	ldr	r0, [pc, #52]	@ (80036ac <BSP_I2C4_Init+0x64>)
 8003678:	f000 fb60 	bl	8003d3c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800367c:	f008 f840 	bl	800b700 <HAL_RCC_GetPCLK2Freq>
 8003680:	4603      	mov	r3, r0
 8003682:	490d      	ldr	r1, [pc, #52]	@ (80036b8 <BSP_I2C4_Init+0x70>)
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f8e3 	bl	8003850 <I2C_GetTiming>
 800368a:	4603      	mov	r3, r0
 800368c:	4619      	mov	r1, r3
 800368e:	4807      	ldr	r0, [pc, #28]	@ (80036ac <BSP_I2C4_Init+0x64>)
 8003690:	f000 f838 	bl	8003704 <MX_I2C4_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800369a:	f06f 0307 	mvn.w	r3, #7
 800369e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80036a0:	687b      	ldr	r3, [r7, #4]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	24001a54 	.word	0x24001a54
 80036b0:	58001c00 	.word	0x58001c00
 80036b4:	2400104c 	.word	0x2400104c
 80036b8:	000186a0 	.word	0x000186a0

080036bc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <BSP_I2C4_DeInit+0x40>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <BSP_I2C4_DeInit+0x40>)
 80036ce:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80036d0:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <BSP_I2C4_DeInit+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80036d8:	4809      	ldr	r0, [pc, #36]	@ (8003700 <BSP_I2C4_DeInit+0x44>)
 80036da:	f000 fb9b 	bl	8003e14 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80036de:	4808      	ldr	r0, [pc, #32]	@ (8003700 <BSP_I2C4_DeInit+0x44>)
 80036e0:	f005 f84c 	bl	800877c <HAL_I2C_DeInit>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80036ea:	f06f 0307 	mvn.w	r3, #7
 80036ee:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80036f0:	687b      	ldr	r3, [r7, #4]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2400104c 	.word	0x2400104c
 8003700:	24001a54 	.word	0x24001a54

08003704 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f004 ff8a 	bl	800865c <HAL_I2C_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e014      	b.n	800377e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f005 fd52 	bl	8009204 <HAL_I2CEx_ConfigAnalogFilter>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	e008      	b.n	800377e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800376c:	2100      	movs	r1, #0
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f005 fd93 	bl	800929a <HAL_I2CEx_ConfigDigitalFilter>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60ba      	str	r2, [r7, #8]
 8003790:	461a      	mov	r2, r3
 8003792:	4603      	mov	r3, r0
 8003794:	81fb      	strh	r3, [r7, #14]
 8003796:	460b      	mov	r3, r1
 8003798:	81bb      	strh	r3, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800379e:	89b9      	ldrh	r1, [r7, #12]
 80037a0:	89f8      	ldrh	r0, [r7, #14]
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f000 fb57 	bl	8003e5c <I2C4_WriteReg>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e00c      	b.n	80037d4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80037ba:	4809      	ldr	r0, [pc, #36]	@ (80037e0 <BSP_I2C4_WriteReg+0x58>)
 80037bc:	f005 fa5e 	bl	8008c7c <HAL_I2C_GetError>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d103      	bne.n	80037ce <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80037c6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e002      	b.n	80037d4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80037ce:	f06f 0303 	mvn.w	r3, #3
 80037d2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80037d4:	697b      	ldr	r3, [r7, #20]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	24001a54 	.word	0x24001a54

080037e4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60ba      	str	r2, [r7, #8]
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	81fb      	strh	r3, [r7, #14]
 80037f2:	460b      	mov	r3, r1
 80037f4:	81bb      	strh	r3, [r7, #12]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80037fa:	89b9      	ldrh	r1, [r7, #12]
 80037fc:	89f8      	ldrh	r0, [r7, #14]
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2201      	movs	r2, #1
 8003806:	f000 fb4f 	bl	8003ea8 <I2C4_ReadReg>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e00c      	b.n	8003830 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003816:	4809      	ldr	r0, [pc, #36]	@ (800383c <BSP_I2C4_ReadReg+0x58>)
 8003818:	f005 fa30 	bl	8008c7c <HAL_I2C_GetError>
 800381c:	4603      	mov	r3, r0
 800381e:	2b04      	cmp	r3, #4
 8003820:	d103      	bne.n	800382a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003822:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e002      	b.n	8003830 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800382a:	f06f 0303 	mvn.w	r3, #3
 800382e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003830:	697b      	ldr	r3, [r7, #20]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24001a54 	.word	0x24001a54

08003840 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003844:	f002 fa7e 	bl	8005d44 <HAL_GetTick>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d06b      	beq.n	800393c <I2C_GetTiming+0xec>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d068      	beq.n	800393c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e060      	b.n	8003932 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003870:	4a35      	ldr	r2, [pc, #212]	@ (8003948 <I2C_GetTiming+0xf8>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	212c      	movs	r1, #44	@ 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d352      	bcc.n	800392c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003886:	4a30      	ldr	r2, [pc, #192]	@ (8003948 <I2C_GetTiming+0xf8>)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	212c      	movs	r1, #44	@ 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3308      	adds	r3, #8
 8003894:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d847      	bhi.n	800392c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800389c:	6939      	ldr	r1, [r7, #16]
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f856 	bl	8003950 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80038a4:	6939      	ldr	r1, [r7, #16]
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f940 	bl	8003b2c <I2C_Compute_SCLL_SCLH>
 80038ac:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80038b2:	d842      	bhi.n	800393a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038b4:	4925      	ldr	r1, [pc, #148]	@ (800394c <I2C_GetTiming+0xfc>)
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80038c6:	4821      	ldr	r0, [pc, #132]	@ (800394c <I2C_GetTiming+0xfc>)
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4403      	add	r3, r0
 80038d4:	3304      	adds	r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	051b      	lsls	r3, r3, #20
 80038da:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038de:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80038e0:	481a      	ldr	r0, [pc, #104]	@ (800394c <I2C_GetTiming+0xfc>)
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4403      	add	r3, r0
 80038ee:	3308      	adds	r3, #8
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80038f8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80038fa:	4814      	ldr	r0, [pc, #80]	@ (800394c <I2C_GetTiming+0xfc>)
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4403      	add	r3, r0
 8003908:	330c      	adds	r3, #12
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003910:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003912:	480e      	ldr	r0, [pc, #56]	@ (800394c <I2C_GetTiming+0xfc>)
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	3310      	adds	r3, #16
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003926:	430b      	orrs	r3, r1
 8003928:	617b      	str	r3, [r7, #20]
        }
        break;
 800392a:	e006      	b.n	800393a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3301      	adds	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d99b      	bls.n	8003870 <I2C_GetTiming+0x20>
 8003938:	e000      	b.n	800393c <I2C_GetTiming+0xec>
        break;
 800393a:	bf00      	nop
      }
    }
  }

  return ret;
 800393c:	697b      	ldr	r3, [r7, #20]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	0801809c 	.word	0x0801809c
 800394c:	24001050 	.word	0x24001050

08003950 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003950:	b480      	push	{r7}
 8003952:	b08f      	sub	sp, #60	@ 0x3c
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800395a:	2310      	movs	r3, #16
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	085a      	lsrs	r2, r3, #1
 8003962:	4b6e      	ldr	r3, [pc, #440]	@ (8003b1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003964:	4413      	add	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	fbb3 f3f2 	udiv	r3, r3, r2
 800396c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800396e:	2332      	movs	r3, #50	@ 0x32
 8003970:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003972:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003976:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003978:	4a69      	ldr	r2, [pc, #420]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	212c      	movs	r1, #44	@ 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3324      	adds	r3, #36	@ 0x24
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	212c      	movs	r1, #44	@ 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	330c      	adds	r3, #12
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800399c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800399e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80039a0:	495f      	ldr	r1, [pc, #380]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	202c      	movs	r0, #44	@ 0x2c
 80039a6:	fb00 f303 	mul.w	r3, r0, r3
 80039aa:	440b      	add	r3, r1
 80039ac:	3328      	adds	r3, #40	@ 0x28
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3303      	adds	r3, #3
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039bc:	4a58      	ldr	r2, [pc, #352]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	212c      	movs	r1, #44	@ 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3310      	adds	r3, #16
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	4a54      	ldr	r2, [pc, #336]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	212c      	movs	r1, #44	@ 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3320      	adds	r3, #32
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80039e0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039e2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80039e4:	494e      	ldr	r1, [pc, #312]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	202c      	movs	r0, #44	@ 0x2c
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	440b      	add	r3, r1
 80039f0:	3328      	adds	r3, #40	@ 0x28
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3304      	adds	r3, #4
 80039f6:	69f9      	ldr	r1, [r7, #28]
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003a00:	4a47      	ldr	r2, [pc, #284]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	212c      	movs	r1, #44	@ 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3320      	adds	r3, #32
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	4a43      	ldr	r2, [pc, #268]	@ (8003b20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	212c      	movs	r1, #44	@ 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3314      	adds	r3, #20
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4403      	add	r3, r0
 8003a24:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dc01      	bgt.n	8003a30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8003a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dc01      	bgt.n	8003a3a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a3e:	e062      	b.n	8003b06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a44:	e059      	b.n	8003afa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	3301      	adds	r3, #1
 8003a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	fb03 f202 	mul.w	r2, r3, r2
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d348      	bcc.n	8003af4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	e042      	b.n	8003aee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	fb03 f202 	mul.w	r2, r3, r2
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d332      	bcc.n	8003ae8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d82e      	bhi.n	8003ae8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d02a      	beq.n	8003ae8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a92:	4b24      	ldr	r3, [pc, #144]	@ (8003b24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4924      	ldr	r1, [pc, #144]	@ (8003b28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	491f      	ldr	r1, [pc, #124]	@ (8003b28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4919      	ldr	r1, [pc, #100]	@ (8003b28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3308      	adds	r3, #8
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a11      	ldr	r2, [pc, #68]	@ (8003b24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ade:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003ae0:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ae6:	d812      	bhi.n	8003b0e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	3301      	adds	r3, #1
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2b0f      	cmp	r3, #15
 8003af2:	d9b9      	bls.n	8003a68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	3301      	adds	r3, #1
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d9a2      	bls.n	8003a46 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b02:	3301      	adds	r3, #1
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d999      	bls.n	8003a40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003b0c:	e000      	b.n	8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003b0e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003b10:	373c      	adds	r7, #60	@ 0x3c
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	3b9aca00 	.word	0x3b9aca00
 8003b20:	0801809c 	.word	0x0801809c
 8003b24:	24001a50 	.word	0x24001a50
 8003b28:	24001050 	.word	0x24001050

08003b2c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b093      	sub	sp, #76	@ 0x4c
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	085a      	lsrs	r2, r3, #1
 8003b40:	4b7a      	ldr	r3, [pc, #488]	@ (8003d2c <I2C_Compute_SCLL_SCLH+0x200>)
 8003b42:	4413      	add	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003b4c:	4a78      	ldr	r2, [pc, #480]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	212c      	movs	r1, #44	@ 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	085a      	lsrs	r2, r3, #1
 8003b5c:	4b73      	ldr	r3, [pc, #460]	@ (8003d2c <I2C_Compute_SCLL_SCLH+0x200>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	4973      	ldr	r1, [pc, #460]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	202c      	movs	r0, #44	@ 0x2c
 8003b66:	fb00 f202 	mul.w	r2, r0, r2
 8003b6a:	440a      	add	r2, r1
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b72:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003b74:	2332      	movs	r3, #50	@ 0x32
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003b78:	4a6d      	ldr	r2, [pc, #436]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	212c      	movs	r1, #44	@ 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3328      	adds	r3, #40	@ 0x28
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003b90:	4a67      	ldr	r2, [pc, #412]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	212c      	movs	r1, #44	@ 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a62      	ldr	r2, [pc, #392]	@ (8003d2c <I2C_Compute_SCLL_SCLH+0x200>)
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003ba8:	4a61      	ldr	r2, [pc, #388]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	212c      	movs	r1, #44	@ 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8003d2c <I2C_Compute_SCLL_SCLH+0x200>)
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc8:	e0a3      	b.n	8003d12 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003bca:	495a      	ldr	r1, [pc, #360]	@ (8003d34 <I2C_Compute_SCLL_SCLH+0x208>)
 8003bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be8:	e08c      	b.n	8003d04 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	441a      	add	r2, r3
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	6979      	ldr	r1, [r7, #20]
 8003bf6:	fb03 f101 	mul.w	r1, r3, r1
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	440b      	add	r3, r1
 8003c00:	4413      	add	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003c04:	4a4a      	ldr	r2, [pc, #296]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	212c      	movs	r1, #44	@ 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3318      	adds	r3, #24
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d971      	bls.n	8003cfe <I2C_Compute_SCLL_SCLH+0x1d2>
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d268      	bcs.n	8003cfe <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c30:	e062      	b.n	8003cf8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	441a      	add	r2, r3
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	fb03 f101 	mul.w	r1, r3, r1
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	440b      	add	r3, r1
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	441a      	add	r2, r3
 8003c52:	4937      	ldr	r1, [pc, #220]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	202c      	movs	r0, #44	@ 0x2c
 8003c58:	fb00 f303 	mul.w	r3, r0, r3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3320      	adds	r3, #32
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	441a      	add	r2, r3
 8003c64:	4932      	ldr	r1, [pc, #200]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	202c      	movs	r0, #44	@ 0x2c
 8003c6a:	fb00 f303 	mul.w	r3, r0, r3
 8003c6e:	440b      	add	r3, r1
 8003c70:	3324      	adds	r3, #36	@ 0x24
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4413      	add	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d338      	bcc.n	8003cf2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d834      	bhi.n	8003cf2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c88:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	212c      	movs	r1, #44	@ 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	331c      	adds	r3, #28
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d329      	bcc.n	8003cf2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d225      	bcs.n	8003cf2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da02      	bge.n	8003cba <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d917      	bls.n	8003cf2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8003cc6:	491b      	ldr	r1, [pc, #108]	@ (8003d34 <I2C_Compute_SCLL_SCLH+0x208>)
 8003cc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cd8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003cda:	4916      	ldr	r1, [pc, #88]	@ (8003d34 <I2C_Compute_SCLL_SCLH+0x208>)
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	330c      	adds	r3, #12
 8003cea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cec:	601a      	str	r2, [r3, #0]
              ret = count;
 8003cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf0:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	2bff      	cmp	r3, #255	@ 0xff
 8003cfc:	d999      	bls.n	8003c32 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d00:	3301      	adds	r3, #1
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d06:	2bff      	cmp	r3, #255	@ 0xff
 8003d08:	f67f af6f 	bls.w	8003bea <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	3301      	adds	r3, #1
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d12:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f4ff af56 	bcc.w	8003bca <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	374c      	adds	r7, #76	@ 0x4c
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	3b9aca00 	.word	0x3b9aca00
 8003d30:	0801809c 	.word	0x0801809c
 8003d34:	24001050 	.word	0x24001050
 8003d38:	24001a50 	.word	0x24001a50

08003d3c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	@ 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003d44:	4b31      	ldr	r3, [pc, #196]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d4a:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003d4c:	f043 0308 	orr.w	r3, r3, #8
 8003d50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d54:	4b2d      	ldr	r3, [pc, #180]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003d62:	4b2a      	ldr	r3, [pc, #168]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d68:	4a28      	ldr	r2, [pc, #160]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003d6a:	f043 0308 	orr.w	r3, r3, #8
 8003d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d72:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d84:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d86:	2312      	movs	r3, #18
 8003d88:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003d92:	2304      	movs	r3, #4
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	481c      	ldr	r0, [pc, #112]	@ (8003e10 <I2C4_MspInit+0xd4>)
 8003d9e:	f004 f971 	bl	8008084 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003da2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003da6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003da8:	2312      	movs	r3, #18
 8003daa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003db0:	2302      	movs	r3, #2
 8003db2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003db4:	2304      	movs	r3, #4
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4814      	ldr	r0, [pc, #80]	@ (8003e10 <I2C4_MspInit+0xd4>)
 8003dc0:	f004 f960 	bl	8008084 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003dc4:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dca:	4a10      	ldr	r2, [pc, #64]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003de2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003de8:	4a08      	ldr	r2, [pc, #32]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003df8:	4a04      	ldr	r2, [pc, #16]	@ (8003e0c <I2C4_MspInit+0xd0>)
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dfe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8003e02:	bf00      	nop
 8003e04:	3728      	adds	r7, #40	@ 0x28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	58020c00 	.word	0x58020c00

08003e14 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4619      	mov	r1, r3
 8003e26:	480b      	ldr	r0, [pc, #44]	@ (8003e54 <I2C4_MspDeInit+0x40>)
 8003e28:	f004 fadc 	bl	80083e4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003e2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4619      	mov	r1, r3
 8003e36:	4807      	ldr	r0, [pc, #28]	@ (8003e54 <I2C4_MspDeInit+0x40>)
 8003e38:	f004 fad4 	bl	80083e4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <I2C4_MspDeInit+0x44>)
 8003e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e42:	4a05      	ldr	r2, [pc, #20]	@ (8003e58 <I2C4_MspDeInit+0x44>)
 8003e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8003e4c:	bf00      	nop
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	58020c00 	.word	0x58020c00
 8003e58:	58024400 	.word	0x58024400

08003e5c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	4603      	mov	r3, r0
 8003e66:	81fb      	strh	r3, [r7, #14]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	81bb      	strh	r3, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003e70:	8978      	ldrh	r0, [r7, #10]
 8003e72:	89ba      	ldrh	r2, [r7, #12]
 8003e74:	89f9      	ldrh	r1, [r7, #14]
 8003e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	8b3b      	ldrh	r3, [r7, #24]
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4603      	mov	r3, r0
 8003e86:	4807      	ldr	r0, [pc, #28]	@ (8003ea4 <I2C4_WriteReg+0x48>)
 8003e88:	f004 fcbc 	bl	8008804 <HAL_I2C_Mem_Write>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e001      	b.n	8003e9a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003e96:	f06f 0307 	mvn.w	r3, #7
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	24001a54 	.word	0x24001a54

08003ea8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af04      	add	r7, sp, #16
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	81fb      	strh	r3, [r7, #14]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	81bb      	strh	r3, [r7, #12]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003ebc:	8978      	ldrh	r0, [r7, #10]
 8003ebe:	89ba      	ldrh	r2, [r7, #12]
 8003ec0:	89f9      	ldrh	r1, [r7, #14]
 8003ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec6:	9302      	str	r3, [sp, #8]
 8003ec8:	8b3b      	ldrh	r3, [r7, #24]
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4807      	ldr	r0, [pc, #28]	@ (8003ef0 <I2C4_ReadReg+0x48>)
 8003ed4:	f004 fdaa 	bl	8008a2c <HAL_I2C_Mem_Read>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e001      	b.n	8003ee6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003ee2:	f06f 0307 	mvn.w	r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	24001a54 	.word	0x24001a54

08003ef4 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8003efe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003f08:	2200      	movs	r2, #0
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f805 	bl	8003f1c <BSP_LCD_InitEx>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b09e      	sub	sp, #120	@ 0x78
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d808      	bhi.n	8003f4a <BSP_LCD_InitEx+0x2e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <BSP_LCD_InitEx+0x2e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d006      	beq.n	8003f52 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f4a:	f06f 0301 	mvn.w	r3, #1
 8003f4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f50:	e0a8      	b.n	80040a4 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d109      	bne.n	8003f6c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8003f5c:	4a54      	ldr	r2, [pc, #336]	@ (80040b0 <BSP_LCD_InitEx+0x194>)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	015b      	lsls	r3, r3, #5
 8003f62:	4413      	add	r3, r2
 8003f64:	3310      	adds	r3, #16
 8003f66:	2202      	movs	r2, #2
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e008      	b.n	8003f7e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	673b      	str	r3, [r7, #112]	@ 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8003f70:	4a4f      	ldr	r2, [pc, #316]	@ (80040b0 <BSP_LCD_InitEx+0x194>)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	4413      	add	r3, r2
 8003f78:	3310      	adds	r3, #16
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8003f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80040b0 <BSP_LCD_InitEx+0x194>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	4413      	add	r3, r2
 8003f86:	330c      	adds	r3, #12
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8003f8c:	4a48      	ldr	r2, [pc, #288]	@ (80040b0 <BSP_LCD_InitEx+0x194>)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	015b      	lsls	r3, r3, #5
 8003f92:	4413      	add	r3, r2
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8003f98:	4a45      	ldr	r2, [pc, #276]	@ (80040b0 <BSP_LCD_InitEx+0x194>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	015b      	lsls	r3, r3, #5
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8003fa8:	4b42      	ldr	r3, [pc, #264]	@ (80040b4 <BSP_LCD_InitEx+0x198>)
 8003faa:	4a43      	ldr	r2, [pc, #268]	@ (80040b8 <BSP_LCD_InitEx+0x19c>)
 8003fac:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8003fae:	4b43      	ldr	r3, [pc, #268]	@ (80040bc <BSP_LCD_InitEx+0x1a0>)
 8003fb0:	4a43      	ldr	r2, [pc, #268]	@ (80040c0 <BSP_LCD_InitEx+0x1a4>)
 8003fb2:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8003fb4:	483f      	ldr	r0, [pc, #252]	@ (80040b4 <BSP_LCD_InitEx+0x198>)
 8003fb6:	f000 fd1b 	bl	80049f0 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8003fba:	4840      	ldr	r0, [pc, #256]	@ (80040bc <BSP_LCD_InitEx+0x1a0>)
 8003fbc:	f000 fde4 	bl	8004b88 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8003fc0:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <BSP_LCD_InitEx+0x1a8>)
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8003fc4:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <BSP_LCD_InitEx+0x1ac>)
 8003fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8003fc8:	2370      	movs	r3, #112	@ 0x70
 8003fca:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8003fcc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003fd0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe faf0 	bl	80025bc <FT5336_RegisterBusIO>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da03      	bge.n	8003fea <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003fe2:	f06f 0304 	mvn.w	r3, #4
 8003fe6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fe8:	e02b      	b.n	8004042 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8003fea:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8003fee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fbdb 	bl	80027b0 <FT5336_ReadID>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	da03      	bge.n	8004008 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004000:	f06f 0304 	mvn.w	r3, #4
 8004004:	677b      	str	r3, [r7, #116]	@ 0x74
 8004006:	e01c      	b.n	8004042 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8004008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800400a:	2b51      	cmp	r3, #81	@ 0x51
 800400c:	d003      	beq.n	8004016 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800400e:	f06f 0306 	mvn.w	r3, #6
 8004012:	677b      	str	r3, [r7, #116]	@ 0x74
 8004014:	e015      	b.n	8004042 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8004016:	4827      	ldr	r0, [pc, #156]	@ (80040b4 <BSP_LCD_InitEx+0x198>)
 8004018:	f000 f8e8 	bl	80041ec <MX_LTDC_ClockConfig>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004022:	f06f 0303 	mvn.w	r3, #3
 8004026:	677b      	str	r3, [r7, #116]	@ 0x74
 8004028:	e00b      	b.n	8004042 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800402a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	4820      	ldr	r0, [pc, #128]	@ (80040b4 <BSP_LCD_InitEx+0x198>)
 8004032:	f000 f84d 	bl	80040d0 <MX_LTDC_Init>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800403c:	f06f 0303 	mvn.w	r3, #3
 8004040:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8004042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004044:	2b00      	cmp	r3, #0
 8004046:	d12d      	bne.n	80040a4 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8004048:	2000      	movs	r0, #0
 800404a:	f001 fa1b 	bl	8005484 <BSP_SDRAM_Init>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8004054:	f06f 0303 	mvn.w	r3, #3
 8004058:	e025      	b.n	80040a6 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8004066:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800406a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 800406c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8004070:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8004076:	f107 0314 	add.w	r3, r7, #20
 800407a:	461a      	mov	r2, r3
 800407c:	2100      	movs	r1, #0
 800407e:	480d      	ldr	r0, [pc, #52]	@ (80040b4 <BSP_LCD_InitEx+0x198>)
 8004080:	f000 f872 	bl	8004168 <MX_LTDC_ConfigLayer>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800408a:	f06f 0303 	mvn.w	r3, #3
 800408e:	677b      	str	r3, [r7, #116]	@ 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8004090:	480e      	ldr	r0, [pc, #56]	@ (80040cc <BSP_LCD_InitEx+0x1b0>)
 8004092:	f000 fde1 	bl	8004c58 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8004096:	4a06      	ldr	r2, [pc, #24]	@ (80040b0 <BSP_LCD_InitEx+0x194>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015b      	lsls	r3, r3, #5
 800409c:	4413      	add	r3, r2
 800409e:	3318      	adds	r3, #24
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80040a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3778      	adds	r7, #120	@ 0x78
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	24001c04 	.word	0x24001c04
 80040b4:	24001b5c 	.word	0x24001b5c
 80040b8:	50001000 	.word	0x50001000
 80040bc:	24001af4 	.word	0x24001af4
 80040c0:	52001000 	.word	0x52001000
 80040c4:	08003649 	.word	0x08003649
 80040c8:	080037e5 	.word	0x080037e5
 80040cc:	24001aa8 	.word	0x24001aa8

080040d0 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a21      	ldr	r2, [pc, #132]	@ (8004164 <MX_LTDC_Init+0x94>)
 80040e0:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2228      	movs	r2, #40	@ 0x28
 80040fe:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	222a      	movs	r2, #42	@ 0x2a
 8004104:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2209      	movs	r2, #9
 800411e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	220b      	movs	r2, #11
 8004124:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f103 020b 	add.w	r2, r3, #11
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f103 020d 	add.w	r2, r3, #13
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	@ 0xff
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	22ff      	movs	r2, #255	@ 0xff
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	@ 0xff
 800414e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f005 f8ee 	bl	8009334 <HAL_LTDC_Init>
 8004158:	4603      	mov	r3, r0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	50001000 	.word	0x50001000

08004168 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b092      	sub	sp, #72	@ 0x48
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8004192:	23ff      	movs	r3, #255	@ 0xff
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800419a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800419e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80041a0:	2307      	movs	r3, #7
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4619      	mov	r1, r3
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f005 f983 	bl	80094e8 <HAL_LTDC_ConfigLayer>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3748      	adds	r7, #72	@ 0x48
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b0b2      	sub	sp, #200	@ 0xc8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80041f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8004200:	2305      	movs	r3, #5
 8004202:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8004204:	23a0      	movs	r3, #160	@ 0xa0
 8004206:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004208:	2302      	movs	r3, #2
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800420c:	2302      	movs	r3, #2
 800420e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8004210:	2353      	movs	r3, #83	@ 0x53
 8004212:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	4618      	mov	r0, r3
 8004222:	f007 fa83 	bl	800b72c <HAL_RCCEx_PeriphCLKConfig>
 8004226:	4603      	mov	r3, r0
}
 8004228:	4618      	mov	r0, r3
 800422a:	37c8      	adds	r7, #200	@ 0xc8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004244:	f06f 0301 	mvn.w	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e007      	b.n	800425c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800424c:	4a07      	ldr	r2, [pc, #28]	@ (800426c <BSP_LCD_GetPixelFormat+0x3c>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	015b      	lsls	r3, r3, #5
 8004252:	4413      	add	r3, r2
 8004254:	330c      	adds	r3, #12
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	24001c04 	.word	0x24001c04

08004270 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004284:	f06f 0301 	mvn.w	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e006      	b.n	800429a <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800428c:	4a06      	ldr	r2, [pc, #24]	@ (80042a8 <BSP_LCD_SetActiveLayer+0x38>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	015b      	lsls	r3, r3, #5
 8004292:	4413      	add	r3, r2
 8004294:	3308      	adds	r3, #8
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	24001c04 	.word	0x24001c04

080042ac <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042c0:	f06f 0301 	mvn.w	r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e006      	b.n	80042d6 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80042c8:	4a06      	ldr	r2, [pc, #24]	@ (80042e4 <BSP_LCD_GetXSize+0x38>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	015b      	lsls	r3, r3, #5
 80042ce:	4413      	add	r3, r2
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	24001c04 	.word	0x24001c04

080042e8 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042fc:	f06f 0301 	mvn.w	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e007      	b.n	8004314 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8004304:	4a07      	ldr	r2, [pc, #28]	@ (8004324 <BSP_LCD_GetYSize+0x3c>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	015b      	lsls	r3, r3, #5
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004314:	68fb      	ldr	r3, [r7, #12]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	24001c04 	.word	0x24001c04

08004328 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	@ 0x38
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	330a      	adds	r3, #10
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	330b      	adds	r3, #11
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	441a      	add	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	441a      	add	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	330d      	adds	r3, #13
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	4413      	add	r3, r2
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3312      	adds	r3, #18
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	3313      	adds	r3, #19
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	441a      	add	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	441a      	add	r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3315      	adds	r3, #21
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	4413      	add	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	3316      	adds	r3, #22
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	3317      	adds	r3, #23
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	441a      	add	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	3318      	adds	r3, #24
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	441a      	add	r2, r3
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	3319      	adds	r3, #25
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	4413      	add	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	331c      	adds	r3, #28
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	331d      	adds	r3, #29
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4413      	add	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80043c6:	4a37      	ldr	r2, [pc, #220]	@ (80044a4 <BSP_LCD_DrawBitmap+0x17c>)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	015b      	lsls	r3, r3, #5
 80043cc:	4413      	add	r3, r2
 80043ce:	3308      	adds	r3, #8
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a35      	ldr	r2, [pc, #212]	@ (80044a8 <BSP_LCD_DrawBitmap+0x180>)
 80043d4:	2134      	movs	r1, #52	@ 0x34
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	335c      	adds	r3, #92	@ 0x5c
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4930      	ldr	r1, [pc, #192]	@ (80044a4 <BSP_LCD_DrawBitmap+0x17c>)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	015b      	lsls	r3, r3, #5
 80043e6:	440b      	add	r3, r1
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	fb03 f101 	mul.w	r1, r3, r1
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	440b      	add	r3, r1
 80043f4:	482b      	ldr	r0, [pc, #172]	@ (80044a4 <BSP_LCD_DrawBitmap+0x17c>)
 80043f6:	68f9      	ldr	r1, [r7, #12]
 80043f8:	0149      	lsls	r1, r1, #5
 80043fa:	4401      	add	r1, r0
 80043fc:	3110      	adds	r1, #16
 80043fe:	6809      	ldr	r1, [r1, #0]
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3b20      	subs	r3, #32
 800440c:	2b07      	cmp	r3, #7
 800440e:	d802      	bhi.n	8004416 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
 8004414:	e008      	b.n	8004428 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	3b10      	subs	r3, #16
 800441a:	2b07      	cmp	r3, #7
 800441c:	d802      	bhi.n	8004424 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800441e:	2302      	movs	r3, #2
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24
 8004422:	e001      	b.n	8004428 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8004424:	2301      	movs	r3, #1
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3b01      	subs	r3, #1
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	08d2      	lsrs	r2, r2, #3
 8004436:	fb03 f202 	mul.w	r2, r3, r2
 800443a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443c:	4413      	add	r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004448:	e023      	b.n	8004492 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 800444a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	6a39      	ldr	r1, [r7, #32]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fa77 	bl	8004948 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800445a:	4a12      	ldr	r2, [pc, #72]	@ (80044a4 <BSP_LCD_DrawBitmap+0x17c>)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	015b      	lsls	r3, r3, #5
 8004460:	4413      	add	r3, r2
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	490f      	ldr	r1, [pc, #60]	@ (80044a4 <BSP_LCD_DrawBitmap+0x17c>)
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	0152      	lsls	r2, r2, #5
 800446a:	440a      	add	r2, r1
 800446c:	3210      	adds	r2, #16
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004476:	4413      	add	r3, r2
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	fb02 f303 	mul.w	r3, r2, r3
 8004484:	425b      	negs	r3, r3
 8004486:	6a3a      	ldr	r2, [r7, #32]
 8004488:	4413      	add	r3, r2
 800448a:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 800448c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448e:	3301      	adds	r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	429a      	cmp	r2, r3
 8004498:	d3d7      	bcc.n	800444a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 800449a:	69fb      	ldr	r3, [r7, #28]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3730      	adds	r7, #48	@ 0x30
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	24001c04 	.word	0x24001c04
 80044a8:	24001b5c 	.word	0x24001b5c

080044ac <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	e032      	b.n	800452a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e028      	b.n	800451c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	3301      	adds	r3, #1
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	431a      	orrs	r2, r3
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	3302      	adds	r3, #2
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	3303      	adds	r3, #3
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	18d1      	adds	r1, r2, r3
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	441a      	add	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f95e 	bl	80047c0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8004504:	4a0d      	ldr	r2, [pc, #52]	@ (800453c <BSP_LCD_FillRGBRect+0x90>)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	015b      	lsls	r3, r3, #5
 800450a:	4413      	add	r3, r2
 800450c:	3310      	adds	r3, #16
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	429a      	cmp	r2, r3
 8004522:	d3d2      	bcc.n	80044ca <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3301      	adds	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	429a      	cmp	r2, r3
 8004530:	d3c8      	bcc.n	80044c4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	24001c04 	.word	0x24001c04

08004540 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800454e:	4a21      	ldr	r2, [pc, #132]	@ (80045d4 <BSP_LCD_DrawHLine+0x94>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	015b      	lsls	r3, r3, #5
 8004554:	4413      	add	r3, r2
 8004556:	3308      	adds	r3, #8
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <BSP_LCD_DrawHLine+0x98>)
 800455c:	2134      	movs	r1, #52	@ 0x34
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	335c      	adds	r3, #92	@ 0x5c
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	491a      	ldr	r1, [pc, #104]	@ (80045d4 <BSP_LCD_DrawHLine+0x94>)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	015b      	lsls	r3, r3, #5
 800456e:	440b      	add	r3, r1
 8004570:	3310      	adds	r3, #16
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4817      	ldr	r0, [pc, #92]	@ (80045d4 <BSP_LCD_DrawHLine+0x94>)
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	0149      	lsls	r1, r1, #5
 800457a:	4401      	add	r1, r0
 800457c:	6809      	ldr	r1, [r1, #0]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	fb01 f000 	mul.w	r0, r1, r0
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	4401      	add	r1, r0
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	441a      	add	r2, r3
 8004596:	490f      	ldr	r1, [pc, #60]	@ (80045d4 <BSP_LCD_DrawHLine+0x94>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	015b      	lsls	r3, r3, #5
 800459c:	440b      	add	r3, r1
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d907      	bls.n	80045b4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80045a4:	4a0b      	ldr	r2, [pc, #44]	@ (80045d4 <BSP_LCD_DrawHLine+0x94>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	015b      	lsls	r3, r3, #5
 80045aa:	4413      	add	r3, r2
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80045b4:	6979      	ldr	r1, [r7, #20]
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	2301      	movs	r3, #1
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f956 	bl	8004874 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	24001c04 	.word	0x24001c04
 80045d8:	24001b5c 	.word	0x24001b5c

080045dc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80045ea:	4a24      	ldr	r2, [pc, #144]	@ (800467c <BSP_LCD_DrawVLine+0xa0>)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	015b      	lsls	r3, r3, #5
 80045f0:	4413      	add	r3, r2
 80045f2:	3308      	adds	r3, #8
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a22      	ldr	r2, [pc, #136]	@ (8004680 <BSP_LCD_DrawVLine+0xa4>)
 80045f8:	2134      	movs	r1, #52	@ 0x34
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	335c      	adds	r3, #92	@ 0x5c
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	491d      	ldr	r1, [pc, #116]	@ (800467c <BSP_LCD_DrawVLine+0xa0>)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015b      	lsls	r3, r3, #5
 800460a:	440b      	add	r3, r1
 800460c:	3310      	adds	r3, #16
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	481a      	ldr	r0, [pc, #104]	@ (800467c <BSP_LCD_DrawVLine+0xa0>)
 8004612:	68f9      	ldr	r1, [r7, #12]
 8004614:	0149      	lsls	r1, r1, #5
 8004616:	4401      	add	r1, r0
 8004618:	6809      	ldr	r1, [r1, #0]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	fb01 f000 	mul.w	r0, r1, r0
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	4401      	add	r1, r0
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	4413      	add	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	441a      	add	r2, r3
 8004632:	4912      	ldr	r1, [pc, #72]	@ (800467c <BSP_LCD_DrawVLine+0xa0>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	015b      	lsls	r3, r3, #5
 8004638:	440b      	add	r3, r1
 800463a:	3304      	adds	r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d908      	bls.n	8004654 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8004642:	4a0e      	ldr	r2, [pc, #56]	@ (800467c <BSP_LCD_DrawVLine+0xa0>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	015b      	lsls	r3, r3, #5
 8004648:	4413      	add	r3, r2
 800464a:	3304      	adds	r3, #4
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004654:	6979      	ldr	r1, [r7, #20]
 8004656:	4a09      	ldr	r2, [pc, #36]	@ (800467c <BSP_LCD_DrawVLine+0xa0>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	015b      	lsls	r3, r3, #5
 800465c:	4413      	add	r3, r2
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3b01      	subs	r3, #1
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	9201      	str	r2, [sp, #4]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2201      	movs	r2, #1
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f901 	bl	8004874 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	24001c04 	.word	0x24001c04
 8004680:	24001b5c 	.word	0x24001b5c

08004684 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004692:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <BSP_LCD_FillRect+0x7c>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	015b      	lsls	r3, r3, #5
 8004698:	4413      	add	r3, r2
 800469a:	3308      	adds	r3, #8
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <BSP_LCD_FillRect+0x80>)
 80046a0:	2134      	movs	r1, #52	@ 0x34
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	335c      	adds	r3, #92	@ 0x5c
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4914      	ldr	r1, [pc, #80]	@ (8004700 <BSP_LCD_FillRect+0x7c>)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	015b      	lsls	r3, r3, #5
 80046b2:	440b      	add	r3, r1
 80046b4:	3310      	adds	r3, #16
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4811      	ldr	r0, [pc, #68]	@ (8004700 <BSP_LCD_FillRect+0x7c>)
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	0149      	lsls	r1, r1, #5
 80046be:	4401      	add	r1, r0
 80046c0:	6809      	ldr	r1, [r1, #0]
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	fb01 f000 	mul.w	r0, r1, r0
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4401      	add	r1, r0
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80046d4:	6979      	ldr	r1, [r7, #20]
 80046d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <BSP_LCD_FillRect+0x7c>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	015b      	lsls	r3, r3, #5
 80046dc:	4413      	add	r3, r2
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e6:	9201      	str	r2, [sp, #4]
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f8c0 	bl	8004874 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	24001c04 	.word	0x24001c04
 8004704:	24001b5c 	.word	0x24001b5c

08004708 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004716:	4a28      	ldr	r2, [pc, #160]	@ (80047b8 <BSP_LCD_ReadPixel+0xb0>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	015b      	lsls	r3, r3, #5
 800471c:	4413      	add	r3, r2
 800471e:	3308      	adds	r3, #8
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a26      	ldr	r2, [pc, #152]	@ (80047bc <BSP_LCD_ReadPixel+0xb4>)
 8004724:	2134      	movs	r1, #52	@ 0x34
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	3348      	adds	r3, #72	@ 0x48
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11c      	bne.n	800476e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8004734:	4a20      	ldr	r2, [pc, #128]	@ (80047b8 <BSP_LCD_ReadPixel+0xb0>)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	015b      	lsls	r3, r3, #5
 800473a:	4413      	add	r3, r2
 800473c:	3308      	adds	r3, #8
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <BSP_LCD_ReadPixel+0xb4>)
 8004742:	2134      	movs	r1, #52	@ 0x34
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	335c      	adds	r3, #92	@ 0x5c
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	491a      	ldr	r1, [pc, #104]	@ (80047b8 <BSP_LCD_ReadPixel+0xb0>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	015b      	lsls	r3, r3, #5
 8004754:	440b      	add	r3, r1
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	fb03 f101 	mul.w	r1, r3, r1
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	440b      	add	r3, r1
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e01d      	b.n	80047aa <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800476e:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <BSP_LCD_ReadPixel+0xb0>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	015b      	lsls	r3, r3, #5
 8004774:	4413      	add	r3, r2
 8004776:	3308      	adds	r3, #8
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <BSP_LCD_ReadPixel+0xb4>)
 800477c:	2134      	movs	r1, #52	@ 0x34
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	4413      	add	r3, r2
 8004784:	335c      	adds	r3, #92	@ 0x5c
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	490b      	ldr	r1, [pc, #44]	@ (80047b8 <BSP_LCD_ReadPixel+0xb0>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	015b      	lsls	r3, r3, #5
 800478e:	440b      	add	r3, r1
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	fb03 f101 	mul.w	r1, r3, r1
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	440b      	add	r3, r1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	24001c04 	.word	0x24001c04
 80047bc:	24001b5c 	.word	0x24001b5c

080047c0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047ce:	4a27      	ldr	r2, [pc, #156]	@ (800486c <BSP_LCD_WritePixel+0xac>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	015b      	lsls	r3, r3, #5
 80047d4:	4413      	add	r3, r2
 80047d6:	3308      	adds	r3, #8
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a25      	ldr	r2, [pc, #148]	@ (8004870 <BSP_LCD_WritePixel+0xb0>)
 80047dc:	2134      	movs	r1, #52	@ 0x34
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	3348      	adds	r3, #72	@ 0x48
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11c      	bne.n	8004826 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 80047ec:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <BSP_LCD_WritePixel+0xac>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	015b      	lsls	r3, r3, #5
 80047f2:	4413      	add	r3, r2
 80047f4:	3308      	adds	r3, #8
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <BSP_LCD_WritePixel+0xb0>)
 80047fa:	2134      	movs	r1, #52	@ 0x34
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	335c      	adds	r3, #92	@ 0x5c
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4919      	ldr	r1, [pc, #100]	@ (800486c <BSP_LCD_WritePixel+0xac>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	440b      	add	r3, r1
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	fb03 f101 	mul.w	r1, r3, r1
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	440b      	add	r3, r1
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	461a      	mov	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e01b      	b.n	800485e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8004826:	4a11      	ldr	r2, [pc, #68]	@ (800486c <BSP_LCD_WritePixel+0xac>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	015b      	lsls	r3, r3, #5
 800482c:	4413      	add	r3, r2
 800482e:	3308      	adds	r3, #8
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a0f      	ldr	r2, [pc, #60]	@ (8004870 <BSP_LCD_WritePixel+0xb0>)
 8004834:	2134      	movs	r1, #52	@ 0x34
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	4413      	add	r3, r2
 800483c:	335c      	adds	r3, #92	@ 0x5c
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	490a      	ldr	r1, [pc, #40]	@ (800486c <BSP_LCD_WritePixel+0xac>)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	015b      	lsls	r3, r3, #5
 8004846:	440b      	add	r3, r1
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	fb03 f101 	mul.w	r1, r3, r1
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	440b      	add	r3, r1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b292      	uxth	r2, r2
 800485c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	24001c04 	.word	0x24001c04
 8004870:	24001b5c 	.word	0x24001b5c

08004874 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8004886:	4a2d      	ldr	r2, [pc, #180]	@ (800493c <LL_FillBuffer+0xc8>)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015b      	lsls	r3, r3, #5
 800488c:	4413      	add	r3, r2
 800488e:	330c      	adds	r3, #12
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d129      	bne.n	80048ea <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004896:	2302      	movs	r3, #2
 8004898:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	0adb      	lsrs	r3, r3, #11
 800489e:	f003 021f 	and.w	r2, r3, #31
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	4413      	add	r3, r2
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	3317      	adds	r3, #23
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	0419      	lsls	r1, r3, #16
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048ba:	4613      	mov	r3, r2
 80048bc:	01db      	lsls	r3, r3, #7
 80048be:	4413      	add	r3, r2
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	4413      	add	r3, r2
 80048c4:	3321      	adds	r3, #33	@ 0x21
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	4319      	orrs	r1, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ce:	f003 021f 	and.w	r2, r3, #31
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	4413      	add	r3, r2
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	3317      	adds	r3, #23
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	430b      	orrs	r3, r1
 80048e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048e6:	613b      	str	r3, [r7, #16]
    break;
 80048e8:	e002      	b.n	80048f0 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
    break;
 80048ee:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80048f0:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <LL_FillBuffer+0xcc>)
 80048f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048f6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80048f8:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <LL_FillBuffer+0xcc>)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80048fe:	4a10      	ldr	r2, [pc, #64]	@ (8004940 <LL_FillBuffer+0xcc>)
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8004904:	4b0e      	ldr	r3, [pc, #56]	@ (8004940 <LL_FillBuffer+0xcc>)
 8004906:	4a0f      	ldr	r2, [pc, #60]	@ (8004944 <LL_FillBuffer+0xd0>)
 8004908:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800490a:	480d      	ldr	r0, [pc, #52]	@ (8004940 <LL_FillBuffer+0xcc>)
 800490c:	f003 f880 	bl	8007a10 <HAL_DMA2D_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10e      	bne.n	8004934 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6939      	ldr	r1, [r7, #16]
 8004920:	4807      	ldr	r0, [pc, #28]	@ (8004940 <LL_FillBuffer+0xcc>)
 8004922:	f003 f8e3 	bl	8007aec <HAL_DMA2D_Start>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800492c:	2132      	movs	r1, #50	@ 0x32
 800492e:	4804      	ldr	r0, [pc, #16]	@ (8004940 <LL_FillBuffer+0xcc>)
 8004930:	f003 f907 	bl	8007b42 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8004934:	bf00      	nop
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	24001c04 	.word	0x24001c04
 8004940:	24001af4 	.word	0x24001af4
 8004944:	52001000 	.word	0x52001000

08004948 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8004956:	4a23      	ldr	r2, [pc, #140]	@ (80049e4 <LL_ConvertLineToRGB+0x9c>)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	015b      	lsls	r3, r3, #5
 800495c:	4413      	add	r3, r2
 800495e:	330c      	adds	r3, #12
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d102      	bne.n	800496c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004966:	2302      	movs	r3, #2
 8004968:	617b      	str	r3, [r7, #20]
    break;
 800496a:	e002      	b.n	8004972 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
    break;
 8004970:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004972:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 8004974:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004978:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800497a:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004986:	4b18      	ldr	r3, [pc, #96]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 8004988:	2200      	movs	r2, #0
 800498a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800498c:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 800498e:	22ff      	movs	r2, #255	@ 0xff
 8004990:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004992:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 800499a:	2200      	movs	r2, #0
 800499c:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 80049a0:	4a12      	ldr	r2, [pc, #72]	@ (80049ec <LL_ConvertLineToRGB+0xa4>)
 80049a2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80049a4:	4810      	ldr	r0, [pc, #64]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 80049a6:	f003 f833 	bl	8007a10 <HAL_DMA2D_Init>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d115      	bne.n	80049dc <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80049b0:	2101      	movs	r1, #1
 80049b2:	480d      	ldr	r0, [pc, #52]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 80049b4:	f003 f9ae 	bl	8007d14 <HAL_DMA2D_ConfigLayer>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10e      	bne.n	80049dc <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	2301      	movs	r3, #1
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	4807      	ldr	r0, [pc, #28]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 80049ca:	f003 f88f 	bl	8007aec <HAL_DMA2D_Start>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80049d4:	2132      	movs	r1, #50	@ 0x32
 80049d6:	4804      	ldr	r0, [pc, #16]	@ (80049e8 <LL_ConvertLineToRGB+0xa0>)
 80049d8:	f003 f8b3 	bl	8007b42 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	24001c04 	.word	0x24001c04
 80049e8:	24001af4 	.word	0x24001af4
 80049ec:	52001000 	.word	0x52001000

080049f0 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08e      	sub	sp, #56	@ 0x38
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5b      	ldr	r2, [pc, #364]	@ (8004b6c <LTDC_MspInit+0x17c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f040 80b0 	bne.w	8004b64 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004a04:	4b5a      	ldr	r3, [pc, #360]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a0a:	4a59      	ldr	r2, [pc, #356]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a14:	4b56      	ldr	r3, [pc, #344]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a22:	4b53      	ldr	r3, [pc, #332]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a28:	4a51      	ldr	r2, [pc, #324]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a32:	4b4f      	ldr	r3, [pc, #316]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004a40:	4b4b      	ldr	r3, [pc, #300]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a46:	4a4a      	ldr	r2, [pc, #296]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a50:	4b47      	ldr	r3, [pc, #284]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004a5e:	4b44      	ldr	r3, [pc, #272]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a64:	4a42      	ldr	r2, [pc, #264]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a6e:	4b40      	ldr	r3, [pc, #256]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a82:	4a3b      	ldr	r2, [pc, #236]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a8c:	4b38      	ldr	r3, [pc, #224]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a9a:	4b35      	ldr	r3, [pc, #212]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aa0:	4a33      	ldr	r2, [pc, #204]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004aa2:	f043 0308 	orr.w	r3, r3, #8
 8004aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004aaa:	4b31      	ldr	r3, [pc, #196]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8004ab8:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004aca:	230e      	movs	r3, #14
 8004acc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4827      	ldr	r0, [pc, #156]	@ (8004b74 <LTDC_MspInit+0x184>)
 8004ad6:	f003 fad5 	bl	8008084 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8004ada:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004ae0:	230e      	movs	r3, #14
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8004ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4823      	ldr	r0, [pc, #140]	@ (8004b78 <LTDC_MspInit+0x188>)
 8004aec:	f003 faca 	bl	8008084 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004af0:	23ff      	movs	r3, #255	@ 0xff
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004af4:	230e      	movs	r3, #14
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004afc:	4619      	mov	r1, r3
 8004afe:	481f      	ldr	r0, [pc, #124]	@ (8004b7c <LTDC_MspInit+0x18c>)
 8004b00:	f003 fac0 	bl	8008084 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8004b04:	f240 2302 	movw	r3, #514	@ 0x202
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004b12:	2302      	movs	r3, #2
 8004b14:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004b16:	230e      	movs	r3, #14
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8004b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4817      	ldr	r0, [pc, #92]	@ (8004b80 <LTDC_MspInit+0x190>)
 8004b22:	f003 faaf 	bl	8008084 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8004b26:	2380      	movs	r3, #128	@ 0x80
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b32:	4619      	mov	r1, r3
 8004b34:	4813      	ldr	r0, [pc, #76]	@ (8004b84 <LTDC_MspInit+0x194>)
 8004b36:	f003 faa5 	bl	8008084 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	2180      	movs	r1, #128	@ 0x80
 8004b3e:	4811      	ldr	r0, [pc, #68]	@ (8004b84 <LTDC_MspInit+0x194>)
 8004b40:	f003 fd72 	bl	8008628 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4a:	4a09      	ldr	r2, [pc, #36]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b5a:	4a05      	ldr	r2, [pc, #20]	@ (8004b70 <LTDC_MspInit+0x180>)
 8004b5c:	f023 0308 	bic.w	r3, r3, #8
 8004b60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 8004b64:	bf00      	nop
 8004b66:	3738      	adds	r7, #56	@ 0x38
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	50001000 	.word	0x50001000
 8004b70:	58024400 	.word	0x58024400
 8004b74:	58022000 	.word	0x58022000
 8004b78:	58022400 	.word	0x58022400
 8004b7c:	58022800 	.word	0x58022800
 8004b80:	58021c00 	.word	0x58021c00
 8004b84:	58020c00 	.word	0x58020c00

08004b88 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a11      	ldr	r2, [pc, #68]	@ (8004bdc <DMA2D_MspInit+0x54>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d11a      	bne.n	8004bd0 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b9a:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004b9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004ba2:	f043 0310 	orr.w	r3, r3, #16
 8004ba6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004bac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8004bb8:	4b09      	ldr	r3, [pc, #36]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bbc:	4a08      	ldr	r2, [pc, #32]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004bbe:	f043 0310 	orr.w	r3, r3, #16
 8004bc2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8004bc4:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004bc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc8:	4a05      	ldr	r2, [pc, #20]	@ (8004be0 <DMA2D_MspInit+0x58>)
 8004bca:	f023 0310 	bic.w	r3, r3, #16
 8004bce:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	52001000 	.word	0x52001000
 8004be0:	58024400 	.word	0x58024400

08004be4 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	@ 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004bec:	4b18      	ldr	r3, [pc, #96]	@ (8004c50 <TIMx_PWM_MspInit+0x6c>)
 8004bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf2:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <TIMx_PWM_MspInit+0x6c>)
 8004bf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bfc:	4b14      	ldr	r3, [pc, #80]	@ (8004c50 <TIMx_PWM_MspInit+0x6c>)
 8004bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8004c0a:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <TIMx_PWM_MspInit+0x6c>)
 8004c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c10:	4a0f      	ldr	r2, [pc, #60]	@ (8004c50 <TIMx_PWM_MspInit+0x6c>)
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <TIMx_PWM_MspInit+0x6c>)
 8004c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004c30:	2301      	movs	r3, #1
 8004c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8004c34:	2303      	movs	r3, #3
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	4804      	ldr	r0, [pc, #16]	@ (8004c54 <TIMx_PWM_MspInit+0x70>)
 8004c44:	f003 fa1e 	bl	8008084 <HAL_GPIO_Init>
}
 8004c48:	bf00      	nop
 8004c4a:	3728      	adds	r7, #40	@ 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	58024400 	.word	0x58024400
 8004c54:	58022800 	.word	0x58022800

08004c58 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a11      	ldr	r2, [pc, #68]	@ (8004ca8 <TIMx_PWM_Init+0x50>)
 8004c64:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f008 f9c8 	bl	800cffc <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ffb9 	bl	8004be4 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004c7e:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f008 f958 	bl	800cf4e <HAL_TIM_PWM_Init>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40010400 	.word	0x40010400

08004cac <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b090      	sub	sp, #64	@ 0x40
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004cc0:	f06f 0301 	mvn.w	r3, #1
 8004cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cc6:	e090      	b.n	8004dea <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8004cc8:	494a      	ldr	r1, [pc, #296]	@ (8004df4 <BSP_QSPI_Init+0x148>)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f040 8086 	bne.w	8004dea <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 8004cde:	4846      	ldr	r0, [pc, #280]	@ (8004df8 <BSP_QSPI_Init+0x14c>)
 8004ce0:	f000 f99c 	bl	800501c <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d17f      	bne.n	8004dea <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8004cea:	f107 031c 	add.w	r3, r7, #28
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd ffc4 	bl	8002c7c <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4b40      	ldr	r3, [pc, #256]	@ (8004dfc <BSP_QSPI_Init+0x150>)
 8004cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d00:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8004d02:	2340      	movs	r3, #64	@ 0x40
 8004d04:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	633b      	str	r3, [r7, #48]	@ 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	63bb      	str	r3, [r7, #56]	@ 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	e003      	b.n	8004d28 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <BSP_QSPI_Init+0x8c>
 8004d34:	2310      	movs	r3, #16
 8004d36:	e000      	b.n	8004d3a <BSP_QSPI_Init+0x8e>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	4619      	mov	r1, r3
 8004d42:	482d      	ldr	r0, [pc, #180]	@ (8004df8 <BSP_QSPI_Init+0x14c>)
 8004d44:	f000 f85c 	bl	8004e00 <MX_QSPI_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8004d4e:	f06f 0303 	mvn.w	r3, #3
 8004d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d54:	e049      	b.n	8004dea <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 faa8 	bl	80052ac <QSPI_ResetMemory>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d62:	f06f 0304 	mvn.w	r3, #4
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d68:	e03f      	b.n	8004dea <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004d6a:	4922      	ldr	r1, [pc, #136]	@ (8004df4 <BSP_QSPI_Init+0x148>)
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3301      	adds	r3, #1
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	481e      	ldr	r0, [pc, #120]	@ (8004df8 <BSP_QSPI_Init+0x14c>)
 8004d80:	f7fd ffeb 	bl	8002d5a <MT25TL01G_AutoPollingMemReady>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d8a:	f06f 0304 	mvn.w	r3, #4
 8004d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d90:	e02b      	b.n	8004dea <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004d92:	4918      	ldr	r1, [pc, #96]	@ (8004df4 <BSP_QSPI_Init+0x148>)
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	3301      	adds	r3, #1
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	4814      	ldr	r0, [pc, #80]	@ (8004df8 <BSP_QSPI_Init+0x14c>)
 8004da8:	f7fd ff8f 	bl	8002cca <MT25TL01G_Enter4BytesAddressMode>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004db2:	f06f 0304 	mvn.w	r3, #4
 8004db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db8:	e017      	b.n	8004dea <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fae2 	bl	8005384 <QSPI_DummyCyclesCfg>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004dc6:	f06f 0304 	mvn.w	r3, #4
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dcc:	e00d      	b.n	8004dea <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	7819      	ldrb	r1, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f89d 	bl	8004f18 <BSP_QSPI_ConfigFlash>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8004de4:	f06f 0304 	mvn.w	r3, #4
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3740      	adds	r7, #64	@ 0x40
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	24001c70 	.word	0x24001c70
 8004df8:	24001c24 	.word	0x24001c24
 8004dfc:	0801814c 	.word	0x0801814c

08004e00 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	@ (8004e5c <MX_QSPI_Init+0x5c>)
 8004e0e:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004e34:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f004 ffee 	bl	8009e2c <HAL_QSPI_Init>
 8004e50:	4603      	mov	r3, r0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	52005000 	.word	0x52005000

08004e60 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004e72:	f06f 0301 	mvn.w	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e045      	b.n	8004f06 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8004e7a:	4925      	ldr	r1, [pc, #148]	@ (8004f10 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	3302      	adds	r3, #2
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11d      	bne.n	8004ecc <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004e90:	491f      	ldr	r1, [pc, #124]	@ (8004f10 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	481b      	ldr	r0, [pc, #108]	@ (8004f14 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8004ea6:	f7fe f8ad 	bl	8003004 <MT25TL01G_EnableMemoryMappedModeSTR>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004eb0:	f06f 0304 	mvn.w	r3, #4
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e026      	b.n	8004f06 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8004eb8:	4915      	ldr	r1, [pc, #84]	@ (8004f10 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e01c      	b.n	8004f06 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004ecc:	4910      	ldr	r1, [pc, #64]	@ (8004f10 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3301      	adds	r3, #1
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	480c      	ldr	r0, [pc, #48]	@ (8004f14 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8004ee2:	f7fe f825 	bl	8002f30 <MT25TL01G_EnableMemoryMappedModeDTR>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004eec:	f06f 0304 	mvn.w	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e008      	b.n	8004f06 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8004ef4:	4906      	ldr	r1, [pc, #24]	@ (8004f10 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	2202      	movs	r2, #2
 8004f04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	24001c70 	.word	0x24001c70
 8004f14:	24001c24 	.word	0x24001c24

08004f18 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
 8004f24:	4613      	mov	r3, r2
 8004f26:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f32:	f06f 0301 	mvn.w	r3, #1
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e067      	b.n	800500a <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8004f3a:	4936      	ldr	r1, [pc, #216]	@ (8005014 <BSP_QSPI_ConfigFlash+0xfc>)
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d103      	bne.n	8004f56 <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8004f4e:	f06f 0319 	mvn.w	r3, #25
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	e059      	b.n	800500a <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8004f56:	78bb      	ldrb	r3, [r7, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <BSP_QSPI_ConfigFlash+0x48>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	e000      	b.n	8004f62 <BSP_QSPI_ConfigFlash+0x4a>
 8004f60:	2300      	movs	r3, #0
 8004f62:	4a2d      	ldr	r2, [pc, #180]	@ (8005018 <BSP_QSPI_ConfigFlash+0x100>)
 8004f64:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8004f66:	482c      	ldr	r0, [pc, #176]	@ (8005018 <BSP_QSPI_ConfigFlash+0x100>)
 8004f68:	f004 ff60 	bl	8009e2c <HAL_QSPI_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004f72:	f06f 0303 	mvn.w	r3, #3
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	e047      	b.n	800500a <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8004f7a:	4926      	ldr	r1, [pc, #152]	@ (8005014 <BSP_QSPI_ConfigFlash+0xfc>)
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	3301      	adds	r3, #1
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d10c      	bne.n	8004faa <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d016      	beq.n	8004fc4 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8004f96:	4820      	ldr	r0, [pc, #128]	@ (8005018 <BSP_QSPI_ConfigFlash+0x100>)
 8004f98:	f7fd ffa0 	bl	8002edc <MT25TL01G_ExitQPIMode>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fa2:	f06f 0304 	mvn.w	r3, #4
 8004fa6:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8004fa8:	e00c      	b.n	8004fc4 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d10b      	bne.n	8004fc8 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8004fb0:	4819      	ldr	r0, [pc, #100]	@ (8005018 <BSP_QSPI_ConfigFlash+0x100>)
 8004fb2:	f7fd ff69 	bl	8002e88 <MT25TL01G_EnterQPIMode>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fbc:	f06f 0304 	mvn.w	r3, #4
 8004fc0:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8004fc2:	e001      	b.n	8004fc8 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8004fc8:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11c      	bne.n	800500a <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8004fd0:	4910      	ldr	r1, [pc, #64]	@ (8005014 <BSP_QSPI_ConfigFlash+0xfc>)
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8004fe2:	490c      	ldr	r1, [pc, #48]	@ (8005014 <BSP_QSPI_ConfigFlash+0xfc>)
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8004ff6:	4907      	ldr	r1, [pc, #28]	@ (8005014 <BSP_QSPI_ConfigFlash+0xfc>)
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3302      	adds	r3, #2
 8005006:	78ba      	ldrb	r2, [r7, #2]
 8005008:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	24001c70 	.word	0x24001c70
 8005018:	24001c24 	.word	0x24001c24

0800501c <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b094      	sub	sp, #80	@ 0x50
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005024:	4b9c      	ldr	r3, [pc, #624]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005026:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800502a:	4a9b      	ldr	r2, [pc, #620]	@ (8005298 <QSPI_MspInit+0x27c>)
 800502c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005030:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8005034:	4b98      	ldr	r3, [pc, #608]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005036:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800503a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800503e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8005042:	4b95      	ldr	r3, [pc, #596]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005044:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005046:	4a94      	ldr	r2, [pc, #592]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800504c:	67d3      	str	r3, [r2, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800504e:	4b92      	ldr	r3, [pc, #584]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005052:	4a91      	ldr	r2, [pc, #580]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005054:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005058:	67d3      	str	r3, [r2, #124]	@ 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800505a:	4b8f      	ldr	r3, [pc, #572]	@ (8005298 <QSPI_MspInit+0x27c>)
 800505c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005060:	4a8d      	ldr	r2, [pc, #564]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005062:	f043 0320 	orr.w	r3, r3, #32
 8005066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800506a:	4b8b      	ldr	r3, [pc, #556]	@ (8005298 <QSPI_MspInit+0x27c>)
 800506c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005078:	4b87      	ldr	r3, [pc, #540]	@ (8005298 <QSPI_MspInit+0x27c>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800507e:	4a86      	ldr	r2, [pc, #536]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005088:	4b83      	ldr	r3, [pc, #524]	@ (8005298 <QSPI_MspInit+0x27c>)
 800508a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800508e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005092:	633b      	str	r3, [r7, #48]	@ 0x30
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005096:	4b80      	ldr	r3, [pc, #512]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800509c:	4a7e      	ldr	r2, [pc, #504]	@ (8005298 <QSPI_MspInit+0x27c>)
 800509e:	f043 0308 	orr.w	r3, r3, #8
 80050a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80050b4:	4b78      	ldr	r3, [pc, #480]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ba:	4a77      	ldr	r2, [pc, #476]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050bc:	f043 0320 	orr.w	r3, r3, #32
 80050c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050c4:	4b74      	ldr	r3, [pc, #464]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80050d2:	4b71      	ldr	r3, [pc, #452]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050d8:	4a6f      	ldr	r2, [pc, #444]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050da:	f043 0320 	orr.w	r3, r3, #32
 80050de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80050f0:	4b69      	ldr	r3, [pc, #420]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050f6:	4a68      	ldr	r2, [pc, #416]	@ (8005298 <QSPI_MspInit+0x27c>)
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005100:	4b65      	ldr	r3, [pc, #404]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800510e:	4b62      	ldr	r3, [pc, #392]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005114:	4a60      	ldr	r2, [pc, #384]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800511a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800511e:	4b5e      	ldr	r3, [pc, #376]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800512c:	4b5a      	ldr	r3, [pc, #360]	@ (8005298 <QSPI_MspInit+0x27c>)
 800512e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005132:	4a59      	ldr	r2, [pc, #356]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800513c:	4b56      	ldr	r3, [pc, #344]	@ (8005298 <QSPI_MspInit+0x27c>)
 800513e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800514a:	4b53      	ldr	r3, [pc, #332]	@ (8005298 <QSPI_MspInit+0x27c>)
 800514c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005150:	4a51      	ldr	r2, [pc, #324]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800515a:	4b4f      	ldr	r3, [pc, #316]	@ (8005298 <QSPI_MspInit+0x27c>)
 800515c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005168:	4b4b      	ldr	r3, [pc, #300]	@ (8005298 <QSPI_MspInit+0x27c>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800516e:	4a4a      	ldr	r2, [pc, #296]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005178:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <QSPI_MspInit+0x27c>)
 800517a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005186:	4b44      	ldr	r3, [pc, #272]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800518c:	4a42      	ldr	r2, [pc, #264]	@ (8005298 <QSPI_MspInit+0x27c>)
 800518e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005196:	4b40      	ldr	r3, [pc, #256]	@ (8005298 <QSPI_MspInit+0x27c>)
 8005198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80051a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80051b6:	2309      	movs	r3, #9
 80051b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80051ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80051be:	4619      	mov	r1, r3
 80051c0:	4836      	ldr	r0, [pc, #216]	@ (800529c <QSPI_MspInit+0x280>)
 80051c2:	f002 ff5f 	bl	8008084 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80051c6:	2340      	movs	r3, #64	@ 0x40
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80051ca:	2301      	movs	r3, #1
 80051cc:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80051ce:	230a      	movs	r3, #10
 80051d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80051d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80051d6:	4619      	mov	r1, r3
 80051d8:	4831      	ldr	r0, [pc, #196]	@ (80052a0 <QSPI_MspInit+0x284>)
 80051da:	f002 ff53 	bl	8008084 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80051de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80051e8:	2309      	movs	r3, #9
 80051ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80051ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80051f0:	4619      	mov	r1, r3
 80051f2:	482c      	ldr	r0, [pc, #176]	@ (80052a4 <QSPI_MspInit+0x288>)
 80051f4:	f002 ff46 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80051f8:	2304      	movs	r3, #4
 80051fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80051fc:	2309      	movs	r3, #9
 80051fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005200:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005204:	4619      	mov	r1, r3
 8005206:	4828      	ldr	r0, [pc, #160]	@ (80052a8 <QSPI_MspInit+0x28c>)
 8005208:	f002 ff3c 	bl	8008084 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800520c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005210:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005212:	230a      	movs	r3, #10
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005216:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800521a:	4619      	mov	r1, r3
 800521c:	481f      	ldr	r0, [pc, #124]	@ (800529c <QSPI_MspInit+0x280>)
 800521e:	f002 ff31 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005222:	2308      	movs	r3, #8
 8005224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005226:	2309      	movs	r3, #9
 8005228:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800522a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800522e:	4619      	mov	r1, r3
 8005230:	481d      	ldr	r0, [pc, #116]	@ (80052a8 <QSPI_MspInit+0x28c>)
 8005232:	f002 ff27 	bl	8008084 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005236:	2380      	movs	r3, #128	@ 0x80
 8005238:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800523a:	2309      	movs	r3, #9
 800523c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800523e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005242:	4619      	mov	r1, r3
 8005244:	4815      	ldr	r0, [pc, #84]	@ (800529c <QSPI_MspInit+0x280>)
 8005246:	f002 ff1d 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800524a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800524e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005250:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005254:	4619      	mov	r1, r3
 8005256:	4812      	ldr	r0, [pc, #72]	@ (80052a0 <QSPI_MspInit+0x284>)
 8005258:	f002 ff14 	bl	8008084 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800525c:	2340      	movs	r3, #64	@ 0x40
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005260:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005264:	4619      	mov	r1, r3
 8005266:	480d      	ldr	r0, [pc, #52]	@ (800529c <QSPI_MspInit+0x280>)
 8005268:	f002 ff0c 	bl	8008084 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800526c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005272:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005276:	4619      	mov	r1, r3
 8005278:	4809      	ldr	r0, [pc, #36]	@ (80052a0 <QSPI_MspInit+0x284>)
 800527a:	f002 ff03 	bl	8008084 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	210f      	movs	r1, #15
 8005282:	205c      	movs	r0, #92	@ 0x5c
 8005284:	f000 fe85 	bl	8005f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005288:	205c      	movs	r0, #92	@ 0x5c
 800528a:	f000 fe9c 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
}
 800528e:	bf00      	nop
 8005290:	3750      	adds	r7, #80	@ 0x50
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
 800529c:	58021400 	.word	0x58021400
 80052a0:	58021800 	.word	0x58021800
 80052a4:	58020c00 	.word	0x58020c00
 80052a8:	58021c00 	.word	0x58021c00

080052ac <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80052b8:	2103      	movs	r1, #3
 80052ba:	4830      	ldr	r0, [pc, #192]	@ (800537c <QSPI_ResetMemory+0xd0>)
 80052bc:	f7fd ff0a 	bl	80030d4 <MT25TL01G_ResetEnable>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 80052c6:	f06f 0304 	mvn.w	r3, #4
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e051      	b.n	8005372 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80052ce:	2103      	movs	r1, #3
 80052d0:	482a      	ldr	r0, [pc, #168]	@ (800537c <QSPI_ResetMemory+0xd0>)
 80052d2:	f7fd ff31 	bl	8003138 <MT25TL01G_ResetMemory>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80052dc:	f06f 0304 	mvn.w	r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e046      	b.n	8005372 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80052e4:	4926      	ldr	r1, [pc, #152]	@ (8005380 <QSPI_ResetMemory+0xd4>)
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3301      	adds	r3, #1
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	4619      	mov	r1, r3
 80052f8:	4820      	ldr	r0, [pc, #128]	@ (800537c <QSPI_ResetMemory+0xd0>)
 80052fa:	f7fd fd2e 	bl	8002d5a <MT25TL01G_AutoPollingMemReady>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005304:	f06f 0304 	mvn.w	r3, #4
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e032      	b.n	8005372 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800530c:	2100      	movs	r1, #0
 800530e:	481b      	ldr	r0, [pc, #108]	@ (800537c <QSPI_ResetMemory+0xd0>)
 8005310:	f7fd fee0 	bl	80030d4 <MT25TL01G_ResetEnable>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800531a:	f06f 0304 	mvn.w	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e027      	b.n	8005372 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005322:	2100      	movs	r1, #0
 8005324:	4815      	ldr	r0, [pc, #84]	@ (800537c <QSPI_ResetMemory+0xd0>)
 8005326:	f7fd ff07 	bl	8003138 <MT25TL01G_ResetMemory>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005330:	f06f 0304 	mvn.w	r3, #4
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e01c      	b.n	8005372 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005338:	4911      	ldr	r1, [pc, #68]	@ (8005380 <QSPI_ResetMemory+0xd4>)
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800534a:	490d      	ldr	r1, [pc, #52]	@ (8005380 <QSPI_ResetMemory+0xd4>)
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3301      	adds	r3, #1
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800535e:	4908      	ldr	r1, [pc, #32]	@ (8005380 <QSPI_ResetMemory+0xd4>)
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3302      	adds	r3, #2
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	24001c24 	.word	0x24001c24
 8005380:	24001c70 	.word	0x24001c70

08005384 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b092      	sub	sp, #72	@ 0x48
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800538c:	2300      	movs	r3, #0
 800538e:	647b      	str	r3, [r7, #68]	@ 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8005390:	2300      	movs	r3, #0
 8005392:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005394:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800539a:	2385      	movs	r3, #133	@ 0x85
 800539c:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800539e:	2300      	movs	r3, #0
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80053a6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80053aa:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 80053b0:	2302      	movs	r3, #2
 80053b2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053b8:	2300      	movs	r3, #0
 80053ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053bc:	2300      	movs	r3, #0
 80053be:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053c0:	f107 030c 	add.w	r3, r7, #12
 80053c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c8:	4619      	mov	r1, r3
 80053ca:	482b      	ldr	r0, [pc, #172]	@ (8005478 <QSPI_DummyCyclesCfg+0xf4>)
 80053cc:	f004 fdac 	bl	8009f28 <HAL_QSPI_Command>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80053d6:	f06f 0304 	mvn.w	r3, #4
 80053da:	e048      	b.n	800546e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053dc:	f107 030a 	add.w	r3, r7, #10
 80053e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e4:	4619      	mov	r1, r3
 80053e6:	4824      	ldr	r0, [pc, #144]	@ (8005478 <QSPI_DummyCyclesCfg+0xf4>)
 80053e8:	f004 fe8e 	bl	800a108 <HAL_QSPI_Receive>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80053f2:	f06f 0304 	mvn.w	r3, #4
 80053f6:	e03a      	b.n	800546e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80053f8:	4920      	ldr	r1, [pc, #128]	@ (800547c <QSPI_DummyCyclesCfg+0xf8>)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	3301      	adds	r3, #1
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	481a      	ldr	r0, [pc, #104]	@ (8005478 <QSPI_DummyCyclesCfg+0xf4>)
 800540e:	f7fd fce0 	bl	8002dd2 <MT25TL01G_WriteEnable>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8005418:	f06f 0304 	mvn.w	r3, #4
 800541c:	e027      	b.n	800546e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800541e:	2381      	movs	r3, #129	@ 0x81
 8005420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005422:	897a      	ldrh	r2, [r7, #10]
 8005424:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8005428:	4013      	ands	r3, r2
 800542a:	b29a      	uxth	r2, r3
 800542c:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <QSPI_DummyCyclesCfg+0xfc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005434:	f107 030c 	add.w	r3, r7, #12
 8005438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543c:	4619      	mov	r1, r3
 800543e:	480e      	ldr	r0, [pc, #56]	@ (8005478 <QSPI_DummyCyclesCfg+0xf4>)
 8005440:	f004 fd72 	bl	8009f28 <HAL_QSPI_Command>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800544a:	f06f 0304 	mvn.w	r3, #4
 800544e:	e00e      	b.n	800546e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005450:	f107 030a 	add.w	r3, r7, #10
 8005454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005458:	4619      	mov	r1, r3
 800545a:	4807      	ldr	r0, [pc, #28]	@ (8005478 <QSPI_DummyCyclesCfg+0xf4>)
 800545c:	f004 fdc2 	bl	8009fe4 <HAL_QSPI_Transmit>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8005466:	f06f 0304 	mvn.w	r3, #4
 800546a:	e000      	b.n	800546e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800546c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800546e:	4618      	mov	r0, r3
 8005470:	3748      	adds	r7, #72	@ 0x48
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	24001c24 	.word	0x24001c24
 800547c:	24001c70 	.word	0x24001c70
 8005480:	ffff8080 	.word	0xffff8080

08005484 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8005496:	f06f 0301 	mvn.w	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e044      	b.n	8005528 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2234      	movs	r2, #52	@ 0x34
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	4a23      	ldr	r2, [pc, #140]	@ (8005534 <BSP_SDRAM_Init+0xb0>)
 80054a8:	4413      	add	r3, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f8a8 	bl	8005600 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2234      	movs	r2, #52	@ 0x34
 80054b4:	fb02 f303 	mul.w	r3, r2, r3
 80054b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <BSP_SDRAM_Init+0xb0>)
 80054ba:	4413      	add	r3, r2
 80054bc:	2210      	movs	r2, #16
 80054be:	2104      	movs	r1, #4
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f83b 	bl	800553c <MX_SDRAM_BANK2_Init>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80054cc:	f04f 33ff 	mov.w	r3, #4294967295
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e029      	b.n	8005528 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80054d4:	4b18      	ldr	r3, [pc, #96]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054d6:	2208      	movs	r2, #8
 80054d8:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80054da:	4b17      	ldr	r3, [pc, #92]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054dc:	2203      	movs	r2, #3
 80054de:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80054e0:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054e2:	f240 6203 	movw	r2, #1539	@ 0x603
 80054e6:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80054e8:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80054f4:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054f6:	2230      	movs	r2, #48	@ 0x30
 80054f8:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8005500:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 8005502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005506:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2234      	movs	r2, #52	@ 0x34
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	4a08      	ldr	r2, [pc, #32]	@ (8005534 <BSP_SDRAM_Init+0xb0>)
 8005512:	4413      	add	r3, r2
 8005514:	4908      	ldr	r1, [pc, #32]	@ (8005538 <BSP_SDRAM_Init+0xb4>)
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd fe40 	bl	800319c <MT48LC4M32B2_Init>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005522:	f06f 0304 	mvn.w	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8005528:	68fb      	ldr	r3, [r7, #12]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	24001c7c 	.word	0x24001c7c
 8005538:	24001cb0 	.word	0x24001cb0

0800553c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08c      	sub	sp, #48	@ 0x30
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8005548:	4b20      	ldr	r3, [pc, #128]	@ (80055cc <MX_SDRAM_BANK2_Init+0x90>)
 800554a:	4a21      	ldr	r2, [pc, #132]	@ (80055d0 <MX_SDRAM_BANK2_Init+0x94>)
 800554c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005566:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <MX_SDRAM_BANK2_Init+0x90>)
 8005568:	2240      	movs	r2, #64	@ 0x40
 800556a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005572:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005580:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005588:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8005590:	2302      	movs	r3, #2
 8005592:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005594:	2307      	movs	r3, #7
 8005596:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8005598:	2304      	movs	r3, #4
 800559a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800559c:	2307      	movs	r3, #7
 800559e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80055a0:	2302      	movs	r3, #2
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 80055a4:	2302      	movs	r3, #2
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 80055a8:	2302      	movs	r3, #2
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	4619      	mov	r1, r3
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f007 fc28 	bl	800ce08 <HAL_SDRAM_Init>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3730      	adds	r7, #48	@ 0x30
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	24001c7c 	.word	0x24001c7c
 80055d0:	52004140 	.word	0x52004140

080055d4 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 80055dc:	4a07      	ldr	r2, [pc, #28]	@ (80055fc <BSP_SDRAM_IRQHandler+0x28>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2134      	movs	r1, #52	@ 0x34
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	3330      	adds	r3, #48	@ 0x30
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f004 f9f7 	bl	80099e0 <HAL_MDMA_IRQHandler>
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	24001c7c 	.word	0x24001c7c

08005600 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	@ 0x38
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005608:	4b73      	ldr	r3, [pc, #460]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 800560a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800560e:	4a72      	ldr	r2, [pc, #456]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005610:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005614:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8005618:	4b6f      	ldr	r3, [pc, #444]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 800561a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800561e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005622:	623b      	str	r3, [r7, #32]
 8005624:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8005626:	4b6c      	ldr	r3, [pc, #432]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005628:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800562c:	4a6a      	ldr	r2, [pc, #424]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8005636:	4b68      	ldr	r3, [pc, #416]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005638:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005644:	4b64      	ldr	r3, [pc, #400]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800564a:	4a63      	ldr	r2, [pc, #396]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005654:	4b60      	ldr	r3, [pc, #384]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005662:	4b5d      	ldr	r3, [pc, #372]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005668:	4a5b      	ldr	r2, [pc, #364]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 800566a:	f043 0310 	orr.w	r3, r3, #16
 800566e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005672:	4b59      	ldr	r3, [pc, #356]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005680:	4b55      	ldr	r3, [pc, #340]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005686:	4a54      	ldr	r2, [pc, #336]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005690:	4b51      	ldr	r3, [pc, #324]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 8005692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800569e:	4b4e      	ldr	r3, [pc, #312]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 80056a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056a4:	4a4c      	ldr	r2, [pc, #304]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 80056a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056ae:	4b4a      	ldr	r3, [pc, #296]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 80056b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056bc:	4b46      	ldr	r3, [pc, #280]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 80056be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056c2:	4a45      	ldr	r2, [pc, #276]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 80056c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056cc:	4b42      	ldr	r3, [pc, #264]	@ (80057d8 <SDRAM_MspInit+0x1d8>)
 80056ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056da:	2302      	movs	r3, #2
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056de:	2301      	movs	r3, #1
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e2:	2303      	movs	r3, #3
 80056e4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056e6:	230c      	movs	r3, #12
 80056e8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80056ea:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056f4:	4619      	mov	r1, r3
 80056f6:	4839      	ldr	r0, [pc, #228]	@ (80057dc <SDRAM_MspInit+0x1dc>)
 80056f8:	f002 fcc4 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80056fc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005706:	4619      	mov	r1, r3
 8005708:	4835      	ldr	r0, [pc, #212]	@ (80057e0 <SDRAM_MspInit+0x1e0>)
 800570a:	f002 fcbb 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800570e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005718:	4619      	mov	r1, r3
 800571a:	4832      	ldr	r0, [pc, #200]	@ (80057e4 <SDRAM_MspInit+0x1e4>)
 800571c:	f002 fcb2 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8005720:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800572a:	4619      	mov	r1, r3
 800572c:	482e      	ldr	r0, [pc, #184]	@ (80057e8 <SDRAM_MspInit+0x1e8>)
 800572e:	f002 fca9 	bl	8008084 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8005732:	23e0      	movs	r3, #224	@ 0xe0
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800573a:	4619      	mov	r1, r3
 800573c:	482b      	ldr	r0, [pc, #172]	@ (80057ec <SDRAM_MspInit+0x1ec>)
 800573e:	f002 fca1 	bl	8008084 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8005742:	4b2b      	ldr	r3, [pc, #172]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005748:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800574a:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 800574c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005750:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005754:	2280      	movs	r2, #128	@ 0x80
 8005756:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005758:	4b25      	ldr	r3, [pc, #148]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 800575a:	2200      	movs	r2, #0
 800575c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800575e:	4b24      	ldr	r3, [pc, #144]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005760:	f240 2202 	movw	r2, #514	@ 0x202
 8005764:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8005766:	4b22      	ldr	r3, [pc, #136]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005768:	f640 0208 	movw	r2, #2056	@ 0x808
 800576c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800576e:	4b20      	ldr	r3, [pc, #128]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005770:	2220      	movs	r2, #32
 8005772:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8005774:	4b1e      	ldr	r3, [pc, #120]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005776:	2280      	movs	r2, #128	@ 0x80
 8005778:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800577a:	4b1d      	ldr	r3, [pc, #116]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 800577c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8005782:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005784:	2200      	movs	r2, #0
 8005786:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8005788:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800578e:	4b18      	ldr	r3, [pc, #96]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005790:	2280      	movs	r2, #128	@ 0x80
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8005794:	4b16      	ldr	r3, [pc, #88]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 8005796:	2200      	movs	r2, #0
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800579a:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 800579c:	2200      	movs	r2, #0
 800579e:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80057a0:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 80057a2:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <SDRAM_MspInit+0x1f4>)
 80057a4:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80057a6:	4b14      	ldr	r3, [pc, #80]	@ (80057f8 <SDRAM_MspInit+0x1f8>)
 80057a8:	4a11      	ldr	r2, [pc, #68]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80057ac:	4b10      	ldr	r3, [pc, #64]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 80057ae:	4a12      	ldr	r2, [pc, #72]	@ (80057f8 <SDRAM_MspInit+0x1f8>)
 80057b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80057b2:	480f      	ldr	r0, [pc, #60]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 80057b4:	f004 f8bc 	bl	8009930 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80057b8:	480d      	ldr	r0, [pc, #52]	@ (80057f0 <SDRAM_MspInit+0x1f0>)
 80057ba:	f004 f86d 	bl	8009898 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80057be:	2200      	movs	r2, #0
 80057c0:	210f      	movs	r1, #15
 80057c2:	207a      	movs	r0, #122	@ 0x7a
 80057c4:	f000 fbe5 	bl	8005f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80057c8:	207a      	movs	r0, #122	@ 0x7a
 80057ca:	f000 fbfc 	bl	8005fc6 <HAL_NVIC_EnableIRQ>
}
 80057ce:	bf00      	nop
 80057d0:	3738      	adds	r7, #56	@ 0x38
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	58024400 	.word	0x58024400
 80057dc:	58020c00 	.word	0x58020c00
 80057e0:	58021000 	.word	0x58021000
 80057e4:	58021400 	.word	0x58021400
 80057e8:	58021800 	.word	0x58021800
 80057ec:	58021c00 	.word	0x58021c00
 80057f0:	24001cd0 	.word	0x24001cd0
 80057f4:	52000040 	.word	0x52000040
 80057f8:	24001c7c 	.word	0x24001c7c

080057fc <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d11c      	bne.n	800584a <BSP_TS_Init+0x4e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d018      	beq.n	800584a <BSP_TS_Init+0x4e>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8005820:	d813      	bhi.n	800584a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00f      	beq.n	800584a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8005832:	d80a      	bhi.n	800584a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	428b      	cmp	r3, r1
 8005842:	bf28      	it	cs
 8005844:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005846:	429a      	cmp	r2, r3
 8005848:	d903      	bls.n	8005852 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800584a:	f06f 0301 	mvn.w	r3, #1
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e06e      	b.n	8005930 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f98c 	bl	8005b70 <FT5336_Probe>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e064      	b.n	8005930 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4934      	ldr	r1, [pc, #208]	@ (800593c <BSP_TS_Init+0x140>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	019b      	lsls	r3, r3, #6
 8005870:	440b      	add	r3, r1
 8005872:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	4930      	ldr	r1, [pc, #192]	@ (800593c <BSP_TS_Init+0x140>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	440b      	add	r3, r1
 8005880:	3304      	adds	r3, #4
 8005882:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	492c      	ldr	r1, [pc, #176]	@ (800593c <BSP_TS_Init+0x140>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	440b      	add	r3, r1
 8005890:	3308      	adds	r3, #8
 8005892:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	4928      	ldr	r1, [pc, #160]	@ (800593c <BSP_TS_Init+0x140>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	440b      	add	r3, r1
 80058a0:	330c      	adds	r3, #12
 80058a2:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80058a4:	4b26      	ldr	r3, [pc, #152]	@ (8005940 <BSP_TS_Init+0x144>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	4926      	ldr	r1, [pc, #152]	@ (8005944 <BSP_TS_Init+0x148>)
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058b2:	f107 010c 	add.w	r1, r7, #12
 80058b6:	4610      	mov	r0, r2
 80058b8:	4798      	blx	r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da03      	bge.n	80058c8 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058c0:	f06f 0304 	mvn.w	r3, #4
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e033      	b.n	8005930 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	491c      	ldr	r1, [pc, #112]	@ (800593c <BSP_TS_Init+0x140>)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	019b      	lsls	r3, r3, #6
 80058d0:	440b      	add	r3, r1
 80058d2:	3310      	adds	r3, #16
 80058d4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4918      	ldr	r1, [pc, #96]	@ (800593c <BSP_TS_Init+0x140>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	440b      	add	r3, r1
 80058e0:	3314      	adds	r3, #20
 80058e2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e01f      	b.n	800592a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	4811      	ldr	r0, [pc, #68]	@ (800593c <BSP_TS_Init+0x140>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0119      	lsls	r1, r3, #4
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	440b      	add	r3, r1
 8005900:	3306      	adds	r3, #6
 8005902:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	4413      	add	r3, r2
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	480a      	ldr	r0, [pc, #40]	@ (800593c <BSP_TS_Init+0x140>)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0119      	lsls	r1, r3, #4
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	440b      	add	r3, r1
 800591c:	330a      	adds	r3, #10
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4403      	add	r3, r0
 8005922:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	3301      	adds	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d9dc      	bls.n	80058ea <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8005930:	69fb      	ldr	r3, [r7, #28]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	24001d44 	.word	0x24001d44
 8005940:	24001d3c 	.word	0x24001d3c
 8005944:	24001d40 	.word	0x24001d40

08005948 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	@ 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800595c:	f06f 0301 	mvn.w	r3, #1
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
 8005962:	e0f9      	b.n	8005b58 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005964:	4b7f      	ldr	r3, [pc, #508]	@ (8005b64 <BSP_TS_GetState+0x21c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	497f      	ldr	r1, [pc, #508]	@ (8005b68 <BSP_TS_GetState+0x220>)
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005972:	f107 0108 	add.w	r1, r7, #8
 8005976:	4610      	mov	r0, r2
 8005978:	4798      	blx	r3
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	da03      	bge.n	8005988 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005980:	f06f 0304 	mvn.w	r3, #4
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
 8005986:	e0e7      	b.n	8005b58 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80d1 	beq.w	8005b32 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005998:	4a74      	ldr	r2, [pc, #464]	@ (8005b6c <BSP_TS_GetState+0x224>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	4413      	add	r3, r2
 80059a0:	3308      	adds	r3, #8
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80059b4:	4a6d      	ldr	r2, [pc, #436]	@ (8005b6c <BSP_TS_GetState+0x224>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	019b      	lsls	r3, r3, #6
 80059ba:	4413      	add	r3, r2
 80059bc:	3308      	adds	r3, #8
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80059c8:	4a68      	ldr	r2, [pc, #416]	@ (8005b6c <BSP_TS_GetState+0x224>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	019b      	lsls	r3, r3, #6
 80059ce:	4413      	add	r3, r2
 80059d0:	3310      	adds	r3, #16
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80059dc:	4a63      	ldr	r2, [pc, #396]	@ (8005b6c <BSP_TS_GetState+0x224>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	4413      	add	r3, r2
 80059e4:	3308      	adds	r3, #8
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80059f0:	4a5e      	ldr	r2, [pc, #376]	@ (8005b6c <BSP_TS_GetState+0x224>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	4413      	add	r3, r2
 80059f8:	3314      	adds	r3, #20
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005a02:	4a5a      	ldr	r2, [pc, #360]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	019b      	lsls	r3, r3, #6
 8005a08:	4413      	add	r3, r2
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	fb03 f202 	mul.w	r2, r3, r2
 8005a12:	4956      	ldr	r1, [pc, #344]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	440b      	add	r3, r1
 8005a1a:	3310      	adds	r3, #16
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005a26:	4a51      	ldr	r2, [pc, #324]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	019b      	lsls	r3, r3, #6
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3304      	adds	r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	fb03 f202 	mul.w	r2, r3, r2
 8005a38:	494c      	ldr	r1, [pc, #304]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	440b      	add	r3, r1
 8005a40:	3314      	adds	r3, #20
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4945      	ldr	r1, [pc, #276]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	019b      	lsls	r3, r3, #6
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3318      	adds	r3, #24
 8005a60:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d909      	bls.n	8005a7a <BSP_TS_GetState+0x132>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4940      	ldr	r1, [pc, #256]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	019b      	lsls	r3, r3, #6
 8005a70:	440b      	add	r3, r1
 8005a72:	3318      	adds	r3, #24
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	e008      	b.n	8005a8c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8005a7a:	4a3c      	ldr	r2, [pc, #240]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	019b      	lsls	r3, r3, #6
 8005a80:	4413      	add	r3, r2
 8005a82:	3318      	adds	r3, #24
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005a8a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005a8c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	4936      	ldr	r1, [pc, #216]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	019b      	lsls	r3, r3, #6
 8005a98:	440b      	add	r3, r1
 8005a9a:	332c      	adds	r3, #44	@ 0x2c
 8005a9c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d909      	bls.n	8005ab6 <BSP_TS_GetState+0x16e>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	4931      	ldr	r1, [pc, #196]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	019b      	lsls	r3, r3, #6
 8005aac:	440b      	add	r3, r1
 8005aae:	332c      	adds	r3, #44	@ 0x2c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	e008      	b.n	8005ac8 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8005ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	019b      	lsls	r3, r3, #6
 8005abc:	4413      	add	r3, r2
 8005abe:	332c      	adds	r3, #44	@ 0x2c
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005ac6:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005ac8:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005aca:	4a28      	ldr	r2, [pc, #160]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	019b      	lsls	r3, r3, #6
 8005ad0:	4413      	add	r3, r2
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d808      	bhi.n	8005aee <BSP_TS_GetState+0x1a6>
 8005adc:	4a23      	ldr	r2, [pc, #140]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	4413      	add	r3, r2
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d910      	bls.n	8005b10 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	491e      	ldr	r1, [pc, #120]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	019b      	lsls	r3, r3, #6
 8005af8:	440b      	add	r3, r1
 8005afa:	3318      	adds	r3, #24
 8005afc:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	491a      	ldr	r1, [pc, #104]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	019b      	lsls	r3, r3, #6
 8005b08:	440b      	add	r3, r1
 8005b0a:	332c      	adds	r3, #44	@ 0x2c
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e023      	b.n	8005b58 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8005b10:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	4413      	add	r3, r2
 8005b18:	3318      	adds	r3, #24
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005b20:	4a12      	ldr	r2, [pc, #72]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	019b      	lsls	r3, r3, #6
 8005b26:	4413      	add	r3, r2
 8005b28:	332c      	adds	r3, #44	@ 0x2c
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	e012      	b.n	8005b58 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8005b38:	4a0c      	ldr	r2, [pc, #48]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	019b      	lsls	r3, r3, #6
 8005b3e:	4413      	add	r3, r2
 8005b40:	3318      	adds	r3, #24
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005b48:	4a08      	ldr	r2, [pc, #32]	@ (8005b6c <BSP_TS_GetState+0x224>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	4413      	add	r3, r2
 8005b50:	332c      	adds	r3, #44	@ 0x2c
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3728      	adds	r7, #40	@ 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	24001d3c 	.word	0x24001d3c
 8005b68:	24001d40 	.word	0x24001d40
 8005b6c:	24001d44 	.word	0x24001d44

08005b70 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	@ 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005b80:	2370      	movs	r3, #112	@ 0x70
 8005b82:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8005b84:	4b23      	ldr	r3, [pc, #140]	@ (8005c14 <FT5336_Probe+0xa4>)
 8005b86:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005b88:	4b23      	ldr	r3, [pc, #140]	@ (8005c18 <FT5336_Probe+0xa8>)
 8005b8a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005b8c:	4b23      	ldr	r3, [pc, #140]	@ (8005c1c <FT5336_Probe+0xac>)
 8005b8e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005b90:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <FT5336_Probe+0xb0>)
 8005b92:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8005b94:	4b23      	ldr	r3, [pc, #140]	@ (8005c24 <FT5336_Probe+0xb4>)
 8005b96:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4822      	ldr	r0, [pc, #136]	@ (8005c28 <FT5336_Probe+0xb8>)
 8005ba0:	f7fc fd0c 	bl	80025bc <FT5336_RegisterBusIO>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8005baa:	f06f 0307 	mvn.w	r3, #7
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	e02a      	b.n	8005c08 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	481b      	ldr	r0, [pc, #108]	@ (8005c28 <FT5336_Probe+0xb8>)
 8005bba:	f7fc fdf9 	bl	80027b0 <FT5336_ReadID>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bc4:	f06f 0304 	mvn.w	r3, #4
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bca:	e01d      	b.n	8005c08 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b51      	cmp	r3, #81	@ 0x51
 8005bd0:	d003      	beq.n	8005bda <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005bd2:	f06f 0306 	mvn.w	r3, #6
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd8:	e016      	b.n	8005c08 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8005bda:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <FT5336_Probe+0xbc>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4912      	ldr	r1, [pc, #72]	@ (8005c28 <FT5336_Probe+0xb8>)
 8005be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8005be4:	4b12      	ldr	r3, [pc, #72]	@ (8005c30 <FT5336_Probe+0xc0>)
 8005be6:	4a13      	ldr	r2, [pc, #76]	@ (8005c34 <FT5336_Probe+0xc4>)
 8005be8:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8005bea:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <FT5336_Probe+0xc0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	490e      	ldr	r1, [pc, #56]	@ (8005c2c <FT5336_Probe+0xbc>)
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c02:	f06f 0304 	mvn.w	r3, #4
 8005c06:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3728      	adds	r7, #40	@ 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	08003649 	.word	0x08003649
 8005c18:	080036bd 	.word	0x080036bd
 8005c1c:	080037e5 	.word	0x080037e5
 8005c20:	08003789 	.word	0x08003789
 8005c24:	08003841 	.word	0x08003841
 8005c28:	24001d84 	.word	0x24001d84
 8005c2c:	24001d40 	.word	0x24001d40
 8005c30:	24001d3c 	.word	0x24001d3c
 8005c34:	24000018 	.word	0x24000018

08005c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c3e:	2003      	movs	r0, #3
 8005c40:	f000 f99c 	bl	8005f7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c44:	f005 fbb2 	bl	800b3ac <HAL_RCC_GetSysClockFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <HAL_Init+0x68>)
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	4913      	ldr	r1, [pc, #76]	@ (8005ca4 <HAL_Init+0x6c>)
 8005c56:	5ccb      	ldrb	r3, [r1, r3]
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca0 <HAL_Init+0x68>)
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca4 <HAL_Init+0x6c>)
 8005c6c:	5cd3      	ldrb	r3, [r2, r3]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
 8005c78:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca8 <HAL_Init+0x70>)
 8005c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8005cac <HAL_Init+0x74>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c82:	200f      	movs	r0, #15
 8005c84:	f000 f814 	bl	8005cb0 <HAL_InitTick>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e002      	b.n	8005c98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c92:	f7fc fae3 	bl	800225c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	08018080 	.word	0x08018080
 8005ca8:	24000014 	.word	0x24000014
 8005cac:	24000010 	.word	0x24000010

08005cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005cb8:	4b15      	ldr	r3, [pc, #84]	@ (8005d10 <HAL_InitTick+0x60>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e021      	b.n	8005d08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005cc4:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <HAL_InitTick+0x64>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <HAL_InitTick+0x60>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f981 	bl	8005fe2 <HAL_SYSTICK_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e00e      	b.n	8005d08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d80a      	bhi.n	8005d06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	f000 f94b 	bl	8005f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cfc:	4a06      	ldr	r2, [pc, #24]	@ (8005d18 <HAL_InitTick+0x68>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	24000060 	.word	0x24000060
 8005d14:	24000010 	.word	0x24000010
 8005d18:	2400005c 	.word	0x2400005c

08005d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <HAL_IncTick+0x20>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_IncTick+0x24>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	4a04      	ldr	r2, [pc, #16]	@ (8005d40 <HAL_IncTick+0x24>)
 8005d2e:	6013      	str	r3, [r2, #0]
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	24000060 	.word	0x24000060
 8005d40:	24001dac 	.word	0x24001dac

08005d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return uwTick;
 8005d48:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <HAL_GetTick+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	24001dac 	.word	0x24001dac

08005d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d64:	f7ff ffee 	bl	8005d44 <HAL_GetTick>
 8005d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d005      	beq.n	8005d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <HAL_Delay+0x44>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d82:	bf00      	nop
 8005d84:	f7ff ffde 	bl	8005d44 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d8f7      	bhi.n	8005d84 <HAL_Delay+0x28>
  {
  }
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	24000060 	.word	0x24000060

08005da4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005da8:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <HAL_GetREVID+0x14>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	0c1b      	lsrs	r3, r3, #16
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	5c001000 	.word	0x5c001000

08005dbc <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <HAL_EnableCompensationCell+0x1c>)
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	4a04      	ldr	r2, [pc, #16]	@ (8005dd8 <HAL_EnableCompensationCell+0x1c>)
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	6213      	str	r3, [r2, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	58000400 	.word	0x58000400

08005ddc <__NVIC_SetPriorityGrouping>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <__NVIC_SetPriorityGrouping+0x40>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e04:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <__NVIC_SetPriorityGrouping+0x44>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e0a:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <__NVIC_SetPriorityGrouping+0x40>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	60d3      	str	r3, [r2, #12]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000ed00 	.word	0xe000ed00
 8005e20:	05fa0000 	.word	0x05fa0000

08005e24 <__NVIC_GetPriorityGrouping>:
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e28:	4b04      	ldr	r3, [pc, #16]	@ (8005e3c <__NVIC_GetPriorityGrouping+0x18>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	f003 0307 	and.w	r3, r3, #7
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	e000ed00 	.word	0xe000ed00

08005e40 <__NVIC_EnableIRQ>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	db0b      	blt.n	8005e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	f003 021f 	and.w	r2, r3, #31
 8005e58:	4907      	ldr	r1, [pc, #28]	@ (8005e78 <__NVIC_EnableIRQ+0x38>)
 8005e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2001      	movs	r0, #1
 8005e62:	fa00 f202 	lsl.w	r2, r0, r2
 8005e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	e000e100 	.word	0xe000e100

08005e7c <__NVIC_SetPriority>:
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	6039      	str	r1, [r7, #0]
 8005e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	db0a      	blt.n	8005ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	490c      	ldr	r1, [pc, #48]	@ (8005ec8 <__NVIC_SetPriority+0x4c>)
 8005e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e9a:	0112      	lsls	r2, r2, #4
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005ea4:	e00a      	b.n	8005ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4908      	ldr	r1, [pc, #32]	@ (8005ecc <__NVIC_SetPriority+0x50>)
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	3b04      	subs	r3, #4
 8005eb4:	0112      	lsls	r2, r2, #4
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	440b      	add	r3, r1
 8005eba:	761a      	strb	r2, [r3, #24]
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000e100 	.word	0xe000e100
 8005ecc:	e000ed00 	.word	0xe000ed00

08005ed0 <NVIC_EncodePriority>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b089      	sub	sp, #36	@ 0x24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f1c3 0307 	rsb	r3, r3, #7
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	bf28      	it	cs
 8005eee:	2304      	movcs	r3, #4
 8005ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	2b06      	cmp	r3, #6
 8005ef8:	d902      	bls.n	8005f00 <NVIC_EncodePriority+0x30>
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3b03      	subs	r3, #3
 8005efe:	e000      	b.n	8005f02 <NVIC_EncodePriority+0x32>
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f04:	f04f 32ff 	mov.w	r2, #4294967295
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43da      	mvns	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	401a      	ands	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f18:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f22:	43d9      	mvns	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f28:	4313      	orrs	r3, r2
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3724      	adds	r7, #36	@ 0x24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f48:	d301      	bcc.n	8005f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e00f      	b.n	8005f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f78 <SysTick_Config+0x40>)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f56:	210f      	movs	r1, #15
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	f7ff ff8e 	bl	8005e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <SysTick_Config+0x40>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f66:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <SysTick_Config+0x40>)
 8005f68:	2207      	movs	r2, #7
 8005f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	e000e010 	.word	0xe000e010

08005f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff ff29 	bl	8005ddc <__NVIC_SetPriorityGrouping>
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	4603      	mov	r3, r0
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa0:	f7ff ff40 	bl	8005e24 <__NVIC_GetPriorityGrouping>
 8005fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f7ff ff90 	bl	8005ed0 <NVIC_EncodePriority>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ff5f 	bl	8005e7c <__NVIC_SetPriority>
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	4603      	mov	r3, r0
 8005fce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff33 	bl	8005e40 <__NVIC_EnableIRQ>
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff ffa4 	bl	8005f38 <SysTick_Config>
 8005ff0:	4603      	mov	r3, r0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006000:	f3bf 8f5f 	dmb	sy
}
 8006004:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006006:	4b07      	ldr	r3, [pc, #28]	@ (8006024 <HAL_MPU_Disable+0x28>)
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	4a06      	ldr	r2, [pc, #24]	@ (8006024 <HAL_MPU_Disable+0x28>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006010:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006012:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <HAL_MPU_Disable+0x2c>)
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
}
 8006018:	bf00      	nop
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	e000ed00 	.word	0xe000ed00
 8006028:	e000ed90 	.word	0xe000ed90

0800602c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006034:	4a0b      	ldr	r2, [pc, #44]	@ (8006064 <HAL_MPU_Enable+0x38>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800603e:	4b0a      	ldr	r3, [pc, #40]	@ (8006068 <HAL_MPU_Enable+0x3c>)
 8006040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006042:	4a09      	ldr	r2, [pc, #36]	@ (8006068 <HAL_MPU_Enable+0x3c>)
 8006044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006048:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800604a:	f3bf 8f4f 	dsb	sy
}
 800604e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006050:	f3bf 8f6f 	isb	sy
}
 8006054:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	e000ed90 	.word	0xe000ed90
 8006068:	e000ed00 	.word	0xe000ed00

0800606c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	785a      	ldrb	r2, [r3, #1]
 8006078:	4b1d      	ldr	r3, [pc, #116]	@ (80060f0 <HAL_MPU_ConfigRegion+0x84>)
 800607a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d029      	beq.n	80060d8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006084:	4a1a      	ldr	r2, [pc, #104]	@ (80060f0 <HAL_MPU_ConfigRegion+0x84>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7b1b      	ldrb	r3, [r3, #12]
 8006090:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7adb      	ldrb	r3, [r3, #11]
 8006096:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006098:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7a9b      	ldrb	r3, [r3, #10]
 800609e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80060a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7b5b      	ldrb	r3, [r3, #13]
 80060a6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80060a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7b9b      	ldrb	r3, [r3, #14]
 80060ae:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7bdb      	ldrb	r3, [r3, #15]
 80060b6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7a5b      	ldrb	r3, [r3, #9]
 80060be:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7a1b      	ldrb	r3, [r3, #8]
 80060c6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060c8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	7812      	ldrb	r2, [r2, #0]
 80060ce:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060d0:	4a07      	ldr	r2, [pc, #28]	@ (80060f0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060d2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060d4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80060d6:	e005      	b.n	80060e4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <HAL_MPU_ConfigRegion+0x84>)
 80060da:	2200      	movs	r2, #0
 80060dc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80060de:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <HAL_MPU_ConfigRegion+0x84>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	611a      	str	r2, [r3, #16]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	e000ed90 	.word	0xe000ed90

080060f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80060fc:	f7ff fe22 	bl	8005d44 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e2dc      	b.n	80066c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d008      	beq.n	800612a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2280      	movs	r2, #128	@ 0x80
 800611c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e2cd      	b.n	80066c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a76      	ldr	r2, [pc, #472]	@ (8006308 <HAL_DMA_Abort+0x214>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d04a      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a74      	ldr	r2, [pc, #464]	@ (800630c <HAL_DMA_Abort+0x218>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d045      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a73      	ldr	r2, [pc, #460]	@ (8006310 <HAL_DMA_Abort+0x21c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d040      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a71      	ldr	r2, [pc, #452]	@ (8006314 <HAL_DMA_Abort+0x220>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d03b      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a70      	ldr	r2, [pc, #448]	@ (8006318 <HAL_DMA_Abort+0x224>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d036      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6e      	ldr	r2, [pc, #440]	@ (800631c <HAL_DMA_Abort+0x228>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d031      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6d      	ldr	r2, [pc, #436]	@ (8006320 <HAL_DMA_Abort+0x22c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d02c      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a6b      	ldr	r2, [pc, #428]	@ (8006324 <HAL_DMA_Abort+0x230>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d027      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a6a      	ldr	r2, [pc, #424]	@ (8006328 <HAL_DMA_Abort+0x234>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d022      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a68      	ldr	r2, [pc, #416]	@ (800632c <HAL_DMA_Abort+0x238>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a67      	ldr	r2, [pc, #412]	@ (8006330 <HAL_DMA_Abort+0x23c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a65      	ldr	r2, [pc, #404]	@ (8006334 <HAL_DMA_Abort+0x240>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a64      	ldr	r2, [pc, #400]	@ (8006338 <HAL_DMA_Abort+0x244>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a62      	ldr	r2, [pc, #392]	@ (800633c <HAL_DMA_Abort+0x248>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a61      	ldr	r2, [pc, #388]	@ (8006340 <HAL_DMA_Abort+0x24c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_DMA_Abort+0xd6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5f      	ldr	r2, [pc, #380]	@ (8006344 <HAL_DMA_Abort+0x250>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_DMA_Abort+0xda>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_DMA_Abort+0xdc>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 021e 	bic.w	r2, r2, #30
 80061e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e00a      	b.n	8006212 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 020e 	bic.w	r2, r2, #14
 800620a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3c      	ldr	r2, [pc, #240]	@ (8006308 <HAL_DMA_Abort+0x214>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d072      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a3a      	ldr	r2, [pc, #232]	@ (800630c <HAL_DMA_Abort+0x218>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d06d      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a39      	ldr	r2, [pc, #228]	@ (8006310 <HAL_DMA_Abort+0x21c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d068      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a37      	ldr	r2, [pc, #220]	@ (8006314 <HAL_DMA_Abort+0x220>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d063      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a36      	ldr	r2, [pc, #216]	@ (8006318 <HAL_DMA_Abort+0x224>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d05e      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a34      	ldr	r2, [pc, #208]	@ (800631c <HAL_DMA_Abort+0x228>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d059      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a33      	ldr	r2, [pc, #204]	@ (8006320 <HAL_DMA_Abort+0x22c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d054      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a31      	ldr	r2, [pc, #196]	@ (8006324 <HAL_DMA_Abort+0x230>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d04f      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a30      	ldr	r2, [pc, #192]	@ (8006328 <HAL_DMA_Abort+0x234>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d04a      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2e      	ldr	r2, [pc, #184]	@ (800632c <HAL_DMA_Abort+0x238>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d045      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2d      	ldr	r2, [pc, #180]	@ (8006330 <HAL_DMA_Abort+0x23c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d040      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2b      	ldr	r2, [pc, #172]	@ (8006334 <HAL_DMA_Abort+0x240>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d03b      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2a      	ldr	r2, [pc, #168]	@ (8006338 <HAL_DMA_Abort+0x244>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d036      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a28      	ldr	r2, [pc, #160]	@ (800633c <HAL_DMA_Abort+0x248>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d031      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a27      	ldr	r2, [pc, #156]	@ (8006340 <HAL_DMA_Abort+0x24c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d02c      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a25      	ldr	r2, [pc, #148]	@ (8006344 <HAL_DMA_Abort+0x250>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a24      	ldr	r2, [pc, #144]	@ (8006348 <HAL_DMA_Abort+0x254>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a22      	ldr	r2, [pc, #136]	@ (800634c <HAL_DMA_Abort+0x258>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a21      	ldr	r2, [pc, #132]	@ (8006350 <HAL_DMA_Abort+0x25c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006354 <HAL_DMA_Abort+0x260>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1e      	ldr	r2, [pc, #120]	@ (8006358 <HAL_DMA_Abort+0x264>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1c      	ldr	r2, [pc, #112]	@ (800635c <HAL_DMA_Abort+0x268>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006360 <HAL_DMA_Abort+0x26c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_Abort+0x20e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a19      	ldr	r2, [pc, #100]	@ (8006364 <HAL_DMA_Abort+0x270>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d132      	bne.n	8006368 <HAL_DMA_Abort+0x274>
 8006302:	2301      	movs	r3, #1
 8006304:	e031      	b.n	800636a <HAL_DMA_Abort+0x276>
 8006306:	bf00      	nop
 8006308:	40020010 	.word	0x40020010
 800630c:	40020028 	.word	0x40020028
 8006310:	40020040 	.word	0x40020040
 8006314:	40020058 	.word	0x40020058
 8006318:	40020070 	.word	0x40020070
 800631c:	40020088 	.word	0x40020088
 8006320:	400200a0 	.word	0x400200a0
 8006324:	400200b8 	.word	0x400200b8
 8006328:	40020410 	.word	0x40020410
 800632c:	40020428 	.word	0x40020428
 8006330:	40020440 	.word	0x40020440
 8006334:	40020458 	.word	0x40020458
 8006338:	40020470 	.word	0x40020470
 800633c:	40020488 	.word	0x40020488
 8006340:	400204a0 	.word	0x400204a0
 8006344:	400204b8 	.word	0x400204b8
 8006348:	58025408 	.word	0x58025408
 800634c:	5802541c 	.word	0x5802541c
 8006350:	58025430 	.word	0x58025430
 8006354:	58025444 	.word	0x58025444
 8006358:	58025458 	.word	0x58025458
 800635c:	5802546c 	.word	0x5802546c
 8006360:	58025480 	.word	0x58025480
 8006364:	58025494 	.word	0x58025494
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800637c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a6d      	ldr	r2, [pc, #436]	@ (8006538 <HAL_DMA_Abort+0x444>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d04a      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a6b      	ldr	r2, [pc, #428]	@ (800653c <HAL_DMA_Abort+0x448>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d045      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6a      	ldr	r2, [pc, #424]	@ (8006540 <HAL_DMA_Abort+0x44c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d040      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a68      	ldr	r2, [pc, #416]	@ (8006544 <HAL_DMA_Abort+0x450>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d03b      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a67      	ldr	r2, [pc, #412]	@ (8006548 <HAL_DMA_Abort+0x454>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d036      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a65      	ldr	r2, [pc, #404]	@ (800654c <HAL_DMA_Abort+0x458>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d031      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a64      	ldr	r2, [pc, #400]	@ (8006550 <HAL_DMA_Abort+0x45c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d02c      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a62      	ldr	r2, [pc, #392]	@ (8006554 <HAL_DMA_Abort+0x460>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d027      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a61      	ldr	r2, [pc, #388]	@ (8006558 <HAL_DMA_Abort+0x464>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5f      	ldr	r2, [pc, #380]	@ (800655c <HAL_DMA_Abort+0x468>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5e      	ldr	r2, [pc, #376]	@ (8006560 <HAL_DMA_Abort+0x46c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5c      	ldr	r2, [pc, #368]	@ (8006564 <HAL_DMA_Abort+0x470>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006568 <HAL_DMA_Abort+0x474>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a59      	ldr	r2, [pc, #356]	@ (800656c <HAL_DMA_Abort+0x478>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a58      	ldr	r2, [pc, #352]	@ (8006570 <HAL_DMA_Abort+0x47c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_Abort+0x32a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a56      	ldr	r2, [pc, #344]	@ (8006574 <HAL_DMA_Abort+0x480>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d108      	bne.n	8006430 <HAL_DMA_Abort+0x33c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	e007      	b.n	8006440 <HAL_DMA_Abort+0x34c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006440:	e013      	b.n	800646a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006442:	f7ff fc7f 	bl	8005d44 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b05      	cmp	r3, #5
 800644e:	d90c      	bls.n	800646a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2203      	movs	r2, #3
 800645a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e12d      	b.n	80066c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e5      	bne.n	8006442 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2f      	ldr	r2, [pc, #188]	@ (8006538 <HAL_DMA_Abort+0x444>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2d      	ldr	r2, [pc, #180]	@ (800653c <HAL_DMA_Abort+0x448>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2c      	ldr	r2, [pc, #176]	@ (8006540 <HAL_DMA_Abort+0x44c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2a      	ldr	r2, [pc, #168]	@ (8006544 <HAL_DMA_Abort+0x450>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a29      	ldr	r2, [pc, #164]	@ (8006548 <HAL_DMA_Abort+0x454>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a27      	ldr	r2, [pc, #156]	@ (800654c <HAL_DMA_Abort+0x458>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a26      	ldr	r2, [pc, #152]	@ (8006550 <HAL_DMA_Abort+0x45c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a24      	ldr	r2, [pc, #144]	@ (8006554 <HAL_DMA_Abort+0x460>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a23      	ldr	r2, [pc, #140]	@ (8006558 <HAL_DMA_Abort+0x464>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a21      	ldr	r2, [pc, #132]	@ (800655c <HAL_DMA_Abort+0x468>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a20      	ldr	r2, [pc, #128]	@ (8006560 <HAL_DMA_Abort+0x46c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006564 <HAL_DMA_Abort+0x470>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006568 <HAL_DMA_Abort+0x474>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <HAL_DMA_Abort+0x478>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1a      	ldr	r2, [pc, #104]	@ (8006570 <HAL_DMA_Abort+0x47c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_Abort+0x422>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <HAL_DMA_Abort+0x480>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_DMA_Abort+0x426>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_DMA_Abort+0x428>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d02b      	beq.n	8006578 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006524:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	223f      	movs	r2, #63	@ 0x3f
 8006530:	409a      	lsls	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	e02a      	b.n	800658e <HAL_DMA_Abort+0x49a>
 8006538:	40020010 	.word	0x40020010
 800653c:	40020028 	.word	0x40020028
 8006540:	40020040 	.word	0x40020040
 8006544:	40020058 	.word	0x40020058
 8006548:	40020070 	.word	0x40020070
 800654c:	40020088 	.word	0x40020088
 8006550:	400200a0 	.word	0x400200a0
 8006554:	400200b8 	.word	0x400200b8
 8006558:	40020410 	.word	0x40020410
 800655c:	40020428 	.word	0x40020428
 8006560:	40020440 	.word	0x40020440
 8006564:	40020458 	.word	0x40020458
 8006568:	40020470 	.word	0x40020470
 800656c:	40020488 	.word	0x40020488
 8006570:	400204a0 	.word	0x400204a0
 8006574:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2201      	movs	r2, #1
 8006588:	409a      	lsls	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a4f      	ldr	r2, [pc, #316]	@ (80066d0 <HAL_DMA_Abort+0x5dc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d072      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a4d      	ldr	r2, [pc, #308]	@ (80066d4 <HAL_DMA_Abort+0x5e0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d06d      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a4c      	ldr	r2, [pc, #304]	@ (80066d8 <HAL_DMA_Abort+0x5e4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d068      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a4a      	ldr	r2, [pc, #296]	@ (80066dc <HAL_DMA_Abort+0x5e8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d063      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a49      	ldr	r2, [pc, #292]	@ (80066e0 <HAL_DMA_Abort+0x5ec>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d05e      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a47      	ldr	r2, [pc, #284]	@ (80066e4 <HAL_DMA_Abort+0x5f0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d059      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a46      	ldr	r2, [pc, #280]	@ (80066e8 <HAL_DMA_Abort+0x5f4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d054      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a44      	ldr	r2, [pc, #272]	@ (80066ec <HAL_DMA_Abort+0x5f8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d04f      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a43      	ldr	r2, [pc, #268]	@ (80066f0 <HAL_DMA_Abort+0x5fc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d04a      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a41      	ldr	r2, [pc, #260]	@ (80066f4 <HAL_DMA_Abort+0x600>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d045      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a40      	ldr	r2, [pc, #256]	@ (80066f8 <HAL_DMA_Abort+0x604>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d040      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a3e      	ldr	r2, [pc, #248]	@ (80066fc <HAL_DMA_Abort+0x608>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d03b      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a3d      	ldr	r2, [pc, #244]	@ (8006700 <HAL_DMA_Abort+0x60c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d036      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3b      	ldr	r2, [pc, #236]	@ (8006704 <HAL_DMA_Abort+0x610>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d031      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a3a      	ldr	r2, [pc, #232]	@ (8006708 <HAL_DMA_Abort+0x614>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d02c      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a38      	ldr	r2, [pc, #224]	@ (800670c <HAL_DMA_Abort+0x618>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d027      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a37      	ldr	r2, [pc, #220]	@ (8006710 <HAL_DMA_Abort+0x61c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d022      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a35      	ldr	r2, [pc, #212]	@ (8006714 <HAL_DMA_Abort+0x620>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01d      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a34      	ldr	r2, [pc, #208]	@ (8006718 <HAL_DMA_Abort+0x624>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d018      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a32      	ldr	r2, [pc, #200]	@ (800671c <HAL_DMA_Abort+0x628>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a31      	ldr	r2, [pc, #196]	@ (8006720 <HAL_DMA_Abort+0x62c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00e      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2f      	ldr	r2, [pc, #188]	@ (8006724 <HAL_DMA_Abort+0x630>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d009      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2e      	ldr	r2, [pc, #184]	@ (8006728 <HAL_DMA_Abort+0x634>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d004      	beq.n	800667e <HAL_DMA_Abort+0x58a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2c      	ldr	r2, [pc, #176]	@ (800672c <HAL_DMA_Abort+0x638>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_DMA_Abort+0x58e>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <HAL_DMA_Abort+0x590>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006690:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40020010 	.word	0x40020010
 80066d4:	40020028 	.word	0x40020028
 80066d8:	40020040 	.word	0x40020040
 80066dc:	40020058 	.word	0x40020058
 80066e0:	40020070 	.word	0x40020070
 80066e4:	40020088 	.word	0x40020088
 80066e8:	400200a0 	.word	0x400200a0
 80066ec:	400200b8 	.word	0x400200b8
 80066f0:	40020410 	.word	0x40020410
 80066f4:	40020428 	.word	0x40020428
 80066f8:	40020440 	.word	0x40020440
 80066fc:	40020458 	.word	0x40020458
 8006700:	40020470 	.word	0x40020470
 8006704:	40020488 	.word	0x40020488
 8006708:	400204a0 	.word	0x400204a0
 800670c:	400204b8 	.word	0x400204b8
 8006710:	58025408 	.word	0x58025408
 8006714:	5802541c 	.word	0x5802541c
 8006718:	58025430 	.word	0x58025430
 800671c:	58025444 	.word	0x58025444
 8006720:	58025458 	.word	0x58025458
 8006724:	5802546c 	.word	0x5802546c
 8006728:	58025480 	.word	0x58025480
 800672c:	58025494 	.word	0x58025494

08006730 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e237      	b.n	8006bb2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d004      	beq.n	8006758 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2280      	movs	r2, #128	@ 0x80
 8006752:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e22c      	b.n	8006bb2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a5c      	ldr	r2, [pc, #368]	@ (80068d0 <HAL_DMA_Abort_IT+0x1a0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d04a      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a5b      	ldr	r2, [pc, #364]	@ (80068d4 <HAL_DMA_Abort_IT+0x1a4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d045      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a59      	ldr	r2, [pc, #356]	@ (80068d8 <HAL_DMA_Abort_IT+0x1a8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d040      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a58      	ldr	r2, [pc, #352]	@ (80068dc <HAL_DMA_Abort_IT+0x1ac>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d03b      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a56      	ldr	r2, [pc, #344]	@ (80068e0 <HAL_DMA_Abort_IT+0x1b0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d036      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a55      	ldr	r2, [pc, #340]	@ (80068e4 <HAL_DMA_Abort_IT+0x1b4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d031      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a53      	ldr	r2, [pc, #332]	@ (80068e8 <HAL_DMA_Abort_IT+0x1b8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d02c      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a52      	ldr	r2, [pc, #328]	@ (80068ec <HAL_DMA_Abort_IT+0x1bc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d027      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a50      	ldr	r2, [pc, #320]	@ (80068f0 <HAL_DMA_Abort_IT+0x1c0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d022      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a4f      	ldr	r2, [pc, #316]	@ (80068f4 <HAL_DMA_Abort_IT+0x1c4>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d01d      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a4d      	ldr	r2, [pc, #308]	@ (80068f8 <HAL_DMA_Abort_IT+0x1c8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d018      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a4c      	ldr	r2, [pc, #304]	@ (80068fc <HAL_DMA_Abort_IT+0x1cc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a4a      	ldr	r2, [pc, #296]	@ (8006900 <HAL_DMA_Abort_IT+0x1d0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00e      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a49      	ldr	r2, [pc, #292]	@ (8006904 <HAL_DMA_Abort_IT+0x1d4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d009      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a47      	ldr	r2, [pc, #284]	@ (8006908 <HAL_DMA_Abort_IT+0x1d8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xc8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a46      	ldr	r2, [pc, #280]	@ (800690c <HAL_DMA_Abort_IT+0x1dc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d101      	bne.n	80067fc <HAL_DMA_Abort_IT+0xcc>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <HAL_DMA_Abort_IT+0xce>
 80067fc:	2300      	movs	r3, #0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 8086 	beq.w	8006910 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2204      	movs	r2, #4
 8006808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2f      	ldr	r2, [pc, #188]	@ (80068d0 <HAL_DMA_Abort_IT+0x1a0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d04a      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <HAL_DMA_Abort_IT+0x1a4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d045      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2c      	ldr	r2, [pc, #176]	@ (80068d8 <HAL_DMA_Abort_IT+0x1a8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d040      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2b      	ldr	r2, [pc, #172]	@ (80068dc <HAL_DMA_Abort_IT+0x1ac>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d03b      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <HAL_DMA_Abort_IT+0x1b0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d036      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a28      	ldr	r2, [pc, #160]	@ (80068e4 <HAL_DMA_Abort_IT+0x1b4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d031      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	@ (80068e8 <HAL_DMA_Abort_IT+0x1b8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d02c      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a25      	ldr	r2, [pc, #148]	@ (80068ec <HAL_DMA_Abort_IT+0x1bc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d027      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a23      	ldr	r2, [pc, #140]	@ (80068f0 <HAL_DMA_Abort_IT+0x1c0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d022      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a22      	ldr	r2, [pc, #136]	@ (80068f4 <HAL_DMA_Abort_IT+0x1c4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d01d      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a20      	ldr	r2, [pc, #128]	@ (80068f8 <HAL_DMA_Abort_IT+0x1c8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d018      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <HAL_DMA_Abort_IT+0x1cc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1d      	ldr	r2, [pc, #116]	@ (8006900 <HAL_DMA_Abort_IT+0x1d0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00e      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1c      	ldr	r2, [pc, #112]	@ (8006904 <HAL_DMA_Abort_IT+0x1d4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d009      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <HAL_DMA_Abort_IT+0x1d8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d004      	beq.n	80068ac <HAL_DMA_Abort_IT+0x17c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a19      	ldr	r2, [pc, #100]	@ (800690c <HAL_DMA_Abort_IT+0x1dc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d108      	bne.n	80068be <HAL_DMA_Abort_IT+0x18e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e178      	b.n	8006bb0 <HAL_DMA_Abort_IT+0x480>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e16f      	b.n	8006bb0 <HAL_DMA_Abort_IT+0x480>
 80068d0:	40020010 	.word	0x40020010
 80068d4:	40020028 	.word	0x40020028
 80068d8:	40020040 	.word	0x40020040
 80068dc:	40020058 	.word	0x40020058
 80068e0:	40020070 	.word	0x40020070
 80068e4:	40020088 	.word	0x40020088
 80068e8:	400200a0 	.word	0x400200a0
 80068ec:	400200b8 	.word	0x400200b8
 80068f0:	40020410 	.word	0x40020410
 80068f4:	40020428 	.word	0x40020428
 80068f8:	40020440 	.word	0x40020440
 80068fc:	40020458 	.word	0x40020458
 8006900:	40020470 	.word	0x40020470
 8006904:	40020488 	.word	0x40020488
 8006908:	400204a0 	.word	0x400204a0
 800690c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 020e 	bic.w	r2, r2, #14
 800691e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a6c      	ldr	r2, [pc, #432]	@ (8006ad8 <HAL_DMA_Abort_IT+0x3a8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d04a      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a6b      	ldr	r2, [pc, #428]	@ (8006adc <HAL_DMA_Abort_IT+0x3ac>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d045      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a69      	ldr	r2, [pc, #420]	@ (8006ae0 <HAL_DMA_Abort_IT+0x3b0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d040      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a68      	ldr	r2, [pc, #416]	@ (8006ae4 <HAL_DMA_Abort_IT+0x3b4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d03b      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a66      	ldr	r2, [pc, #408]	@ (8006ae8 <HAL_DMA_Abort_IT+0x3b8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d036      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a65      	ldr	r2, [pc, #404]	@ (8006aec <HAL_DMA_Abort_IT+0x3bc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d031      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a63      	ldr	r2, [pc, #396]	@ (8006af0 <HAL_DMA_Abort_IT+0x3c0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d02c      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a62      	ldr	r2, [pc, #392]	@ (8006af4 <HAL_DMA_Abort_IT+0x3c4>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d027      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a60      	ldr	r2, [pc, #384]	@ (8006af8 <HAL_DMA_Abort_IT+0x3c8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a5f      	ldr	r2, [pc, #380]	@ (8006afc <HAL_DMA_Abort_IT+0x3cc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01d      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5d      	ldr	r2, [pc, #372]	@ (8006b00 <HAL_DMA_Abort_IT+0x3d0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d018      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a5c      	ldr	r2, [pc, #368]	@ (8006b04 <HAL_DMA_Abort_IT+0x3d4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a5a      	ldr	r2, [pc, #360]	@ (8006b08 <HAL_DMA_Abort_IT+0x3d8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00e      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a59      	ldr	r2, [pc, #356]	@ (8006b0c <HAL_DMA_Abort_IT+0x3dc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d009      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a57      	ldr	r2, [pc, #348]	@ (8006b10 <HAL_DMA_Abort_IT+0x3e0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_DMA_Abort_IT+0x290>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a56      	ldr	r2, [pc, #344]	@ (8006b14 <HAL_DMA_Abort_IT+0x3e4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d108      	bne.n	80069d2 <HAL_DMA_Abort_IT+0x2a2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0201 	bic.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e007      	b.n	80069e2 <HAL_DMA_Abort_IT+0x2b2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ad8 <HAL_DMA_Abort_IT+0x3a8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d072      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a3a      	ldr	r2, [pc, #232]	@ (8006adc <HAL_DMA_Abort_IT+0x3ac>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d06d      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a39      	ldr	r2, [pc, #228]	@ (8006ae0 <HAL_DMA_Abort_IT+0x3b0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d068      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a37      	ldr	r2, [pc, #220]	@ (8006ae4 <HAL_DMA_Abort_IT+0x3b4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d063      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a36      	ldr	r2, [pc, #216]	@ (8006ae8 <HAL_DMA_Abort_IT+0x3b8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d05e      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a34      	ldr	r2, [pc, #208]	@ (8006aec <HAL_DMA_Abort_IT+0x3bc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d059      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a33      	ldr	r2, [pc, #204]	@ (8006af0 <HAL_DMA_Abort_IT+0x3c0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d054      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a31      	ldr	r2, [pc, #196]	@ (8006af4 <HAL_DMA_Abort_IT+0x3c4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d04f      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a30      	ldr	r2, [pc, #192]	@ (8006af8 <HAL_DMA_Abort_IT+0x3c8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d04a      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a2e      	ldr	r2, [pc, #184]	@ (8006afc <HAL_DMA_Abort_IT+0x3cc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d045      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8006b00 <HAL_DMA_Abort_IT+0x3d0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d040      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2b      	ldr	r2, [pc, #172]	@ (8006b04 <HAL_DMA_Abort_IT+0x3d4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d03b      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b08 <HAL_DMA_Abort_IT+0x3d8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d036      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a28      	ldr	r2, [pc, #160]	@ (8006b0c <HAL_DMA_Abort_IT+0x3dc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d031      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a27      	ldr	r2, [pc, #156]	@ (8006b10 <HAL_DMA_Abort_IT+0x3e0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d02c      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a25      	ldr	r2, [pc, #148]	@ (8006b14 <HAL_DMA_Abort_IT+0x3e4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d027      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a24      	ldr	r2, [pc, #144]	@ (8006b18 <HAL_DMA_Abort_IT+0x3e8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a22      	ldr	r2, [pc, #136]	@ (8006b1c <HAL_DMA_Abort_IT+0x3ec>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d01d      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_DMA_Abort_IT+0x3f0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b24 <HAL_DMA_Abort_IT+0x3f4>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_DMA_Abort_IT+0x3f8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b2c <HAL_DMA_Abort_IT+0x3fc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_DMA_Abort_IT+0x400>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMA_Abort_IT+0x3a2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a19      	ldr	r2, [pc, #100]	@ (8006b34 <HAL_DMA_Abort_IT+0x404>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d132      	bne.n	8006b38 <HAL_DMA_Abort_IT+0x408>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e031      	b.n	8006b3a <HAL_DMA_Abort_IT+0x40a>
 8006ad6:	bf00      	nop
 8006ad8:	40020010 	.word	0x40020010
 8006adc:	40020028 	.word	0x40020028
 8006ae0:	40020040 	.word	0x40020040
 8006ae4:	40020058 	.word	0x40020058
 8006ae8:	40020070 	.word	0x40020070
 8006aec:	40020088 	.word	0x40020088
 8006af0:	400200a0 	.word	0x400200a0
 8006af4:	400200b8 	.word	0x400200b8
 8006af8:	40020410 	.word	0x40020410
 8006afc:	40020428 	.word	0x40020428
 8006b00:	40020440 	.word	0x40020440
 8006b04:	40020458 	.word	0x40020458
 8006b08:	40020470 	.word	0x40020470
 8006b0c:	40020488 	.word	0x40020488
 8006b10:	400204a0 	.word	0x400204a0
 8006b14:	400204b8 	.word	0x400204b8
 8006b18:	58025408 	.word	0x58025408
 8006b1c:	5802541c 	.word	0x5802541c
 8006b20:	58025430 	.word	0x58025430
 8006b24:	58025444 	.word	0x58025444
 8006b28:	58025458 	.word	0x58025458
 8006b2c:	5802546c 	.word	0x5802546c
 8006b30:	58025480 	.word	0x58025480
 8006b34:	58025494 	.word	0x58025494
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d028      	beq.n	8006b90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	409a      	lsls	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	@ 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bc8:	4b67      	ldr	r3, [pc, #412]	@ (8006d68 <HAL_DMA_IRQHandler+0x1ac>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a67      	ldr	r2, [pc, #412]	@ (8006d6c <HAL_DMA_IRQHandler+0x1b0>)
 8006bce:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd2:	0a9b      	lsrs	r3, r3, #10
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a5f      	ldr	r2, [pc, #380]	@ (8006d70 <HAL_DMA_IRQHandler+0x1b4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d04a      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8006d74 <HAL_DMA_IRQHandler+0x1b8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d045      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a5c      	ldr	r2, [pc, #368]	@ (8006d78 <HAL_DMA_IRQHandler+0x1bc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d040      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a5a      	ldr	r2, [pc, #360]	@ (8006d7c <HAL_DMA_IRQHandler+0x1c0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d03b      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a59      	ldr	r2, [pc, #356]	@ (8006d80 <HAL_DMA_IRQHandler+0x1c4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d036      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a57      	ldr	r2, [pc, #348]	@ (8006d84 <HAL_DMA_IRQHandler+0x1c8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d031      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a56      	ldr	r2, [pc, #344]	@ (8006d88 <HAL_DMA_IRQHandler+0x1cc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d02c      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a54      	ldr	r2, [pc, #336]	@ (8006d8c <HAL_DMA_IRQHandler+0x1d0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d027      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a53      	ldr	r2, [pc, #332]	@ (8006d90 <HAL_DMA_IRQHandler+0x1d4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d022      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a51      	ldr	r2, [pc, #324]	@ (8006d94 <HAL_DMA_IRQHandler+0x1d8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01d      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a50      	ldr	r2, [pc, #320]	@ (8006d98 <HAL_DMA_IRQHandler+0x1dc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d018      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a4e      	ldr	r2, [pc, #312]	@ (8006d9c <HAL_DMA_IRQHandler+0x1e0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8006da0 <HAL_DMA_IRQHandler+0x1e4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00e      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a4b      	ldr	r2, [pc, #300]	@ (8006da4 <HAL_DMA_IRQHandler+0x1e8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d009      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8006da8 <HAL_DMA_IRQHandler+0x1ec>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <HAL_DMA_IRQHandler+0xd2>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a48      	ldr	r2, [pc, #288]	@ (8006dac <HAL_DMA_IRQHandler+0x1f0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d101      	bne.n	8006c92 <HAL_DMA_IRQHandler+0xd6>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <HAL_DMA_IRQHandler+0xd8>
 8006c92:	2300      	movs	r3, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 842b 	beq.w	80074f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	f003 031f 	and.w	r3, r3, #31
 8006ca2:	2208      	movs	r2, #8
 8006ca4:	409a      	lsls	r2, r3
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80a2 	beq.w	8006df4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d70 <HAL_DMA_IRQHandler+0x1b4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04a      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8006d74 <HAL_DMA_IRQHandler+0x1b8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d045      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d78 <HAL_DMA_IRQHandler+0x1bc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d040      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d7c <HAL_DMA_IRQHandler+0x1c0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d03b      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a28      	ldr	r2, [pc, #160]	@ (8006d80 <HAL_DMA_IRQHandler+0x1c4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d036      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a27      	ldr	r2, [pc, #156]	@ (8006d84 <HAL_DMA_IRQHandler+0x1c8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d031      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a25      	ldr	r2, [pc, #148]	@ (8006d88 <HAL_DMA_IRQHandler+0x1cc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d02c      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a24      	ldr	r2, [pc, #144]	@ (8006d8c <HAL_DMA_IRQHandler+0x1d0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d027      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a22      	ldr	r2, [pc, #136]	@ (8006d90 <HAL_DMA_IRQHandler+0x1d4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d022      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a21      	ldr	r2, [pc, #132]	@ (8006d94 <HAL_DMA_IRQHandler+0x1d8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d01d      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1f      	ldr	r2, [pc, #124]	@ (8006d98 <HAL_DMA_IRQHandler+0x1dc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1e      	ldr	r2, [pc, #120]	@ (8006d9c <HAL_DMA_IRQHandler+0x1e0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8006da0 <HAL_DMA_IRQHandler+0x1e4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1b      	ldr	r2, [pc, #108]	@ (8006da4 <HAL_DMA_IRQHandler+0x1e8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a19      	ldr	r2, [pc, #100]	@ (8006da8 <HAL_DMA_IRQHandler+0x1ec>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x194>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a18      	ldr	r2, [pc, #96]	@ (8006dac <HAL_DMA_IRQHandler+0x1f0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d12f      	bne.n	8006db0 <HAL_DMA_IRQHandler+0x1f4>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	e02e      	b.n	8006dc4 <HAL_DMA_IRQHandler+0x208>
 8006d66:	bf00      	nop
 8006d68:	24000010 	.word	0x24000010
 8006d6c:	1b4e81b5 	.word	0x1b4e81b5
 8006d70:	40020010 	.word	0x40020010
 8006d74:	40020028 	.word	0x40020028
 8006d78:	40020040 	.word	0x40020040
 8006d7c:	40020058 	.word	0x40020058
 8006d80:	40020070 	.word	0x40020070
 8006d84:	40020088 	.word	0x40020088
 8006d88:	400200a0 	.word	0x400200a0
 8006d8c:	400200b8 	.word	0x400200b8
 8006d90:	40020410 	.word	0x40020410
 8006d94:	40020428 	.word	0x40020428
 8006d98:	40020440 	.word	0x40020440
 8006d9c:	40020458 	.word	0x40020458
 8006da0:	40020470 	.word	0x40020470
 8006da4:	40020488 	.word	0x40020488
 8006da8:	400204a0 	.word	0x400204a0
 8006dac:	400204b8 	.word	0x400204b8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0308 	and.w	r3, r3, #8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bf14      	ite	ne
 8006dbe:	2301      	movne	r3, #1
 8006dc0:	2300      	moveq	r3, #0
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d015      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0204 	bic.w	r2, r2, #4
 8006dd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	2208      	movs	r2, #8
 8006de2:	409a      	lsls	r2, r3
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dec:	f043 0201 	orr.w	r2, r3, #1
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d06e      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a69      	ldr	r2, [pc, #420]	@ (8006fb4 <HAL_DMA_IRQHandler+0x3f8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d04a      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a67      	ldr	r2, [pc, #412]	@ (8006fb8 <HAL_DMA_IRQHandler+0x3fc>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d045      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a66      	ldr	r2, [pc, #408]	@ (8006fbc <HAL_DMA_IRQHandler+0x400>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d040      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a64      	ldr	r2, [pc, #400]	@ (8006fc0 <HAL_DMA_IRQHandler+0x404>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a63      	ldr	r2, [pc, #396]	@ (8006fc4 <HAL_DMA_IRQHandler+0x408>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d036      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a61      	ldr	r2, [pc, #388]	@ (8006fc8 <HAL_DMA_IRQHandler+0x40c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a60      	ldr	r2, [pc, #384]	@ (8006fcc <HAL_DMA_IRQHandler+0x410>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02c      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a5e      	ldr	r2, [pc, #376]	@ (8006fd0 <HAL_DMA_IRQHandler+0x414>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8006fd4 <HAL_DMA_IRQHandler+0x418>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5b      	ldr	r2, [pc, #364]	@ (8006fd8 <HAL_DMA_IRQHandler+0x41c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01d      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a5a      	ldr	r2, [pc, #360]	@ (8006fdc <HAL_DMA_IRQHandler+0x420>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a58      	ldr	r2, [pc, #352]	@ (8006fe0 <HAL_DMA_IRQHandler+0x424>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a57      	ldr	r2, [pc, #348]	@ (8006fe4 <HAL_DMA_IRQHandler+0x428>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a55      	ldr	r2, [pc, #340]	@ (8006fe8 <HAL_DMA_IRQHandler+0x42c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a54      	ldr	r2, [pc, #336]	@ (8006fec <HAL_DMA_IRQHandler+0x430>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x2ee>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a52      	ldr	r2, [pc, #328]	@ (8006ff0 <HAL_DMA_IRQHandler+0x434>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0x304>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	e003      	b.n	8006ec8 <HAL_DMA_IRQHandler+0x30c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00d      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee0:	f043 0202 	orr.w	r2, r3, #2
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 808f 	beq.w	800701c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a2c      	ldr	r2, [pc, #176]	@ (8006fb4 <HAL_DMA_IRQHandler+0x3f8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d04a      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb8 <HAL_DMA_IRQHandler+0x3fc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d045      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a29      	ldr	r2, [pc, #164]	@ (8006fbc <HAL_DMA_IRQHandler+0x400>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d040      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a27      	ldr	r2, [pc, #156]	@ (8006fc0 <HAL_DMA_IRQHandler+0x404>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d03b      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a26      	ldr	r2, [pc, #152]	@ (8006fc4 <HAL_DMA_IRQHandler+0x408>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d036      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a24      	ldr	r2, [pc, #144]	@ (8006fc8 <HAL_DMA_IRQHandler+0x40c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d031      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a23      	ldr	r2, [pc, #140]	@ (8006fcc <HAL_DMA_IRQHandler+0x410>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d02c      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a21      	ldr	r2, [pc, #132]	@ (8006fd0 <HAL_DMA_IRQHandler+0x414>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d027      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a20      	ldr	r2, [pc, #128]	@ (8006fd4 <HAL_DMA_IRQHandler+0x418>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d022      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd8 <HAL_DMA_IRQHandler+0x41c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01d      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1d      	ldr	r2, [pc, #116]	@ (8006fdc <HAL_DMA_IRQHandler+0x420>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d018      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe0 <HAL_DMA_IRQHandler+0x424>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <HAL_DMA_IRQHandler+0x428>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00e      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a18      	ldr	r2, [pc, #96]	@ (8006fe8 <HAL_DMA_IRQHandler+0x42c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a17      	ldr	r2, [pc, #92]	@ (8006fec <HAL_DMA_IRQHandler+0x430>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_DMA_IRQHandler+0x3e2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <HAL_DMA_IRQHandler+0x434>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d12a      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0x438>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e023      	b.n	8006ffc <HAL_DMA_IRQHandler+0x440>
 8006fb4:	40020010 	.word	0x40020010
 8006fb8:	40020028 	.word	0x40020028
 8006fbc:	40020040 	.word	0x40020040
 8006fc0:	40020058 	.word	0x40020058
 8006fc4:	40020070 	.word	0x40020070
 8006fc8:	40020088 	.word	0x40020088
 8006fcc:	400200a0 	.word	0x400200a0
 8006fd0:	400200b8 	.word	0x400200b8
 8006fd4:	40020410 	.word	0x40020410
 8006fd8:	40020428 	.word	0x40020428
 8006fdc:	40020440 	.word	0x40020440
 8006fe0:	40020458 	.word	0x40020458
 8006fe4:	40020470 	.word	0x40020470
 8006fe8:	40020488 	.word	0x40020488
 8006fec:	400204a0 	.word	0x400204a0
 8006ff0:	400204b8 	.word	0x400204b8
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2204      	movs	r2, #4
 800700a:	409a      	lsls	r2, r3
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007014:	f043 0204 	orr.w	r2, r3, #4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	2210      	movs	r2, #16
 8007026:	409a      	lsls	r2, r3
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	4013      	ands	r3, r2
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 80a6 	beq.w	800717e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a85      	ldr	r2, [pc, #532]	@ (800724c <HAL_DMA_IRQHandler+0x690>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d04a      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a83      	ldr	r2, [pc, #524]	@ (8007250 <HAL_DMA_IRQHandler+0x694>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d045      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a82      	ldr	r2, [pc, #520]	@ (8007254 <HAL_DMA_IRQHandler+0x698>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d040      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a80      	ldr	r2, [pc, #512]	@ (8007258 <HAL_DMA_IRQHandler+0x69c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d03b      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a7f      	ldr	r2, [pc, #508]	@ (800725c <HAL_DMA_IRQHandler+0x6a0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d036      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a7d      	ldr	r2, [pc, #500]	@ (8007260 <HAL_DMA_IRQHandler+0x6a4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a7c      	ldr	r2, [pc, #496]	@ (8007264 <HAL_DMA_IRQHandler+0x6a8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d02c      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a7a      	ldr	r2, [pc, #488]	@ (8007268 <HAL_DMA_IRQHandler+0x6ac>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d027      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a79      	ldr	r2, [pc, #484]	@ (800726c <HAL_DMA_IRQHandler+0x6b0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a77      	ldr	r2, [pc, #476]	@ (8007270 <HAL_DMA_IRQHandler+0x6b4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01d      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a76      	ldr	r2, [pc, #472]	@ (8007274 <HAL_DMA_IRQHandler+0x6b8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d018      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a74      	ldr	r2, [pc, #464]	@ (8007278 <HAL_DMA_IRQHandler+0x6bc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a73      	ldr	r2, [pc, #460]	@ (800727c <HAL_DMA_IRQHandler+0x6c0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00e      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a71      	ldr	r2, [pc, #452]	@ (8007280 <HAL_DMA_IRQHandler+0x6c4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a70      	ldr	r2, [pc, #448]	@ (8007284 <HAL_DMA_IRQHandler+0x6c8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x516>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6e      	ldr	r2, [pc, #440]	@ (8007288 <HAL_DMA_IRQHandler+0x6cc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d10a      	bne.n	80070e8 <HAL_DMA_IRQHandler+0x52c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bf14      	ite	ne
 80070e0:	2301      	movne	r3, #1
 80070e2:	2300      	moveq	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	e009      	b.n	80070fc <HAL_DMA_IRQHandler+0x540>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	2300      	moveq	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d03e      	beq.n	800717e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	2210      	movs	r2, #16
 800710a:	409a      	lsls	r2, r3
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d018      	beq.n	8007150 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d024      	beq.n	800717e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
 800713c:	e01f      	b.n	800717e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01b      	beq.n	800717e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	e016      	b.n	800717e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d107      	bne.n	800716e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0208 	bic.w	r2, r2, #8
 800716c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2220      	movs	r2, #32
 8007188:	409a      	lsls	r2, r3
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	4013      	ands	r3, r2
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 8110 	beq.w	80073b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a2c      	ldr	r2, [pc, #176]	@ (800724c <HAL_DMA_IRQHandler+0x690>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04a      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007250 <HAL_DMA_IRQHandler+0x694>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a29      	ldr	r2, [pc, #164]	@ (8007254 <HAL_DMA_IRQHandler+0x698>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d040      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a28      	ldr	r2, [pc, #160]	@ (8007258 <HAL_DMA_IRQHandler+0x69c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a26      	ldr	r2, [pc, #152]	@ (800725c <HAL_DMA_IRQHandler+0x6a0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a25      	ldr	r2, [pc, #148]	@ (8007260 <HAL_DMA_IRQHandler+0x6a4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a23      	ldr	r2, [pc, #140]	@ (8007264 <HAL_DMA_IRQHandler+0x6a8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a22      	ldr	r2, [pc, #136]	@ (8007268 <HAL_DMA_IRQHandler+0x6ac>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a20      	ldr	r2, [pc, #128]	@ (800726c <HAL_DMA_IRQHandler+0x6b0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007270 <HAL_DMA_IRQHandler+0x6b4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007274 <HAL_DMA_IRQHandler+0x6b8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1c      	ldr	r2, [pc, #112]	@ (8007278 <HAL_DMA_IRQHandler+0x6bc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1a      	ldr	r2, [pc, #104]	@ (800727c <HAL_DMA_IRQHandler+0x6c0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a19      	ldr	r2, [pc, #100]	@ (8007280 <HAL_DMA_IRQHandler+0x6c4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a17      	ldr	r2, [pc, #92]	@ (8007284 <HAL_DMA_IRQHandler+0x6c8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_DMA_IRQHandler+0x678>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a16      	ldr	r2, [pc, #88]	@ (8007288 <HAL_DMA_IRQHandler+0x6cc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d12b      	bne.n	800728c <HAL_DMA_IRQHandler+0x6d0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	2b00      	cmp	r3, #0
 8007240:	bf14      	ite	ne
 8007242:	2301      	movne	r3, #1
 8007244:	2300      	moveq	r3, #0
 8007246:	b2db      	uxtb	r3, r3
 8007248:	e02a      	b.n	80072a0 <HAL_DMA_IRQHandler+0x6e4>
 800724a:	bf00      	nop
 800724c:	40020010 	.word	0x40020010
 8007250:	40020028 	.word	0x40020028
 8007254:	40020040 	.word	0x40020040
 8007258:	40020058 	.word	0x40020058
 800725c:	40020070 	.word	0x40020070
 8007260:	40020088 	.word	0x40020088
 8007264:	400200a0 	.word	0x400200a0
 8007268:	400200b8 	.word	0x400200b8
 800726c:	40020410 	.word	0x40020410
 8007270:	40020428 	.word	0x40020428
 8007274:	40020440 	.word	0x40020440
 8007278:	40020458 	.word	0x40020458
 800727c:	40020470 	.word	0x40020470
 8007280:	40020488 	.word	0x40020488
 8007284:	400204a0 	.word	0x400204a0
 8007288:	400204b8 	.word	0x400204b8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	bf14      	ite	ne
 800729a:	2301      	movne	r3, #1
 800729c:	2300      	moveq	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8087 	beq.w	80073b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072aa:	f003 031f 	and.w	r3, r3, #31
 80072ae:	2220      	movs	r2, #32
 80072b0:	409a      	lsls	r2, r3
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d139      	bne.n	8007336 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0216 	bic.w	r2, r2, #22
 80072d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <HAL_DMA_IRQHandler+0x736>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f022 0208 	bic.w	r2, r2, #8
 8007300:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	223f      	movs	r2, #63	@ 0x3f
 800730c:	409a      	lsls	r2, r3
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 834a 	beq.w	80079c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
          }
          return;
 8007334:	e344      	b.n	80079c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d018      	beq.n	8007376 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d108      	bne.n	8007364 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007356:	2b00      	cmp	r3, #0
 8007358:	d02c      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
 8007362:	e027      	b.n	80073b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d023      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	e01e      	b.n	80073b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10f      	bne.n	80073a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0210 	bic.w	r2, r2, #16
 8007392:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 8306 	beq.w	80079ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8088 	beq.w	80074dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2204      	movs	r2, #4
 80073d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a7a      	ldr	r2, [pc, #488]	@ (80075c4 <HAL_DMA_IRQHandler+0xa08>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d04a      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a79      	ldr	r2, [pc, #484]	@ (80075c8 <HAL_DMA_IRQHandler+0xa0c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d045      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a77      	ldr	r2, [pc, #476]	@ (80075cc <HAL_DMA_IRQHandler+0xa10>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d040      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a76      	ldr	r2, [pc, #472]	@ (80075d0 <HAL_DMA_IRQHandler+0xa14>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d03b      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a74      	ldr	r2, [pc, #464]	@ (80075d4 <HAL_DMA_IRQHandler+0xa18>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d036      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a73      	ldr	r2, [pc, #460]	@ (80075d8 <HAL_DMA_IRQHandler+0xa1c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d031      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a71      	ldr	r2, [pc, #452]	@ (80075dc <HAL_DMA_IRQHandler+0xa20>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02c      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a70      	ldr	r2, [pc, #448]	@ (80075e0 <HAL_DMA_IRQHandler+0xa24>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d027      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a6e      	ldr	r2, [pc, #440]	@ (80075e4 <HAL_DMA_IRQHandler+0xa28>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a6d      	ldr	r2, [pc, #436]	@ (80075e8 <HAL_DMA_IRQHandler+0xa2c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d01d      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a6b      	ldr	r2, [pc, #428]	@ (80075ec <HAL_DMA_IRQHandler+0xa30>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a6a      	ldr	r2, [pc, #424]	@ (80075f0 <HAL_DMA_IRQHandler+0xa34>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a68      	ldr	r2, [pc, #416]	@ (80075f4 <HAL_DMA_IRQHandler+0xa38>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a67      	ldr	r2, [pc, #412]	@ (80075f8 <HAL_DMA_IRQHandler+0xa3c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a65      	ldr	r2, [pc, #404]	@ (80075fc <HAL_DMA_IRQHandler+0xa40>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_DMA_IRQHandler+0x8b8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a64      	ldr	r2, [pc, #400]	@ (8007600 <HAL_DMA_IRQHandler+0xa44>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <HAL_DMA_IRQHandler+0x8ca>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e007      	b.n	8007496 <HAL_DMA_IRQHandler+0x8da>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749e:	429a      	cmp	r2, r3
 80074a0:	d307      	bcc.n	80074b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f2      	bne.n	8007496 <HAL_DMA_IRQHandler+0x8da>
 80074b0:	e000      	b.n	80074b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80074b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80074ca:	e003      	b.n	80074d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8272 	beq.w	80079ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
 80074ee:	e26c      	b.n	80079ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a43      	ldr	r2, [pc, #268]	@ (8007604 <HAL_DMA_IRQHandler+0xa48>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d022      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a42      	ldr	r2, [pc, #264]	@ (8007608 <HAL_DMA_IRQHandler+0xa4c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d01d      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a40      	ldr	r2, [pc, #256]	@ (800760c <HAL_DMA_IRQHandler+0xa50>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d018      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3f      	ldr	r2, [pc, #252]	@ (8007610 <HAL_DMA_IRQHandler+0xa54>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d013      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3d      	ldr	r2, [pc, #244]	@ (8007614 <HAL_DMA_IRQHandler+0xa58>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d00e      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a3c      	ldr	r2, [pc, #240]	@ (8007618 <HAL_DMA_IRQHandler+0xa5c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d009      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a3a      	ldr	r2, [pc, #232]	@ (800761c <HAL_DMA_IRQHandler+0xa60>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_DMA_IRQHandler+0x984>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a39      	ldr	r2, [pc, #228]	@ (8007620 <HAL_DMA_IRQHandler+0xa64>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d101      	bne.n	8007544 <HAL_DMA_IRQHandler+0x988>
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <HAL_DMA_IRQHandler+0x98a>
 8007544:	2300      	movs	r3, #0
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 823f 	beq.w	80079ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2204      	movs	r2, #4
 800755e:	409a      	lsls	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80cd 	beq.w	8007704 <HAL_DMA_IRQHandler+0xb48>
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 80c7 	beq.w	8007704 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	2204      	movs	r2, #4
 8007580:	409a      	lsls	r2, r3
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d049      	beq.n	8007624 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8210 	beq.w	80079c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075ac:	e20a      	b.n	80079c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8206 	beq.w	80079c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075c0:	e200      	b.n	80079c4 <HAL_DMA_IRQHandler+0xe08>
 80075c2:	bf00      	nop
 80075c4:	40020010 	.word	0x40020010
 80075c8:	40020028 	.word	0x40020028
 80075cc:	40020040 	.word	0x40020040
 80075d0:	40020058 	.word	0x40020058
 80075d4:	40020070 	.word	0x40020070
 80075d8:	40020088 	.word	0x40020088
 80075dc:	400200a0 	.word	0x400200a0
 80075e0:	400200b8 	.word	0x400200b8
 80075e4:	40020410 	.word	0x40020410
 80075e8:	40020428 	.word	0x40020428
 80075ec:	40020440 	.word	0x40020440
 80075f0:	40020458 	.word	0x40020458
 80075f4:	40020470 	.word	0x40020470
 80075f8:	40020488 	.word	0x40020488
 80075fc:	400204a0 	.word	0x400204a0
 8007600:	400204b8 	.word	0x400204b8
 8007604:	58025408 	.word	0x58025408
 8007608:	5802541c 	.word	0x5802541c
 800760c:	58025430 	.word	0x58025430
 8007610:	58025444 	.word	0x58025444
 8007614:	58025458 	.word	0x58025458
 8007618:	5802546c 	.word	0x5802546c
 800761c:	58025480 	.word	0x58025480
 8007620:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d160      	bne.n	80076f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a7f      	ldr	r2, [pc, #508]	@ (8007830 <HAL_DMA_IRQHandler+0xc74>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d04a      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a7d      	ldr	r2, [pc, #500]	@ (8007834 <HAL_DMA_IRQHandler+0xc78>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d045      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a7c      	ldr	r2, [pc, #496]	@ (8007838 <HAL_DMA_IRQHandler+0xc7c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d040      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a7a      	ldr	r2, [pc, #488]	@ (800783c <HAL_DMA_IRQHandler+0xc80>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d03b      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a79      	ldr	r2, [pc, #484]	@ (8007840 <HAL_DMA_IRQHandler+0xc84>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d036      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a77      	ldr	r2, [pc, #476]	@ (8007844 <HAL_DMA_IRQHandler+0xc88>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d031      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a76      	ldr	r2, [pc, #472]	@ (8007848 <HAL_DMA_IRQHandler+0xc8c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d02c      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a74      	ldr	r2, [pc, #464]	@ (800784c <HAL_DMA_IRQHandler+0xc90>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d027      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a73      	ldr	r2, [pc, #460]	@ (8007850 <HAL_DMA_IRQHandler+0xc94>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a71      	ldr	r2, [pc, #452]	@ (8007854 <HAL_DMA_IRQHandler+0xc98>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01d      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a70      	ldr	r2, [pc, #448]	@ (8007858 <HAL_DMA_IRQHandler+0xc9c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d018      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a6e      	ldr	r2, [pc, #440]	@ (800785c <HAL_DMA_IRQHandler+0xca0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6d      	ldr	r2, [pc, #436]	@ (8007860 <HAL_DMA_IRQHandler+0xca4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6b      	ldr	r2, [pc, #428]	@ (8007864 <HAL_DMA_IRQHandler+0xca8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a6a      	ldr	r2, [pc, #424]	@ (8007868 <HAL_DMA_IRQHandler+0xcac>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_DMA_IRQHandler+0xb12>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a68      	ldr	r2, [pc, #416]	@ (800786c <HAL_DMA_IRQHandler+0xcb0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d108      	bne.n	80076e0 <HAL_DMA_IRQHandler+0xb24>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0208 	bic.w	r2, r2, #8
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	e007      	b.n	80076f0 <HAL_DMA_IRQHandler+0xb34>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0204 	bic.w	r2, r2, #4
 80076ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8165 	beq.w	80079c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007702:	e15f      	b.n	80079c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	2202      	movs	r2, #2
 800770e:	409a      	lsls	r2, r3
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	4013      	ands	r3, r2
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80c5 	beq.w	80078a4 <HAL_DMA_IRQHandler+0xce8>
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80bf 	beq.w	80078a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2202      	movs	r2, #2
 8007730:	409a      	lsls	r2, r3
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d018      	beq.n	8007772 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 813a 	beq.w	80079c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800775c:	e134      	b.n	80079c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8130 	beq.w	80079c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007770:	e12a      	b.n	80079c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 8089 	bne.w	8007890 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a2b      	ldr	r2, [pc, #172]	@ (8007830 <HAL_DMA_IRQHandler+0xc74>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d04a      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a29      	ldr	r2, [pc, #164]	@ (8007834 <HAL_DMA_IRQHandler+0xc78>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d045      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a28      	ldr	r2, [pc, #160]	@ (8007838 <HAL_DMA_IRQHandler+0xc7c>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d040      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a26      	ldr	r2, [pc, #152]	@ (800783c <HAL_DMA_IRQHandler+0xc80>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d03b      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a25      	ldr	r2, [pc, #148]	@ (8007840 <HAL_DMA_IRQHandler+0xc84>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d036      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a23      	ldr	r2, [pc, #140]	@ (8007844 <HAL_DMA_IRQHandler+0xc88>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d031      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a22      	ldr	r2, [pc, #136]	@ (8007848 <HAL_DMA_IRQHandler+0xc8c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d02c      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a20      	ldr	r2, [pc, #128]	@ (800784c <HAL_DMA_IRQHandler+0xc90>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d027      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007850 <HAL_DMA_IRQHandler+0xc94>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d022      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007854 <HAL_DMA_IRQHandler+0xc98>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01d      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007858 <HAL_DMA_IRQHandler+0xc9c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d018      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1a      	ldr	r2, [pc, #104]	@ (800785c <HAL_DMA_IRQHandler+0xca0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d013      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a19      	ldr	r2, [pc, #100]	@ (8007860 <HAL_DMA_IRQHandler+0xca4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00e      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a17      	ldr	r2, [pc, #92]	@ (8007864 <HAL_DMA_IRQHandler+0xca8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a16      	ldr	r2, [pc, #88]	@ (8007868 <HAL_DMA_IRQHandler+0xcac>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d004      	beq.n	800781e <HAL_DMA_IRQHandler+0xc62>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a14      	ldr	r2, [pc, #80]	@ (800786c <HAL_DMA_IRQHandler+0xcb0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d128      	bne.n	8007870 <HAL_DMA_IRQHandler+0xcb4>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0214 	bic.w	r2, r2, #20
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e027      	b.n	8007880 <HAL_DMA_IRQHandler+0xcc4>
 8007830:	40020010 	.word	0x40020010
 8007834:	40020028 	.word	0x40020028
 8007838:	40020040 	.word	0x40020040
 800783c:	40020058 	.word	0x40020058
 8007840:	40020070 	.word	0x40020070
 8007844:	40020088 	.word	0x40020088
 8007848:	400200a0 	.word	0x400200a0
 800784c:	400200b8 	.word	0x400200b8
 8007850:	40020410 	.word	0x40020410
 8007854:	40020428 	.word	0x40020428
 8007858:	40020440 	.word	0x40020440
 800785c:	40020458 	.word	0x40020458
 8007860:	40020470 	.word	0x40020470
 8007864:	40020488 	.word	0x40020488
 8007868:	400204a0 	.word	0x400204a0
 800786c:	400204b8 	.word	0x400204b8
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 020a 	bic.w	r2, r2, #10
 800787e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8097 	beq.w	80079c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078a2:	e091      	b.n	80079c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2208      	movs	r2, #8
 80078ae:	409a      	lsls	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8088 	beq.w	80079ca <HAL_DMA_IRQHandler+0xe0e>
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8082 	beq.w	80079ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a41      	ldr	r2, [pc, #260]	@ (80079d0 <HAL_DMA_IRQHandler+0xe14>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d04a      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a3f      	ldr	r2, [pc, #252]	@ (80079d4 <HAL_DMA_IRQHandler+0xe18>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d045      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a3e      	ldr	r2, [pc, #248]	@ (80079d8 <HAL_DMA_IRQHandler+0xe1c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d040      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a3c      	ldr	r2, [pc, #240]	@ (80079dc <HAL_DMA_IRQHandler+0xe20>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d03b      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a3b      	ldr	r2, [pc, #236]	@ (80079e0 <HAL_DMA_IRQHandler+0xe24>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d036      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a39      	ldr	r2, [pc, #228]	@ (80079e4 <HAL_DMA_IRQHandler+0xe28>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d031      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a38      	ldr	r2, [pc, #224]	@ (80079e8 <HAL_DMA_IRQHandler+0xe2c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d02c      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a36      	ldr	r2, [pc, #216]	@ (80079ec <HAL_DMA_IRQHandler+0xe30>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d027      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a35      	ldr	r2, [pc, #212]	@ (80079f0 <HAL_DMA_IRQHandler+0xe34>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d022      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a33      	ldr	r2, [pc, #204]	@ (80079f4 <HAL_DMA_IRQHandler+0xe38>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d01d      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a32      	ldr	r2, [pc, #200]	@ (80079f8 <HAL_DMA_IRQHandler+0xe3c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d018      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a30      	ldr	r2, [pc, #192]	@ (80079fc <HAL_DMA_IRQHandler+0xe40>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d013      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a2f      	ldr	r2, [pc, #188]	@ (8007a00 <HAL_DMA_IRQHandler+0xe44>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00e      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a04 <HAL_DMA_IRQHandler+0xe48>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d009      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a2c      	ldr	r2, [pc, #176]	@ (8007a08 <HAL_DMA_IRQHandler+0xe4c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d004      	beq.n	8007966 <HAL_DMA_IRQHandler+0xdaa>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2a      	ldr	r2, [pc, #168]	@ (8007a0c <HAL_DMA_IRQHandler+0xe50>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d108      	bne.n	8007978 <HAL_DMA_IRQHandler+0xdbc>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 021c 	bic.w	r2, r2, #28
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e007      	b.n	8007988 <HAL_DMA_IRQHandler+0xdcc>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 020e 	bic.w	r2, r2, #14
 8007986:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	2201      	movs	r2, #1
 8007992:	409a      	lsls	r2, r3
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	e004      	b.n	80079ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80079c0:	bf00      	nop
 80079c2:	e002      	b.n	80079ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079ca:	3728      	adds	r7, #40	@ 0x28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	40020010 	.word	0x40020010
 80079d4:	40020028 	.word	0x40020028
 80079d8:	40020040 	.word	0x40020040
 80079dc:	40020058 	.word	0x40020058
 80079e0:	40020070 	.word	0x40020070
 80079e4:	40020088 	.word	0x40020088
 80079e8:	400200a0 	.word	0x400200a0
 80079ec:	400200b8 	.word	0x400200b8
 80079f0:	40020410 	.word	0x40020410
 80079f4:	40020428 	.word	0x40020428
 80079f8:	40020440 	.word	0x40020440
 80079fc:	40020458 	.word	0x40020458
 8007a00:	40020470 	.word	0x40020470
 8007a04:	40020488 	.word	0x40020488
 8007a08:	400204a0 	.word	0x400204a0
 8007a0c:	400204b8 	.word	0x400204b8

08007a10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e04f      	b.n	8007ac2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f84e 	bl	8007ad8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4b20      	ldr	r3, [pc, #128]	@ (8007acc <HAL_DMA2D_Init+0xbc>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6851      	ldr	r1, [r2, #4]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	69d2      	ldr	r2, [r2, #28]
 8007a56:	4311      	orrs	r1, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a66:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad0 <HAL_DMA2D_Init+0xc0>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6891      	ldr	r1, [r2, #8]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6992      	ldr	r2, [r2, #24]
 8007a72:	4311      	orrs	r1, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a82:	4b14      	ldr	r3, [pc, #80]	@ (8007ad4 <HAL_DMA2D_Init+0xc4>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	68d1      	ldr	r1, [r2, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a98:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	051a      	lsls	r2, r3, #20
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	055b      	lsls	r3, r3, #21
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	fff8ffbf 	.word	0xfff8ffbf
 8007ad0:	fffffef8 	.word	0xfffffef8
 8007ad4:	ffff0000 	.word	0xffff0000

08007ad8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_DMA2D_Start+0x1c>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e018      	b.n	8007b3a <HAL_DMA2D_Start+0x4e>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f9a4 	bl	8007e70 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d056      	beq.n	8007c0c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b5e:	f7fe f8f1 	bl	8005d44 <HAL_GetTick>
 8007b62:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b64:	e04b      	b.n	8007bfe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d023      	beq.n	8007bc0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b86:	f043 0202 	orr.w	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9c:	f043 0201 	orr.w	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2221      	movs	r2, #33	@ 0x21
 8007baa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2204      	movs	r2, #4
 8007bb0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0a5      	b.n	8007d0c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	d01a      	beq.n	8007bfe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007bc8:	f7fe f8bc 	bl	8005d44 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d302      	bcc.n	8007bde <HAL_DMA2D_PollForTransfer+0x9c>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10f      	bne.n	8007bfe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2203      	movs	r2, #3
 8007bee:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e086      	b.n	8007d0c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0ac      	beq.n	8007b66 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d061      	beq.n	8007cf2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c2e:	f7fe f889 	bl	8005d44 <HAL_GetTick>
 8007c32:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c34:	e056      	b.n	8007ce4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d02e      	beq.n	8007ca6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c56:	f043 0204 	orr.w	r2, r3, #4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f003 0320 	and.w	r3, r3, #32
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c6c:	f043 0202 	orr.w	r2, r3, #2
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c82:	f043 0201 	orr.w	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2229      	movs	r2, #41	@ 0x29
 8007c90:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2204      	movs	r2, #4
 8007c96:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e032      	b.n	8007d0c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d01a      	beq.n	8007ce4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cae:	f7fe f849 	bl	8005d44 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d302      	bcc.n	8007cc4 <HAL_DMA2D_PollForTransfer+0x182>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10f      	bne.n	8007ce4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc8:	f043 0220 	orr.w	r2, r3, #32
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e013      	b.n	8007d0c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f003 0310 	and.w	r3, r3, #16
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0a1      	beq.n	8007c36 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2212      	movs	r2, #18
 8007cf8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_DMA2D_ConfigLayer+0x24>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e092      	b.n	8007e5e <HAL_DMA2D_ConfigLayer+0x14a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	3328      	adds	r3, #40	@ 0x28
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	041b      	lsls	r3, r3, #16
 8007d64:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d6c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007d78:	4b3c      	ldr	r3, [pc, #240]	@ (8007e6c <HAL_DMA2D_ConfigLayer+0x158>)
 8007d7a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	2b0a      	cmp	r3, #10
 8007d82:	d003      	beq.n	8007d8c <HAL_DMA2D_ConfigLayer+0x78>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b09      	cmp	r3, #9
 8007d8a:	d107      	bne.n	8007d9c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	e005      	b.n	8007da8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d120      	bne.n	8007df0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	43db      	mvns	r3, r3
 8007db8:	ea02 0103 	and.w	r1, r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b0a      	cmp	r3, #10
 8007dd6:	d003      	beq.n	8007de0 <HAL_DMA2D_ConfigLayer+0xcc>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b09      	cmp	r3, #9
 8007dde:	d135      	bne.n	8007e4c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007dec:	629a      	str	r2, [r3, #40]	@ 0x28
 8007dee:	e02d      	b.n	8007e4c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b0b      	cmp	r3, #11
 8007df6:	d109      	bne.n	8007e0c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	049b      	lsls	r3, r3, #18
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8007e0a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	69da      	ldr	r2, [r3, #28]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	43db      	mvns	r3, r3
 8007e16:	ea02 0103 	and.w	r1, r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	6812      	ldr	r2, [r2, #0]
 8007e2c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b0a      	cmp	r3, #10
 8007e34:	d003      	beq.n	8007e3e <HAL_DMA2D_ConfigLayer+0x12a>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d106      	bne.n	8007e4c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007e4a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	ff33000f 	.word	0xff33000f

08007e70 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b08b      	sub	sp, #44	@ 0x2c
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
 8007e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e84:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	041a      	lsls	r2, r3, #16
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ea8:	d174      	bne.n	8007f94 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007eb0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007eb8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ec0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee0:	e053      	b.n	8007f8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d106      	bne.n	8007ef8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ef6:	e048      	b.n	8007f8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d111      	bne.n	8007f24 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	0cdb      	lsrs	r3, r3, #19
 8007f04:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	0a9b      	lsrs	r3, r3, #10
 8007f0a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	08db      	lsrs	r3, r3, #3
 8007f10:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	02db      	lsls	r3, r3, #11
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f22:	e032      	b.n	8007f8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d117      	bne.n	8007f5c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	0fdb      	lsrs	r3, r3, #31
 8007f30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	0cdb      	lsrs	r3, r3, #19
 8007f36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	0adb      	lsrs	r3, r3, #11
 8007f3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	08db      	lsrs	r3, r3, #3
 8007f42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	029b      	lsls	r3, r3, #10
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	03db      	lsls	r3, r3, #15
 8007f52:	4313      	orrs	r3, r2
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f5a:	e016      	b.n	8007f8a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	0f1b      	lsrs	r3, r3, #28
 8007f60:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	0d1b      	lsrs	r3, r3, #20
 8007f66:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	0b1b      	lsrs	r3, r3, #12
 8007f6c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	091b      	lsrs	r3, r3, #4
 8007f72:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	011a      	lsls	r2, r3, #4
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	031b      	lsls	r3, r3, #12
 8007f82:	4313      	orrs	r3, r2
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f90:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007f92:	e00d      	b.n	8007fb0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f9c:	d104      	bne.n	8007fa8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	615a      	str	r2, [r3, #20]
}
 8007fa6:	e003      	b.n	8007fb0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	60da      	str	r2, [r3, #12]
}
 8007fb0:	bf00      	nop
 8007fb2:	372c      	adds	r7, #44	@ 0x2c
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e00a      	b.n	8007fee <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	605a      	str	r2, [r3, #4]
      break;
 8007fe4:	e002      	b.n	8007fec <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fea:	bf00      	nop
  }

  return status;
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e003      	b.n	8008016 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008014:	2300      	movs	r3, #0
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
	...

08008024 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	2201      	movs	r2, #1
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	011a      	lsls	r2, r3, #4
 800804c:	4b0c      	ldr	r3, [pc, #48]	@ (8008080 <HAL_EXTI_IRQHandler+0x5c>)
 800804e:	4413      	add	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4013      	ands	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	4798      	blx	r3
    }
  }
}
 8008076:	bf00      	nop
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	58000088 	.word	0x58000088

08008084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008084:	b480      	push	{r7}
 8008086:	b089      	sub	sp, #36	@ 0x24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008092:	4b89      	ldr	r3, [pc, #548]	@ (80082b8 <HAL_GPIO_Init+0x234>)
 8008094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008096:	e194      	b.n	80083c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	2101      	movs	r1, #1
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	fa01 f303 	lsl.w	r3, r1, r3
 80080a4:	4013      	ands	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 8186 	beq.w	80083bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d005      	beq.n	80080c8 <HAL_GPIO_Init+0x44>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f003 0303 	and.w	r3, r3, #3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d130      	bne.n	800812a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	2203      	movs	r2, #3
 80080d4:	fa02 f303 	lsl.w	r3, r2, r3
 80080d8:	43db      	mvns	r3, r3
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	4013      	ands	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080fe:	2201      	movs	r2, #1
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	43db      	mvns	r3, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4013      	ands	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	091b      	lsrs	r3, r3, #4
 8008114:	f003 0201 	and.w	r2, r3, #1
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	fa02 f303 	lsl.w	r3, r2, r3
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	4313      	orrs	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	2b03      	cmp	r3, #3
 8008134:	d017      	beq.n	8008166 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	2203      	movs	r2, #3
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43db      	mvns	r3, r3
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	4013      	ands	r3, r2
 800814c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	4313      	orrs	r3, r2
 800815e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d123      	bne.n	80081ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	08da      	lsrs	r2, r3, #3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3208      	adds	r2, #8
 800817a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	220f      	movs	r2, #15
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4013      	ands	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	08da      	lsrs	r2, r3, #3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3208      	adds	r2, #8
 80081b4:	69b9      	ldr	r1, [r7, #24]
 80081b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	2203      	movs	r2, #3
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	43db      	mvns	r3, r3
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	4013      	ands	r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f003 0203 	and.w	r2, r3, #3
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80e0 	beq.w	80083bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081fc:	4b2f      	ldr	r3, [pc, #188]	@ (80082bc <HAL_GPIO_Init+0x238>)
 80081fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008202:	4a2e      	ldr	r2, [pc, #184]	@ (80082bc <HAL_GPIO_Init+0x238>)
 8008204:	f043 0302 	orr.w	r3, r3, #2
 8008208:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800820c:	4b2b      	ldr	r3, [pc, #172]	@ (80082bc <HAL_GPIO_Init+0x238>)
 800820e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800821a:	4a29      	ldr	r2, [pc, #164]	@ (80082c0 <HAL_GPIO_Init+0x23c>)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	089b      	lsrs	r3, r3, #2
 8008220:	3302      	adds	r3, #2
 8008222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	220f      	movs	r2, #15
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43db      	mvns	r3, r3
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	4013      	ands	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a20      	ldr	r2, [pc, #128]	@ (80082c4 <HAL_GPIO_Init+0x240>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d052      	beq.n	80082ec <HAL_GPIO_Init+0x268>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1f      	ldr	r2, [pc, #124]	@ (80082c8 <HAL_GPIO_Init+0x244>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d031      	beq.n	80082b2 <HAL_GPIO_Init+0x22e>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1e      	ldr	r2, [pc, #120]	@ (80082cc <HAL_GPIO_Init+0x248>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d02b      	beq.n	80082ae <HAL_GPIO_Init+0x22a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <HAL_GPIO_Init+0x24c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d025      	beq.n	80082aa <HAL_GPIO_Init+0x226>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <HAL_GPIO_Init+0x250>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d01f      	beq.n	80082a6 <HAL_GPIO_Init+0x222>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1b      	ldr	r2, [pc, #108]	@ (80082d8 <HAL_GPIO_Init+0x254>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d019      	beq.n	80082a2 <HAL_GPIO_Init+0x21e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1a      	ldr	r2, [pc, #104]	@ (80082dc <HAL_GPIO_Init+0x258>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <HAL_GPIO_Init+0x21a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a19      	ldr	r2, [pc, #100]	@ (80082e0 <HAL_GPIO_Init+0x25c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00d      	beq.n	800829a <HAL_GPIO_Init+0x216>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a18      	ldr	r2, [pc, #96]	@ (80082e4 <HAL_GPIO_Init+0x260>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <HAL_GPIO_Init+0x212>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a17      	ldr	r2, [pc, #92]	@ (80082e8 <HAL_GPIO_Init+0x264>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d101      	bne.n	8008292 <HAL_GPIO_Init+0x20e>
 800828e:	2309      	movs	r3, #9
 8008290:	e02d      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 8008292:	230a      	movs	r3, #10
 8008294:	e02b      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 8008296:	2308      	movs	r3, #8
 8008298:	e029      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 800829a:	2307      	movs	r3, #7
 800829c:	e027      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 800829e:	2306      	movs	r3, #6
 80082a0:	e025      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082a2:	2305      	movs	r3, #5
 80082a4:	e023      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082a6:	2304      	movs	r3, #4
 80082a8:	e021      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082aa:	2303      	movs	r3, #3
 80082ac:	e01f      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e01d      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e01b      	b.n	80082ee <HAL_GPIO_Init+0x26a>
 80082b6:	bf00      	nop
 80082b8:	58000080 	.word	0x58000080
 80082bc:	58024400 	.word	0x58024400
 80082c0:	58000400 	.word	0x58000400
 80082c4:	58020000 	.word	0x58020000
 80082c8:	58020400 	.word	0x58020400
 80082cc:	58020800 	.word	0x58020800
 80082d0:	58020c00 	.word	0x58020c00
 80082d4:	58021000 	.word	0x58021000
 80082d8:	58021400 	.word	0x58021400
 80082dc:	58021800 	.word	0x58021800
 80082e0:	58021c00 	.word	0x58021c00
 80082e4:	58022000 	.word	0x58022000
 80082e8:	58022400 	.word	0x58022400
 80082ec:	2300      	movs	r3, #0
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	f002 0203 	and.w	r2, r2, #3
 80082f4:	0092      	lsls	r2, r2, #2
 80082f6:	4093      	lsls	r3, r2
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082fe:	4938      	ldr	r1, [pc, #224]	@ (80083e0 <HAL_GPIO_Init+0x35c>)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	089b      	lsrs	r3, r3, #2
 8008304:	3302      	adds	r3, #2
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800830c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	43db      	mvns	r3, r3
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	4013      	ands	r3, r2
 800831c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008332:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800833a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	43db      	mvns	r3, r3
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	4013      	ands	r3, r2
 800834a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4313      	orrs	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	43db      	mvns	r3, r3
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	4013      	ands	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4313      	orrs	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	43db      	mvns	r3, r3
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	4013      	ands	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f47f ae63 	bne.w	8008098 <HAL_GPIO_Init+0x14>
  }
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	3724      	adds	r7, #36	@ 0x24
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	58000400 	.word	0x58000400

080083e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083f2:	4b75      	ldr	r3, [pc, #468]	@ (80085c8 <HAL_GPIO_DeInit+0x1e4>)
 80083f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80083f6:	e0d9      	b.n	80085ac <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80083f8:	2201      	movs	r2, #1
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	4013      	ands	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80cc 	beq.w	80085a6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800840e:	4a6f      	ldr	r2, [pc, #444]	@ (80085cc <HAL_GPIO_DeInit+0x1e8>)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	3302      	adds	r3, #2
 8008416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	220f      	movs	r2, #15
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	4013      	ands	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a67      	ldr	r2, [pc, #412]	@ (80085d0 <HAL_GPIO_DeInit+0x1ec>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d037      	beq.n	80084a8 <HAL_GPIO_DeInit+0xc4>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a66      	ldr	r2, [pc, #408]	@ (80085d4 <HAL_GPIO_DeInit+0x1f0>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d031      	beq.n	80084a4 <HAL_GPIO_DeInit+0xc0>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a65      	ldr	r2, [pc, #404]	@ (80085d8 <HAL_GPIO_DeInit+0x1f4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d02b      	beq.n	80084a0 <HAL_GPIO_DeInit+0xbc>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a64      	ldr	r2, [pc, #400]	@ (80085dc <HAL_GPIO_DeInit+0x1f8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d025      	beq.n	800849c <HAL_GPIO_DeInit+0xb8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a63      	ldr	r2, [pc, #396]	@ (80085e0 <HAL_GPIO_DeInit+0x1fc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d01f      	beq.n	8008498 <HAL_GPIO_DeInit+0xb4>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a62      	ldr	r2, [pc, #392]	@ (80085e4 <HAL_GPIO_DeInit+0x200>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d019      	beq.n	8008494 <HAL_GPIO_DeInit+0xb0>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a61      	ldr	r2, [pc, #388]	@ (80085e8 <HAL_GPIO_DeInit+0x204>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d013      	beq.n	8008490 <HAL_GPIO_DeInit+0xac>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a60      	ldr	r2, [pc, #384]	@ (80085ec <HAL_GPIO_DeInit+0x208>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00d      	beq.n	800848c <HAL_GPIO_DeInit+0xa8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a5f      	ldr	r2, [pc, #380]	@ (80085f0 <HAL_GPIO_DeInit+0x20c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d007      	beq.n	8008488 <HAL_GPIO_DeInit+0xa4>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a5e      	ldr	r2, [pc, #376]	@ (80085f4 <HAL_GPIO_DeInit+0x210>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d101      	bne.n	8008484 <HAL_GPIO_DeInit+0xa0>
 8008480:	2309      	movs	r3, #9
 8008482:	e012      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 8008484:	230a      	movs	r3, #10
 8008486:	e010      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 8008488:	2308      	movs	r3, #8
 800848a:	e00e      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 800848c:	2307      	movs	r3, #7
 800848e:	e00c      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 8008490:	2306      	movs	r3, #6
 8008492:	e00a      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 8008494:	2305      	movs	r3, #5
 8008496:	e008      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 8008498:	2304      	movs	r3, #4
 800849a:	e006      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 800849c:	2303      	movs	r3, #3
 800849e:	e004      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e002      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e000      	b.n	80084aa <HAL_GPIO_DeInit+0xc6>
 80084a8:	2300      	movs	r3, #0
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	f002 0203 	and.w	r2, r2, #3
 80084b0:	0092      	lsls	r2, r2, #2
 80084b2:	4093      	lsls	r3, r2
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d136      	bne.n	8008528 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	43db      	mvns	r3, r3
 80084d0:	401a      	ands	r2, r3
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80084d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	43db      	mvns	r3, r3
 80084e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084e4:	4013      	ands	r3, r2
 80084e6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80084e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084f6:	4013      	ands	r3, r2
 80084f8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	220f      	movs	r2, #15
 8008504:	fa02 f303 	lsl.w	r3, r2, r3
 8008508:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800850a:	4a30      	ldr	r2, [pc, #192]	@ (80085cc <HAL_GPIO_DeInit+0x1e8>)
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	089b      	lsrs	r3, r3, #2
 8008510:	3302      	adds	r3, #2
 8008512:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	43da      	mvns	r2, r3
 800851a:	482c      	ldr	r0, [pc, #176]	@ (80085cc <HAL_GPIO_DeInit+0x1e8>)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	089b      	lsrs	r3, r3, #2
 8008520:	400a      	ands	r2, r1
 8008522:	3302      	adds	r3, #2
 8008524:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	2103      	movs	r1, #3
 8008532:	fa01 f303 	lsl.w	r3, r1, r3
 8008536:	431a      	orrs	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	08da      	lsrs	r2, r3, #3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3208      	adds	r2, #8
 8008544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f003 0307 	and.w	r3, r3, #7
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	220f      	movs	r2, #15
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	43db      	mvns	r3, r3
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	08d2      	lsrs	r2, r2, #3
 800855c:	4019      	ands	r1, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3208      	adds	r2, #8
 8008562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	2103      	movs	r1, #3
 8008570:	fa01 f303 	lsl.w	r3, r1, r3
 8008574:	43db      	mvns	r3, r3
 8008576:	401a      	ands	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	2101      	movs	r1, #1
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	fa01 f303 	lsl.w	r3, r1, r3
 8008588:	43db      	mvns	r3, r3
 800858a:	401a      	ands	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	2103      	movs	r1, #3
 800859a:	fa01 f303 	lsl.w	r3, r1, r3
 800859e:	43db      	mvns	r3, r3
 80085a0:	401a      	ands	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	3301      	adds	r3, #1
 80085aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f47f af1f 	bne.w	80083f8 <HAL_GPIO_DeInit+0x14>
  }
}
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	371c      	adds	r7, #28
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	58000080 	.word	0x58000080
 80085cc:	58000400 	.word	0x58000400
 80085d0:	58020000 	.word	0x58020000
 80085d4:	58020400 	.word	0x58020400
 80085d8:	58020800 	.word	0x58020800
 80085dc:	58020c00 	.word	0x58020c00
 80085e0:	58021000 	.word	0x58021000
 80085e4:	58021400 	.word	0x58021400
 80085e8:	58021800 	.word	0x58021800
 80085ec:	58021c00 	.word	0x58021c00
 80085f0:	58022000 	.word	0x58022000
 80085f4:	58022400 	.word	0x58022400

080085f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	887b      	ldrh	r3, [r7, #2]
 800860a:	4013      	ands	r3, r2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	e001      	b.n	800861a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
 8008634:	4613      	mov	r3, r2
 8008636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008638:	787b      	ldrb	r3, [r7, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800863e:	887a      	ldrh	r2, [r7, #2]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008644:	e003      	b.n	800864e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008646:	887b      	ldrh	r3, [r7, #2]
 8008648:	041a      	lsls	r2, r3, #16
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	619a      	str	r2, [r3, #24]
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e07f      	b.n	800876e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8a9 	bl	80087da <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2224      	movs	r2, #36	@ 0x24
 800868c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0201 	bic.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80086ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d107      	bne.n	80086d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086d2:	609a      	str	r2, [r3, #8]
 80086d4:	e006      	b.n	80086e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80086e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d104      	bne.n	80086f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6859      	ldr	r1, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <HAL_I2C_Init+0x11c>)
 8008702:	430b      	orrs	r3, r1
 8008704:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008714:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69d9      	ldr	r1, [r3, #28]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1a      	ldr	r2, [r3, #32]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0201 	orr.w	r2, r2, #1
 800874e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	02008000 	.word	0x02008000

0800877c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e021      	b.n	80087d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2224      	movs	r2, #36	@ 0x24
 8008792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 0201 	bic.w	r2, r2, #1
 80087a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f821 	bl	80087ee <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
	...

08008804 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	461a      	mov	r2, r3
 8008812:	4603      	mov	r3, r0
 8008814:	817b      	strh	r3, [r7, #10]
 8008816:	460b      	mov	r3, r1
 8008818:	813b      	strh	r3, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b20      	cmp	r3, #32
 8008828:	f040 80f9 	bne.w	8008a1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <HAL_I2C_Mem_Write+0x34>
 8008832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008834:	2b00      	cmp	r3, #0
 8008836:	d105      	bne.n	8008844 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800883e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e0ed      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_I2C_Mem_Write+0x4e>
 800884e:	2302      	movs	r3, #2
 8008850:	e0e6      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800885a:	f7fd fa73 	bl	8005d44 <HAL_GetTick>
 800885e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	2319      	movs	r3, #25
 8008866:	2201      	movs	r2, #1
 8008868:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fadd 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e0d1      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2221      	movs	r2, #33	@ 0x21
 8008880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2240      	movs	r2, #64	@ 0x40
 8008888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6a3a      	ldr	r2, [r7, #32]
 8008896:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800889c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088a4:	88f8      	ldrh	r0, [r7, #6]
 80088a6:	893a      	ldrh	r2, [r7, #8]
 80088a8:	8979      	ldrh	r1, [r7, #10]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	4603      	mov	r3, r0
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f9ed 	bl	8008c94 <I2C_RequestMemoryWrite>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0a9      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2bff      	cmp	r3, #255	@ 0xff
 80088d4:	d90e      	bls.n	80088f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	22ff      	movs	r2, #255	@ 0xff
 80088da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	8979      	ldrh	r1, [r7, #10]
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fc57 	bl	80091a0 <I2C_TransferConfig>
 80088f2:	e00f      	b.n	8008914 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008902:	b2da      	uxtb	r2, r3
 8008904:	8979      	ldrh	r1, [r7, #10]
 8008906:	2300      	movs	r3, #0
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fc46 	bl	80091a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fad6 	bl	8008eca <I2C_WaitOnTXISFlagUntilTimeout>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e07b      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	781a      	ldrb	r2, [r3, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008950:	3b01      	subs	r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d034      	beq.n	80089cc <HAL_I2C_Mem_Write+0x1c8>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008966:	2b00      	cmp	r3, #0
 8008968:	d130      	bne.n	80089cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	2200      	movs	r2, #0
 8008972:	2180      	movs	r1, #128	@ 0x80
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fa59 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e04d      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008988:	b29b      	uxth	r3, r3
 800898a:	2bff      	cmp	r3, #255	@ 0xff
 800898c:	d90e      	bls.n	80089ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	22ff      	movs	r2, #255	@ 0xff
 8008992:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008998:	b2da      	uxtb	r2, r3
 800899a:	8979      	ldrh	r1, [r7, #10]
 800899c:	2300      	movs	r3, #0
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fbfb 	bl	80091a0 <I2C_TransferConfig>
 80089aa:	e00f      	b.n	80089cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	8979      	ldrh	r1, [r7, #10]
 80089be:	2300      	movs	r3, #0
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fbea 	bl	80091a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d19e      	bne.n	8008914 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fabc 	bl	8008f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e01a      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2220      	movs	r2, #32
 80089f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6859      	ldr	r1, [r3, #4]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <HAL_I2C_Mem_Write+0x224>)
 80089fe:	400b      	ands	r3, r1
 8008a00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e000      	b.n	8008a20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a1e:	2302      	movs	r3, #2
  }
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	fe00e800 	.word	0xfe00e800

08008a2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	817b      	strh	r3, [r7, #10]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	813b      	strh	r3, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	f040 80fd 	bne.w	8008c4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <HAL_I2C_Mem_Read+0x34>
 8008a5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d105      	bne.n	8008a6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a66:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0f1      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d101      	bne.n	8008a7a <HAL_I2C_Mem_Read+0x4e>
 8008a76:	2302      	movs	r3, #2
 8008a78:	e0ea      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a82:	f7fd f95f 	bl	8005d44 <HAL_GetTick>
 8008a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2319      	movs	r3, #25
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f9c9 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e0d5      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2222      	movs	r2, #34	@ 0x22
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2240      	movs	r2, #64	@ 0x40
 8008ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6a3a      	ldr	r2, [r7, #32]
 8008abe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008acc:	88f8      	ldrh	r0, [r7, #6]
 8008ace:	893a      	ldrh	r2, [r7, #8]
 8008ad0:	8979      	ldrh	r1, [r7, #10]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	4603      	mov	r3, r0
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f92d 	bl	8008d3c <I2C_RequestMemoryRead>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e0ad      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2bff      	cmp	r3, #255	@ 0xff
 8008afc:	d90e      	bls.n	8008b1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	22ff      	movs	r2, #255	@ 0xff
 8008b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	8979      	ldrh	r1, [r7, #10]
 8008b0c:	4b52      	ldr	r3, [pc, #328]	@ (8008c58 <HAL_I2C_Mem_Read+0x22c>)
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fb43 	bl	80091a0 <I2C_TransferConfig>
 8008b1a:	e00f      	b.n	8008b3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	8979      	ldrh	r1, [r7, #10]
 8008b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008c58 <HAL_I2C_Mem_Read+0x22c>)
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fb32 	bl	80091a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	2200      	movs	r2, #0
 8008b44:	2104      	movs	r1, #4
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 f970 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e07c      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	b2d2      	uxtb	r2, r2
 8008b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d034      	beq.n	8008bfc <HAL_I2C_Mem_Read+0x1d0>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d130      	bne.n	8008bfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2180      	movs	r1, #128	@ 0x80
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 f941 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e04d      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	2bff      	cmp	r3, #255	@ 0xff
 8008bbc:	d90e      	bls.n	8008bdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	22ff      	movs	r2, #255	@ 0xff
 8008bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	8979      	ldrh	r1, [r7, #10]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fae3 	bl	80091a0 <I2C_TransferConfig>
 8008bda:	e00f      	b.n	8008bfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	8979      	ldrh	r1, [r7, #10]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fad2 	bl	80091a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d19a      	bne.n	8008b3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 f9a4 	bl	8008f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e01a      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6859      	ldr	r1, [r3, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c5c <HAL_I2C_Mem_Read+0x230>)
 8008c2e:	400b      	ands	r3, r1
 8008c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e000      	b.n	8008c50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008c4e:	2302      	movs	r3, #2
  }
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	80002400 	.word	0x80002400
 8008c5c:	fe00e800 	.word	0xfe00e800

08008c60 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c6e:	b2db      	uxtb	r3, r3
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	817b      	strh	r3, [r7, #10]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	813b      	strh	r3, [r7, #8]
 8008caa:	4613      	mov	r3, r2
 8008cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	8979      	ldrh	r1, [r7, #10]
 8008cb4:	4b20      	ldr	r3, [pc, #128]	@ (8008d38 <I2C_RequestMemoryWrite+0xa4>)
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fa6f 	bl	80091a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	69b9      	ldr	r1, [r7, #24]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f8ff 	bl	8008eca <I2C_WaitOnTXISFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e02c      	b.n	8008d30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cd6:	88fb      	ldrh	r3, [r7, #6]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d105      	bne.n	8008ce8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	629a      	str	r2, [r3, #40]	@ 0x28
 8008ce6:	e015      	b.n	8008d14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ce8:	893b      	ldrh	r3, [r7, #8]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	69b9      	ldr	r1, [r7, #24]
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f8e5 	bl	8008eca <I2C_WaitOnTXISFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e012      	b.n	8008d30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d0a:	893b      	ldrh	r3, [r7, #8]
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2180      	movs	r1, #128	@ 0x80
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 f884 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	80002000 	.word	0x80002000

08008d3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af02      	add	r7, sp, #8
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	817b      	strh	r3, [r7, #10]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	813b      	strh	r3, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	8979      	ldrh	r1, [r7, #10]
 8008d5c:	4b20      	ldr	r3, [pc, #128]	@ (8008de0 <I2C_RequestMemoryRead+0xa4>)
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fa1c 	bl	80091a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	69b9      	ldr	r1, [r7, #24]
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f8ac 	bl	8008eca <I2C_WaitOnTXISFlagUntilTimeout>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e02c      	b.n	8008dd6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d7c:	88fb      	ldrh	r3, [r7, #6]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d105      	bne.n	8008d8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d82:	893b      	ldrh	r3, [r7, #8]
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d8c:	e015      	b.n	8008dba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d8e:	893b      	ldrh	r3, [r7, #8]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	69b9      	ldr	r1, [r7, #24]
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f892 	bl	8008eca <I2C_WaitOnTXISFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e012      	b.n	8008dd6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008db0:	893b      	ldrh	r3, [r7, #8]
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2140      	movs	r1, #64	@ 0x40
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 f831 	bl	8008e2c <I2C_WaitOnFlagUntilTimeout>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	80002000 	.word	0x80002000

08008de4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d103      	bne.n	8008e02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d007      	beq.n	8008e20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f042 0201 	orr.w	r2, r2, #1
 8008e1e:	619a      	str	r2, [r3, #24]
  }
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e3c:	e031      	b.n	8008ea2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e44:	d02d      	beq.n	8008ea2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e46:	f7fc ff7d 	bl	8005d44 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d302      	bcc.n	8008e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d122      	bne.n	8008ea2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	4013      	ands	r3, r2
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	bf0c      	ite	eq
 8008e6c:	2301      	moveq	r3, #1
 8008e6e:	2300      	movne	r3, #0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	461a      	mov	r2, r3
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d113      	bne.n	8008ea2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7e:	f043 0220 	orr.w	r2, r3, #32
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e00f      	b.n	8008ec2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	699a      	ldr	r2, [r3, #24]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	bf0c      	ite	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	2300      	movne	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	461a      	mov	r2, r3
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d0be      	beq.n	8008e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ed6:	e033      	b.n	8008f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 f87f 	bl	8008fe0 <I2C_IsErrorOccurred>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e031      	b.n	8008f50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef2:	d025      	beq.n	8008f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef4:	f7fc ff26 	bl	8005d44 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d302      	bcc.n	8008f0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d11a      	bne.n	8008f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d013      	beq.n	8008f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1c:	f043 0220 	orr.w	r2, r3, #32
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e007      	b.n	8008f50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d1c4      	bne.n	8008ed8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f64:	e02f      	b.n	8008fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	68b9      	ldr	r1, [r7, #8]
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 f838 	bl	8008fe0 <I2C_IsErrorOccurred>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e02d      	b.n	8008fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f7a:	f7fc fee3 	bl	8005d44 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d302      	bcc.n	8008f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11a      	bne.n	8008fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	d013      	beq.n	8008fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa2:	f043 0220 	orr.w	r2, r3, #32
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e007      	b.n	8008fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	f003 0320 	and.w	r3, r3, #32
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d1c8      	bne.n	8008f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	@ 0x28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	f003 0310 	and.w	r3, r3, #16
 8009008:	2b00      	cmp	r3, #0
 800900a:	d068      	beq.n	80090de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2210      	movs	r2, #16
 8009012:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009014:	e049      	b.n	80090aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901c:	d045      	beq.n	80090aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800901e:	f7fc fe91 	bl	8005d44 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	429a      	cmp	r2, r3
 800902c:	d302      	bcc.n	8009034 <I2C_IsErrorOccurred+0x54>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d13a      	bne.n	80090aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800903e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009046:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009056:	d121      	bne.n	800909c <I2C_IsErrorOccurred+0xbc>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800905e:	d01d      	beq.n	800909c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009060:	7cfb      	ldrb	r3, [r7, #19]
 8009062:	2b20      	cmp	r3, #32
 8009064:	d01a      	beq.n	800909c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009074:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009076:	f7fc fe65 	bl	8005d44 <HAL_GetTick>
 800907a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800907c:	e00e      	b.n	800909c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800907e:	f7fc fe61 	bl	8005d44 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b19      	cmp	r3, #25
 800908a:	d907      	bls.n	800909c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	f043 0320 	orr.w	r3, r3, #32
 8009092:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800909a:	e006      	b.n	80090aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	d1e9      	bne.n	800907e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f003 0320 	and.w	r3, r3, #32
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d003      	beq.n	80090c0 <I2C_IsErrorOccurred+0xe0>
 80090b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0aa      	beq.n	8009016 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2220      	movs	r2, #32
 80090ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	f043 0304 	orr.w	r3, r3, #4
 80090d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009100:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	f043 0308 	orr.w	r3, r3, #8
 8009118:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009122:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	f043 0302 	orr.w	r3, r3, #2
 800913a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009144:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800914c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009150:	2b00      	cmp	r3, #0
 8009152:	d01c      	beq.n	800918e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fe45 	bl	8008de4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <I2C_IsErrorOccurred+0x1bc>)
 8009166:	400b      	ands	r3, r1
 8009168:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	431a      	orrs	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2220      	movs	r2, #32
 800917a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800918e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009192:	4618      	mov	r0, r3
 8009194:	3728      	adds	r7, #40	@ 0x28
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	fe00e800 	.word	0xfe00e800

080091a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	607b      	str	r3, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	817b      	strh	r3, [r7, #10]
 80091ae:	4613      	mov	r3, r2
 80091b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091b2:	897b      	ldrh	r3, [r7, #10]
 80091b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091b8:	7a7b      	ldrb	r3, [r7, #9]
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	0d5b      	lsrs	r3, r3, #21
 80091da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80091de:	4b08      	ldr	r3, [pc, #32]	@ (8009200 <I2C_TransferConfig+0x60>)
 80091e0:	430b      	orrs	r3, r1
 80091e2:	43db      	mvns	r3, r3
 80091e4:	ea02 0103 	and.w	r1, r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	03ff63ff 	.word	0x03ff63ff

08009204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b20      	cmp	r3, #32
 8009218:	d138      	bne.n	800928c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009224:	2302      	movs	r3, #2
 8009226:	e032      	b.n	800928e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2224      	movs	r2, #36	@ 0x24
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6819      	ldr	r1, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e000      	b.n	800928e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800929a:	b480      	push	{r7}
 800929c:	b085      	sub	sp, #20
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d139      	bne.n	8009324 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d101      	bne.n	80092be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092ba:	2302      	movs	r3, #2
 80092bc:	e033      	b.n	8009326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2224      	movs	r2, #36	@ 0x24
 80092ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0201 	bic.w	r2, r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80092ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	021b      	lsls	r3, r3, #8
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0201 	orr.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2220      	movs	r2, #32
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
  }
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
	...

08009334 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e0bf      	b.n	80094c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f8ba 	bl	80094d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009376:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6999      	ldr	r1, [r3, #24]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800938c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6899      	ldr	r1, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	4b4a      	ldr	r3, [pc, #296]	@ (80094d0 <HAL_LTDC_Init+0x19c>)
 80093a8:	400b      	ands	r3, r1
 80093aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6899      	ldr	r1, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	431a      	orrs	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68d9      	ldr	r1, [r3, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	4b3e      	ldr	r3, [pc, #248]	@ (80094d0 <HAL_LTDC_Init+0x19c>)
 80093d6:	400b      	ands	r3, r1
 80093d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68d9      	ldr	r1, [r3, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1a      	ldr	r2, [r3, #32]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6919      	ldr	r1, [r3, #16]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4b33      	ldr	r3, [pc, #204]	@ (80094d0 <HAL_LTDC_Init+0x19c>)
 8009404:	400b      	ands	r3, r1
 8009406:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940c:	041b      	lsls	r3, r3, #16
 800940e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6919      	ldr	r1, [r3, #16]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	431a      	orrs	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6959      	ldr	r1, [r3, #20]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	4b27      	ldr	r3, [pc, #156]	@ (80094d0 <HAL_LTDC_Init+0x19c>)
 8009432:	400b      	ands	r3, r1
 8009434:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943a:	041b      	lsls	r3, r3, #16
 800943c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6959      	ldr	r1, [r3, #20]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800945a:	021b      	lsls	r3, r3, #8
 800945c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009464:	041b      	lsls	r3, r3, #16
 8009466:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009476:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800948a:	431a      	orrs	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0206 	orr.w	r2, r2, #6
 80094a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0201 	orr.w	r2, r2, #1
 80094b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	f000f800 	.word	0xf000f800

080094d4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80094e8:	b5b0      	push	{r4, r5, r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_LTDC_ConfigLayer+0x1a>
 80094fe:	2302      	movs	r3, #2
 8009500:	e02c      	b.n	800955c <HAL_LTDC_ConfigLayer+0x74>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2202      	movs	r2, #2
 800950e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2134      	movs	r1, #52	@ 0x34
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	4413      	add	r3, r2
 800951e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4614      	mov	r4, r2
 8009526:	461d      	mov	r5, r3
 8009528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800952a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800952c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800952e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 f811 	bl	8009564 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2201      	movs	r2, #1
 8009548:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bdb0      	pop	{r4, r5, r7, pc}

08009564 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009564:	b480      	push	{r7}
 8009566:	b089      	sub	sp, #36	@ 0x24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	0c1b      	lsrs	r3, r3, #16
 800957c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009580:	4413      	add	r3, r2
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	01db      	lsls	r3, r3, #7
 8009590:	4413      	add	r3, r2
 8009592:	3384      	adds	r3, #132	@ 0x84
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	4611      	mov	r1, r2
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	01d2      	lsls	r2, r2, #7
 80095a0:	440a      	add	r2, r1
 80095a2:	3284      	adds	r2, #132	@ 0x84
 80095a4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80095a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	0c1b      	lsrs	r3, r3, #16
 80095b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095ba:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80095bc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4619      	mov	r1, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	01db      	lsls	r3, r3, #7
 80095c8:	440b      	add	r3, r1
 80095ca:	3384      	adds	r3, #132	@ 0x84
 80095cc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095e2:	4413      	add	r3, r2
 80095e4:	041b      	lsls	r3, r3, #16
 80095e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	01db      	lsls	r3, r3, #7
 80095f2:	4413      	add	r3, r2
 80095f4:	3384      	adds	r3, #132	@ 0x84
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	6812      	ldr	r2, [r2, #0]
 80095fc:	4611      	mov	r1, r2
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	01d2      	lsls	r2, r2, #7
 8009602:	440a      	add	r2, r1
 8009604:	3284      	adds	r2, #132	@ 0x84
 8009606:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800960a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800961a:	4413      	add	r3, r2
 800961c:	1c5a      	adds	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4619      	mov	r1, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	01db      	lsls	r3, r3, #7
 8009628:	440b      	add	r3, r1
 800962a:	3384      	adds	r3, #132	@ 0x84
 800962c:	4619      	mov	r1, r3
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4313      	orrs	r3, r2
 8009632:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	01db      	lsls	r3, r3, #7
 800963e:	4413      	add	r3, r2
 8009640:	3384      	adds	r3, #132	@ 0x84
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	6812      	ldr	r2, [r2, #0]
 8009648:	4611      	mov	r1, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	01d2      	lsls	r2, r2, #7
 800964e:	440a      	add	r2, r1
 8009650:	3284      	adds	r2, #132	@ 0x84
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	461a      	mov	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	01db      	lsls	r3, r3, #7
 8009662:	4413      	add	r3, r2
 8009664:	3384      	adds	r3, #132	@ 0x84
 8009666:	461a      	mov	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800967e:	041b      	lsls	r3, r3, #16
 8009680:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	061b      	lsls	r3, r3, #24
 8009688:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	01db      	lsls	r3, r3, #7
 8009694:	4413      	add	r3, r2
 8009696:	3384      	adds	r3, #132	@ 0x84
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	01db      	lsls	r3, r3, #7
 80096a4:	4413      	add	r3, r2
 80096a6:	3384      	adds	r3, #132	@ 0x84
 80096a8:	461a      	mov	r2, r3
 80096aa:	2300      	movs	r3, #0
 80096ac:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096b4:	461a      	mov	r2, r3
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	431a      	orrs	r2, r3
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	431a      	orrs	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4619      	mov	r1, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	01db      	lsls	r3, r3, #7
 80096c8:	440b      	add	r3, r1
 80096ca:	3384      	adds	r3, #132	@ 0x84
 80096cc:	4619      	mov	r1, r3
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	01db      	lsls	r3, r3, #7
 80096de:	4413      	add	r3, r2
 80096e0:	3384      	adds	r3, #132	@ 0x84
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	6812      	ldr	r2, [r2, #0]
 80096e8:	4611      	mov	r1, r2
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	01d2      	lsls	r2, r2, #7
 80096ee:	440a      	add	r2, r1
 80096f0:	3284      	adds	r2, #132	@ 0x84
 80096f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80096f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	01db      	lsls	r3, r3, #7
 8009702:	4413      	add	r3, r2
 8009704:	3384      	adds	r3, #132	@ 0x84
 8009706:	461a      	mov	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	01db      	lsls	r3, r3, #7
 8009718:	4413      	add	r3, r2
 800971a:	3384      	adds	r3, #132	@ 0x84
 800971c:	69da      	ldr	r2, [r3, #28]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4619      	mov	r1, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	01db      	lsls	r3, r3, #7
 8009728:	440b      	add	r3, r1
 800972a:	3384      	adds	r3, #132	@ 0x84
 800972c:	4619      	mov	r1, r3
 800972e:	4b58      	ldr	r3, [pc, #352]	@ (8009890 <LTDC_SetConfig+0x32c>)
 8009730:	4013      	ands	r3, r2
 8009732:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	69da      	ldr	r2, [r3, #28]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	68f9      	ldr	r1, [r7, #12]
 800973e:	6809      	ldr	r1, [r1, #0]
 8009740:	4608      	mov	r0, r1
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	01c9      	lsls	r1, r1, #7
 8009746:	4401      	add	r1, r0
 8009748:	3184      	adds	r1, #132	@ 0x84
 800974a:	4313      	orrs	r3, r2
 800974c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	01db      	lsls	r3, r3, #7
 8009758:	4413      	add	r3, r2
 800975a:	3384      	adds	r3, #132	@ 0x84
 800975c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	01db      	lsls	r3, r3, #7
 8009768:	4413      	add	r3, r2
 800976a:	3384      	adds	r3, #132	@ 0x84
 800976c:	461a      	mov	r2, r3
 800976e:	2300      	movs	r3, #0
 8009770:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	01db      	lsls	r3, r3, #7
 800977c:	4413      	add	r3, r2
 800977e:	3384      	adds	r3, #132	@ 0x84
 8009780:	461a      	mov	r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009790:	2304      	movs	r3, #4
 8009792:	61fb      	str	r3, [r7, #28]
 8009794:	e01b      	b.n	80097ce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d102      	bne.n	80097a4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800979e:	2303      	movs	r3, #3
 80097a0:	61fb      	str	r3, [r7, #28]
 80097a2:	e014      	b.n	80097ce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d00b      	beq.n	80097c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d007      	beq.n	80097c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d003      	beq.n	80097c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80097c0:	2b07      	cmp	r3, #7
 80097c2:	d102      	bne.n	80097ca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80097c4:	2302      	movs	r3, #2
 80097c6:	61fb      	str	r3, [r7, #28]
 80097c8:	e001      	b.n	80097ce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80097ca:	2301      	movs	r3, #1
 80097cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	01db      	lsls	r3, r3, #7
 80097d8:	4413      	add	r3, r2
 80097da:	3384      	adds	r3, #132	@ 0x84
 80097dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	6812      	ldr	r2, [r2, #0]
 80097e2:	4611      	mov	r1, r2
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	01d2      	lsls	r2, r2, #7
 80097e8:	440a      	add	r2, r1
 80097ea:	3284      	adds	r2, #132	@ 0x84
 80097ec:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80097f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	fb02 f303 	mul.w	r3, r2, r3
 80097fc:	041a      	lsls	r2, r3, #16
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6859      	ldr	r1, [r3, #4]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	1acb      	subs	r3, r1, r3
 8009808:	69f9      	ldr	r1, [r7, #28]
 800980a:	fb01 f303 	mul.w	r3, r1, r3
 800980e:	3307      	adds	r3, #7
 8009810:	68f9      	ldr	r1, [r7, #12]
 8009812:	6809      	ldr	r1, [r1, #0]
 8009814:	4608      	mov	r0, r1
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	01c9      	lsls	r1, r1, #7
 800981a:	4401      	add	r1, r0
 800981c:	3184      	adds	r1, #132	@ 0x84
 800981e:	4313      	orrs	r3, r2
 8009820:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	01db      	lsls	r3, r3, #7
 800982c:	4413      	add	r3, r2
 800982e:	3384      	adds	r3, #132	@ 0x84
 8009830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4619      	mov	r1, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	01db      	lsls	r3, r3, #7
 800983c:	440b      	add	r3, r1
 800983e:	3384      	adds	r3, #132	@ 0x84
 8009840:	4619      	mov	r1, r3
 8009842:	4b14      	ldr	r3, [pc, #80]	@ (8009894 <LTDC_SetConfig+0x330>)
 8009844:	4013      	ands	r3, r2
 8009846:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	01db      	lsls	r3, r3, #7
 8009852:	4413      	add	r3, r2
 8009854:	3384      	adds	r3, #132	@ 0x84
 8009856:	461a      	mov	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	01db      	lsls	r3, r3, #7
 8009868:	4413      	add	r3, r2
 800986a:	3384      	adds	r3, #132	@ 0x84
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	6812      	ldr	r2, [r2, #0]
 8009872:	4611      	mov	r1, r2
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	01d2      	lsls	r2, r2, #7
 8009878:	440a      	add	r2, r1
 800987a:	3284      	adds	r2, #132	@ 0x84
 800987c:	f043 0301 	orr.w	r3, r3, #1
 8009880:	6013      	str	r3, [r2, #0]
}
 8009882:	bf00      	nop
 8009884:	3724      	adds	r7, #36	@ 0x24
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	fffff8f8 	.word	0xfffff8f8
 8009894:	fffff800 	.word	0xfffff800

08009898 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80098a0:	f7fc fa50 	bl	8005d44 <HAL_GetTick>
 80098a4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e03b      	b.n	8009928 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0201 	bic.w	r2, r2, #1
 80098ce:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80098d0:	e00f      	b.n	80098f2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80098d2:	f7fc fa37 	bl	8005d44 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b05      	cmp	r3, #5
 80098de:	d908      	bls.n	80098f2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2240      	movs	r2, #64	@ 0x40
 80098e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2203      	movs	r2, #3
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e01a      	b.n	8009928 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e8      	bne.n	80098d2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9c1 	bl	8009c88 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e048      	b.n	80099d4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68da      	ldr	r2, [r3, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 0201 	bic.w	r2, r2, #1
 8009950:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2200      	movs	r2, #0
 8009958:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2200      	movs	r2, #0
 8009968:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2200      	movs	r2, #0
 8009978:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2200      	movs	r2, #0
 8009990:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2200      	movs	r2, #0
 80099a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	221f      	movs	r2, #31
 80099a8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80099ec:	4b91      	ldr	r3, [pc, #580]	@ (8009c34 <HAL_MDMA_IRQHandler+0x254>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a91      	ldr	r2, [pc, #580]	@ (8009c38 <HAL_MDMA_IRQHandler+0x258>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	0a9b      	lsrs	r3, r3, #10
 80099f8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	4b8e      	ldr	r3, [pc, #568]	@ (8009c3c <HAL_MDMA_IRQHandler+0x25c>)
 8009a02:	4413      	add	r3, r2
 8009a04:	099b      	lsrs	r3, r3, #6
 8009a06:	f003 031f 	and.w	r3, r3, #31
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009a12:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 812d 	beq.w	8009c7c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d054      	beq.n	8009ada <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d04d      	beq.n	8009ada <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0202 	bic.w	r2, r2, #2
 8009a4c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a64:	f043 0201 	orr.w	r2, r3, #1
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	669a      	str	r2, [r3, #104]	@ 0x68
 8009a6c:	e005      	b.n	8009a7a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a72:	f043 0202 	orr.w	r2, r3, #2
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a88:	f043 0204 	orr.w	r2, r3, #4
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d005      	beq.n	8009aa6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a9e:	f043 0208 	orr.w	r2, r3, #8
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ab4:	f043 0210 	orr.w	r2, r3, #16
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aca:	f043 0220 	orr.w	r2, r3, #32
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0310 	and.w	r3, r3, #16
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d012      	beq.n	8009b0e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2210      	movs	r2, #16
 8009afc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 0308 	and.w	r3, r3, #8
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d012      	beq.n	8009b42 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2208      	movs	r2, #8
 8009b30:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d012      	beq.n	8009b76 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2204      	movs	r2, #4
 8009b64:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d039      	beq.n	8009bf8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d032      	beq.n	8009bf8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8009ba0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b04      	cmp	r3, #4
 8009bac:	d110      	bne.n	8009bd0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d05c      	beq.n	8009c80 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4798      	blx	r3
        }
        return;
 8009bce:	e057      	b.n	8009c80 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d040      	beq.n	8009c82 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2204      	movs	r2, #4
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68da      	ldr	r2, [r3, #12]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f022 0201 	bic.w	r2, r2, #1
 8009c16:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d30d      	bcc.n	8009c40 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f2      	bne.n	8009c18 <HAL_MDMA_IRQHandler+0x238>
 8009c32:	e006      	b.n	8009c42 <HAL_MDMA_IRQHandler+0x262>
 8009c34:	24000010 	.word	0x24000010
 8009c38:	1b4e81b5 	.word	0x1b4e81b5
 8009c3c:	adffffc0 	.word	0xadffffc0
        break;
 8009c40:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2203      	movs	r2, #3
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009c60:	e003      	b.n	8009c6a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d007      	beq.n	8009c82 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	4798      	blx	r3
 8009c7a:	e002      	b.n	8009c82 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8009c7c:	bf00      	nop
 8009c7e:	e000      	b.n	8009c82 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8009c80:	bf00      	nop
    }
  }
}
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68d9      	ldr	r1, [r3, #12]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	695a      	ldr	r2, [r3, #20]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009cae:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009cba:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009cc6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8009cd0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009cdc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009cde:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ce8:	d107      	bne.n	8009cfa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8009cf8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	da11      	bge.n	8009d2e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695a      	ldr	r2, [r3, #20]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009d18:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d1e:	425b      	negs	r3, r3
 8009d20:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	b292      	uxth	r2, r2
 8009d2a:	621a      	str	r2, [r3, #32]
 8009d2c:	e006      	b.n	8009d3c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	b292      	uxth	r2, r2
 8009d3a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	da15      	bge.n	8009d70 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695a      	ldr	r2, [r3, #20]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8009d52:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d58:	425b      	negs	r3, r3
 8009d5a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a19      	ldr	r1, [r3, #32]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	041a      	lsls	r2, r3, #16
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	621a      	str	r2, [r3, #32]
 8009d6e:	e009      	b.n	8009d84 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6a19      	ldr	r1, [r3, #32]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7a:	041a      	lsls	r2, r3, #16
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8c:	d006      	beq.n	8009d9c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	b2d2      	uxtb	r2, r2
 8009d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d9a:	e003      	b.n	8009da4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2200      	movs	r2, #0
 8009da2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2200      	movs	r2, #0
 8009daa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009dac:	bf00      	nop
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009dc0:	4b19      	ldr	r3, [pc, #100]	@ (8009e28 <HAL_PWREx_ConfigSupply+0x70>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d00a      	beq.n	8009de2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009dcc:	4b16      	ldr	r3, [pc, #88]	@ (8009e28 <HAL_PWREx_ConfigSupply+0x70>)
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d001      	beq.n	8009dde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e01f      	b.n	8009e1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	e01d      	b.n	8009e1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009de2:	4b11      	ldr	r3, [pc, #68]	@ (8009e28 <HAL_PWREx_ConfigSupply+0x70>)
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f023 0207 	bic.w	r2, r3, #7
 8009dea:	490f      	ldr	r1, [pc, #60]	@ (8009e28 <HAL_PWREx_ConfigSupply+0x70>)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009df2:	f7fb ffa7 	bl	8005d44 <HAL_GetTick>
 8009df6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009df8:	e009      	b.n	8009e0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009dfa:	f7fb ffa3 	bl	8005d44 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e08:	d901      	bls.n	8009e0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e007      	b.n	8009e1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e0e:	4b06      	ldr	r3, [pc, #24]	@ (8009e28 <HAL_PWREx_ConfigSupply+0x70>)
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e1a:	d1ee      	bne.n	8009dfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	58024800 	.word	0x58024800

08009e2c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af02      	add	r7, sp, #8
 8009e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009e34:	f7fb ff86 	bl	8005d44 <HAL_GetTick>
 8009e38:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e05f      	b.n	8009f04 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d107      	bne.n	8009e60 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f85f 	bl	8009f14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009e56:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 faca 	bl	800a3f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	021a      	lsls	r2, r3, #8
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	2120      	movs	r1, #32
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fac2 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d135      	bne.n	8009f02 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009f0c <HAL_QSPI_Init+0xe0>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6852      	ldr	r2, [r2, #4]
 8009ea4:	0611      	lsls	r1, r2, #24
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68d2      	ldr	r2, [r2, #12]
 8009eaa:	4311      	orrs	r1, r2
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	69d2      	ldr	r2, [r2, #28]
 8009eb0:	4311      	orrs	r1, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6a12      	ldr	r2, [r2, #32]
 8009eb6:	4311      	orrs	r1, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6812      	ldr	r2, [r2, #0]
 8009ebc:	430b      	orrs	r3, r1
 8009ebe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	4b12      	ldr	r3, [pc, #72]	@ (8009f10 <HAL_QSPI_Init+0xe4>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6912      	ldr	r2, [r2, #16]
 8009ece:	0411      	lsls	r1, r2, #16
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6952      	ldr	r2, [r2, #20]
 8009ed4:	4311      	orrs	r1, r2
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	6992      	ldr	r2, [r2, #24]
 8009eda:	4311      	orrs	r1, r2
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0201 	orr.w	r2, r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8009f02:	7afb      	ldrb	r3, [r7, #11]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	00ffff2f 	.word	0x00ffff2f
 8009f10:	ffe0f8fe 	.word	0xffe0f8fe

08009f14 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009f34:	f7fb ff06 	bl	8005d44 <HAL_GetTick>
 8009f38:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_QSPI_Command+0x22>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e048      	b.n	8009fdc <HAL_QSPI_Command+0xb4>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d137      	bne.n	8009fce <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2202      	movs	r2, #2
 8009f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	2200      	movs	r2, #0
 8009f74:	2120      	movs	r1, #32
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fa4a 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d125      	bne.n	8009fd2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009f86:	2200      	movs	r2, #0
 8009f88:	68b9      	ldr	r1, [r7, #8]
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f000 fa77 	bl	800a47e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d115      	bne.n	8009fc4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	2102      	movs	r1, #2
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fa34 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10f      	bne.n	8009fd2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fc2:	e006      	b.n	8009fd2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fcc:	e001      	b.n	8009fd2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08a      	sub	sp, #40	@ 0x28
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8009ff4:	f7fb fea6 	bl	8005d44 <HAL_GetTick>
 8009ff8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3320      	adds	r3, #32
 800a000:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_QSPI_Transmit+0x2e>
 800a00e:	2302      	movs	r3, #2
 800a010:	e076      	b.n	800a100 <HAL_QSPI_Transmit+0x11c>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b01      	cmp	r3, #1
 800a024:	d165      	bne.n	800a0f2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d056      	beq.n	800a0e0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2212      	movs	r2, #18
 800a036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695a      	ldr	r2, [r3, #20]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800a066:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a068:	e01b      	b.n	800a0a2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2201      	movs	r2, #1
 800a072:	2104      	movs	r1, #4
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f9cb 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a07a:	4603      	mov	r3, r0
 800a07c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a07e:	7ffb      	ldrb	r3, [r7, #31]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d113      	bne.n	800a0ac <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09c:	1e5a      	subs	r2, r3, #1
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1df      	bne.n	800a06a <HAL_QSPI_Transmit+0x86>
 800a0aa:	e000      	b.n	800a0ae <HAL_QSPI_Transmit+0xca>
          break;
 800a0ac:	bf00      	nop
      }

      if (status == HAL_OK)
 800a0ae:	7ffb      	ldrb	r3, [r7, #31]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d110      	bne.n	800a0d6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	2102      	movs	r1, #2
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f9a6 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a0c8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0de:	e00a      	b.n	800a0f6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0e4:	f043 0208 	orr.w	r2, r3, #8
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	77fb      	strb	r3, [r7, #31]
 800a0f0:	e001      	b.n	800a0f6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800a0fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3720      	adds	r7, #32
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	@ 0x28
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a118:	f7fb fe14 	bl	8005d44 <HAL_GetTick>
 800a11c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3320      	adds	r3, #32
 800a12c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b01      	cmp	r3, #1
 800a138:	d101      	bne.n	800a13e <HAL_QSPI_Receive+0x36>
 800a13a:	2302      	movs	r3, #2
 800a13c:	e07d      	b.n	800a23a <HAL_QSPI_Receive+0x132>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d16c      	bne.n	800a22c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d05d      	beq.n	800a21a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2222      	movs	r2, #34	@ 0x22
 800a162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800a196:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800a1a0:	e01c      	b.n	800a1dc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	2106      	movs	r1, #6
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f92f 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800a1b6:	7ffb      	ldrb	r3, [r7, #31]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d114      	bne.n	800a1e6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	7812      	ldrb	r2, [r2, #0]
 800a1c4:	b2d2      	uxtb	r2, r2
 800a1c6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d6:	1e5a      	subs	r2, r3, #1
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1de      	bne.n	800a1a2 <HAL_QSPI_Receive+0x9a>
 800a1e4:	e000      	b.n	800a1e8 <HAL_QSPI_Receive+0xe0>
          break;
 800a1e6:	bf00      	nop
      }

      if (status == HAL_OK)
 800a1e8:	7ffb      	ldrb	r3, [r7, #31]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d110      	bne.n	800a210 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	2102      	movs	r1, #2
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f909 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800a202:	7ffb      	ldrb	r3, [r7, #31]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d103      	bne.n	800a210 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2202      	movs	r2, #2
 800a20e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a218:	e00a      	b.n	800a230 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a21e:	f043 0208 	orr.w	r2, r3, #8
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	77fb      	strb	r3, [r7, #31]
 800a22a:	e001      	b.n	800a230 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a22c:	2302      	movs	r3, #2
 800a22e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 800a238:	7ffb      	ldrb	r3, [r7, #31]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b088      	sub	sp, #32
 800a246:	af02      	add	r7, sp, #8
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a250:	f7fb fd78 	bl	8005d44 <HAL_GetTick>
 800a254:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d101      	bne.n	800a266 <HAL_QSPI_AutoPolling+0x24>
 800a262:	2302      	movs	r3, #2
 800a264:	e060      	b.n	800a328 <HAL_QSPI_AutoPolling+0xe6>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b01      	cmp	r3, #1
 800a278:	d14f      	bne.n	800a31a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2242      	movs	r2, #66	@ 0x42
 800a284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2200      	movs	r2, #0
 800a290:	2120      	movs	r1, #32
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 f8bc 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a298:	4603      	mov	r3, r0
 800a29a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d13d      	bne.n	800a31e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	6852      	ldr	r2, [r2, #4]
 800a2b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	6892      	ldr	r2, [r2, #8]
 800a2be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800a2d8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a2e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a2e6:	68b9      	ldr	r1, [r7, #8]
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f8c8 	bl	800a47e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	2108      	movs	r1, #8
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 f889 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a2fe:	4603      	mov	r3, r0
 800a300:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800a302:	7dfb      	ldrb	r3, [r7, #23]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2208      	movs	r2, #8
 800a30e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a318:	e001      	b.n	800a31e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a31a:	2302      	movs	r3, #2
 800a31c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af02      	add	r7, sp, #8
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a33c:	f7fb fd02 	bl	8005d44 <HAL_GetTick>
 800a340:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_QSPI_MemoryMapped+0x22>
 800a34e:	2302      	movs	r3, #2
 800a350:	e04c      	b.n	800a3ec <HAL_QSPI_MemoryMapped+0xbc>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b01      	cmp	r3, #1
 800a364:	d13b      	bne.n	800a3de <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2282      	movs	r2, #130	@ 0x82
 800a370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2200      	movs	r2, #0
 800a37e:	2120      	movs	r1, #32
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f845 	bl	800a410 <QSPI_WaitFlagStateUntilTimeout>
 800a386:	4603      	mov	r3, r0
 800a388:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d128      	bne.n	800a3e2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f023 0108 	bic.w	r1, r3, #8
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	2b08      	cmp	r3, #8
 800a3ac:	d110      	bne.n	800a3d0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	6812      	ldr	r2, [r2, #0]
 800a3b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2210      	movs	r2, #16
 800a3be:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a3ce:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a3d0:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f851 	bl	800a47e <QSPI_Config>
 800a3dc:	e001      	b.n	800a3e2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a420:	e01a      	b.n	800a458 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a428:	d016      	beq.n	800a458 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7fb fc8b 	bl	8005d44 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10b      	bne.n	800a458 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2204      	movs	r2, #4
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a44c:	f043 0201 	orr.w	r2, r3, #1
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e00e      	b.n	800a476 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4013      	ands	r3, r2
 800a462:	2b00      	cmp	r3, #0
 800a464:	bf14      	ite	ne
 800a466:	2301      	movne	r3, #1
 800a468:	2300      	moveq	r3, #0
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	461a      	mov	r2, r3
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	429a      	cmp	r2, r3
 800a472:	d1d6      	bne.n	800a422 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	60f8      	str	r0, [r7, #12]
 800a486:	60b9      	str	r1, [r7, #8]
 800a488:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d009      	beq.n	800a4a6 <QSPI_Config+0x28>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a498:	d005      	beq.n	800a4a6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3a01      	subs	r2, #1
 800a4a4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80b9 	beq.w	800a622 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d05f      	beq.n	800a578 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	6892      	ldr	r2, [r2, #8]
 800a4c0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d031      	beq.n	800a52e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	049b      	lsls	r3, r3, #18
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	431a      	orrs	r2, r3
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	431a      	orrs	r2, r3
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	ea42 0103 	orr.w	r1, r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	430a      	orrs	r2, r1
 800a516:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a51e:	f000 812e 	beq.w	800a77e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	6852      	ldr	r2, [r2, #4]
 800a52a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800a52c:	e127      	b.n	800a77e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a536:	431a      	orrs	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53c:	431a      	orrs	r2, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a542:	431a      	orrs	r2, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	049b      	lsls	r3, r3, #18
 800a54a:	431a      	orrs	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	431a      	orrs	r2, r3
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	431a      	orrs	r2, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	431a      	orrs	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	ea42 0103 	orr.w	r1, r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	430a      	orrs	r2, r1
 800a574:	615a      	str	r2, [r3, #20]
}
 800a576:	e102      	b.n	800a77e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d02e      	beq.n	800a5de <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a588:	431a      	orrs	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a58e:	431a      	orrs	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a594:	431a      	orrs	r2, r3
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	049b      	lsls	r3, r3, #18
 800a59c:	431a      	orrs	r2, r3
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	ea42 0103 	orr.w	r1, r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a5ce:	f000 80d6 	beq.w	800a77e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	6852      	ldr	r2, [r2, #4]
 800a5da:	619a      	str	r2, [r3, #24]
}
 800a5dc:	e0cf      	b.n	800a77e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	049b      	lsls	r3, r3, #18
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	431a      	orrs	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	431a      	orrs	r2, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	699b      	ldr	r3, [r3, #24]
 800a60c:	431a      	orrs	r2, r3
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	ea42 0103 	orr.w	r1, r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	615a      	str	r2, [r3, #20]
}
 800a620:	e0ad      	b.n	800a77e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d058      	beq.n	800a6dc <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	6892      	ldr	r2, [r2, #8]
 800a632:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d02d      	beq.n	800a698 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a644:	431a      	orrs	r2, r3
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a64a:	431a      	orrs	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a650:	431a      	orrs	r2, r3
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	049b      	lsls	r3, r3, #18
 800a658:	431a      	orrs	r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	431a      	orrs	r2, r3
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	431a      	orrs	r2, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	431a      	orrs	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	431a      	orrs	r2, r3
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	ea42 0103 	orr.w	r1, r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	430a      	orrs	r2, r1
 800a682:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a68a:	d078      	beq.n	800a77e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	6852      	ldr	r2, [r2, #4]
 800a694:	619a      	str	r2, [r3, #24]
}
 800a696:	e072      	b.n	800a77e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	049b      	lsls	r3, r3, #18
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	431a      	orrs	r2, r3
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	431a      	orrs	r2, r3
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	ea42 0103 	orr.w	r1, r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	615a      	str	r2, [r3, #20]
}
 800a6da:	e050      	b.n	800a77e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d02a      	beq.n	800a73a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	049b      	lsls	r3, r3, #18
 800a700:	431a      	orrs	r2, r3
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	431a      	orrs	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	431a      	orrs	r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	431a      	orrs	r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	ea42 0103 	orr.w	r1, r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	430a      	orrs	r2, r1
 800a724:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a72c:	d027      	beq.n	800a77e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	6852      	ldr	r2, [r2, #4]
 800a736:	619a      	str	r2, [r3, #24]
}
 800a738:	e021      	b.n	800a77e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d01d      	beq.n	800a77e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a74a:	431a      	orrs	r2, r3
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a750:	431a      	orrs	r2, r3
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	431a      	orrs	r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	049b      	lsls	r3, r3, #18
 800a75e:	431a      	orrs	r2, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	431a      	orrs	r2, r3
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	431a      	orrs	r2, r3
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	ea42 0103 	orr.w	r1, r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	615a      	str	r2, [r3, #20]
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
	...

0800a78c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08c      	sub	sp, #48	@ 0x30
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	f000 bc48 	b.w	800b030 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 8088 	beq.w	800a8be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7ae:	4b99      	ldr	r3, [pc, #612]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7b8:	4b96      	ldr	r3, [pc, #600]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d007      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x48>
 800a7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c6:	2b18      	cmp	r3, #24
 800a7c8:	d111      	bne.n	800a7ee <HAL_RCC_OscConfig+0x62>
 800a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d10c      	bne.n	800a7ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7d4:	4b8f      	ldr	r3, [pc, #572]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d06d      	beq.n	800a8bc <HAL_RCC_OscConfig+0x130>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d169      	bne.n	800a8bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f000 bc21 	b.w	800b030 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7f6:	d106      	bne.n	800a806 <HAL_RCC_OscConfig+0x7a>
 800a7f8:	4b86      	ldr	r3, [pc, #536]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a85      	ldr	r2, [pc, #532]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a7fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	e02e      	b.n	800a864 <HAL_RCC_OscConfig+0xd8>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10c      	bne.n	800a828 <HAL_RCC_OscConfig+0x9c>
 800a80e:	4b81      	ldr	r3, [pc, #516]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a80      	ldr	r2, [pc, #512]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	4b7e      	ldr	r3, [pc, #504]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a7d      	ldr	r2, [pc, #500]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	e01d      	b.n	800a864 <HAL_RCC_OscConfig+0xd8>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a830:	d10c      	bne.n	800a84c <HAL_RCC_OscConfig+0xc0>
 800a832:	4b78      	ldr	r3, [pc, #480]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a77      	ldr	r2, [pc, #476]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	4b75      	ldr	r3, [pc, #468]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a74      	ldr	r2, [pc, #464]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	e00b      	b.n	800a864 <HAL_RCC_OscConfig+0xd8>
 800a84c:	4b71      	ldr	r3, [pc, #452]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a70      	ldr	r2, [pc, #448]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	4b6e      	ldr	r3, [pc, #440]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a6d      	ldr	r2, [pc, #436]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a85e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d013      	beq.n	800a894 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a86c:	f7fb fa6a 	bl	8005d44 <HAL_GetTick>
 800a870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a872:	e008      	b.n	800a886 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a874:	f7fb fa66 	bl	8005d44 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b64      	cmp	r3, #100	@ 0x64
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e3d4      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a886:	4b63      	ldr	r3, [pc, #396]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0f0      	beq.n	800a874 <HAL_RCC_OscConfig+0xe8>
 800a892:	e014      	b.n	800a8be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a894:	f7fb fa56 	bl	8005d44 <HAL_GetTick>
 800a898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a89a:	e008      	b.n	800a8ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a89c:	f7fb fa52 	bl	8005d44 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b64      	cmp	r3, #100	@ 0x64
 800a8a8:	d901      	bls.n	800a8ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e3c0      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a8ae:	4b59      	ldr	r3, [pc, #356]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1f0      	bne.n	800a89c <HAL_RCC_OscConfig+0x110>
 800a8ba:	e000      	b.n	800a8be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 80ca 	beq.w	800aa60 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8cc:	4b51      	ldr	r3, [pc, #324]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8d6:	4b4f      	ldr	r3, [pc, #316]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x166>
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	2b18      	cmp	r3, #24
 800a8e6:	d156      	bne.n	800a996 <HAL_RCC_OscConfig+0x20a>
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	f003 0303 	and.w	r3, r3, #3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d151      	bne.n	800a996 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8f2:	4b48      	ldr	r3, [pc, #288]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d005      	beq.n	800a90a <HAL_RCC_OscConfig+0x17e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e392      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a90a:	4b42      	ldr	r3, [pc, #264]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f023 0219 	bic.w	r2, r3, #25
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	493f      	ldr	r1, [pc, #252]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a91c:	f7fb fa12 	bl	8005d44 <HAL_GetTick>
 800a920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a922:	e008      	b.n	800a936 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a924:	f7fb fa0e 	bl	8005d44 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d901      	bls.n	800a936 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	e37c      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a936:	4b37      	ldr	r3, [pc, #220]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0f0      	beq.n	800a924 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a942:	f7fb fa2f 	bl	8005da4 <HAL_GetREVID>
 800a946:	4603      	mov	r3, r0
 800a948:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d817      	bhi.n	800a980 <HAL_RCC_OscConfig+0x1f4>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	2b40      	cmp	r3, #64	@ 0x40
 800a956:	d108      	bne.n	800a96a <HAL_RCC_OscConfig+0x1de>
 800a958:	4b2e      	ldr	r3, [pc, #184]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a960:	4a2c      	ldr	r2, [pc, #176]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a966:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a968:	e07a      	b.n	800aa60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a96a:	4b2a      	ldr	r3, [pc, #168]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	031b      	lsls	r3, r3, #12
 800a978:	4926      	ldr	r1, [pc, #152]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a97e:	e06f      	b.n	800aa60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a980:	4b24      	ldr	r3, [pc, #144]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	061b      	lsls	r3, r3, #24
 800a98e:	4921      	ldr	r1, [pc, #132]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a990:	4313      	orrs	r3, r2
 800a992:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a994:	e064      	b.n	800aa60 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d047      	beq.n	800aa2e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a99e:	4b1d      	ldr	r3, [pc, #116]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f023 0219 	bic.w	r2, r3, #25
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	491a      	ldr	r1, [pc, #104]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b0:	f7fb f9c8 	bl	8005d44 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9b8:	f7fb f9c4 	bl	8005d44 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e332      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9ca:	4b12      	ldr	r3, [pc, #72]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f0      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9d6:	f7fb f9e5 	bl	8005da4 <HAL_GetREVID>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d819      	bhi.n	800aa18 <HAL_RCC_OscConfig+0x28c>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	2b40      	cmp	r3, #64	@ 0x40
 800a9ea:	d108      	bne.n	800a9fe <HAL_RCC_OscConfig+0x272>
 800a9ec:	4b09      	ldr	r3, [pc, #36]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a9f4:	4a07      	ldr	r2, [pc, #28]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800a9f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9fa:	6053      	str	r3, [r2, #4]
 800a9fc:	e030      	b.n	800aa60 <HAL_RCC_OscConfig+0x2d4>
 800a9fe:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	031b      	lsls	r3, r3, #12
 800aa0c:	4901      	ldr	r1, [pc, #4]	@ (800aa14 <HAL_RCC_OscConfig+0x288>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	604b      	str	r3, [r1, #4]
 800aa12:	e025      	b.n	800aa60 <HAL_RCC_OscConfig+0x2d4>
 800aa14:	58024400 	.word	0x58024400
 800aa18:	4b9a      	ldr	r3, [pc, #616]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	061b      	lsls	r3, r3, #24
 800aa26:	4997      	ldr	r1, [pc, #604]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	604b      	str	r3, [r1, #4]
 800aa2c:	e018      	b.n	800aa60 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa2e:	4b95      	ldr	r3, [pc, #596]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a94      	ldr	r2, [pc, #592]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3a:	f7fb f983 	bl	8005d44 <HAL_GetTick>
 800aa3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa40:	e008      	b.n	800aa54 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa42:	f7fb f97f 	bl	8005d44 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	d901      	bls.n	800aa54 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e2ed      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa54:	4b8b      	ldr	r3, [pc, #556]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f0      	bne.n	800aa42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 80a9 	beq.w	800abc0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa6e:	4b85      	ldr	r3, [pc, #532]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa78:	4b82      	ldr	r3, [pc, #520]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d007      	beq.n	800aa94 <HAL_RCC_OscConfig+0x308>
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	2b18      	cmp	r3, #24
 800aa88:	d13a      	bne.n	800ab00 <HAL_RCC_OscConfig+0x374>
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f003 0303 	and.w	r3, r3, #3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d135      	bne.n	800ab00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa94:	4b7b      	ldr	r3, [pc, #492]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <HAL_RCC_OscConfig+0x320>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	2b80      	cmp	r3, #128	@ 0x80
 800aaa6:	d001      	beq.n	800aaac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e2c1      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aaac:	f7fb f97a 	bl	8005da4 <HAL_GetREVID>
 800aab0:	4603      	mov	r3, r0
 800aab2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d817      	bhi.n	800aaea <HAL_RCC_OscConfig+0x35e>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	2b20      	cmp	r3, #32
 800aac0:	d108      	bne.n	800aad4 <HAL_RCC_OscConfig+0x348>
 800aac2:	4b70      	ldr	r3, [pc, #448]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800aaca:	4a6e      	ldr	r2, [pc, #440]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aacc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aad0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aad2:	e075      	b.n	800abc0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aad4:	4b6b      	ldr	r3, [pc, #428]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	069b      	lsls	r3, r3, #26
 800aae2:	4968      	ldr	r1, [pc, #416]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aae8:	e06a      	b.n	800abc0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aaea:	4b66      	ldr	r3, [pc, #408]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	061b      	lsls	r3, r3, #24
 800aaf8:	4962      	ldr	r1, [pc, #392]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aafe:	e05f      	b.n	800abc0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	69db      	ldr	r3, [r3, #28]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d042      	beq.n	800ab8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ab08:	4b5e      	ldr	r3, [pc, #376]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a5d      	ldr	r2, [pc, #372]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab14:	f7fb f916 	bl	8005d44 <HAL_GetTick>
 800ab18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab1a:	e008      	b.n	800ab2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab1c:	f7fb f912 	bl	8005d44 <HAL_GetTick>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d901      	bls.n	800ab2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e280      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab2e:	4b55      	ldr	r3, [pc, #340]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d0f0      	beq.n	800ab1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab3a:	f7fb f933 	bl	8005da4 <HAL_GetREVID>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d817      	bhi.n	800ab78 <HAL_RCC_OscConfig+0x3ec>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	d108      	bne.n	800ab62 <HAL_RCC_OscConfig+0x3d6>
 800ab50:	4b4c      	ldr	r3, [pc, #304]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ab58:	4a4a      	ldr	r2, [pc, #296]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab5e:	6053      	str	r3, [r2, #4]
 800ab60:	e02e      	b.n	800abc0 <HAL_RCC_OscConfig+0x434>
 800ab62:	4b48      	ldr	r3, [pc, #288]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	069b      	lsls	r3, r3, #26
 800ab70:	4944      	ldr	r1, [pc, #272]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	604b      	str	r3, [r1, #4]
 800ab76:	e023      	b.n	800abc0 <HAL_RCC_OscConfig+0x434>
 800ab78:	4b42      	ldr	r3, [pc, #264]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	061b      	lsls	r3, r3, #24
 800ab86:	493f      	ldr	r1, [pc, #252]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60cb      	str	r3, [r1, #12]
 800ab8c:	e018      	b.n	800abc0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ab8e:	4b3d      	ldr	r3, [pc, #244]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a3c      	ldr	r2, [pc, #240]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ab94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9a:	f7fb f8d3 	bl	8005d44 <HAL_GetTick>
 800ab9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aba0:	e008      	b.n	800abb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aba2:	f7fb f8cf 	bl	8005d44 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d901      	bls.n	800abb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e23d      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800abb4:	4b33      	ldr	r3, [pc, #204]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f0      	bne.n	800aba2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0308 	and.w	r3, r3, #8
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d036      	beq.n	800ac3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d019      	beq.n	800ac08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abd4:	4b2b      	ldr	r3, [pc, #172]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800abd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abd8:	4a2a      	ldr	r2, [pc, #168]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abe0:	f7fb f8b0 	bl	8005d44 <HAL_GetTick>
 800abe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800abe6:	e008      	b.n	800abfa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abe8:	f7fb f8ac 	bl	8005d44 <HAL_GetTick>
 800abec:	4602      	mov	r2, r0
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d901      	bls.n	800abfa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e21a      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800abfa:	4b22      	ldr	r3, [pc, #136]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800abfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abfe:	f003 0302 	and.w	r3, r3, #2
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0f0      	beq.n	800abe8 <HAL_RCC_OscConfig+0x45c>
 800ac06:	e018      	b.n	800ac3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac08:	4b1e      	ldr	r3, [pc, #120]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ac0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ac0e:	f023 0301 	bic.w	r3, r3, #1
 800ac12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac14:	f7fb f896 	bl	8005d44 <HAL_GetTick>
 800ac18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac1a:	e008      	b.n	800ac2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac1c:	f7fb f892 	bl	8005d44 <HAL_GetTick>
 800ac20:	4602      	mov	r2, r0
 800ac22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e200      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac2e:	4b15      	ldr	r3, [pc, #84]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ac30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1f0      	bne.n	800ac1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d039      	beq.n	800acba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01c      	beq.n	800ac88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a0c      	ldr	r2, [pc, #48]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ac54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ac58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac5a:	f7fb f873 	bl	8005d44 <HAL_GetTick>
 800ac5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac60:	e008      	b.n	800ac74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac62:	f7fb f86f 	bl	8005d44 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e1dd      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac74:	4b03      	ldr	r3, [pc, #12]	@ (800ac84 <HAL_RCC_OscConfig+0x4f8>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0f0      	beq.n	800ac62 <HAL_RCC_OscConfig+0x4d6>
 800ac80:	e01b      	b.n	800acba <HAL_RCC_OscConfig+0x52e>
 800ac82:	bf00      	nop
 800ac84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac88:	4b9b      	ldr	r3, [pc, #620]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a9a      	ldr	r2, [pc, #616]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ac8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac94:	f7fb f856 	bl	8005d44 <HAL_GetTick>
 800ac98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac9a:	e008      	b.n	800acae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac9c:	f7fb f852 	bl	8005d44 <HAL_GetTick>
 800aca0:	4602      	mov	r2, r0
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e1c0      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800acae:	4b92      	ldr	r3, [pc, #584]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f0      	bne.n	800ac9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0304 	and.w	r3, r3, #4
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8081 	beq.w	800adca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800acc8:	4b8c      	ldr	r3, [pc, #560]	@ (800aefc <HAL_RCC_OscConfig+0x770>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a8b      	ldr	r2, [pc, #556]	@ (800aefc <HAL_RCC_OscConfig+0x770>)
 800acce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acd4:	f7fb f836 	bl	8005d44 <HAL_GetTick>
 800acd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acda:	e008      	b.n	800acee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acdc:	f7fb f832 	bl	8005d44 <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	2b64      	cmp	r3, #100	@ 0x64
 800ace8:	d901      	bls.n	800acee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e1a0      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acee:	4b83      	ldr	r3, [pc, #524]	@ (800aefc <HAL_RCC_OscConfig+0x770>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d0f0      	beq.n	800acdc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d106      	bne.n	800ad10 <HAL_RCC_OscConfig+0x584>
 800ad02:	4b7d      	ldr	r3, [pc, #500]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad06:	4a7c      	ldr	r2, [pc, #496]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad0e:	e02d      	b.n	800ad6c <HAL_RCC_OscConfig+0x5e0>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10c      	bne.n	800ad32 <HAL_RCC_OscConfig+0x5a6>
 800ad18:	4b77      	ldr	r3, [pc, #476]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad1c:	4a76      	ldr	r2, [pc, #472]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad1e:	f023 0301 	bic.w	r3, r3, #1
 800ad22:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad24:	4b74      	ldr	r3, [pc, #464]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad28:	4a73      	ldr	r2, [pc, #460]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad2a:	f023 0304 	bic.w	r3, r3, #4
 800ad2e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad30:	e01c      	b.n	800ad6c <HAL_RCC_OscConfig+0x5e0>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	d10c      	bne.n	800ad54 <HAL_RCC_OscConfig+0x5c8>
 800ad3a:	4b6f      	ldr	r3, [pc, #444]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad3e:	4a6e      	ldr	r2, [pc, #440]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad40:	f043 0304 	orr.w	r3, r3, #4
 800ad44:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad46:	4b6c      	ldr	r3, [pc, #432]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad4a:	4a6b      	ldr	r2, [pc, #428]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad4c:	f043 0301 	orr.w	r3, r3, #1
 800ad50:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad52:	e00b      	b.n	800ad6c <HAL_RCC_OscConfig+0x5e0>
 800ad54:	4b68      	ldr	r3, [pc, #416]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad58:	4a67      	ldr	r2, [pc, #412]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad5a:	f023 0301 	bic.w	r3, r3, #1
 800ad5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ad60:	4b65      	ldr	r3, [pc, #404]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad64:	4a64      	ldr	r2, [pc, #400]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad66:	f023 0304 	bic.w	r3, r3, #4
 800ad6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d015      	beq.n	800ada0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad74:	f7fa ffe6 	bl	8005d44 <HAL_GetTick>
 800ad78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad7a:	e00a      	b.n	800ad92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad7c:	f7fa ffe2 	bl	8005d44 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e14e      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad92:	4b59      	ldr	r3, [pc, #356]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ad94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0ee      	beq.n	800ad7c <HAL_RCC_OscConfig+0x5f0>
 800ad9e:	e014      	b.n	800adca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ada0:	f7fa ffd0 	bl	8005d44 <HAL_GetTick>
 800ada4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ada6:	e00a      	b.n	800adbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ada8:	f7fa ffcc 	bl	8005d44 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d901      	bls.n	800adbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e138      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800adbe:	4b4e      	ldr	r3, [pc, #312]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800adc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1ee      	bne.n	800ada8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 812d 	beq.w	800b02e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800add4:	4b48      	ldr	r3, [pc, #288]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800addc:	2b18      	cmp	r3, #24
 800adde:	f000 80bd 	beq.w	800af5c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	f040 809e 	bne.w	800af28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adec:	4b42      	ldr	r3, [pc, #264]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a41      	ldr	r2, [pc, #260]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800adf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adf8:	f7fa ffa4 	bl	8005d44 <HAL_GetTick>
 800adfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adfe:	e008      	b.n	800ae12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae00:	f7fa ffa0 	bl	8005d44 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d901      	bls.n	800ae12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800ae0e:	2303      	movs	r3, #3
 800ae10:	e10e      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae12:	4b39      	ldr	r3, [pc, #228]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1f0      	bne.n	800ae00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae1e:	4b36      	ldr	r3, [pc, #216]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae22:	4b37      	ldr	r3, [pc, #220]	@ (800af00 <HAL_RCC_OscConfig+0x774>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ae2e:	0112      	lsls	r2, r2, #4
 800ae30:	430a      	orrs	r2, r1
 800ae32:	4931      	ldr	r1, [pc, #196]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae46:	3b01      	subs	r3, #1
 800ae48:	025b      	lsls	r3, r3, #9
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	431a      	orrs	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae52:	3b01      	subs	r3, #1
 800ae54:	041b      	lsls	r3, r3, #16
 800ae56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae60:	3b01      	subs	r3, #1
 800ae62:	061b      	lsls	r3, r3, #24
 800ae64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae68:	4923      	ldr	r1, [pc, #140]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ae6e:	4b22      	ldr	r3, [pc, #136]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae72:	4a21      	ldr	r2, [pc, #132]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae74:	f023 0301 	bic.w	r3, r3, #1
 800ae78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae7a:	4b1f      	ldr	r3, [pc, #124]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae7e:	4b21      	ldr	r3, [pc, #132]	@ (800af04 <HAL_RCC_OscConfig+0x778>)
 800ae80:	4013      	ands	r3, r2
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae86:	00d2      	lsls	r2, r2, #3
 800ae88:	491b      	ldr	r1, [pc, #108]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae92:	f023 020c 	bic.w	r2, r3, #12
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9a:	4917      	ldr	r1, [pc, #92]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aea0:	4b15      	ldr	r3, [pc, #84]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea4:	f023 0202 	bic.w	r2, r3, #2
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeac:	4912      	ldr	r1, [pc, #72]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aeb2:	4b11      	ldr	r3, [pc, #68]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aeb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb6:	4a10      	ldr	r2, [pc, #64]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aeb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aebe:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	4a0d      	ldr	r2, [pc, #52]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aeca:	4b0b      	ldr	r3, [pc, #44]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	4a0a      	ldr	r2, [pc, #40]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aed6:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeda:	4a07      	ldr	r2, [pc, #28]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aedc:	f043 0301 	orr.w	r3, r3, #1
 800aee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aee2:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a04      	ldr	r2, [pc, #16]	@ (800aef8 <HAL_RCC_OscConfig+0x76c>)
 800aee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aeec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeee:	f7fa ff29 	bl	8005d44 <HAL_GetTick>
 800aef2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aef4:	e011      	b.n	800af1a <HAL_RCC_OscConfig+0x78e>
 800aef6:	bf00      	nop
 800aef8:	58024400 	.word	0x58024400
 800aefc:	58024800 	.word	0x58024800
 800af00:	fffffc0c 	.word	0xfffffc0c
 800af04:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af08:	f7fa ff1c 	bl	8005d44 <HAL_GetTick>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	2b02      	cmp	r3, #2
 800af14:	d901      	bls.n	800af1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e08a      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af1a:	4b47      	ldr	r3, [pc, #284]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0f0      	beq.n	800af08 <HAL_RCC_OscConfig+0x77c>
 800af26:	e082      	b.n	800b02e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af28:	4b43      	ldr	r3, [pc, #268]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a42      	ldr	r2, [pc, #264]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800af2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af34:	f7fa ff06 	bl	8005d44 <HAL_GetTick>
 800af38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af3a:	e008      	b.n	800af4e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af3c:	f7fa ff02 	bl	8005d44 <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b02      	cmp	r3, #2
 800af48:	d901      	bls.n	800af4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e070      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af4e:	4b3a      	ldr	r3, [pc, #232]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1f0      	bne.n	800af3c <HAL_RCC_OscConfig+0x7b0>
 800af5a:	e068      	b.n	800b02e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af5c:	4b36      	ldr	r3, [pc, #216]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800af5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af62:	4b35      	ldr	r3, [pc, #212]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800af64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d031      	beq.n	800afd4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f003 0203 	and.w	r2, r3, #3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d12a      	bne.n	800afd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	091b      	lsrs	r3, r3, #4
 800af82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d122      	bne.n	800afd4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d11a      	bne.n	800afd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	0a5b      	lsrs	r3, r3, #9
 800afa2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afaa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800afac:	429a      	cmp	r2, r3
 800afae:	d111      	bne.n	800afd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	0c1b      	lsrs	r3, r3, #16
 800afb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d108      	bne.n	800afd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	0e1b      	lsrs	r3, r3, #24
 800afc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d001      	beq.n	800afd8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	e02b      	b.n	800b030 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800afd8:	4b17      	ldr	r3, [pc, #92]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800afda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afdc:	08db      	lsrs	r3, r3, #3
 800afde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afe2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	429a      	cmp	r2, r3
 800afec:	d01f      	beq.n	800b02e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800afee:	4b12      	ldr	r3, [pc, #72]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800aff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff2:	4a11      	ldr	r2, [pc, #68]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800aff4:	f023 0301 	bic.w	r3, r3, #1
 800aff8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800affa:	f7fa fea3 	bl	8005d44 <HAL_GetTick>
 800affe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b000:	bf00      	nop
 800b002:	f7fa fe9f 	bl	8005d44 <HAL_GetTick>
 800b006:	4602      	mov	r2, r0
 800b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d0f9      	beq.n	800b002 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b00e:	4b0a      	ldr	r3, [pc, #40]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800b010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b012:	4b0a      	ldr	r3, [pc, #40]	@ (800b03c <HAL_RCC_OscConfig+0x8b0>)
 800b014:	4013      	ands	r3, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b01a:	00d2      	lsls	r2, r2, #3
 800b01c:	4906      	ldr	r1, [pc, #24]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b022:	4b05      	ldr	r3, [pc, #20]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800b024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b026:	4a04      	ldr	r2, [pc, #16]	@ (800b038 <HAL_RCC_OscConfig+0x8ac>)
 800b028:	f043 0301 	orr.w	r3, r3, #1
 800b02c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3730      	adds	r7, #48	@ 0x30
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	58024400 	.word	0x58024400
 800b03c:	ffff0007 	.word	0xffff0007

0800b040 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	e19c      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b054:	4b8a      	ldr	r3, [pc, #552]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 030f 	and.w	r3, r3, #15
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d910      	bls.n	800b084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b062:	4b87      	ldr	r3, [pc, #540]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f023 020f 	bic.w	r2, r3, #15
 800b06a:	4985      	ldr	r1, [pc, #532]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	4313      	orrs	r3, r2
 800b070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b072:	4b83      	ldr	r3, [pc, #524]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 030f 	and.w	r3, r3, #15
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d001      	beq.n	800b084 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e184      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d010      	beq.n	800b0b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	4b7b      	ldr	r3, [pc, #492]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d908      	bls.n	800b0b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0a0:	4b78      	ldr	r3, [pc, #480]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	4975      	ldr	r1, [pc, #468]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0308 	and.w	r3, r3, #8
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d010      	beq.n	800b0e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	695a      	ldr	r2, [r3, #20]
 800b0c2:	4b70      	ldr	r3, [pc, #448]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d908      	bls.n	800b0e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0ce:	4b6d      	ldr	r3, [pc, #436]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	496a      	ldr	r1, [pc, #424]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d010      	beq.n	800b10e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	699a      	ldr	r2, [r3, #24]
 800b0f0:	4b64      	ldr	r3, [pc, #400]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d908      	bls.n	800b10e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0fc:	4b61      	ldr	r3, [pc, #388]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	495e      	ldr	r1, [pc, #376]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d010      	beq.n	800b13c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	69da      	ldr	r2, [r3, #28]
 800b11e:	4b59      	ldr	r3, [pc, #356]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b126:	429a      	cmp	r2, r3
 800b128:	d908      	bls.n	800b13c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b12a:	4b56      	ldr	r3, [pc, #344]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b12c:	6a1b      	ldr	r3, [r3, #32]
 800b12e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	4953      	ldr	r1, [pc, #332]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0302 	and.w	r3, r3, #2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d010      	beq.n	800b16a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	4b4d      	ldr	r3, [pc, #308]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	f003 030f 	and.w	r3, r3, #15
 800b154:	429a      	cmp	r2, r3
 800b156:	d908      	bls.n	800b16a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b158:	4b4a      	ldr	r3, [pc, #296]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	f023 020f 	bic.w	r2, r3, #15
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4947      	ldr	r1, [pc, #284]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b166:	4313      	orrs	r3, r2
 800b168:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	d055      	beq.n	800b222 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b176:	4b43      	ldr	r3, [pc, #268]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	4940      	ldr	r1, [pc, #256]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b184:	4313      	orrs	r3, r2
 800b186:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d107      	bne.n	800b1a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b190:	4b3c      	ldr	r3, [pc, #240]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d121      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e0f6      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d107      	bne.n	800b1b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b1a8:	4b36      	ldr	r3, [pc, #216]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d115      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e0ea      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d107      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1c0:	4b30      	ldr	r3, [pc, #192]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d109      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e0de      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1d0:	4b2c      	ldr	r3, [pc, #176]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0304 	and.w	r3, r3, #4
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e0d6      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1e0:	4b28      	ldr	r3, [pc, #160]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	f023 0207 	bic.w	r2, r3, #7
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	4925      	ldr	r1, [pc, #148]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1f2:	f7fa fda7 	bl	8005d44 <HAL_GetTick>
 800b1f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1f8:	e00a      	b.n	800b210 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1fa:	f7fa fda3 	bl	8005d44 <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b208:	4293      	cmp	r3, r2
 800b20a:	d901      	bls.n	800b210 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e0be      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b210:	4b1c      	ldr	r3, [pc, #112]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	429a      	cmp	r2, r3
 800b220:	d1eb      	bne.n	800b1fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d010      	beq.n	800b250 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68da      	ldr	r2, [r3, #12]
 800b232:	4b14      	ldr	r3, [pc, #80]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d208      	bcs.n	800b250 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b23e:	4b11      	ldr	r3, [pc, #68]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	f023 020f 	bic.w	r2, r3, #15
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	490e      	ldr	r1, [pc, #56]	@ (800b284 <HAL_RCC_ClockConfig+0x244>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b250:	4b0b      	ldr	r3, [pc, #44]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 030f 	and.w	r3, r3, #15
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d214      	bcs.n	800b288 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b25e:	4b08      	ldr	r3, [pc, #32]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f023 020f 	bic.w	r2, r3, #15
 800b266:	4906      	ldr	r1, [pc, #24]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b26e:	4b04      	ldr	r3, [pc, #16]	@ (800b280 <HAL_RCC_ClockConfig+0x240>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 030f 	and.w	r3, r3, #15
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d005      	beq.n	800b288 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e086      	b.n	800b38e <HAL_RCC_ClockConfig+0x34e>
 800b280:	52002000 	.word	0x52002000
 800b284:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b00      	cmp	r3, #0
 800b292:	d010      	beq.n	800b2b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	4b3f      	ldr	r3, [pc, #252]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d208      	bcs.n	800b2b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b2a4:	4b3c      	ldr	r3, [pc, #240]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	4939      	ldr	r1, [pc, #228]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d010      	beq.n	800b2e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	695a      	ldr	r2, [r3, #20]
 800b2c6:	4b34      	ldr	r3, [pc, #208]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d208      	bcs.n	800b2e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2d2:	4b31      	ldr	r3, [pc, #196]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	492e      	ldr	r1, [pc, #184]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 0310 	and.w	r3, r3, #16
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d010      	beq.n	800b312 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699a      	ldr	r2, [r3, #24]
 800b2f4:	4b28      	ldr	r3, [pc, #160]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d208      	bcs.n	800b312 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b300:	4b25      	ldr	r3, [pc, #148]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	4922      	ldr	r1, [pc, #136]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0320 	and.w	r3, r3, #32
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d010      	beq.n	800b340 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	69da      	ldr	r2, [r3, #28]
 800b322:	4b1d      	ldr	r3, [pc, #116]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d208      	bcs.n	800b340 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b32e:	4b1a      	ldr	r3, [pc, #104]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	4917      	ldr	r1, [pc, #92]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b340:	f000 f834 	bl	800b3ac <HAL_RCC_GetSysClockFreq>
 800b344:	4602      	mov	r2, r0
 800b346:	4b14      	ldr	r3, [pc, #80]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	0a1b      	lsrs	r3, r3, #8
 800b34c:	f003 030f 	and.w	r3, r3, #15
 800b350:	4912      	ldr	r1, [pc, #72]	@ (800b39c <HAL_RCC_ClockConfig+0x35c>)
 800b352:	5ccb      	ldrb	r3, [r1, r3]
 800b354:	f003 031f 	and.w	r3, r3, #31
 800b358:	fa22 f303 	lsr.w	r3, r2, r3
 800b35c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b35e:	4b0e      	ldr	r3, [pc, #56]	@ (800b398 <HAL_RCC_ClockConfig+0x358>)
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	4a0d      	ldr	r2, [pc, #52]	@ (800b39c <HAL_RCC_ClockConfig+0x35c>)
 800b368:	5cd3      	ldrb	r3, [r2, r3]
 800b36a:	f003 031f 	and.w	r3, r3, #31
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	fa22 f303 	lsr.w	r3, r2, r3
 800b374:	4a0a      	ldr	r2, [pc, #40]	@ (800b3a0 <HAL_RCC_ClockConfig+0x360>)
 800b376:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b378:	4a0a      	ldr	r2, [pc, #40]	@ (800b3a4 <HAL_RCC_ClockConfig+0x364>)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b37e:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a8 <HAL_RCC_ClockConfig+0x368>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4618      	mov	r0, r3
 800b384:	f7fa fc94 	bl	8005cb0 <HAL_InitTick>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	58024400 	.word	0x58024400
 800b39c:	08018080 	.word	0x08018080
 800b3a0:	24000014 	.word	0x24000014
 800b3a4:	24000010 	.word	0x24000010
 800b3a8:	2400005c 	.word	0x2400005c

0800b3ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b089      	sub	sp, #36	@ 0x24
 800b3b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3b2:	4bb3      	ldr	r3, [pc, #716]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b3ba:	2b18      	cmp	r3, #24
 800b3bc:	f200 8155 	bhi.w	800b66a <HAL_RCC_GetSysClockFreq+0x2be>
 800b3c0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c6:	bf00      	nop
 800b3c8:	0800b42d 	.word	0x0800b42d
 800b3cc:	0800b66b 	.word	0x0800b66b
 800b3d0:	0800b66b 	.word	0x0800b66b
 800b3d4:	0800b66b 	.word	0x0800b66b
 800b3d8:	0800b66b 	.word	0x0800b66b
 800b3dc:	0800b66b 	.word	0x0800b66b
 800b3e0:	0800b66b 	.word	0x0800b66b
 800b3e4:	0800b66b 	.word	0x0800b66b
 800b3e8:	0800b453 	.word	0x0800b453
 800b3ec:	0800b66b 	.word	0x0800b66b
 800b3f0:	0800b66b 	.word	0x0800b66b
 800b3f4:	0800b66b 	.word	0x0800b66b
 800b3f8:	0800b66b 	.word	0x0800b66b
 800b3fc:	0800b66b 	.word	0x0800b66b
 800b400:	0800b66b 	.word	0x0800b66b
 800b404:	0800b66b 	.word	0x0800b66b
 800b408:	0800b459 	.word	0x0800b459
 800b40c:	0800b66b 	.word	0x0800b66b
 800b410:	0800b66b 	.word	0x0800b66b
 800b414:	0800b66b 	.word	0x0800b66b
 800b418:	0800b66b 	.word	0x0800b66b
 800b41c:	0800b66b 	.word	0x0800b66b
 800b420:	0800b66b 	.word	0x0800b66b
 800b424:	0800b66b 	.word	0x0800b66b
 800b428:	0800b45f 	.word	0x0800b45f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b42c:	4b94      	ldr	r3, [pc, #592]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f003 0320 	and.w	r3, r3, #32
 800b434:	2b00      	cmp	r3, #0
 800b436:	d009      	beq.n	800b44c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b438:	4b91      	ldr	r3, [pc, #580]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	08db      	lsrs	r3, r3, #3
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	4a90      	ldr	r2, [pc, #576]	@ (800b684 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b444:	fa22 f303 	lsr.w	r3, r2, r3
 800b448:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b44a:	e111      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b44c:	4b8d      	ldr	r3, [pc, #564]	@ (800b684 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b44e:	61bb      	str	r3, [r7, #24]
      break;
 800b450:	e10e      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b452:	4b8d      	ldr	r3, [pc, #564]	@ (800b688 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b454:	61bb      	str	r3, [r7, #24]
      break;
 800b456:	e10b      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b458:	4b8c      	ldr	r3, [pc, #560]	@ (800b68c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b45a:	61bb      	str	r3, [r7, #24]
      break;
 800b45c:	e108      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b45e:	4b88      	ldr	r3, [pc, #544]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b468:	4b85      	ldr	r3, [pc, #532]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46c:	091b      	lsrs	r3, r3, #4
 800b46e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b472:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b474:	4b82      	ldr	r3, [pc, #520]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b47e:	4b80      	ldr	r3, [pc, #512]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b482:	08db      	lsrs	r3, r3, #3
 800b484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 80e1 	beq.w	800b664 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	f000 8083 	beq.w	800b5b0 <HAL_RCC_GetSysClockFreq+0x204>
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	f200 80a1 	bhi.w	800b5f4 <HAL_RCC_GetSysClockFreq+0x248>
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_RCC_GetSysClockFreq+0x114>
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d056      	beq.n	800b56c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4be:	e099      	b.n	800b5f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4c0:	4b6f      	ldr	r3, [pc, #444]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0320 	and.w	r3, r3, #32
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d02d      	beq.n	800b528 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4cc:	4b6c      	ldr	r3, [pc, #432]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	08db      	lsrs	r3, r3, #3
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	4a6b      	ldr	r2, [pc, #428]	@ (800b684 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f6:	4b62      	ldr	r3, [pc, #392]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b506:	ed97 6a02 	vldr	s12, [r7, #8]
 800b50a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b522:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b526:	e087      	b.n	800b638 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b694 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53a:	4b51      	ldr	r3, [pc, #324]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b54e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b56a:	e065      	b.n	800b638 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b698 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b57e:	4b40      	ldr	r3, [pc, #256]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b58e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b592:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b59e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5ae:	e043      	b.n	800b638 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b69c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5f2:	e021      	b.n	800b638 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b698 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b606:	4b1e      	ldr	r3, [pc, #120]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b60e:	ee07 3a90 	vmov	s15, r3
 800b612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b616:	ed97 6a02 	vldr	s12, [r7, #8]
 800b61a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b690 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b636:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b638:	4b11      	ldr	r3, [pc, #68]	@ (800b680 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63c:	0a5b      	lsrs	r3, r3, #9
 800b63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b642:	3301      	adds	r3, #1
 800b644:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	ee07 3a90 	vmov	s15, r3
 800b64c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b650:	edd7 6a07 	vldr	s13, [r7, #28]
 800b654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65c:	ee17 3a90 	vmov	r3, s15
 800b660:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b662:	e005      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	61bb      	str	r3, [r7, #24]
      break;
 800b668:	e002      	b.n	800b670 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b66a:	4b07      	ldr	r3, [pc, #28]	@ (800b688 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b66c:	61bb      	str	r3, [r7, #24]
      break;
 800b66e:	bf00      	nop
  }

  return sysclockfreq;
 800b670:	69bb      	ldr	r3, [r7, #24]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3724      	adds	r7, #36	@ 0x24
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	58024400 	.word	0x58024400
 800b684:	03d09000 	.word	0x03d09000
 800b688:	003d0900 	.word	0x003d0900
 800b68c:	017d7840 	.word	0x017d7840
 800b690:	46000000 	.word	0x46000000
 800b694:	4c742400 	.word	0x4c742400
 800b698:	4a742400 	.word	0x4a742400
 800b69c:	4bbebc20 	.word	0x4bbebc20

0800b6a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b6a6:	f7ff fe81 	bl	800b3ac <HAL_RCC_GetSysClockFreq>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	4b10      	ldr	r3, [pc, #64]	@ (800b6f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	0a1b      	lsrs	r3, r3, #8
 800b6b2:	f003 030f 	and.w	r3, r3, #15
 800b6b6:	490f      	ldr	r1, [pc, #60]	@ (800b6f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6b8:	5ccb      	ldrb	r3, [r1, r3]
 800b6ba:	f003 031f 	and.w	r3, r3, #31
 800b6be:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	f003 030f 	and.w	r3, r3, #15
 800b6cc:	4a09      	ldr	r2, [pc, #36]	@ (800b6f4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6ce:	5cd3      	ldrb	r3, [r2, r3]
 800b6d0:	f003 031f 	and.w	r3, r3, #31
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6da:	4a07      	ldr	r2, [pc, #28]	@ (800b6f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6de:	4a07      	ldr	r2, [pc, #28]	@ (800b6fc <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6e4:	4b04      	ldr	r3, [pc, #16]	@ (800b6f8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	58024400 	.word	0x58024400
 800b6f4:	08018080 	.word	0x08018080
 800b6f8:	24000014 	.word	0x24000014
 800b6fc:	24000010 	.word	0x24000010

0800b700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b704:	f7ff ffcc 	bl	800b6a0 <HAL_RCC_GetHCLKFreq>
 800b708:	4602      	mov	r2, r0
 800b70a:	4b06      	ldr	r3, [pc, #24]	@ (800b724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	0a1b      	lsrs	r3, r3, #8
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	4904      	ldr	r1, [pc, #16]	@ (800b728 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b716:	5ccb      	ldrb	r3, [r1, r3]
 800b718:	f003 031f 	and.w	r3, r3, #31
 800b71c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b720:	4618      	mov	r0, r3
 800b722:	bd80      	pop	{r7, pc}
 800b724:	58024400 	.word	0x58024400
 800b728:	08018080 	.word	0x08018080

0800b72c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b72c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b730:	b0ca      	sub	sp, #296	@ 0x128
 800b732:	af00      	add	r7, sp, #0
 800b734:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b738:	2300      	movs	r3, #0
 800b73a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b73e:	2300      	movs	r3, #0
 800b740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b750:	2500      	movs	r5, #0
 800b752:	ea54 0305 	orrs.w	r3, r4, r5
 800b756:	d049      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b75c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b75e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b762:	d02f      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b764:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b768:	d828      	bhi.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b76a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b76e:	d01a      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b774:	d822      	bhi.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b77a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b77e:	d007      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b780:	e01c      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b782:	4bb8      	ldr	r3, [pc, #736]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b786:	4ab7      	ldr	r2, [pc, #732]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b78c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b78e:	e01a      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b794:	3308      	adds	r3, #8
 800b796:	2102      	movs	r1, #2
 800b798:	4618      	mov	r0, r3
 800b79a:	f001 f9d1 	bl	800cb40 <RCCEx_PLL2_Config>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7a4:	e00f      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7aa:	3328      	adds	r3, #40	@ 0x28
 800b7ac:	2102      	movs	r1, #2
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f001 fa78 	bl	800cca4 <RCCEx_PLL3_Config>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7ba:	e004      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b7c2:	e000      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10a      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b7ce:	4ba5      	ldr	r3, [pc, #660]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7dc:	4aa1      	ldr	r2, [pc, #644]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7de:	430b      	orrs	r3, r1
 800b7e0:	6513      	str	r3, [r2, #80]	@ 0x50
 800b7e2:	e003      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b7e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b7f8:	f04f 0900 	mov.w	r9, #0
 800b7fc:	ea58 0309 	orrs.w	r3, r8, r9
 800b800:	d047      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b808:	2b04      	cmp	r3, #4
 800b80a:	d82a      	bhi.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b80c:	a201      	add	r2, pc, #4	@ (adr r2, 800b814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b812:	bf00      	nop
 800b814:	0800b829 	.word	0x0800b829
 800b818:	0800b837 	.word	0x0800b837
 800b81c:	0800b84d 	.word	0x0800b84d
 800b820:	0800b86b 	.word	0x0800b86b
 800b824:	0800b86b 	.word	0x0800b86b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b828:	4b8e      	ldr	r3, [pc, #568]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82c:	4a8d      	ldr	r2, [pc, #564]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b82e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b834:	e01a      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b83a:	3308      	adds	r3, #8
 800b83c:	2100      	movs	r1, #0
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 f97e 	bl	800cb40 <RCCEx_PLL2_Config>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b84a:	e00f      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b850:	3328      	adds	r3, #40	@ 0x28
 800b852:	2100      	movs	r1, #0
 800b854:	4618      	mov	r0, r3
 800b856:	f001 fa25 	bl	800cca4 <RCCEx_PLL3_Config>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b860:	e004      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b862:	2301      	movs	r3, #1
 800b864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b868:	e000      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b86a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b86c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b874:	4b7b      	ldr	r3, [pc, #492]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b878:	f023 0107 	bic.w	r1, r3, #7
 800b87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b882:	4a78      	ldr	r2, [pc, #480]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b884:	430b      	orrs	r3, r1
 800b886:	6513      	str	r3, [r2, #80]	@ 0x50
 800b888:	e003      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b88e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b89e:	f04f 0b00 	mov.w	fp, #0
 800b8a2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b8a6:	d04c      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8b2:	d030      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b8b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8b8:	d829      	bhi.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b8ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8bc:	d02d      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b8be:	2bc0      	cmp	r3, #192	@ 0xc0
 800b8c0:	d825      	bhi.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b8c2:	2b80      	cmp	r3, #128	@ 0x80
 800b8c4:	d018      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b8c6:	2b80      	cmp	r3, #128	@ 0x80
 800b8c8:	d821      	bhi.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d002      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b8ce:	2b40      	cmp	r3, #64	@ 0x40
 800b8d0:	d007      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b8d2:	e01c      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8d4:	4b63      	ldr	r3, [pc, #396]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d8:	4a62      	ldr	r2, [pc, #392]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b8da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8e0:	e01c      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8e6:	3308      	adds	r3, #8
 800b8e8:	2100      	movs	r1, #0
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 f928 	bl	800cb40 <RCCEx_PLL2_Config>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8f6:	e011      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8fc:	3328      	adds	r3, #40	@ 0x28
 800b8fe:	2100      	movs	r1, #0
 800b900:	4618      	mov	r0, r3
 800b902:	f001 f9cf 	bl	800cca4 <RCCEx_PLL3_Config>
 800b906:	4603      	mov	r3, r0
 800b908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b90c:	e006      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b914:	e002      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b916:	bf00      	nop
 800b918:	e000      	b.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b91a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b920:	2b00      	cmp	r3, #0
 800b922:	d10a      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b924:	4b4f      	ldr	r3, [pc, #316]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b928:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b932:	4a4c      	ldr	r2, [pc, #304]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b934:	430b      	orrs	r3, r1
 800b936:	6513      	str	r3, [r2, #80]	@ 0x50
 800b938:	e003      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b93e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b94e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800b952:	2300      	movs	r3, #0
 800b954:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800b958:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800b95c:	460b      	mov	r3, r1
 800b95e:	4313      	orrs	r3, r2
 800b960:	d053      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b96a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b96e:	d035      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b974:	d82e      	bhi.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b976:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b97a:	d031      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b97c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b980:	d828      	bhi.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b986:	d01a      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b988:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b98c:	d822      	bhi.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b996:	d007      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b998:	e01c      	b.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99a:	4b32      	ldr	r3, [pc, #200]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99e:	4a31      	ldr	r2, [pc, #196]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9a6:	e01c      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f001 f8c5 	bl	800cb40 <RCCEx_PLL2_Config>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b9bc:	e011      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9c2:	3328      	adds	r3, #40	@ 0x28
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f001 f96c 	bl	800cca4 <RCCEx_PLL3_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9d2:	e006      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b9da:	e002      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b9dc:	bf00      	nop
 800b9de:	e000      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b9e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10b      	bne.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b9ea:	4b1e      	ldr	r3, [pc, #120]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b9fa:	4a1a      	ldr	r2, [pc, #104]	@ (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba00:	e003      	b.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ba0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ba16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ba20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ba24:	460b      	mov	r3, r1
 800ba26:	4313      	orrs	r3, r2
 800ba28:	d056      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ba2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ba32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba36:	d038      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ba38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba3c:	d831      	bhi.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba42:	d034      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ba44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba48:	d82b      	bhi.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba4e:	d01d      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ba50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba54:	d825      	bhi.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d006      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ba5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba5e:	d00a      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ba60:	e01f      	b.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba62:	bf00      	nop
 800ba64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba68:	4ba2      	ldr	r3, [pc, #648]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba6c:	4aa1      	ldr	r2, [pc, #644]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba74:	e01c      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 f85e 	bl	800cb40 <RCCEx_PLL2_Config>
 800ba84:	4603      	mov	r3, r0
 800ba86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba8a:	e011      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba90:	3328      	adds	r3, #40	@ 0x28
 800ba92:	2100      	movs	r1, #0
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 f905 	bl	800cca4 <RCCEx_PLL3_Config>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baa0:	e006      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800baa8:	e002      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800baaa:	bf00      	nop
 800baac:	e000      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800baae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10b      	bne.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bab8:	4b8e      	ldr	r3, [pc, #568]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800baba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800babc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bac8:	4a8a      	ldr	r2, [pc, #552]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800baca:	430b      	orrs	r3, r1
 800bacc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bace:	e003      	b.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bae4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bae8:	2300      	movs	r3, #0
 800baea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800baee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800baf2:	460b      	mov	r3, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	d03a      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800baf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bafc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bafe:	2b30      	cmp	r3, #48	@ 0x30
 800bb00:	d01f      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800bb02:	2b30      	cmp	r3, #48	@ 0x30
 800bb04:	d819      	bhi.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bb06:	2b20      	cmp	r3, #32
 800bb08:	d00c      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bb0a:	2b20      	cmp	r3, #32
 800bb0c:	d815      	bhi.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d019      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bb12:	2b10      	cmp	r3, #16
 800bb14:	d111      	bne.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb16:	4b77      	ldr	r3, [pc, #476]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1a:	4a76      	ldr	r2, [pc, #472]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bb22:	e011      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb28:	3308      	adds	r3, #8
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f001 f807 	bl	800cb40 <RCCEx_PLL2_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bb38:	e006      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bb40:	e002      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bb42:	bf00      	nop
 800bb44:	e000      	b.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bb46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bb50:	4b68      	ldr	r3, [pc, #416]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb5e:	4a65      	ldr	r2, [pc, #404]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb60:	430b      	orrs	r3, r1
 800bb62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bb64:	e003      	b.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bb7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	d051      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb98:	d035      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800bb9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb9e:	d82e      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bba0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bba4:	d031      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800bba6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbaa:	d828      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bbac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbb0:	d01a      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bbb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbb6:	d822      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bbbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbc0:	d007      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800bbc2:	e01c      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbc4:	4b4b      	ldr	r3, [pc, #300]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc8:	4a4a      	ldr	r2, [pc, #296]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbd0:	e01c      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	2100      	movs	r1, #0
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 ffb0 	bl	800cb40 <RCCEx_PLL2_Config>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbe6:	e011      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbec:	3328      	adds	r3, #40	@ 0x28
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f001 f857 	bl	800cca4 <RCCEx_PLL3_Config>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbfc:	e006      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bc04:	e002      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bc06:	bf00      	nop
 800bc08:	e000      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bc0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bc14:	4b37      	ldr	r3, [pc, #220]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bc22:	4a34      	ldr	r2, [pc, #208]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc24:	430b      	orrs	r3, r1
 800bc26:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc28:	e003      	b.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bc3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc42:	2300      	movs	r3, #0
 800bc44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	d056      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc5c:	d033      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bc5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bc62:	d82c      	bhi.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc68:	d02f      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800bc6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bc6e:	d826      	bhi.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc74:	d02b      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800bc76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc7a:	d820      	bhi.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc80:	d012      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800bc82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc86:	d81a      	bhi.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d022      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc90:	d115      	bne.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc96:	3308      	adds	r3, #8
 800bc98:	2101      	movs	r1, #1
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 ff50 	bl	800cb40 <RCCEx_PLL2_Config>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bca6:	e015      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcac:	3328      	adds	r3, #40	@ 0x28
 800bcae:	2101      	movs	r1, #1
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 fff7 	bl	800cca4 <RCCEx_PLL3_Config>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bcbc:	e00a      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bcc4:	e006      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcc6:	bf00      	nop
 800bcc8:	e004      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcca:	bf00      	nop
 800bccc:	e002      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcce:	bf00      	nop
 800bcd0:	e000      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10d      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bcdc:	4b05      	ldr	r3, [pc, #20]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bce0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcea:	4a02      	ldr	r2, [pc, #8]	@ (800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcec:	430b      	orrs	r3, r1
 800bcee:	6513      	str	r3, [r2, #80]	@ 0x50
 800bcf0:	e006      	b.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bd0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd10:	2300      	movs	r3, #0
 800bd12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	d055      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd2c:	d033      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bd2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd32:	d82c      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd38:	d02f      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bd3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd3e:	d826      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd44:	d02b      	beq.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bd46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd4a:	d820      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd50:	d012      	beq.n	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bd52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd56:	d81a      	bhi.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d022      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bd5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd60:	d115      	bne.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd66:	3308      	adds	r3, #8
 800bd68:	2101      	movs	r1, #1
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fee8 	bl	800cb40 <RCCEx_PLL2_Config>
 800bd70:	4603      	mov	r3, r0
 800bd72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd76:	e015      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd7c:	3328      	adds	r3, #40	@ 0x28
 800bd7e:	2101      	movs	r1, #1
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 ff8f 	bl	800cca4 <RCCEx_PLL3_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd8c:	e00a      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bd94:	e006      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd96:	bf00      	nop
 800bd98:	e004      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd9a:	bf00      	nop
 800bd9c:	e002      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd9e:	bf00      	nop
 800bda0:	e000      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bda2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10b      	bne.n	800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bdac:	4ba3      	ldr	r3, [pc, #652]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bdb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdbc:	4a9f      	ldr	r2, [pc, #636]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdbe:	430b      	orrs	r3, r1
 800bdc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdc2:	e003      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bdc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bdd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bddc:	2300      	movs	r3, #0
 800bdde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bde2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bde6:	460b      	mov	r3, r1
 800bde8:	4313      	orrs	r3, r2
 800bdea:	d037      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bdec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdf6:	d00e      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bdf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdfc:	d816      	bhi.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d018      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800be02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be06:	d111      	bne.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be08:	4b8c      	ldr	r3, [pc, #560]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	4a8b      	ldr	r2, [pc, #556]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be14:	e00f      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be1a:	3308      	adds	r3, #8
 800be1c:	2101      	movs	r1, #1
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 fe8e 	bl	800cb40 <RCCEx_PLL2_Config>
 800be24:	4603      	mov	r3, r0
 800be26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be2a:	e004      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800be32:	e000      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800be34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10a      	bne.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be3e:	4b7f      	ldr	r3, [pc, #508]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800be46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be4c:	4a7b      	ldr	r2, [pc, #492]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be4e:	430b      	orrs	r3, r1
 800be50:	6513      	str	r3, [r2, #80]	@ 0x50
 800be52:	e003      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800be68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be6c:	2300      	movs	r3, #0
 800be6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800be76:	460b      	mov	r3, r1
 800be78:	4313      	orrs	r3, r2
 800be7a:	d039      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be82:	2b03      	cmp	r3, #3
 800be84:	d81c      	bhi.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800be86:	a201      	add	r2, pc, #4	@ (adr r2, 800be8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800bec9 	.word	0x0800bec9
 800be90:	0800be9d 	.word	0x0800be9d
 800be94:	0800beab 	.word	0x0800beab
 800be98:	0800bec9 	.word	0x0800bec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be9c:	4b67      	ldr	r3, [pc, #412]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea0:	4a66      	ldr	r2, [pc, #408]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bea8:	e00f      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800beae:	3308      	adds	r3, #8
 800beb0:	2102      	movs	r1, #2
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fe44 	bl	800cb40 <RCCEx_PLL2_Config>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bebe:	e004      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bec6:	e000      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800bec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bed2:	4b5a      	ldr	r3, [pc, #360]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bed6:	f023 0103 	bic.w	r1, r3, #3
 800beda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bee0:	4a56      	ldr	r2, [pc, #344]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bee2:	430b      	orrs	r3, r1
 800bee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bee6:	e003      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800beec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800befc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bf00:	2300      	movs	r3, #0
 800bf02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bf06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	f000 809f 	beq.w	800c050 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf12:	4b4b      	ldr	r3, [pc, #300]	@ (800c040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a4a      	ldr	r2, [pc, #296]	@ (800c040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bf18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf1e:	f7f9 ff11 	bl	8005d44 <HAL_GetTick>
 800bf22:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf26:	e00b      	b.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf28:	f7f9 ff0c 	bl	8005d44 <HAL_GetTick>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	2b64      	cmp	r3, #100	@ 0x64
 800bf36:	d903      	bls.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bf3e:	e005      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf40:	4b3f      	ldr	r3, [pc, #252]	@ (800c040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d0ed      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bf4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d179      	bne.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf54:	4b39      	ldr	r3, [pc, #228]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bf58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf60:	4053      	eors	r3, r2
 800bf62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d015      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf6a:	4b34      	ldr	r3, [pc, #208]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf76:	4b31      	ldr	r3, [pc, #196]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf7a:	4a30      	ldr	r2, [pc, #192]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf82:	4b2e      	ldr	r3, [pc, #184]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf86:	4a2d      	ldr	r2, [pc, #180]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf8e:	4a2b      	ldr	r2, [pc, #172]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bf94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfa2:	d118      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa4:	f7f9 fece 	bl	8005d44 <HAL_GetTick>
 800bfa8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfac:	e00d      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfae:	f7f9 fec9 	bl	8005d44 <HAL_GetTick>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bfb8:	1ad2      	subs	r2, r2, r3
 800bfba:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d903      	bls.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800bfc8:	e005      	b.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfca:	4b1c      	ldr	r3, [pc, #112]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfce:	f003 0302 	and.w	r3, r3, #2
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0eb      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bfd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d129      	bne.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bfe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfee:	d10e      	bne.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bff0:	4b12      	ldr	r3, [pc, #72]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bff2:	691b      	ldr	r3, [r3, #16]
 800bff4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c000:	091a      	lsrs	r2, r3, #4
 800c002:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800c004:	4013      	ands	r3, r2
 800c006:	4a0d      	ldr	r2, [pc, #52]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c008:	430b      	orrs	r3, r1
 800c00a:	6113      	str	r3, [r2, #16]
 800c00c:	e005      	b.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c00e:	4b0b      	ldr	r3, [pc, #44]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	4a0a      	ldr	r2, [pc, #40]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c014:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c018:	6113      	str	r3, [r2, #16]
 800c01a:	4b08      	ldr	r3, [pc, #32]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c01c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c02a:	4a04      	ldr	r2, [pc, #16]	@ (800c03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c02c:	430b      	orrs	r3, r1
 800c02e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c030:	e00e      	b.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800c03a:	e009      	b.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c03c:	58024400 	.word	0x58024400
 800c040:	58024800 	.word	0x58024800
 800c044:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c04c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	f002 0301 	and.w	r3, r2, #1
 800c05c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c060:	2300      	movs	r3, #0
 800c062:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4313      	orrs	r3, r2
 800c06e:	f000 8089 	beq.w	800c184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c078:	2b28      	cmp	r3, #40	@ 0x28
 800c07a:	d86b      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c07c:	a201      	add	r2, pc, #4	@ (adr r2, 800c084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c082:	bf00      	nop
 800c084:	0800c15d 	.word	0x0800c15d
 800c088:	0800c155 	.word	0x0800c155
 800c08c:	0800c155 	.word	0x0800c155
 800c090:	0800c155 	.word	0x0800c155
 800c094:	0800c155 	.word	0x0800c155
 800c098:	0800c155 	.word	0x0800c155
 800c09c:	0800c155 	.word	0x0800c155
 800c0a0:	0800c155 	.word	0x0800c155
 800c0a4:	0800c129 	.word	0x0800c129
 800c0a8:	0800c155 	.word	0x0800c155
 800c0ac:	0800c155 	.word	0x0800c155
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c155 	.word	0x0800c155
 800c0b8:	0800c155 	.word	0x0800c155
 800c0bc:	0800c155 	.word	0x0800c155
 800c0c0:	0800c155 	.word	0x0800c155
 800c0c4:	0800c13f 	.word	0x0800c13f
 800c0c8:	0800c155 	.word	0x0800c155
 800c0cc:	0800c155 	.word	0x0800c155
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c155 	.word	0x0800c155
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c155 	.word	0x0800c155
 800c0e0:	0800c155 	.word	0x0800c155
 800c0e4:	0800c15d 	.word	0x0800c15d
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c155 	.word	0x0800c155
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c155 	.word	0x0800c155
 800c0f8:	0800c155 	.word	0x0800c155
 800c0fc:	0800c155 	.word	0x0800c155
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c15d 	.word	0x0800c15d
 800c108:	0800c155 	.word	0x0800c155
 800c10c:	0800c155 	.word	0x0800c155
 800c110:	0800c155 	.word	0x0800c155
 800c114:	0800c155 	.word	0x0800c155
 800c118:	0800c155 	.word	0x0800c155
 800c11c:	0800c155 	.word	0x0800c155
 800c120:	0800c155 	.word	0x0800c155
 800c124:	0800c15d 	.word	0x0800c15d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c12c:	3308      	adds	r3, #8
 800c12e:	2101      	movs	r1, #1
 800c130:	4618      	mov	r0, r3
 800c132:	f000 fd05 	bl	800cb40 <RCCEx_PLL2_Config>
 800c136:	4603      	mov	r3, r0
 800c138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c13c:	e00f      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c142:	3328      	adds	r3, #40	@ 0x28
 800c144:	2101      	movs	r1, #1
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fdac 	bl	800cca4 <RCCEx_PLL3_Config>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c152:	e004      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c15a:	e000      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c15c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c15e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10a      	bne.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c166:	4bbf      	ldr	r3, [pc, #764]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c16a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c174:	4abb      	ldr	r2, [pc, #748]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c176:	430b      	orrs	r3, r1
 800c178:	6553      	str	r3, [r2, #84]	@ 0x54
 800c17a:	e003      	b.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f002 0302 	and.w	r3, r2, #2
 800c190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c194:	2300      	movs	r3, #0
 800c196:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c19a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	d041      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1aa:	2b05      	cmp	r3, #5
 800c1ac:	d824      	bhi.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c201 	.word	0x0800c201
 800c1b8:	0800c1cd 	.word	0x0800c1cd
 800c1bc:	0800c1e3 	.word	0x0800c1e3
 800c1c0:	0800c201 	.word	0x0800c201
 800c1c4:	0800c201 	.word	0x0800c201
 800c1c8:	0800c201 	.word	0x0800c201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fcb3 	bl	800cb40 <RCCEx_PLL2_Config>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1e0:	e00f      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1e6:	3328      	adds	r3, #40	@ 0x28
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fd5a 	bl	800cca4 <RCCEx_PLL3_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1f6:	e004      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c1fe:	e000      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10a      	bne.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c20a:	4b96      	ldr	r3, [pc, #600]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20e:	f023 0107 	bic.w	r1, r3, #7
 800c212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c218:	4a92      	ldr	r2, [pc, #584]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c21a:	430b      	orrs	r3, r1
 800c21c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c21e:	e003      	b.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c224:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f002 0304 	and.w	r3, r2, #4
 800c234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c238:	2300      	movs	r3, #0
 800c23a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c23e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c242:	460b      	mov	r3, r1
 800c244:	4313      	orrs	r3, r2
 800c246:	d044      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c24c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c250:	2b05      	cmp	r3, #5
 800c252:	d825      	bhi.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c254:	a201      	add	r2, pc, #4	@ (adr r2, 800c25c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25a:	bf00      	nop
 800c25c:	0800c2a9 	.word	0x0800c2a9
 800c260:	0800c275 	.word	0x0800c275
 800c264:	0800c28b 	.word	0x0800c28b
 800c268:	0800c2a9 	.word	0x0800c2a9
 800c26c:	0800c2a9 	.word	0x0800c2a9
 800c270:	0800c2a9 	.word	0x0800c2a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c278:	3308      	adds	r3, #8
 800c27a:	2101      	movs	r1, #1
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 fc5f 	bl	800cb40 <RCCEx_PLL2_Config>
 800c282:	4603      	mov	r3, r0
 800c284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c288:	e00f      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c28e:	3328      	adds	r3, #40	@ 0x28
 800c290:	2101      	movs	r1, #1
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fd06 	bl	800cca4 <RCCEx_PLL3_Config>
 800c298:	4603      	mov	r3, r0
 800c29a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c29e:	e004      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c2a6:	e000      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10b      	bne.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2b2:	4b6c      	ldr	r3, [pc, #432]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c2b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2b6:	f023 0107 	bic.w	r1, r3, #7
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c2c2:	4a68      	ldr	r2, [pc, #416]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c2c4:	430b      	orrs	r3, r1
 800c2c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c2c8:	e003      	b.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c2ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2da:	f002 0320 	and.w	r3, r2, #32
 800c2de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	d055      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2fe:	d033      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c304:	d82c      	bhi.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c30a:	d02f      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c30c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c310:	d826      	bhi.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c312:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c316:	d02b      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c318:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c31c:	d820      	bhi.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c322:	d012      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c328:	d81a      	bhi.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d022      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c32e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c332:	d115      	bne.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c338:	3308      	adds	r3, #8
 800c33a:	2100      	movs	r1, #0
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 fbff 	bl	800cb40 <RCCEx_PLL2_Config>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c348:	e015      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c34e:	3328      	adds	r3, #40	@ 0x28
 800c350:	2102      	movs	r1, #2
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fca6 	bl	800cca4 <RCCEx_PLL3_Config>
 800c358:	4603      	mov	r3, r0
 800c35a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c35e:	e00a      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c366:	e006      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c368:	bf00      	nop
 800c36a:	e004      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c36c:	bf00      	nop
 800c36e:	e002      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c370:	bf00      	nop
 800c372:	e000      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10b      	bne.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c37e:	4b39      	ldr	r3, [pc, #228]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c382:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c38e:	4a35      	ldr	r2, [pc, #212]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c390:	430b      	orrs	r3, r1
 800c392:	6553      	str	r3, [r2, #84]	@ 0x54
 800c394:	e003      	b.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c39a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c3aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c3b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d058      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c3c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c3ca:	d033      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c3cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c3d0:	d82c      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3d6:	d02f      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c3d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3dc:	d826      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3e2:	d02b      	beq.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c3e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3e8:	d820      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3ee:	d012      	beq.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c3f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3f4:	d81a      	bhi.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d022      	beq.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c3fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3fe:	d115      	bne.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c404:	3308      	adds	r3, #8
 800c406:	2100      	movs	r1, #0
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 fb99 	bl	800cb40 <RCCEx_PLL2_Config>
 800c40e:	4603      	mov	r3, r0
 800c410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c414:	e015      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c41a:	3328      	adds	r3, #40	@ 0x28
 800c41c:	2102      	movs	r1, #2
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fc40 	bl	800cca4 <RCCEx_PLL3_Config>
 800c424:	4603      	mov	r3, r0
 800c426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c42a:	e00a      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c42c:	2301      	movs	r3, #1
 800c42e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c432:	e006      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c434:	bf00      	nop
 800c436:	e004      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c438:	bf00      	nop
 800c43a:	e002      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c43c:	bf00      	nop
 800c43e:	e000      	b.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c440:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10e      	bne.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c44a:	4b06      	ldr	r3, [pc, #24]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c44e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c45a:	4a02      	ldr	r2, [pc, #8]	@ (800c464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c45c:	430b      	orrs	r3, r1
 800c45e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c460:	e006      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c462:	bf00      	nop
 800c464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c46c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c47c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c486:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c48a:	460b      	mov	r3, r1
 800c48c:	4313      	orrs	r3, r2
 800c48e:	d055      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c498:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c49c:	d033      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c49e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c4a2:	d82c      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4a8:	d02f      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4ae:	d826      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c4b4:	d02b      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c4b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c4ba:	d820      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4c0:	d012      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c4c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4c6:	d81a      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d022      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c4cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4d0:	d115      	bne.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 fb30 	bl	800cb40 <RCCEx_PLL2_Config>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4e6:	e015      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4ec:	3328      	adds	r3, #40	@ 0x28
 800c4ee:	2102      	movs	r1, #2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 fbd7 	bl	800cca4 <RCCEx_PLL3_Config>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4fc:	e00a      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c504:	e006      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c506:	bf00      	nop
 800c508:	e004      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c50a:	bf00      	nop
 800c50c:	e002      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c50e:	bf00      	nop
 800c510:	e000      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c512:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10b      	bne.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c51c:	4ba1      	ldr	r3, [pc, #644]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c51e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c520:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c52c:	4a9d      	ldr	r2, [pc, #628]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c52e:	430b      	orrs	r3, r1
 800c530:	6593      	str	r3, [r2, #88]	@ 0x58
 800c532:	e003      	b.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c538:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f002 0308 	and.w	r3, r2, #8
 800c548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c54c:	2300      	movs	r3, #0
 800c54e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c556:	460b      	mov	r3, r1
 800c558:	4313      	orrs	r3, r2
 800c55a:	d01e      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c568:	d10c      	bne.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c56e:	3328      	adds	r3, #40	@ 0x28
 800c570:	2102      	movs	r1, #2
 800c572:	4618      	mov	r0, r3
 800c574:	f000 fb96 	bl	800cca4 <RCCEx_PLL3_Config>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c57e:	2301      	movs	r3, #1
 800c580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c584:	4b87      	ldr	r3, [pc, #540]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c588:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c594:	4a83      	ldr	r2, [pc, #524]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c596:	430b      	orrs	r3, r1
 800c598:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f002 0310 	and.w	r3, r2, #16
 800c5a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c5b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	d01e      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5c6:	d10c      	bne.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5cc:	3328      	adds	r3, #40	@ 0x28
 800c5ce:	2102      	movs	r1, #2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 fb67 	bl	800cca4 <RCCEx_PLL3_Config>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c5e2:	4b70      	ldr	r3, [pc, #448]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c5e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5f2:	4a6c      	ldr	r2, [pc, #432]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c5f4:	430b      	orrs	r3, r1
 800c5f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c608:	2300      	movs	r3, #0
 800c60a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c60e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c612:	460b      	mov	r3, r1
 800c614:	4313      	orrs	r3, r2
 800c616:	d03e      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c61c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c624:	d022      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c62a:	d81b      	bhi.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c634:	d00b      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c636:	e015      	b.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c63c:	3308      	adds	r3, #8
 800c63e:	2100      	movs	r1, #0
 800c640:	4618      	mov	r0, r3
 800c642:	f000 fa7d 	bl	800cb40 <RCCEx_PLL2_Config>
 800c646:	4603      	mov	r3, r0
 800c648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c64c:	e00f      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c652:	3328      	adds	r3, #40	@ 0x28
 800c654:	2102      	movs	r1, #2
 800c656:	4618      	mov	r0, r3
 800c658:	f000 fb24 	bl	800cca4 <RCCEx_PLL3_Config>
 800c65c:	4603      	mov	r3, r0
 800c65e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c662:	e004      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c66a:	e000      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c66e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10b      	bne.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c676:	4b4b      	ldr	r3, [pc, #300]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c67a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c686:	4a47      	ldr	r2, [pc, #284]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c688:	430b      	orrs	r3, r1
 800c68a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c68c:	e003      	b.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c68e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c6a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c6a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	d03b      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c6be:	d01f      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c6c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c6c4:	d818      	bhi.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c6c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6ca:	d003      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c6cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6d0:	d007      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c6d2:	e011      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6d4:	4b33      	ldr	r3, [pc, #204]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d8:	4a32      	ldr	r2, [pc, #200]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6e0:	e00f      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6e6:	3328      	adds	r3, #40	@ 0x28
 800c6e8:	2101      	movs	r1, #1
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fada 	bl	800cca4 <RCCEx_PLL3_Config>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6f6:	e004      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c6fe:	e000      	b.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c700:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10b      	bne.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c70a:	4b26      	ldr	r3, [pc, #152]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c70e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c71a:	4a22      	ldr	r2, [pc, #136]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c71c:	430b      	orrs	r3, r1
 800c71e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c720:	e003      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c736:	673b      	str	r3, [r7, #112]	@ 0x70
 800c738:	2300      	movs	r3, #0
 800c73a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c73c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c740:	460b      	mov	r3, r1
 800c742:	4313      	orrs	r3, r2
 800c744:	d034      	beq.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c754:	d007      	beq.n	800c766 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c756:	e011      	b.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c758:	4b12      	ldr	r3, [pc, #72]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c75c:	4a11      	ldr	r2, [pc, #68]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c75e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c764:	e00e      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c76a:	3308      	adds	r3, #8
 800c76c:	2102      	movs	r1, #2
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 f9e6 	bl	800cb40 <RCCEx_PLL2_Config>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c77a:	e003      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c782:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10d      	bne.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c78c:	4b05      	ldr	r3, [pc, #20]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c78e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c790:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c79a:	4a02      	ldr	r2, [pc, #8]	@ (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c79c:	430b      	orrs	r3, r1
 800c79e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c7a0:	e006      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c7a2:	bf00      	nop
 800c7a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c7ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c7bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7be:	2300      	movs	r3, #0
 800c7c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c7c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	d00c      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7d0:	3328      	adds	r3, #40	@ 0x28
 800c7d2:	2102      	movs	r1, #2
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 fa65 	bl	800cca4 <RCCEx_PLL3_Config>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c7f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	667b      	str	r3, [r7, #100]	@ 0x64
 800c7f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4313      	orrs	r3, r2
 800c800:	d038      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c80a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c80e:	d018      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c814:	d811      	bhi.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c81a:	d014      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c81c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c820:	d80b      	bhi.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c822:	2b00      	cmp	r3, #0
 800c824:	d011      	beq.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c82a:	d106      	bne.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c82c:	4bc3      	ldr	r3, [pc, #780]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c830:	4ac2      	ldr	r2, [pc, #776]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c838:	e008      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c83a:	2301      	movs	r3, #1
 800c83c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c840:	e004      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c842:	bf00      	nop
 800c844:	e002      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c846:	bf00      	nop
 800c848:	e000      	b.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c84c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10b      	bne.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c854:	4bb9      	ldr	r3, [pc, #740]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c858:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c864:	4ab5      	ldr	r2, [pc, #724]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c866:	430b      	orrs	r3, r1
 800c868:	6553      	str	r3, [r2, #84]	@ 0x54
 800c86a:	e003      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c86c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c870:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c880:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c882:	2300      	movs	r3, #0
 800c884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c886:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c88a:	460b      	mov	r3, r1
 800c88c:	4313      	orrs	r3, r2
 800c88e:	d009      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c890:	4baa      	ldr	r3, [pc, #680]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c894:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c89c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c89e:	4aa7      	ldr	r2, [pc, #668]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8a0:	430b      	orrs	r3, r1
 800c8a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800c8b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	d00a      	beq.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c8c0:	4b9e      	ldr	r3, [pc, #632]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800c8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c8d0:	4a9a      	ldr	r2, [pc, #616]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8d2:	430b      	orrs	r3, r1
 800c8d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c8e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	d009      	beq.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c8f2:	4b92      	ldr	r3, [pc, #584]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c900:	4a8e      	ldr	r2, [pc, #568]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c902:	430b      	orrs	r3, r1
 800c904:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c912:	643b      	str	r3, [r7, #64]	@ 0x40
 800c914:	2300      	movs	r3, #0
 800c916:	647b      	str	r3, [r7, #68]	@ 0x44
 800c918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c91c:	460b      	mov	r3, r1
 800c91e:	4313      	orrs	r3, r2
 800c920:	d00e      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c922:	4b86      	ldr	r3, [pc, #536]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	4a85      	ldr	r2, [pc, #532]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c928:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c92c:	6113      	str	r3, [r2, #16]
 800c92e:	4b83      	ldr	r3, [pc, #524]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c930:	6919      	ldr	r1, [r3, #16]
 800c932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c93a:	4a80      	ldr	r2, [pc, #512]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c93c:	430b      	orrs	r3, r1
 800c93e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c94c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c94e:	2300      	movs	r3, #0
 800c950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c952:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c956:	460b      	mov	r3, r1
 800c958:	4313      	orrs	r3, r2
 800c95a:	d009      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c95c:	4b77      	ldr	r3, [pc, #476]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c960:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c96a:	4a74      	ldr	r2, [pc, #464]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c96c:	430b      	orrs	r3, r1
 800c96e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c97c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c97e:	2300      	movs	r3, #0
 800c980:	637b      	str	r3, [r7, #52]	@ 0x34
 800c982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c986:	460b      	mov	r3, r1
 800c988:	4313      	orrs	r3, r2
 800c98a:	d00a      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c98c:	4b6b      	ldr	r3, [pc, #428]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c98e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c990:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c99c:	4a67      	ldr	r2, [pc, #412]	@ (800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c99e:	430b      	orrs	r3, r1
 800c9a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	d011      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9c2:	3308      	adds	r3, #8
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 f8ba 	bl	800cb40 <RCCEx_PLL2_Config>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800c9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d003      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	6239      	str	r1, [r7, #32]
 800c9ee:	f003 0302 	and.w	r3, r3, #2
 800c9f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	d011      	beq.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca02:	3308      	adds	r3, #8
 800ca04:	2101      	movs	r1, #1
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 f89a 	bl	800cb40 <RCCEx_PLL2_Config>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ca12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ca22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	61b9      	str	r1, [r7, #24]
 800ca2e:	f003 0304 	and.w	r3, r3, #4
 800ca32:	61fb      	str	r3, [r7, #28]
 800ca34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	d011      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca42:	3308      	adds	r3, #8
 800ca44:	2102      	movs	r1, #2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 f87a 	bl	800cb40 <RCCEx_PLL2_Config>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ca52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ca62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	6139      	str	r1, [r7, #16]
 800ca6e:	f003 0308 	and.w	r3, r3, #8
 800ca72:	617b      	str	r3, [r7, #20]
 800ca74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	d011      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca82:	3328      	adds	r3, #40	@ 0x28
 800ca84:	2100      	movs	r1, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 f90c 	bl	800cca4 <RCCEx_PLL3_Config>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ca92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800caa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	2100      	movs	r1, #0
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	f003 0310 	and.w	r3, r3, #16
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cab8:	460b      	mov	r3, r1
 800caba:	4313      	orrs	r3, r2
 800cabc:	d011      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cac2:	3328      	adds	r3, #40	@ 0x28
 800cac4:	2101      	movs	r1, #1
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f8ec 	bl	800cca4 <RCCEx_PLL3_Config>
 800cacc:	4603      	mov	r3, r0
 800cace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	2100      	movs	r1, #0
 800caec:	6039      	str	r1, [r7, #0]
 800caee:	f003 0320 	and.w	r3, r3, #32
 800caf2:	607b      	str	r3, [r7, #4]
 800caf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800caf8:	460b      	mov	r3, r1
 800cafa:	4313      	orrs	r3, r2
 800cafc:	d011      	beq.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb02:	3328      	adds	r3, #40	@ 0x28
 800cb04:	2102      	movs	r1, #2
 800cb06:	4618      	mov	r0, r3
 800cb08:	f000 f8cc 	bl	800cca4 <RCCEx_PLL3_Config>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cb12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800cb22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d101      	bne.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e000      	b.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cb2e:	2301      	movs	r3, #1
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800cb36:	46bd      	mov	sp, r7
 800cb38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb3c:	58024400 	.word	0x58024400

0800cb40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb4e:	4b53      	ldr	r3, [pc, #332]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cb50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d101      	bne.n	800cb5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e099      	b.n	800cc92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb5e:	4b4f      	ldr	r3, [pc, #316]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a4e      	ldr	r2, [pc, #312]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cb64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cb68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb6a:	f7f9 f8eb 	bl	8005d44 <HAL_GetTick>
 800cb6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb70:	e008      	b.n	800cb84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb72:	f7f9 f8e7 	bl	8005d44 <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d901      	bls.n	800cb84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb80:	2303      	movs	r3, #3
 800cb82:	e086      	b.n	800cc92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb84:	4b45      	ldr	r3, [pc, #276]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1f0      	bne.n	800cb72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb90:	4b42      	ldr	r3, [pc, #264]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cb92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	031b      	lsls	r3, r3, #12
 800cb9e:	493f      	ldr	r1, [pc, #252]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cba0:	4313      	orrs	r3, r2
 800cba2:	628b      	str	r3, [r1, #40]	@ 0x28
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	025b      	lsls	r3, r3, #9
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	041b      	lsls	r3, r3, #16
 800cbc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cbc6:	431a      	orrs	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	061b      	lsls	r3, r3, #24
 800cbd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cbd4:	4931      	ldr	r1, [pc, #196]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cbda:	4b30      	ldr	r3, [pc, #192]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	492d      	ldr	r1, [pc, #180]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cbec:	4b2b      	ldr	r3, [pc, #172]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf0:	f023 0220 	bic.w	r2, r3, #32
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	4928      	ldr	r1, [pc, #160]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cbfe:	4b27      	ldr	r3, [pc, #156]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc02:	4a26      	ldr	r2, [pc, #152]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc04:	f023 0310 	bic.w	r3, r3, #16
 800cc08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cc0a:	4b24      	ldr	r3, [pc, #144]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc0e:	4b24      	ldr	r3, [pc, #144]	@ (800cca0 <RCCEx_PLL2_Config+0x160>)
 800cc10:	4013      	ands	r3, r2
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	69d2      	ldr	r2, [r2, #28]
 800cc16:	00d2      	lsls	r2, r2, #3
 800cc18:	4920      	ldr	r1, [pc, #128]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc1e:	4b1f      	ldr	r3, [pc, #124]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc22:	4a1e      	ldr	r2, [pc, #120]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc24:	f043 0310 	orr.w	r3, r3, #16
 800cc28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d106      	bne.n	800cc3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc30:	4b1a      	ldr	r3, [pc, #104]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc34:	4a19      	ldr	r2, [pc, #100]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cc3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cc3c:	e00f      	b.n	800cc5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d106      	bne.n	800cc52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc44:	4b15      	ldr	r3, [pc, #84]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc48:	4a14      	ldr	r2, [pc, #80]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cc50:	e005      	b.n	800cc5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc52:	4b12      	ldr	r3, [pc, #72]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc56:	4a11      	ldr	r2, [pc, #68]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cc5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a0e      	ldr	r2, [pc, #56]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cc68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc6a:	f7f9 f86b 	bl	8005d44 <HAL_GetTick>
 800cc6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc70:	e008      	b.n	800cc84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc72:	f7f9 f867 	bl	8005d44 <HAL_GetTick>
 800cc76:	4602      	mov	r2, r0
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d901      	bls.n	800cc84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e006      	b.n	800cc92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc84:	4b05      	ldr	r3, [pc, #20]	@ (800cc9c <RCCEx_PLL2_Config+0x15c>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d0f0      	beq.n	800cc72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	58024400 	.word	0x58024400
 800cca0:	ffff0007 	.word	0xffff0007

0800cca4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccb2:	4b53      	ldr	r3, [pc, #332]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800ccb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb6:	f003 0303 	and.w	r3, r3, #3
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d101      	bne.n	800ccc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e099      	b.n	800cdf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccc2:	4b4f      	ldr	r3, [pc, #316]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a4e      	ldr	r2, [pc, #312]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800ccc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccce:	f7f9 f839 	bl	8005d44 <HAL_GetTick>
 800ccd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccd4:	e008      	b.n	800cce8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccd6:	f7f9 f835 	bl	8005d44 <HAL_GetTick>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d901      	bls.n	800cce8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e086      	b.n	800cdf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cce8:	4b45      	ldr	r3, [pc, #276]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1f0      	bne.n	800ccd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ccf4:	4b42      	ldr	r3, [pc, #264]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800ccf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	051b      	lsls	r3, r3, #20
 800cd02:	493f      	ldr	r1, [pc, #252]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd04:	4313      	orrs	r3, r2
 800cd06:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	3b01      	subs	r3, #1
 800cd18:	025b      	lsls	r3, r3, #9
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	431a      	orrs	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	041b      	lsls	r3, r3, #16
 800cd26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cd2a:	431a      	orrs	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	691b      	ldr	r3, [r3, #16]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	061b      	lsls	r3, r3, #24
 800cd34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cd38:	4931      	ldr	r1, [pc, #196]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd3e:	4b30      	ldr	r3, [pc, #192]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	492d      	ldr	r1, [pc, #180]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd50:	4b2b      	ldr	r3, [pc, #172]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	4928      	ldr	r1, [pc, #160]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd62:	4b27      	ldr	r3, [pc, #156]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd66:	4a26      	ldr	r2, [pc, #152]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd6e:	4b24      	ldr	r3, [pc, #144]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd72:	4b24      	ldr	r3, [pc, #144]	@ (800ce04 <RCCEx_PLL3_Config+0x160>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	69d2      	ldr	r2, [r2, #28]
 800cd7a:	00d2      	lsls	r2, r2, #3
 800cd7c:	4920      	ldr	r1, [pc, #128]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd82:	4b1f      	ldr	r3, [pc, #124]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd86:	4a1e      	ldr	r2, [pc, #120]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d106      	bne.n	800cda2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd94:	4b1a      	ldr	r3, [pc, #104]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd98:	4a19      	ldr	r2, [pc, #100]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cd9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cd9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cda0:	e00f      	b.n	800cdc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d106      	bne.n	800cdb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cda8:	4b15      	ldr	r3, [pc, #84]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdac:	4a14      	ldr	r2, [pc, #80]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cdb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cdb4:	e005      	b.n	800cdc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cdb6:	4b12      	ldr	r3, [pc, #72]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdba:	4a11      	ldr	r2, [pc, #68]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cdc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a0e      	ldr	r2, [pc, #56]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cdcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdce:	f7f8 ffb9 	bl	8005d44 <HAL_GetTick>
 800cdd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdd4:	e008      	b.n	800cde8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdd6:	f7f8 ffb5 	bl	8005d44 <HAL_GetTick>
 800cdda:	4602      	mov	r2, r0
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	1ad3      	subs	r3, r2, r3
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d901      	bls.n	800cde8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e006      	b.n	800cdf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cde8:	4b05      	ldr	r3, [pc, #20]	@ (800ce00 <RCCEx_PLL3_Config+0x15c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0f0      	beq.n	800cdd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	58024400 	.word	0x58024400
 800ce04:	ffff0007 	.word	0xffff0007

0800ce08 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e02b      	b.n	800ce74 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 f825 	bl	800ce80 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2202      	movs	r2, #2
 800ce3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3304      	adds	r3, #4
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f001 f9af 	bl	800e1ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	461a      	mov	r2, r3
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	f001 fa03 	bl	800e264 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ce5e:	4b07      	ldr	r3, [pc, #28]	@ (800ce7c <HAL_SDRAM_Init+0x74>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a06      	ldr	r2, [pc, #24]	@ (800ce7c <HAL_SDRAM_Init+0x74>)
 800ce64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce68:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	52004000 	.word	0x52004000

0800ce80 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cea6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800cea8:	7dfb      	ldrb	r3, [r7, #23]
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d101      	bne.n	800ceb2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ceae:	2302      	movs	r3, #2
 800ceb0:	e021      	b.n	800cef6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d002      	beq.n	800cebe <HAL_SDRAM_SendCommand+0x2a>
 800ceb8:	7dfb      	ldrb	r3, [r7, #23]
 800ceba:	2b05      	cmp	r3, #5
 800cebc:	d118      	bne.n	800cef0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2202      	movs	r2, #2
 800cec2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	4618      	mov	r0, r3
 800ced0:	f001 fa32 	bl	800e338 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d104      	bne.n	800cee6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2205      	movs	r2, #5
 800cee0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cee4:	e006      	b.n	800cef4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2201      	movs	r2, #1
 800ceea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ceee:	e001      	b.n	800cef4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e000      	b.n	800cef6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d101      	bne.n	800cf18 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800cf14:	2302      	movs	r3, #2
 800cf16:	e016      	b.n	800cf46 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d10f      	bne.n	800cf44 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2202      	movs	r2, #2
 800cf28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f001 fa24 	bl	800e380 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	e000      	b.n	800cf46 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d101      	bne.n	800cf60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e049      	b.n	800cff4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d106      	bne.n	800cf7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f89d 	bl	800d0b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	f000 f9f7 	bl	800d380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6a1a      	ldr	r2, [r3, #32]
 800d012:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d016:	4013      	ands	r3, r2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10f      	bne.n	800d03c <HAL_TIM_PWM_DeInit+0x40>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6a1a      	ldr	r2, [r3, #32]
 800d022:	f240 4344 	movw	r3, #1092	@ 0x444
 800d026:	4013      	ands	r3, r2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d107      	bne.n	800d03c <HAL_TIM_PWM_DeInit+0x40>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0201 	bic.w	r2, r2, #1
 800d03a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f843 	bl	800d0c8 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	691b      	ldr	r3, [r3, #16]
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d122      	bne.n	800d138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	f003 0302 	and.w	r3, r3, #2
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d11b      	bne.n	800d138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f06f 0202 	mvn.w	r2, #2
 800d108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	f003 0303 	and.w	r3, r3, #3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d003      	beq.n	800d126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f90f 	bl	800d342 <HAL_TIM_IC_CaptureCallback>
 800d124:	e005      	b.n	800d132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f901 	bl	800d32e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f912 	bl	800d356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	f003 0304 	and.w	r3, r3, #4
 800d142:	2b04      	cmp	r3, #4
 800d144:	d122      	bne.n	800d18c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	f003 0304 	and.w	r3, r3, #4
 800d150:	2b04      	cmp	r3, #4
 800d152:	d11b      	bne.n	800d18c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f06f 0204 	mvn.w	r2, #4
 800d15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2202      	movs	r2, #2
 800d162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d003      	beq.n	800d17a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f8e5 	bl	800d342 <HAL_TIM_IC_CaptureCallback>
 800d178:	e005      	b.n	800d186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f8d7 	bl	800d32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 f8e8 	bl	800d356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f003 0308 	and.w	r3, r3, #8
 800d196:	2b08      	cmp	r3, #8
 800d198:	d122      	bne.n	800d1e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	f003 0308 	and.w	r3, r3, #8
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	d11b      	bne.n	800d1e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f06f 0208 	mvn.w	r2, #8
 800d1b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2204      	movs	r2, #4
 800d1b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	f003 0303 	and.w	r3, r3, #3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d003      	beq.n	800d1ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f8bb 	bl	800d342 <HAL_TIM_IC_CaptureCallback>
 800d1cc:	e005      	b.n	800d1da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f8ad 	bl	800d32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f8be 	bl	800d356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	f003 0310 	and.w	r3, r3, #16
 800d1ea:	2b10      	cmp	r3, #16
 800d1ec:	d122      	bne.n	800d234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	f003 0310 	and.w	r3, r3, #16
 800d1f8:	2b10      	cmp	r3, #16
 800d1fa:	d11b      	bne.n	800d234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f06f 0210 	mvn.w	r2, #16
 800d204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2208      	movs	r2, #8
 800d20a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d216:	2b00      	cmp	r3, #0
 800d218:	d003      	beq.n	800d222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f891 	bl	800d342 <HAL_TIM_IC_CaptureCallback>
 800d220:	e005      	b.n	800d22e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f883 	bl	800d32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f894 	bl	800d356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d10e      	bne.n	800d260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d107      	bne.n	800d260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f06f 0201 	mvn.w	r2, #1
 800d258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f85d 	bl	800d31a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	691b      	ldr	r3, [r3, #16]
 800d266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d26a:	2b80      	cmp	r3, #128	@ 0x80
 800d26c:	d10e      	bne.n	800d28c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d278:	2b80      	cmp	r3, #128	@ 0x80
 800d27a:	d107      	bne.n	800d28c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f91e 	bl	800d4c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d29a:	d10e      	bne.n	800d2ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2a6:	2b80      	cmp	r3, #128	@ 0x80
 800d2a8:	d107      	bne.n	800d2ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d2b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 f911 	bl	800d4dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2c4:	2b40      	cmp	r3, #64	@ 0x40
 800d2c6:	d10e      	bne.n	800d2e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d2:	2b40      	cmp	r3, #64	@ 0x40
 800d2d4:	d107      	bne.n	800d2e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 f842 	bl	800d36a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	f003 0320 	and.w	r3, r3, #32
 800d2f0:	2b20      	cmp	r3, #32
 800d2f2:	d10e      	bne.n	800d312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f003 0320 	and.w	r3, r3, #32
 800d2fe:	2b20      	cmp	r3, #32
 800d300:	d107      	bne.n	800d312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f06f 0220 	mvn.w	r2, #32
 800d30a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f8d1 	bl	800d4b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d312:	bf00      	nop
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d322:	bf00      	nop
 800d324:	370c      	adds	r7, #12
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d336:	bf00      	nop
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d342:	b480      	push	{r7}
 800d344:	b083      	sub	sp, #12
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d35e:	bf00      	nop
 800d360:	370c      	adds	r7, #12
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d36a:	b480      	push	{r7}
 800d36c:	b083      	sub	sp, #12
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d372:	bf00      	nop
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
	...

0800d380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a40      	ldr	r2, [pc, #256]	@ (800d494 <TIM_Base_SetConfig+0x114>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d013      	beq.n	800d3c0 <TIM_Base_SetConfig+0x40>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d39e:	d00f      	beq.n	800d3c0 <TIM_Base_SetConfig+0x40>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a3d      	ldr	r2, [pc, #244]	@ (800d498 <TIM_Base_SetConfig+0x118>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d00b      	beq.n	800d3c0 <TIM_Base_SetConfig+0x40>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a3c      	ldr	r2, [pc, #240]	@ (800d49c <TIM_Base_SetConfig+0x11c>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d007      	beq.n	800d3c0 <TIM_Base_SetConfig+0x40>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a3b      	ldr	r2, [pc, #236]	@ (800d4a0 <TIM_Base_SetConfig+0x120>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d003      	beq.n	800d3c0 <TIM_Base_SetConfig+0x40>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a3a      	ldr	r2, [pc, #232]	@ (800d4a4 <TIM_Base_SetConfig+0x124>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d108      	bne.n	800d3d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a2f      	ldr	r2, [pc, #188]	@ (800d494 <TIM_Base_SetConfig+0x114>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d01f      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3e0:	d01b      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a2c      	ldr	r2, [pc, #176]	@ (800d498 <TIM_Base_SetConfig+0x118>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d017      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a2b      	ldr	r2, [pc, #172]	@ (800d49c <TIM_Base_SetConfig+0x11c>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d013      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a2a      	ldr	r2, [pc, #168]	@ (800d4a0 <TIM_Base_SetConfig+0x120>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d00f      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a29      	ldr	r2, [pc, #164]	@ (800d4a4 <TIM_Base_SetConfig+0x124>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d00b      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a28      	ldr	r2, [pc, #160]	@ (800d4a8 <TIM_Base_SetConfig+0x128>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d007      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4a27      	ldr	r2, [pc, #156]	@ (800d4ac <TIM_Base_SetConfig+0x12c>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d003      	beq.n	800d41a <TIM_Base_SetConfig+0x9a>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a26      	ldr	r2, [pc, #152]	@ (800d4b0 <TIM_Base_SetConfig+0x130>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d108      	bne.n	800d42c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	68fa      	ldr	r2, [r7, #12]
 800d428:	4313      	orrs	r3, r2
 800d42a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	689a      	ldr	r2, [r3, #8]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a10      	ldr	r2, [pc, #64]	@ (800d494 <TIM_Base_SetConfig+0x114>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d00f      	beq.n	800d478 <TIM_Base_SetConfig+0xf8>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a12      	ldr	r2, [pc, #72]	@ (800d4a4 <TIM_Base_SetConfig+0x124>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d00b      	beq.n	800d478 <TIM_Base_SetConfig+0xf8>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a11      	ldr	r2, [pc, #68]	@ (800d4a8 <TIM_Base_SetConfig+0x128>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d007      	beq.n	800d478 <TIM_Base_SetConfig+0xf8>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a10      	ldr	r2, [pc, #64]	@ (800d4ac <TIM_Base_SetConfig+0x12c>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d003      	beq.n	800d478 <TIM_Base_SetConfig+0xf8>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a0f      	ldr	r2, [pc, #60]	@ (800d4b0 <TIM_Base_SetConfig+0x130>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d103      	bne.n	800d480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	691a      	ldr	r2, [r3, #16]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	615a      	str	r2, [r3, #20]
}
 800d486:	bf00      	nop
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	40010000 	.word	0x40010000
 800d498:	40000400 	.word	0x40000400
 800d49c:	40000800 	.word	0x40000800
 800d4a0:	40000c00 	.word	0x40000c00
 800d4a4:	40010400 	.word	0x40010400
 800d4a8:	40014000 	.word	0x40014000
 800d4ac:	40014400 	.word	0x40014400
 800d4b0:	40014800 	.word	0x40014800

0800d4b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b08a      	sub	sp, #40	@ 0x28
 800d4f4:	af02      	add	r7, sp, #8
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d506:	2b20      	cmp	r3, #32
 800d508:	d17b      	bne.n	800d602 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <HAL_UART_Transmit+0x26>
 800d510:	88fb      	ldrh	r3, [r7, #6]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e074      	b.n	800d604 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2221      	movs	r2, #33	@ 0x21
 800d526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d52a:	f7f8 fc0b 	bl	8005d44 <HAL_GetTick>
 800d52e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	88fa      	ldrh	r2, [r7, #6]
 800d534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	88fa      	ldrh	r2, [r7, #6]
 800d53c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d548:	d108      	bne.n	800d55c <HAL_UART_Transmit+0x6c>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d104      	bne.n	800d55c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d552:	2300      	movs	r3, #0
 800d554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	61bb      	str	r3, [r7, #24]
 800d55a:	e003      	b.n	800d564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d560:	2300      	movs	r3, #0
 800d562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d564:	e030      	b.n	800d5c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2200      	movs	r2, #0
 800d56e:	2180      	movs	r1, #128	@ 0x80
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f000 fced 	bl	800df50 <UART_WaitOnFlagUntilTimeout>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2220      	movs	r2, #32
 800d580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e03d      	b.n	800d604 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10b      	bne.n	800d5a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d59c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	3302      	adds	r3, #2
 800d5a2:	61bb      	str	r3, [r7, #24]
 800d5a4:	e007      	b.n	800d5b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	781a      	ldrb	r2, [r3, #0]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1c8      	bne.n	800d566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2140      	movs	r1, #64	@ 0x40
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 fcb6 	bl	800df50 <UART_WaitOnFlagUntilTimeout>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e006      	b.n	800d604 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2220      	movs	r2, #32
 800d5fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e000      	b.n	800d604 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d602:	2302      	movs	r3, #2
  }
}
 800d604:	4618      	mov	r0, r3
 800d606:	3720      	adds	r7, #32
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b08a      	sub	sp, #40	@ 0x28
 800d610:	af02      	add	r7, sp, #8
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	603b      	str	r3, [r7, #0]
 800d618:	4613      	mov	r3, r2
 800d61a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d622:	2b20      	cmp	r3, #32
 800d624:	f040 80b5 	bne.w	800d792 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d002      	beq.n	800d634 <HAL_UART_Receive+0x28>
 800d62e:	88fb      	ldrh	r3, [r7, #6]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e0ad      	b.n	800d794 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2222      	movs	r2, #34	@ 0x22
 800d644:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d64e:	f7f8 fb79 	bl	8005d44 <HAL_GetTick>
 800d652:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	88fa      	ldrh	r2, [r7, #6]
 800d658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	88fa      	ldrh	r2, [r7, #6]
 800d660:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d66c:	d10e      	bne.n	800d68c <HAL_UART_Receive+0x80>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d105      	bne.n	800d682 <HAL_UART_Receive+0x76>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d67c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d680:	e02d      	b.n	800d6de <HAL_UART_Receive+0xd2>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	22ff      	movs	r2, #255	@ 0xff
 800d686:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d68a:	e028      	b.n	800d6de <HAL_UART_Receive+0xd2>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10d      	bne.n	800d6b0 <HAL_UART_Receive+0xa4>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <HAL_UART_Receive+0x9a>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	22ff      	movs	r2, #255	@ 0xff
 800d6a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6a4:	e01b      	b.n	800d6de <HAL_UART_Receive+0xd2>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	227f      	movs	r2, #127	@ 0x7f
 800d6aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6ae:	e016      	b.n	800d6de <HAL_UART_Receive+0xd2>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6b8:	d10d      	bne.n	800d6d6 <HAL_UART_Receive+0xca>
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d104      	bne.n	800d6cc <HAL_UART_Receive+0xc0>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	227f      	movs	r2, #127	@ 0x7f
 800d6c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6ca:	e008      	b.n	800d6de <HAL_UART_Receive+0xd2>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	223f      	movs	r2, #63	@ 0x3f
 800d6d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d6d4:	e003      	b.n	800d6de <HAL_UART_Receive+0xd2>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d6e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6ee:	d108      	bne.n	800d702 <HAL_UART_Receive+0xf6>
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	691b      	ldr	r3, [r3, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d104      	bne.n	800d702 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	61bb      	str	r3, [r7, #24]
 800d700:	e003      	b.n	800d70a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d706:	2300      	movs	r3, #0
 800d708:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d70a:	e036      	b.n	800d77a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2200      	movs	r2, #0
 800d714:	2120      	movs	r1, #32
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f000 fc1a 	bl	800df50 <UART_WaitOnFlagUntilTimeout>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2220      	movs	r2, #32
 800d726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800d72a:	2303      	movs	r3, #3
 800d72c:	e032      	b.n	800d794 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10c      	bne.n	800d74e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	8a7b      	ldrh	r3, [r7, #18]
 800d73e:	4013      	ands	r3, r2
 800d740:	b29a      	uxth	r2, r3
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	3302      	adds	r3, #2
 800d74a:	61bb      	str	r3, [r7, #24]
 800d74c:	e00c      	b.n	800d768 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d754:	b2da      	uxtb	r2, r3
 800d756:	8a7b      	ldrh	r3, [r7, #18]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	4013      	ands	r3, r2
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	3301      	adds	r3, #1
 800d766:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d76e:	b29b      	uxth	r3, r3
 800d770:	3b01      	subs	r3, #1
 800d772:	b29a      	uxth	r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d780:	b29b      	uxth	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1c2      	bne.n	800d70c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2220      	movs	r2, #32
 800d78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	e000      	b.n	800d794 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d792:	2302      	movs	r3, #2
  }
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b0ba      	sub	sp, #232	@ 0xe8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d7c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d7c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d7ca:	4013      	ands	r3, r2
 800d7cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d7d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d11b      	bne.n	800d810 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7dc:	f003 0320 	and.w	r3, r3, #32
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d015      	beq.n	800d810 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7e8:	f003 0320 	and.w	r3, r3, #32
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d105      	bne.n	800d7fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d7f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d009      	beq.n	800d810 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 8377 	beq.w	800def4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
      }
      return;
 800d80e:	e371      	b.n	800def4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d810:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 8123 	beq.w	800da60 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d81a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d81e:	4b8d      	ldr	r3, [pc, #564]	@ (800da54 <HAL_UART_IRQHandler+0x2b8>)
 800d820:	4013      	ands	r3, r2
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d82a:	4b8b      	ldr	r3, [pc, #556]	@ (800da58 <HAL_UART_IRQHandler+0x2bc>)
 800d82c:	4013      	ands	r3, r2
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 8116 	beq.w	800da60 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d011      	beq.n	800d864 <HAL_UART_IRQHandler+0xc8>
 800d840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00b      	beq.n	800d864 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2201      	movs	r2, #1
 800d852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d85a:	f043 0201 	orr.w	r2, r3, #1
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d011      	beq.n	800d894 <HAL_UART_IRQHandler+0xf8>
 800d870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00b      	beq.n	800d894 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2202      	movs	r2, #2
 800d882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d88a:	f043 0204 	orr.w	r2, r3, #4
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d898:	f003 0304 	and.w	r3, r3, #4
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d011      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x128>
 800d8a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d8a4:	f003 0301 	and.w	r3, r3, #1
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00b      	beq.n	800d8c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8ba:	f043 0202 	orr.w	r2, r3, #2
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d8c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8c8:	f003 0308 	and.w	r3, r3, #8
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d017      	beq.n	800d900 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d8d4:	f003 0320 	and.w	r3, r3, #32
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d105      	bne.n	800d8e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d8dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d8e0:	4b5c      	ldr	r3, [pc, #368]	@ (800da54 <HAL_UART_IRQHandler+0x2b8>)
 800d8e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00b      	beq.n	800d900 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2208      	movs	r2, #8
 800d8ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8f6:	f043 0208 	orr.w	r2, r3, #8
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d012      	beq.n	800d932 <HAL_UART_IRQHandler+0x196>
 800d90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d910:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00c      	beq.n	800d932 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d928:	f043 0220 	orr.w	r2, r3, #32
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 82dd 	beq.w	800def8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d942:	f003 0320 	and.w	r3, r3, #32
 800d946:	2b00      	cmp	r3, #0
 800d948:	d013      	beq.n	800d972 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d94a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d94e:	f003 0320 	and.w	r3, r3, #32
 800d952:	2b00      	cmp	r3, #0
 800d954:	d105      	bne.n	800d962 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d95a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d986:	2b40      	cmp	r3, #64	@ 0x40
 800d988:	d005      	beq.n	800d996 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d98a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d98e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d992:	2b00      	cmp	r3, #0
 800d994:	d054      	beq.n	800da40 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fb42 	bl	800e020 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9a6:	2b40      	cmp	r3, #64	@ 0x40
 800d9a8:	d146      	bne.n	800da38 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3308      	adds	r3, #8
 800d9b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9b8:	e853 3f00 	ldrex	r3, [r3]
 800d9bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d9c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d9d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d9da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d9e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d9e6:	e841 2300 	strex	r3, r2, [r1]
 800d9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d9ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1d9      	bne.n	800d9aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d017      	beq.n	800da30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da06:	4a15      	ldr	r2, [pc, #84]	@ (800da5c <HAL_UART_IRQHandler+0x2c0>)
 800da08:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da10:	4618      	mov	r0, r3
 800da12:	f7f8 fe8d 	bl	8006730 <HAL_DMA_Abort_IT>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d019      	beq.n	800da50 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800da2a:	4610      	mov	r0, r2
 800da2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da2e:	e00f      	b.n	800da50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fa77 	bl	800df24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da36:	e00b      	b.n	800da50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fa73 	bl	800df24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da3e:	e007      	b.n	800da50 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 fa6f 	bl	800df24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800da4e:	e253      	b.n	800def8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da50:	bf00      	nop
    return;
 800da52:	e251      	b.n	800def8 <HAL_UART_IRQHandler+0x75c>
 800da54:	10000001 	.word	0x10000001
 800da58:	04000120 	.word	0x04000120
 800da5c:	0800e0ed 	.word	0x0800e0ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da64:	2b01      	cmp	r3, #1
 800da66:	f040 81e7 	bne.w	800de38 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da6e:	f003 0310 	and.w	r3, r3, #16
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 81e0 	beq.w	800de38 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da7c:	f003 0310 	and.w	r3, r3, #16
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 81d9 	beq.w	800de38 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2210      	movs	r2, #16
 800da8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da98:	2b40      	cmp	r3, #64	@ 0x40
 800da9a:	f040 8151 	bne.w	800dd40 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a96      	ldr	r2, [pc, #600]	@ (800dd00 <HAL_UART_IRQHandler+0x564>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d068      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a93      	ldr	r2, [pc, #588]	@ (800dd04 <HAL_UART_IRQHandler+0x568>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d061      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a91      	ldr	r2, [pc, #580]	@ (800dd08 <HAL_UART_IRQHandler+0x56c>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d05a      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a8e      	ldr	r2, [pc, #568]	@ (800dd0c <HAL_UART_IRQHandler+0x570>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d053      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a8c      	ldr	r2, [pc, #560]	@ (800dd10 <HAL_UART_IRQHandler+0x574>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d04c      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a89      	ldr	r2, [pc, #548]	@ (800dd14 <HAL_UART_IRQHandler+0x578>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d045      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a87      	ldr	r2, [pc, #540]	@ (800dd18 <HAL_UART_IRQHandler+0x57c>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d03e      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4a84      	ldr	r2, [pc, #528]	@ (800dd1c <HAL_UART_IRQHandler+0x580>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d037      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a82      	ldr	r2, [pc, #520]	@ (800dd20 <HAL_UART_IRQHandler+0x584>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d030      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a7f      	ldr	r2, [pc, #508]	@ (800dd24 <HAL_UART_IRQHandler+0x588>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d029      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4a7d      	ldr	r2, [pc, #500]	@ (800dd28 <HAL_UART_IRQHandler+0x58c>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d022      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a7a      	ldr	r2, [pc, #488]	@ (800dd2c <HAL_UART_IRQHandler+0x590>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d01b      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a78      	ldr	r2, [pc, #480]	@ (800dd30 <HAL_UART_IRQHandler+0x594>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d014      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a75      	ldr	r2, [pc, #468]	@ (800dd34 <HAL_UART_IRQHandler+0x598>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d00d      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a73      	ldr	r2, [pc, #460]	@ (800dd38 <HAL_UART_IRQHandler+0x59c>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d006      	beq.n	800db7e <HAL_UART_IRQHandler+0x3e2>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a70      	ldr	r2, [pc, #448]	@ (800dd3c <HAL_UART_IRQHandler+0x5a0>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d106      	bne.n	800db8c <HAL_UART_IRQHandler+0x3f0>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	b29b      	uxth	r3, r3
 800db8a:	e005      	b.n	800db98 <HAL_UART_IRQHandler+0x3fc>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	b29b      	uxth	r3, r3
 800db98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f000 81ab 	beq.w	800defc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	f080 81a3 	bcs.w	800defc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dbbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbcc:	f000 8087 	beq.w	800dcde <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dbdc:	e853 3f00 	ldrex	r3, [r3]
 800dbe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800dbe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dbe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dbfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dbfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dc06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dc0a:	e841 2300 	strex	r3, r2, [r1]
 800dc0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800dc12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d1da      	bne.n	800dbd0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	3308      	adds	r3, #8
 800dc20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800dc2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dc2c:	f023 0301 	bic.w	r3, r3, #1
 800dc30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	3308      	adds	r3, #8
 800dc3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dc3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dc42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dc46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dc4a:	e841 2300 	strex	r3, r2, [r1]
 800dc4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800dc50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d1e1      	bne.n	800dc1a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	3308      	adds	r3, #8
 800dc5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dc60:	e853 3f00 	ldrex	r3, [r3]
 800dc64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dc66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	3308      	adds	r3, #8
 800dc76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dc7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800dc7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dc80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dc82:	e841 2300 	strex	r3, r2, [r1]
 800dc86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dc88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1e3      	bne.n	800dc56 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2220      	movs	r2, #32
 800dc92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dca4:	e853 3f00 	ldrex	r3, [r3]
 800dca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dcaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcac:	f023 0310 	bic.w	r3, r3, #16
 800dcb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dcbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dcc0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dcc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dcc6:	e841 2300 	strex	r3, r2, [r1]
 800dcca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1e4      	bne.n	800dc9c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7f8 fa0b 	bl	80060f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2202      	movs	r2, #2
 800dce2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f91d 	bl	800df38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcfe:	e0fd      	b.n	800defc <HAL_UART_IRQHandler+0x760>
 800dd00:	40020010 	.word	0x40020010
 800dd04:	40020028 	.word	0x40020028
 800dd08:	40020040 	.word	0x40020040
 800dd0c:	40020058 	.word	0x40020058
 800dd10:	40020070 	.word	0x40020070
 800dd14:	40020088 	.word	0x40020088
 800dd18:	400200a0 	.word	0x400200a0
 800dd1c:	400200b8 	.word	0x400200b8
 800dd20:	40020410 	.word	0x40020410
 800dd24:	40020428 	.word	0x40020428
 800dd28:	40020440 	.word	0x40020440
 800dd2c:	40020458 	.word	0x40020458
 800dd30:	40020470 	.word	0x40020470
 800dd34:	40020488 	.word	0x40020488
 800dd38:	400204a0 	.word	0x400204a0
 800dd3c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 80cf 	beq.w	800df00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dd62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 80ca 	beq.w	800df00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd74:	e853 3f00 	ldrex	r3, [r3]
 800dd78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	461a      	mov	r2, r3
 800dd8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd96:	e841 2300 	strex	r3, r2, [r1]
 800dd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e4      	bne.n	800dd6c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	3308      	adds	r3, #8
 800dda8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddac:	e853 3f00 	ldrex	r3, [r3]
 800ddb0:	623b      	str	r3, [r7, #32]
   return(result);
 800ddb2:	6a3a      	ldr	r2, [r7, #32]
 800ddb4:	4b55      	ldr	r3, [pc, #340]	@ (800df0c <HAL_UART_IRQHandler+0x770>)
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ddc6:	633a      	str	r2, [r7, #48]	@ 0x30
 800ddc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddce:	e841 2300 	strex	r3, r2, [r1]
 800ddd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ddd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1e3      	bne.n	800dda2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2220      	movs	r2, #32
 800ddde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	e853 3f00 	ldrex	r3, [r3]
 800ddfa:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f023 0310 	bic.w	r3, r3, #16
 800de02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	461a      	mov	r2, r3
 800de0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800de10:	61fb      	str	r3, [r7, #28]
 800de12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de14:	69b9      	ldr	r1, [r7, #24]
 800de16:	69fa      	ldr	r2, [r7, #28]
 800de18:	e841 2300 	strex	r3, r2, [r1]
 800de1c:	617b      	str	r3, [r7, #20]
   return(result);
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1e4      	bne.n	800ddee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2202      	movs	r2, #2
 800de28:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800de2e:	4619      	mov	r1, r3
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 f881 	bl	800df38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de36:	e063      	b.n	800df00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00e      	beq.n	800de62 <HAL_UART_IRQHandler+0x6c6>
 800de44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d008      	beq.n	800de62 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800de58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f987 	bl	800e16e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de60:	e051      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800de62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d014      	beq.n	800de98 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800de6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de76:	2b00      	cmp	r3, #0
 800de78:	d105      	bne.n	800de86 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de82:	2b00      	cmp	r3, #0
 800de84:	d008      	beq.n	800de98 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d03a      	beq.n	800df04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	4798      	blx	r3
    }
    return;
 800de96:	e035      	b.n	800df04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <HAL_UART_IRQHandler+0x71c>
 800dea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f931 	bl	800e118 <UART_EndTransmit_IT>
    return;
 800deb6:	e026      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800deb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800debc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d009      	beq.n	800ded8 <HAL_UART_IRQHandler+0x73c>
 800dec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dec8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800decc:	2b00      	cmp	r3, #0
 800dece:	d003      	beq.n	800ded8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f960 	bl	800e196 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ded6:	e016      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ded8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dedc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d010      	beq.n	800df06 <HAL_UART_IRQHandler+0x76a>
 800dee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	da0c      	bge.n	800df06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f948 	bl	800e182 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800def2:	e008      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
      return;
 800def4:	bf00      	nop
 800def6:	e006      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
    return;
 800def8:	bf00      	nop
 800defa:	e004      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
      return;
 800defc:	bf00      	nop
 800defe:	e002      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
      return;
 800df00:	bf00      	nop
 800df02:	e000      	b.n	800df06 <HAL_UART_IRQHandler+0x76a>
    return;
 800df04:	bf00      	nop
  }
}
 800df06:	37e8      	adds	r7, #232	@ 0xe8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	effffffe 	.word	0xeffffffe

0800df10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800df18:	bf00      	nop
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df22:	4770      	bx	lr

0800df24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df44:	bf00      	nop
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	4613      	mov	r3, r2
 800df5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df60:	e049      	b.n	800dff6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df68:	d045      	beq.n	800dff6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df6a:	f7f7 feeb 	bl	8005d44 <HAL_GetTick>
 800df6e:	4602      	mov	r2, r0
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	69ba      	ldr	r2, [r7, #24]
 800df76:	429a      	cmp	r2, r3
 800df78:	d302      	bcc.n	800df80 <UART_WaitOnFlagUntilTimeout+0x30>
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d101      	bne.n	800df84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e048      	b.n	800e016 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 0304 	and.w	r3, r3, #4
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d031      	beq.n	800dff6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	f003 0308 	and.w	r3, r3, #8
 800df9c:	2b08      	cmp	r3, #8
 800df9e:	d110      	bne.n	800dfc2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2208      	movs	r2, #8
 800dfa6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 f839 	bl	800e020 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2208      	movs	r2, #8
 800dfb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e029      	b.n	800e016 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69db      	ldr	r3, [r3, #28]
 800dfc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dfcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfd0:	d111      	bne.n	800dff6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dfda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 f81f 	bl	800e020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2220      	movs	r2, #32
 800dfe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dff2:	2303      	movs	r3, #3
 800dff4:	e00f      	b.n	800e016 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69da      	ldr	r2, [r3, #28]
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	4013      	ands	r3, r2
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	429a      	cmp	r2, r3
 800e004:	bf0c      	ite	eq
 800e006:	2301      	moveq	r3, #1
 800e008:	2300      	movne	r3, #0
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	461a      	mov	r2, r3
 800e00e:	79fb      	ldrb	r3, [r7, #7]
 800e010:	429a      	cmp	r2, r3
 800e012:	d0a6      	beq.n	800df62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
	...

0800e020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e020:	b480      	push	{r7}
 800e022:	b095      	sub	sp, #84	@ 0x54
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e030:	e853 3f00 	ldrex	r3, [r3]
 800e034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e03c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	461a      	mov	r2, r3
 800e044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e046:	643b      	str	r3, [r7, #64]	@ 0x40
 800e048:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e04c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e04e:	e841 2300 	strex	r3, r2, [r1]
 800e052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1e6      	bne.n	800e028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3308      	adds	r3, #8
 800e060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	e853 3f00 	ldrex	r3, [r3]
 800e068:	61fb      	str	r3, [r7, #28]
   return(result);
 800e06a:	69fa      	ldr	r2, [r7, #28]
 800e06c:	4b1e      	ldr	r3, [pc, #120]	@ (800e0e8 <UART_EndRxTransfer+0xc8>)
 800e06e:	4013      	ands	r3, r2
 800e070:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3308      	adds	r3, #8
 800e078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e07a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e07c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e082:	e841 2300 	strex	r3, r2, [r1]
 800e086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1e5      	bne.n	800e05a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e092:	2b01      	cmp	r3, #1
 800e094:	d118      	bne.n	800e0c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	e853 3f00 	ldrex	r3, [r3]
 800e0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	f023 0310 	bic.w	r3, r3, #16
 800e0aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0b4:	61bb      	str	r3, [r7, #24]
 800e0b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b8:	6979      	ldr	r1, [r7, #20]
 800e0ba:	69ba      	ldr	r2, [r7, #24]
 800e0bc:	e841 2300 	strex	r3, r2, [r1]
 800e0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1e6      	bne.n	800e096 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e0dc:	bf00      	nop
 800e0de:	3754      	adds	r7, #84	@ 0x54
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	effffffe 	.word	0xeffffffe

0800e0ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7ff ff0a 	bl	800df24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e110:	bf00      	nop
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b088      	sub	sp, #32
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	e853 3f00 	ldrex	r3, [r3]
 800e12c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e134:	61fb      	str	r3, [r7, #28]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	461a      	mov	r2, r3
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	61bb      	str	r3, [r7, #24]
 800e140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e142:	6979      	ldr	r1, [r7, #20]
 800e144:	69ba      	ldr	r2, [r7, #24]
 800e146:	e841 2300 	strex	r3, r2, [r1]
 800e14a:	613b      	str	r3, [r7, #16]
   return(result);
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1e6      	bne.n	800e120 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2220      	movs	r2, #32
 800e156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f7ff fed5 	bl	800df10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e166:	bf00      	nop
 800e168:	3720      	adds	r7, #32
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e16e:	b480      	push	{r7}
 800e170:	b083      	sub	sp, #12
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e176:	bf00      	nop
 800e178:	370c      	adds	r7, #12
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e182:	b480      	push	{r7}
 800e184:	b083      	sub	sp, #12
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e18a:	bf00      	nop
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e196:	b480      	push	{r7}
 800e198:	b083      	sub	sp, #12
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e19e:	bf00      	nop
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
	...

0800e1ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d121      	bne.n	800e202 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	4b27      	ldr	r3, [pc, #156]	@ (800e260 <FMC_SDRAM_Init+0xb4>)
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	6851      	ldr	r1, [r2, #4]
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	6892      	ldr	r2, [r2, #8]
 800e1ce:	4311      	orrs	r1, r2
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	68d2      	ldr	r2, [r2, #12]
 800e1d4:	4311      	orrs	r1, r2
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	6912      	ldr	r2, [r2, #16]
 800e1da:	4311      	orrs	r1, r2
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	6952      	ldr	r2, [r2, #20]
 800e1e0:	4311      	orrs	r1, r2
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	6992      	ldr	r2, [r2, #24]
 800e1e6:	4311      	orrs	r1, r2
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	69d2      	ldr	r2, [r2, #28]
 800e1ec:	4311      	orrs	r1, r2
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	6a12      	ldr	r2, [r2, #32]
 800e1f2:	4311      	orrs	r1, r2
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e1f8:	430a      	orrs	r2, r1
 800e1fa:	431a      	orrs	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	601a      	str	r2, [r3, #0]
 800e200:	e026      	b.n	800e250 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	69d9      	ldr	r1, [r3, #28]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	4319      	orrs	r1, r3
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e218:	430b      	orrs	r3, r1
 800e21a:	431a      	orrs	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	4b0e      	ldr	r3, [pc, #56]	@ (800e260 <FMC_SDRAM_Init+0xb4>)
 800e226:	4013      	ands	r3, r2
 800e228:	683a      	ldr	r2, [r7, #0]
 800e22a:	6851      	ldr	r1, [r2, #4]
 800e22c:	683a      	ldr	r2, [r7, #0]
 800e22e:	6892      	ldr	r2, [r2, #8]
 800e230:	4311      	orrs	r1, r2
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	68d2      	ldr	r2, [r2, #12]
 800e236:	4311      	orrs	r1, r2
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	6912      	ldr	r2, [r2, #16]
 800e23c:	4311      	orrs	r1, r2
 800e23e:	683a      	ldr	r2, [r7, #0]
 800e240:	6952      	ldr	r2, [r2, #20]
 800e242:	4311      	orrs	r1, r2
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	6992      	ldr	r2, [r2, #24]
 800e248:	430a      	orrs	r2, r1
 800e24a:	431a      	orrs	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	ffff8000 	.word	0xffff8000

0800e264 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d128      	bne.n	800e2c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	1e59      	subs	r1, r3, #1
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	3b01      	subs	r3, #1
 800e28a:	011b      	lsls	r3, r3, #4
 800e28c:	4319      	orrs	r1, r3
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	689b      	ldr	r3, [r3, #8]
 800e292:	3b01      	subs	r3, #1
 800e294:	021b      	lsls	r3, r3, #8
 800e296:	4319      	orrs	r1, r3
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	3b01      	subs	r3, #1
 800e29e:	031b      	lsls	r3, r3, #12
 800e2a0:	4319      	orrs	r1, r3
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	691b      	ldr	r3, [r3, #16]
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	041b      	lsls	r3, r3, #16
 800e2aa:	4319      	orrs	r1, r3
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	051b      	lsls	r3, r3, #20
 800e2b4:	4319      	orrs	r1, r3
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	061b      	lsls	r3, r3, #24
 800e2be:	430b      	orrs	r3, r1
 800e2c0:	431a      	orrs	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	609a      	str	r2, [r3, #8]
 800e2c6:	e02d      	b.n	800e324 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	689a      	ldr	r2, [r3, #8]
 800e2cc:	4b19      	ldr	r3, [pc, #100]	@ (800e334 <FMC_SDRAM_Timing_Init+0xd0>)
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	68d2      	ldr	r2, [r2, #12]
 800e2d4:	3a01      	subs	r2, #1
 800e2d6:	0311      	lsls	r1, r2, #12
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	6952      	ldr	r2, [r2, #20]
 800e2dc:	3a01      	subs	r2, #1
 800e2de:	0512      	lsls	r2, r2, #20
 800e2e0:	430a      	orrs	r2, r1
 800e2e2:	431a      	orrs	r2, r3
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	1e59      	subs	r1, r3, #1
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	011b      	lsls	r3, r3, #4
 800e2fe:	4319      	orrs	r1, r3
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	3b01      	subs	r3, #1
 800e306:	021b      	lsls	r3, r3, #8
 800e308:	4319      	orrs	r1, r3
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	3b01      	subs	r3, #1
 800e310:	041b      	lsls	r3, r3, #16
 800e312:	4319      	orrs	r1, r3
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	699b      	ldr	r3, [r3, #24]
 800e318:	3b01      	subs	r3, #1
 800e31a:	061b      	lsls	r3, r3, #24
 800e31c:	430b      	orrs	r3, r1
 800e31e:	431a      	orrs	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	ff0f0fff 	.word	0xff0f0fff

0800e338 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	691a      	ldr	r2, [r3, #16]
 800e348:	4b0c      	ldr	r3, [pc, #48]	@ (800e37c <FMC_SDRAM_SendCommand+0x44>)
 800e34a:	4013      	ands	r3, r2
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	6811      	ldr	r1, [r2, #0]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	6852      	ldr	r2, [r2, #4]
 800e354:	4311      	orrs	r1, r2
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	6892      	ldr	r2, [r2, #8]
 800e35a:	3a01      	subs	r2, #1
 800e35c:	0152      	lsls	r2, r2, #5
 800e35e:	4311      	orrs	r1, r2
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	68d2      	ldr	r2, [r2, #12]
 800e364:	0252      	lsls	r2, r2, #9
 800e366:	430a      	orrs	r2, r1
 800e368:	431a      	orrs	r2, r3
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e36e:	2300      	movs	r3, #0
}
 800e370:	4618      	mov	r0, r3
 800e372:	3714      	adds	r7, #20
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	ffc00000 	.word	0xffc00000

0800e380 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	695a      	ldr	r2, [r3, #20]
 800e38e:	4b07      	ldr	r3, [pc, #28]	@ (800e3ac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e390:	4013      	ands	r3, r2
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	0052      	lsls	r2, r2, #1
 800e396:	431a      	orrs	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	ffffc001 	.word	0xffffc001

0800e3b0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	689a      	ldr	r2, [r3, #8]
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	683a      	ldr	r2, [r7, #0]
 800e3da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	601a      	str	r2, [r3, #0]
}
 800e3ec:	bf00      	nop
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	6892      	ldr	r2, [r2, #8]
 800e40e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	687a      	ldr	r2, [r7, #4]
 800e416:	6852      	ldr	r2, [r2, #4]
 800e418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	429a      	cmp	r2, r3
 800e422:	d103      	bne.n	800e42c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	689a      	ldr	r2, [r3, #8]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2200      	movs	r2, #0
 800e430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	1e5a      	subs	r2, r3, #1
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b086      	sub	sp, #24
 800e450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e452:	2300      	movs	r3, #0
 800e454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e456:	4b4f      	ldr	r3, [pc, #316]	@ (800e594 <xTaskIncrementTick+0x148>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f040 8090 	bne.w	800e580 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e460:	4b4d      	ldr	r3, [pc, #308]	@ (800e598 <xTaskIncrementTick+0x14c>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3301      	adds	r3, #1
 800e466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e468:	4a4b      	ldr	r2, [pc, #300]	@ (800e598 <xTaskIncrementTick+0x14c>)
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d121      	bne.n	800e4b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e474:	4b49      	ldr	r3, [pc, #292]	@ (800e59c <xTaskIncrementTick+0x150>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00b      	beq.n	800e496 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e490:	bf00      	nop
 800e492:	bf00      	nop
 800e494:	e7fd      	b.n	800e492 <xTaskIncrementTick+0x46>
 800e496:	4b41      	ldr	r3, [pc, #260]	@ (800e59c <xTaskIncrementTick+0x150>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	4b40      	ldr	r3, [pc, #256]	@ (800e5a0 <xTaskIncrementTick+0x154>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a3e      	ldr	r2, [pc, #248]	@ (800e59c <xTaskIncrementTick+0x150>)
 800e4a2:	6013      	str	r3, [r2, #0]
 800e4a4:	4a3e      	ldr	r2, [pc, #248]	@ (800e5a0 <xTaskIncrementTick+0x154>)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6013      	str	r3, [r2, #0]
 800e4aa:	4b3e      	ldr	r3, [pc, #248]	@ (800e5a4 <xTaskIncrementTick+0x158>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	4a3c      	ldr	r2, [pc, #240]	@ (800e5a4 <xTaskIncrementTick+0x158>)
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	f000 f8e2 	bl	800e67c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4b8:	4b3b      	ldr	r3, [pc, #236]	@ (800e5a8 <xTaskIncrementTick+0x15c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	693a      	ldr	r2, [r7, #16]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d349      	bcc.n	800e556 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4c2:	4b36      	ldr	r3, [pc, #216]	@ (800e59c <xTaskIncrementTick+0x150>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d104      	bne.n	800e4d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4cc:	4b36      	ldr	r3, [pc, #216]	@ (800e5a8 <xTaskIncrementTick+0x15c>)
 800e4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d2:	601a      	str	r2, [r3, #0]
					break;
 800e4d4:	e03f      	b.n	800e556 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d6:	4b31      	ldr	r3, [pc, #196]	@ (800e59c <xTaskIncrementTick+0x150>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d203      	bcs.n	800e4f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4ee:	4a2e      	ldr	r2, [pc, #184]	@ (800e5a8 <xTaskIncrementTick+0x15c>)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4f4:	e02f      	b.n	800e556 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff ff7c 	bl	800e3f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	3318      	adds	r3, #24
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7ff ff73 	bl	800e3f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e516:	4b25      	ldr	r3, [pc, #148]	@ (800e5ac <xTaskIncrementTick+0x160>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d903      	bls.n	800e526 <xTaskIncrementTick+0xda>
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e522:	4a22      	ldr	r2, [pc, #136]	@ (800e5ac <xTaskIncrementTick+0x160>)
 800e524:	6013      	str	r3, [r2, #0]
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52a:	4613      	mov	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4a1f      	ldr	r2, [pc, #124]	@ (800e5b0 <xTaskIncrementTick+0x164>)
 800e534:	441a      	add	r2, r3
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	3304      	adds	r3, #4
 800e53a:	4619      	mov	r1, r3
 800e53c:	4610      	mov	r0, r2
 800e53e:	f7ff ff37 	bl	800e3b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e546:	4b1b      	ldr	r3, [pc, #108]	@ (800e5b4 <xTaskIncrementTick+0x168>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d3b8      	bcc.n	800e4c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e550:	2301      	movs	r3, #1
 800e552:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e554:	e7b5      	b.n	800e4c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e556:	4b17      	ldr	r3, [pc, #92]	@ (800e5b4 <xTaskIncrementTick+0x168>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e55c:	4914      	ldr	r1, [pc, #80]	@ (800e5b0 <xTaskIncrementTick+0x164>)
 800e55e:	4613      	mov	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4413      	add	r3, r2
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	440b      	add	r3, r1
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d901      	bls.n	800e572 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e56e:	2301      	movs	r3, #1
 800e570:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e572:	4b11      	ldr	r3, [pc, #68]	@ (800e5b8 <xTaskIncrementTick+0x16c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d007      	beq.n	800e58a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e57a:	2301      	movs	r3, #1
 800e57c:	617b      	str	r3, [r7, #20]
 800e57e:	e004      	b.n	800e58a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e580:	4b0e      	ldr	r3, [pc, #56]	@ (800e5bc <xTaskIncrementTick+0x170>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3301      	adds	r3, #1
 800e586:	4a0d      	ldr	r2, [pc, #52]	@ (800e5bc <xTaskIncrementTick+0x170>)
 800e588:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e58a:	697b      	ldr	r3, [r7, #20]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	24002238 	.word	0x24002238
 800e598:	2400221c 	.word	0x2400221c
 800e59c:	24002214 	.word	0x24002214
 800e5a0:	24002218 	.word	0x24002218
 800e5a4:	24002230 	.word	0x24002230
 800e5a8:	24002234 	.word	0x24002234
 800e5ac:	24002220 	.word	0x24002220
 800e5b0:	24001db4 	.word	0x24001db4
 800e5b4:	24001db0 	.word	0x24001db0
 800e5b8:	2400222c 	.word	0x2400222c
 800e5bc:	24002228 	.word	0x24002228

0800e5c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5c6:	4b28      	ldr	r3, [pc, #160]	@ (800e668 <vTaskSwitchContext+0xa8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d003      	beq.n	800e5d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5ce:	4b27      	ldr	r3, [pc, #156]	@ (800e66c <vTaskSwitchContext+0xac>)
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5d4:	e042      	b.n	800e65c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e5d6:	4b25      	ldr	r3, [pc, #148]	@ (800e66c <vTaskSwitchContext+0xac>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5dc:	4b24      	ldr	r3, [pc, #144]	@ (800e670 <vTaskSwitchContext+0xb0>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	60fb      	str	r3, [r7, #12]
 800e5e2:	e011      	b.n	800e608 <vTaskSwitchContext+0x48>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10b      	bne.n	800e602 <vTaskSwitchContext+0x42>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	607b      	str	r3, [r7, #4]
}
 800e5fc:	bf00      	nop
 800e5fe:	bf00      	nop
 800e600:	e7fd      	b.n	800e5fe <vTaskSwitchContext+0x3e>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	3b01      	subs	r3, #1
 800e606:	60fb      	str	r3, [r7, #12]
 800e608:	491a      	ldr	r1, [pc, #104]	@ (800e674 <vTaskSwitchContext+0xb4>)
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	4613      	mov	r3, r2
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4413      	add	r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	440b      	add	r3, r1
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d0e3      	beq.n	800e5e4 <vTaskSwitchContext+0x24>
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	4613      	mov	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	4413      	add	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	4a13      	ldr	r2, [pc, #76]	@ (800e674 <vTaskSwitchContext+0xb4>)
 800e628:	4413      	add	r3, r2
 800e62a:	60bb      	str	r3, [r7, #8]
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	605a      	str	r2, [r3, #4]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	685a      	ldr	r2, [r3, #4]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	3308      	adds	r3, #8
 800e63e:	429a      	cmp	r2, r3
 800e640:	d104      	bne.n	800e64c <vTaskSwitchContext+0x8c>
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	685a      	ldr	r2, [r3, #4]
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	605a      	str	r2, [r3, #4]
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	4a09      	ldr	r2, [pc, #36]	@ (800e678 <vTaskSwitchContext+0xb8>)
 800e654:	6013      	str	r3, [r2, #0]
 800e656:	4a06      	ldr	r2, [pc, #24]	@ (800e670 <vTaskSwitchContext+0xb0>)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6013      	str	r3, [r2, #0]
}
 800e65c:	bf00      	nop
 800e65e:	3714      	adds	r7, #20
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	24002238 	.word	0x24002238
 800e66c:	2400222c 	.word	0x2400222c
 800e670:	24002220 	.word	0x24002220
 800e674:	24001db4 	.word	0x24001db4
 800e678:	24001db0 	.word	0x24001db0

0800e67c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e682:	4b0c      	ldr	r3, [pc, #48]	@ (800e6b4 <prvResetNextTaskUnblockTime+0x38>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d104      	bne.n	800e696 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e68c:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b8 <prvResetNextTaskUnblockTime+0x3c>)
 800e68e:	f04f 32ff 	mov.w	r2, #4294967295
 800e692:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e694:	e008      	b.n	800e6a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e696:	4b07      	ldr	r3, [pc, #28]	@ (800e6b4 <prvResetNextTaskUnblockTime+0x38>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	4a04      	ldr	r2, [pc, #16]	@ (800e6b8 <prvResetNextTaskUnblockTime+0x3c>)
 800e6a6:	6013      	str	r3, [r2, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	24002214 	.word	0x24002214
 800e6b8:	24002234 	.word	0x24002234

0800e6bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6f0 <xTaskGetSchedulerState+0x34>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d102      	bne.n	800e6d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	607b      	str	r3, [r7, #4]
 800e6ce:	e008      	b.n	800e6e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6d0:	4b08      	ldr	r3, [pc, #32]	@ (800e6f4 <xTaskGetSchedulerState+0x38>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d102      	bne.n	800e6de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e6d8:	2302      	movs	r3, #2
 800e6da:	607b      	str	r3, [r7, #4]
 800e6dc:	e001      	b.n	800e6e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e6e2:	687b      	ldr	r3, [r7, #4]
	}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	24002224 	.word	0x24002224
 800e6f4:	24002238 	.word	0x24002238
	...

0800e700 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e700:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <pxCurrentTCBConst2>)
 800e702:	6819      	ldr	r1, [r3, #0]
 800e704:	6808      	ldr	r0, [r1, #0]
 800e706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e70a:	f380 8809 	msr	PSP, r0
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f380 8811 	msr	BASEPRI, r0
 800e71a:	4770      	bx	lr
 800e71c:	f3af 8000 	nop.w

0800e720 <pxCurrentTCBConst2>:
 800e720:	24001db0 	.word	0x24001db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e724:	bf00      	nop
 800e726:	bf00      	nop
	...

0800e730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e730:	f3ef 8009 	mrs	r0, PSP
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	4b15      	ldr	r3, [pc, #84]	@ (800e790 <pxCurrentTCBConst>)
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	f01e 0f10 	tst.w	lr, #16
 800e740:	bf08      	it	eq
 800e742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74a:	6010      	str	r0, [r2, #0]
 800e74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e754:	f380 8811 	msr	BASEPRI, r0
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f7ff ff2e 	bl	800e5c0 <vTaskSwitchContext>
 800e764:	f04f 0000 	mov.w	r0, #0
 800e768:	f380 8811 	msr	BASEPRI, r0
 800e76c:	bc09      	pop	{r0, r3}
 800e76e:	6819      	ldr	r1, [r3, #0]
 800e770:	6808      	ldr	r0, [r1, #0]
 800e772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e776:	f01e 0f10 	tst.w	lr, #16
 800e77a:	bf08      	it	eq
 800e77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e780:	f380 8809 	msr	PSP, r0
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	4770      	bx	lr
 800e78a:	bf00      	nop
 800e78c:	f3af 8000 	nop.w

0800e790 <pxCurrentTCBConst>:
 800e790:	24001db0 	.word	0x24001db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e794:	bf00      	nop
 800e796:	bf00      	nop

0800e798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	607b      	str	r3, [r7, #4]
}
 800e7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7b2:	f7ff fe4b 	bl	800e44c <xTaskIncrementTick>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d003      	beq.n	800e7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7bc:	4b06      	ldr	r3, [pc, #24]	@ (800e7d8 <xPortSysTickHandler+0x40>)
 800e7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7c2:	601a      	str	r2, [r3, #0]
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	e000ed04 	.word	0xe000ed04

0800e7dc <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d009      	beq.n	800e800 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800e7ec:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800e7ee:	461a      	mov	r2, r3
        err.type, err.code);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	4807      	ldr	r0, [pc, #28]	@ (800e818 <ai_log_err+0x3c>)
 800e7fa:	f004 fa4f 	bl	8012c9c <iprintf>
 800e7fe:	e009      	b.n	800e814 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800e800:	793b      	ldrb	r3, [r7, #4]
 800e802:	4619      	mov	r1, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e80a:	461a      	mov	r2, r3
 800e80c:	4803      	ldr	r0, [pc, #12]	@ (800e81c <ai_log_err+0x40>)
 800e80e:	f004 fa45 	bl	8012c9c <iprintf>

  do {} while (1);
 800e812:	bf00      	nop
 800e814:	bf00      	nop
 800e816:	e7fd      	b.n	800e814 <ai_log_err+0x38>
 800e818:	080164e8 	.word	0x080164e8
 800e81c:	0801651c 	.word	0x0801651c

0800e820 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_mnist_nn_create_and_init(&mnist_nn, act_addr, NULL);
 800e828:	2200      	movs	r2, #0
 800e82a:	6879      	ldr	r1, [r7, #4]
 800e82c:	4828      	ldr	r0, [pc, #160]	@ (800e8d0 <ai_boostrap+0xb0>)
 800e82e:	f000 fa69 	bl	800ed04 <ai_mnist_nn_create_and_init>
 800e832:	4603      	mov	r3, r0
 800e834:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800e836:	7b3b      	ldrb	r3, [r7, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d006      	beq.n	800e84a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_mnist_nn_create_and_init");
 800e83c:	4925      	ldr	r1, [pc, #148]	@ (800e8d4 <ai_boostrap+0xb4>)
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f7ff ffcc 	bl	800e7dc <ai_log_err>
    return -1;
 800e844:	f04f 33ff 	mov.w	r3, #4294967295
 800e848:	e03e      	b.n	800e8c8 <ai_boostrap+0xa8>
  }

  ai_input = ai_mnist_nn_inputs_get(mnist_nn, NULL);
 800e84a:	4b21      	ldr	r3, [pc, #132]	@ (800e8d0 <ai_boostrap+0xb0>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2100      	movs	r1, #0
 800e850:	4618      	mov	r0, r3
 800e852:	f000 fad5 	bl	800ee00 <ai_mnist_nn_inputs_get>
 800e856:	4603      	mov	r3, r0
 800e858:	4a1f      	ldr	r2, [pc, #124]	@ (800e8d8 <ai_boostrap+0xb8>)
 800e85a:	6013      	str	r3, [r2, #0]
  ai_output = ai_mnist_nn_outputs_get(mnist_nn, NULL);
 800e85c:	4b1c      	ldr	r3, [pc, #112]	@ (800e8d0 <ai_boostrap+0xb0>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2100      	movs	r1, #0
 800e862:	4618      	mov	r0, r3
 800e864:	f000 fae6 	bl	800ee34 <ai_mnist_nn_outputs_get>
 800e868:	4603      	mov	r3, r0
 800e86a:	4a1c      	ldr	r2, [pc, #112]	@ (800e8dc <ai_boostrap+0xbc>)
 800e86c:	6013      	str	r3, [r2, #0]

#if defined(AI_MNIST_NN_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_MNIST_NN_IN_NUM; idx++) {
 800e86e:	2300      	movs	r3, #0
 800e870:	617b      	str	r3, [r7, #20]
 800e872:	e00f      	b.n	800e894 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800e874:	4b18      	ldr	r3, [pc, #96]	@ (800e8d8 <ai_boostrap+0xb8>)
 800e876:	6819      	ldr	r1, [r3, #0]
 800e878:	697a      	ldr	r2, [r7, #20]
 800e87a:	4613      	mov	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	1a9b      	subs	r3, r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	440b      	add	r3, r1
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	4916      	ldr	r1, [pc, #88]	@ (800e8e0 <ai_boostrap+0xc0>)
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MNIST_NN_IN_NUM; idx++) {
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	3301      	adds	r3, #1
 800e892:	617b      	str	r3, [r7, #20]
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b00      	cmp	r3, #0
 800e898:	ddec      	ble.n	800e874 <ai_boostrap+0x54>

#if defined(AI_MNIST_NN_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_MNIST_NN_OUT_NUM; idx++) {
 800e89a:	2300      	movs	r3, #0
 800e89c:	613b      	str	r3, [r7, #16]
 800e89e:	e00f      	b.n	800e8c0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800e8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e8dc <ai_boostrap+0xbc>)
 800e8a2:	6819      	ldr	r1, [r3, #0]
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	00db      	lsls	r3, r3, #3
 800e8aa:	1a9b      	subs	r3, r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	440b      	add	r3, r1
 800e8b0:	685a      	ldr	r2, [r3, #4]
 800e8b2:	490c      	ldr	r1, [pc, #48]	@ (800e8e4 <ai_boostrap+0xc4>)
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MNIST_NN_OUT_NUM; idx++) {
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	613b      	str	r3, [r7, #16]
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	ddec      	ble.n	800e8a0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_MNIST_NN_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	24009d20 	.word	0x24009d20
 800e8d4:	0801654c 	.word	0x0801654c
 800e8d8:	24009d24 	.word	0x24009d24
 800e8dc:	24009d28 	.word	0x24009d28
 800e8e0:	2400223c 	.word	0x2400223c
 800e8e4:	24002240 	.word	0x24002240

0800e8e8 <ai_run>:

static int ai_run(void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_mnist_nn_run(mnist_nn, ai_input, ai_output);
 800e8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800e92c <ai_run+0x44>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a0f      	ldr	r2, [pc, #60]	@ (800e930 <ai_run+0x48>)
 800e8f4:	6811      	ldr	r1, [r2, #0]
 800e8f6:	4a0f      	ldr	r2, [pc, #60]	@ (800e934 <ai_run+0x4c>)
 800e8f8:	6812      	ldr	r2, [r2, #0]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f000 faf0 	bl	800eee0 <ai_mnist_nn_run>
 800e900:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2b01      	cmp	r3, #1
 800e906:	d00c      	beq.n	800e922 <ai_run+0x3a>
    ai_log_err(ai_mnist_nn_get_error(mnist_nn),
 800e908:	4b08      	ldr	r3, [pc, #32]	@ (800e92c <ai_run+0x44>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 f9d7 	bl	800ecc0 <ai_mnist_nn_get_error>
 800e912:	4603      	mov	r3, r0
 800e914:	4908      	ldr	r1, [pc, #32]	@ (800e938 <ai_run+0x50>)
 800e916:	4618      	mov	r0, r3
 800e918:	f7ff ff60 	bl	800e7dc <ai_log_err>
        "ai_mnist_nn_run");
    return -1;
 800e91c:	f04f 33ff 	mov.w	r3, #4294967295
 800e920:	e000      	b.n	800e924 <ai_run+0x3c>
  }

  return 0;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	24009d20 	.word	0x24009d20
 800e930:	24009d24 	.word	0x24009d24
 800e934:	24009d28 	.word	0x24009d28
 800e938:	08016568 	.word	0x08016568

0800e93c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
    BSP_QSPI_Init_t qspiInit;
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 800e942:	2303      	movs	r3, #3
 800e944:	713b      	strb	r3, [r7, #4]
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800e946:	2301      	movs	r3, #1
 800e948:	717b      	strb	r3, [r7, #5]
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800e94a:	2340      	movs	r3, #64	@ 0x40
 800e94c:	71bb      	strb	r3, [r7, #6]
    BSP_QSPI_Init(0,&qspiInit);
 800e94e:	1d3b      	adds	r3, r7, #4
 800e950:	4619      	mov	r1, r3
 800e952:	2000      	movs	r0, #0
 800e954:	f7f6 f9aa 	bl	8004cac <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 800e958:	2000      	movs	r0, #0
 800e95a:	f7f6 fa81 	bl	8004e60 <BSP_QSPI_EnableMemoryMappedMode>
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800e95e:	4805      	ldr	r0, [pc, #20]	@ (800e974 <MX_X_CUBE_AI_Init+0x38>)
 800e960:	f004 fa04 	bl	8012d6c <puts>

  ai_boostrap(data_activations0);
 800e964:	4804      	ldr	r0, [pc, #16]	@ (800e978 <MX_X_CUBE_AI_Init+0x3c>)
 800e966:	f7ff ff5b 	bl	800e820 <ai_boostrap>
    /* USER CODE END 5 */
}
 800e96a:	bf00      	nop
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	08016578 	.word	0x08016578
 800e978:	24000064 	.word	0x24000064

0800e97c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float * nn_input_data, ai_float * nn_output_data) //MX_X_CUBE_AI_Process(void)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
			nn_input_data_TEST[0][i][j][0] = *(nn_input_data + i * AI_MNIST_NN_IN_1_WIDTH + j); //nn_input_data[i][j];
		}
	}
	*/

	ai_input[0].data = AI_HANDLE_PTR(nn_input_data);
 800e986:	4b07      	ldr	r3, [pc, #28]	@ (800e9a4 <MX_X_CUBE_AI_Process+0x28>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(nn_output_data);
 800e98e:	4b06      	ldr	r3, [pc, #24]	@ (800e9a8 <MX_X_CUBE_AI_Process+0x2c>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	605a      	str	r2, [r3, #4]
	}*/
	//data_ins[0] = nn_input_data_TEST;



	ai_run();
 800e996:	f7ff ffa7 	bl	800e8e8 <ai_run>
	///////////////////////////////////memcpy(nn_output_data, data_outs[0], 10 * sizeof(ai_float));



    /* USER CODE END 6 */
}
 800e99a:	bf00      	nop
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	24009d24 	.word	0x24009d24
 800e9a8:	24009d28 	.word	0x24009d28

0800e9ac <mnist_nn_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnist_nn_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_mnist_nn_activations_map, 1, params)) {
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	4840      	ldr	r0, [pc, #256]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9bc:	f000 fb6e 	bl	800f09c <ai_platform_get_activations_map>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d06f      	beq.n	800eaa6 <mnist_nn_configure_activations+0xfa>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800e9c6:	4b3d      	ldr	r3, [pc, #244]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a3d      	ldr	r2, [pc, #244]	@ (800eac0 <mnist_nn_configure_activations+0x114>)
 800e9cc:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800e9ce:	4b3b      	ldr	r3, [pc, #236]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a3b      	ldr	r2, [pc, #236]	@ (800eac0 <mnist_nn_configure_activations+0x114>)
 800e9d4:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 3136);
 800e9d6:	4b39      	ldr	r3, [pc, #228]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f503 6344 	add.w	r3, r3, #3136	@ 0xc40
 800e9de:	4a39      	ldr	r2, [pc, #228]	@ (800eac4 <mnist_nn_configure_activations+0x118>)
 800e9e0:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 3136);
 800e9e2:	4b36      	ldr	r3, [pc, #216]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f503 6344 	add.w	r3, r3, #3136	@ 0xc40
 800e9ea:	4a36      	ldr	r2, [pc, #216]	@ (800eac4 <mnist_nn_configure_activations+0x118>)
 800e9ec:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 9792);
 800e9ee:	4b33      	ldr	r3, [pc, #204]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f503 5319 	add.w	r3, r3, #9792	@ 0x2640
 800e9f6:	4a34      	ldr	r2, [pc, #208]	@ (800eac8 <mnist_nn_configure_activations+0x11c>)
 800e9f8:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 9792);
 800e9fa:	4b30      	ldr	r3, [pc, #192]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f503 5319 	add.w	r3, r3, #9792	@ 0x2640
 800ea02:	4a31      	ldr	r2, [pc, #196]	@ (800eac8 <mnist_nn_configure_activations+0x11c>)
 800ea04:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea06:	4b2d      	ldr	r3, [pc, #180]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a30      	ldr	r2, [pc, #192]	@ (800eacc <mnist_nn_configure_activations+0x120>)
 800ea0c:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea0e:	4b2b      	ldr	r3, [pc, #172]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a2e      	ldr	r2, [pc, #184]	@ (800eacc <mnist_nn_configure_activations+0x120>)
 800ea14:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 8512);
 800ea16:	4b29      	ldr	r3, [pc, #164]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 800ea1e:	4a2c      	ldr	r2, [pc, #176]	@ (800ead0 <mnist_nn_configure_activations+0x124>)
 800ea20:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 8512);
 800ea22:	4b26      	ldr	r3, [pc, #152]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 800ea2a:	4a29      	ldr	r2, [pc, #164]	@ (800ead0 <mnist_nn_configure_activations+0x124>)
 800ea2c:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea2e:	4b23      	ldr	r3, [pc, #140]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a28      	ldr	r2, [pc, #160]	@ (800ead4 <mnist_nn_configure_activations+0x128>)
 800ea34:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea36:	4b21      	ldr	r3, [pc, #132]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a26      	ldr	r2, [pc, #152]	@ (800ead4 <mnist_nn_configure_activations+0x128>)
 800ea3c:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 2304);
 800ea3e:	4b1f      	ldr	r3, [pc, #124]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea46:	4a24      	ldr	r2, [pc, #144]	@ (800ead8 <mnist_nn_configure_activations+0x12c>)
 800ea48:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 2304);
 800ea4a:	4b1c      	ldr	r3, [pc, #112]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea52:	4a21      	ldr	r2, [pc, #132]	@ (800ead8 <mnist_nn_configure_activations+0x12c>)
 800ea54:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea56:	4b19      	ldr	r3, [pc, #100]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a20      	ldr	r2, [pc, #128]	@ (800eadc <mnist_nn_configure_activations+0x130>)
 800ea5c:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea5e:	4b17      	ldr	r3, [pc, #92]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a1e      	ldr	r2, [pc, #120]	@ (800eadc <mnist_nn_configure_activations+0x130>)
 800ea64:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 256);
 800ea66:	4b15      	ldr	r3, [pc, #84]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ea6e:	4a1c      	ldr	r2, [pc, #112]	@ (800eae0 <mnist_nn_configure_activations+0x134>)
 800ea70:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 256);
 800ea72:	4b12      	ldr	r3, [pc, #72]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ea7a:	4a19      	ldr	r2, [pc, #100]	@ (800eae0 <mnist_nn_configure_activations+0x134>)
 800ea7c:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea7e:	4b0f      	ldr	r3, [pc, #60]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4a18      	ldr	r2, [pc, #96]	@ (800eae4 <mnist_nn_configure_activations+0x138>)
 800ea84:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea86:	4b0d      	ldr	r3, [pc, #52]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a16      	ldr	r2, [pc, #88]	@ (800eae4 <mnist_nn_configure_activations+0x138>)
 800ea8c:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 40);
 800ea8e:	4b0b      	ldr	r3, [pc, #44]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3328      	adds	r3, #40	@ 0x28
 800ea94:	4a14      	ldr	r2, [pc, #80]	@ (800eae8 <mnist_nn_configure_activations+0x13c>)
 800ea96:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 40);
 800ea98:	4b08      	ldr	r3, [pc, #32]	@ (800eabc <mnist_nn_configure_activations+0x110>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3328      	adds	r3, #40	@ 0x28
 800ea9e:	4a12      	ldr	r2, [pc, #72]	@ (800eae8 <mnist_nn_configure_activations+0x13c>)
 800eaa0:	60d3      	str	r3, [r2, #12]
    return true;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e005      	b.n	800eab2 <mnist_nn_configure_activations+0x106>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800eaa6:	2213      	movs	r2, #19
 800eaa8:	2130      	movs	r1, #48	@ 0x30
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fb74 	bl	800f198 <ai_platform_network_set_error>
  return false;
 800eab0:	2300      	movs	r3, #0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	24009d2c 	.word	0x24009d2c
 800eac0:	24000068 	.word	0x24000068
 800eac4:	24000198 	.word	0x24000198
 800eac8:	24000078 	.word	0x24000078
 800eacc:	240001a8 	.word	0x240001a8
 800ead0:	24000088 	.word	0x24000088
 800ead4:	24000098 	.word	0x24000098
 800ead8:	240000a8 	.word	0x240000a8
 800eadc:	240000b8 	.word	0x240000b8
 800eae0:	240000c8 	.word	0x240000c8
 800eae4:	240000d8 	.word	0x240000d8
 800eae8:	240000e8 	.word	0x240000e8

0800eaec <mnist_nn_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnist_nn_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_mnist_nn_weights_map, 1, params)) {
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	2101      	movs	r1, #1
 800eafa:	4861      	ldr	r0, [pc, #388]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eafc:	f000 fa76 	bl	800efec <ai_platform_get_weights_map>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 80b2 	beq.w	800ec6c <mnist_nn_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800eb08:	4b5e      	ldr	r3, [pc, #376]	@ (800ec84 <mnist_nn_configure_weights+0x198>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb10:	4a5c      	ldr	r2, [pc, #368]	@ (800ec84 <mnist_nn_configure_weights+0x198>)
 800eb12:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 0);
 800eb14:	4b5a      	ldr	r3, [pc, #360]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a5a      	ldr	r2, [pc, #360]	@ (800ec84 <mnist_nn_configure_weights+0x198>)
 800eb1a:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 0);
 800eb1c:	4b58      	ldr	r3, [pc, #352]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a58      	ldr	r2, [pc, #352]	@ (800ec84 <mnist_nn_configure_weights+0x198>)
 800eb22:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800eb24:	4b58      	ldr	r3, [pc, #352]	@ (800ec88 <mnist_nn_configure_weights+0x19c>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb2c:	4a56      	ldr	r2, [pc, #344]	@ (800ec88 <mnist_nn_configure_weights+0x19c>)
 800eb2e:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 1152);
 800eb30:	4b53      	ldr	r3, [pc, #332]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800eb38:	4a53      	ldr	r2, [pc, #332]	@ (800ec88 <mnist_nn_configure_weights+0x19c>)
 800eb3a:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 1152);
 800eb3c:	4b50      	ldr	r3, [pc, #320]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800eb44:	4a50      	ldr	r2, [pc, #320]	@ (800ec88 <mnist_nn_configure_weights+0x19c>)
 800eb46:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800eb48:	4b50      	ldr	r3, [pc, #320]	@ (800ec8c <mnist_nn_configure_weights+0x1a0>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb50:	4a4e      	ldr	r2, [pc, #312]	@ (800ec8c <mnist_nn_configure_weights+0x1a0>)
 800eb52:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 1280);
 800eb54:	4b4a      	ldr	r3, [pc, #296]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb5c:	4a4b      	ldr	r2, [pc, #300]	@ (800ec8c <mnist_nn_configure_weights+0x1a0>)
 800eb5e:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 1280);
 800eb60:	4b47      	ldr	r3, [pc, #284]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb68:	4a48      	ldr	r2, [pc, #288]	@ (800ec8c <mnist_nn_configure_weights+0x1a0>)
 800eb6a:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800eb6c:	4b48      	ldr	r3, [pc, #288]	@ (800ec90 <mnist_nn_configure_weights+0x1a4>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb74:	4a46      	ldr	r2, [pc, #280]	@ (800ec90 <mnist_nn_configure_weights+0x1a4>)
 800eb76:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 75008);
 800eb78:	4b41      	ldr	r3, [pc, #260]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	4b45      	ldr	r3, [pc, #276]	@ (800ec94 <mnist_nn_configure_weights+0x1a8>)
 800eb7e:	4413      	add	r3, r2
 800eb80:	4a43      	ldr	r2, [pc, #268]	@ (800ec90 <mnist_nn_configure_weights+0x1a4>)
 800eb82:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 75008);
 800eb84:	4b3e      	ldr	r3, [pc, #248]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	4b42      	ldr	r3, [pc, #264]	@ (800ec94 <mnist_nn_configure_weights+0x1a8>)
 800eb8a:	4413      	add	r3, r2
 800eb8c:	4a40      	ldr	r2, [pc, #256]	@ (800ec90 <mnist_nn_configure_weights+0x1a4>)
 800eb8e:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800eb90:	4b41      	ldr	r3, [pc, #260]	@ (800ec98 <mnist_nn_configure_weights+0x1ac>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb98:	4a3f      	ldr	r2, [pc, #252]	@ (800ec98 <mnist_nn_configure_weights+0x1ac>)
 800eb9a:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 75264);
 800eb9c:	4b38      	ldr	r3, [pc, #224]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f503 3393 	add.w	r3, r3, #75264	@ 0x12600
 800eba4:	4a3c      	ldr	r2, [pc, #240]	@ (800ec98 <mnist_nn_configure_weights+0x1ac>)
 800eba6:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 75264);
 800eba8:	4b35      	ldr	r3, [pc, #212]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f503 3393 	add.w	r3, r3, #75264	@ 0x12600
 800ebb0:	4a39      	ldr	r2, [pc, #228]	@ (800ec98 <mnist_nn_configure_weights+0x1ac>)
 800ebb2:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800ebb4:	4b39      	ldr	r3, [pc, #228]	@ (800ec9c <mnist_nn_configure_weights+0x1b0>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ebbc:	4a37      	ldr	r2, [pc, #220]	@ (800ec9c <mnist_nn_configure_weights+0x1b0>)
 800ebbe:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 222720);
 800ebc0:	4b2f      	ldr	r3, [pc, #188]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	4b36      	ldr	r3, [pc, #216]	@ (800eca0 <mnist_nn_configure_weights+0x1b4>)
 800ebc6:	4413      	add	r3, r2
 800ebc8:	4a34      	ldr	r2, [pc, #208]	@ (800ec9c <mnist_nn_configure_weights+0x1b0>)
 800ebca:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 222720);
 800ebcc:	4b2c      	ldr	r3, [pc, #176]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	4b33      	ldr	r3, [pc, #204]	@ (800eca0 <mnist_nn_configure_weights+0x1b4>)
 800ebd2:	4413      	add	r3, r2
 800ebd4:	4a31      	ldr	r2, [pc, #196]	@ (800ec9c <mnist_nn_configure_weights+0x1b0>)
 800ebd6:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ebd8:	4b32      	ldr	r3, [pc, #200]	@ (800eca4 <mnist_nn_configure_weights+0x1b8>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ebe0:	4a30      	ldr	r2, [pc, #192]	@ (800eca4 <mnist_nn_configure_weights+0x1b8>)
 800ebe2:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 222976);
 800ebe4:	4b26      	ldr	r3, [pc, #152]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	4b2f      	ldr	r3, [pc, #188]	@ (800eca8 <mnist_nn_configure_weights+0x1bc>)
 800ebea:	4413      	add	r3, r2
 800ebec:	4a2d      	ldr	r2, [pc, #180]	@ (800eca4 <mnist_nn_configure_weights+0x1b8>)
 800ebee:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 222976);
 800ebf0:	4b23      	ldr	r3, [pc, #140]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	4b2c      	ldr	r3, [pc, #176]	@ (800eca8 <mnist_nn_configure_weights+0x1bc>)
 800ebf6:	4413      	add	r3, r2
 800ebf8:	4a2a      	ldr	r2, [pc, #168]	@ (800eca4 <mnist_nn_configure_weights+0x1b8>)
 800ebfa:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ebfc:	4b2b      	ldr	r3, [pc, #172]	@ (800ecac <mnist_nn_configure_weights+0x1c0>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec04:	4a29      	ldr	r2, [pc, #164]	@ (800ecac <mnist_nn_configure_weights+0x1c0>)
 800ec06:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 370432);
 800ec08:	4b1d      	ldr	r3, [pc, #116]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	4b28      	ldr	r3, [pc, #160]	@ (800ecb0 <mnist_nn_configure_weights+0x1c4>)
 800ec0e:	4413      	add	r3, r2
 800ec10:	4a26      	ldr	r2, [pc, #152]	@ (800ecac <mnist_nn_configure_weights+0x1c0>)
 800ec12:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 370432);
 800ec14:	4b1a      	ldr	r3, [pc, #104]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	4b25      	ldr	r3, [pc, #148]	@ (800ecb0 <mnist_nn_configure_weights+0x1c4>)
 800ec1a:	4413      	add	r3, r2
 800ec1c:	4a23      	ldr	r2, [pc, #140]	@ (800ecac <mnist_nn_configure_weights+0x1c0>)
 800ec1e:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ec20:	4b24      	ldr	r3, [pc, #144]	@ (800ecb4 <mnist_nn_configure_weights+0x1c8>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec28:	4a22      	ldr	r2, [pc, #136]	@ (800ecb4 <mnist_nn_configure_weights+0x1c8>)
 800ec2a:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 370688);
 800ec2c:	4b14      	ldr	r3, [pc, #80]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f503 23b5 	add.w	r3, r3, #370688	@ 0x5a800
 800ec34:	4a1f      	ldr	r2, [pc, #124]	@ (800ecb4 <mnist_nn_configure_weights+0x1c8>)
 800ec36:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 370688);
 800ec38:	4b11      	ldr	r3, [pc, #68]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f503 23b5 	add.w	r3, r3, #370688	@ 0x5a800
 800ec40:	4a1c      	ldr	r2, [pc, #112]	@ (800ecb4 <mnist_nn_configure_weights+0x1c8>)
 800ec42:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ec44:	4b1c      	ldr	r3, [pc, #112]	@ (800ecb8 <mnist_nn_configure_weights+0x1cc>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec4c:	4a1a      	ldr	r2, [pc, #104]	@ (800ecb8 <mnist_nn_configure_weights+0x1cc>)
 800ec4e:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 373248);
 800ec50:	4b0b      	ldr	r3, [pc, #44]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	4b19      	ldr	r3, [pc, #100]	@ (800ecbc <mnist_nn_configure_weights+0x1d0>)
 800ec56:	4413      	add	r3, r2
 800ec58:	4a17      	ldr	r2, [pc, #92]	@ (800ecb8 <mnist_nn_configure_weights+0x1cc>)
 800ec5a:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 373248);
 800ec5c:	4b08      	ldr	r3, [pc, #32]	@ (800ec80 <mnist_nn_configure_weights+0x194>)
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	4b16      	ldr	r3, [pc, #88]	@ (800ecbc <mnist_nn_configure_weights+0x1d0>)
 800ec62:	4413      	add	r3, r2
 800ec64:	4a14      	ldr	r2, [pc, #80]	@ (800ecb8 <mnist_nn_configure_weights+0x1cc>)
 800ec66:	60d3      	str	r3, [r2, #12]
    return true;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e005      	b.n	800ec78 <mnist_nn_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ec6c:	2212      	movs	r2, #18
 800ec6e:	2130      	movs	r1, #48	@ 0x30
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fa91 	bl	800f198 <ai_platform_network_set_error>
  return false;
 800ec76:	2300      	movs	r3, #0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3708      	adds	r7, #8
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	24009d30 	.word	0x24009d30
 800ec84:	240000f8 	.word	0x240000f8
 800ec88:	24000108 	.word	0x24000108
 800ec8c:	24000118 	.word	0x24000118
 800ec90:	24000128 	.word	0x24000128
 800ec94:	00012500 	.word	0x00012500
 800ec98:	24000138 	.word	0x24000138
 800ec9c:	24000148 	.word	0x24000148
 800eca0:	00036600 	.word	0x00036600
 800eca4:	24000158 	.word	0x24000158
 800eca8:	00036700 	.word	0x00036700
 800ecac:	24000168 	.word	0x24000168
 800ecb0:	0005a700 	.word	0x0005a700
 800ecb4:	24000178 	.word	0x24000178
 800ecb8:	24000188 	.word	0x24000188
 800ecbc:	0005b200 	.word	0x0005b200

0800ecc0 <ai_mnist_nn_get_error>:
}


AI_API_ENTRY
ai_error ai_mnist_nn_get_error(ai_handle network)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 fa59 	bl	800f180 <ai_platform_network_get_error>
 800ecce:	4603      	mov	r3, r0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <ai_mnist_nn_create>:


AI_API_ENTRY
ai_error ai_mnist_nn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af02      	add	r7, sp, #8
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ece2:	2300      	movs	r3, #0
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	2305      	movs	r3, #5
 800ece8:	9300      	str	r3, [sp, #0]
 800ecea:	2301      	movs	r3, #1
 800ecec:	4a04      	ldr	r2, [pc, #16]	@ (800ed00 <ai_mnist_nn_create+0x28>)
 800ecee:	6839      	ldr	r1, [r7, #0]
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 fb45 	bl	800f380 <ai_platform_network_create>
 800ecf6:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	24000b08 	.word	0x24000b08

0800ed04 <ai_mnist_nn_create_and_init>:


AI_API_ENTRY
ai_error ai_mnist_nn_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b094      	sub	sp, #80	@ 0x50
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_mnist_nn_create(network, AI_MNIST_NN_DATA_CONFIG);
 800ed10:	2100      	movs	r1, #0
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff ffe0 	bl	800ecd8 <ai_mnist_nn_create>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800ed1c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <ai_mnist_nn_create_and_init+0x24>
    return err;
 800ed24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed26:	e067      	b.n	800edf8 <ai_mnist_nn_create_and_init+0xf4>
  }
  
  if (ai_mnist_nn_data_params_get(&params) != true) {
 800ed28:	f107 0310 	add.w	r3, r7, #16
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 f8e7 	bl	800ef00 <ai_mnist_nn_data_params_get>
 800ed32:	4603      	mov	r3, r0
 800ed34:	f083 0301 	eor.w	r3, r3, #1
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d008      	beq.n	800ed50 <ai_mnist_nn_create_and_init+0x4c>
    err = ai_mnist_nn_get_error(*network);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff ffbc 	bl	800ecc0 <ai_mnist_nn_get_error>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800ed4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed4e:	e053      	b.n	800edf8 <ai_mnist_nn_create_and_init+0xf4>
  }
#if defined(AI_MNIST_NN_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ed50:	2300      	movs	r3, #0
 800ed52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ed56:	e012      	b.n	800ed7e <ai_mnist_nn_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800ed58:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800ed5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	4413      	add	r3, r2
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	f107 0310 	add.w	r3, r7, #16
 800ed6c:	330c      	adds	r3, #12
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 f92c 	bl	800efcc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ed74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ed78:	3301      	adds	r3, #1
 800ed7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d004      	beq.n	800ed8e <ai_mnist_nn_create_and_init+0x8a>
 800ed84:	8bfb      	ldrh	r3, [r7, #30]
 800ed86:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d3e4      	bcc.n	800ed58 <ai_mnist_nn_create_and_init+0x54>
  }
#endif
#if defined(AI_MNIST_NN_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ed94:	e012      	b.n	800edbc <ai_mnist_nn_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800ed96:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800ed9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	4413      	add	r3, r2
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	f107 0310 	add.w	r3, r7, #16
 800edaa:	3304      	adds	r3, #4
 800edac:	4618      	mov	r0, r3
 800edae:	f000 f90d 	bl	800efcc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800edb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800edb6:	3301      	adds	r3, #1
 800edb8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d004      	beq.n	800edcc <ai_mnist_nn_create_and_init+0xc8>
 800edc2:	8afb      	ldrh	r3, [r7, #22]
 800edc4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800edc8:	429a      	cmp	r2, r3
 800edca:	d3e4      	bcc.n	800ed96 <ai_mnist_nn_create_and_init+0x92>
  }
#endif
  if (ai_mnist_nn_init(*network, &params) != true) {
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f107 0210 	add.w	r2, r7, #16
 800edd4:	4611      	mov	r1, r2
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 f846 	bl	800ee68 <ai_mnist_nn_init>
 800eddc:	4603      	mov	r3, r0
 800edde:	f083 0301 	eor.w	r3, r3, #1
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d006      	beq.n	800edf6 <ai_mnist_nn_create_and_init+0xf2>
    err = ai_mnist_nn_get_error(*network);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff ff67 	bl	800ecc0 <ai_mnist_nn_get_error>
 800edf2:	4603      	mov	r3, r0
 800edf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800edf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3750      	adds	r7, #80	@ 0x50
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <ai_mnist_nn_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_mnist_nn_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d104      	bne.n	800ee1a <ai_mnist_nn_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ee10:	4b06      	ldr	r3, [pc, #24]	@ (800ee2c <ai_mnist_nn_inputs_get+0x2c>)
 800ee12:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a06      	ldr	r2, [pc, #24]	@ (800ee30 <ai_mnist_nn_inputs_get+0x30>)
 800ee18:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ee1a:	6839      	ldr	r1, [r7, #0]
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f9c1 	bl	800f1a4 <ai_platform_inputs_get>
 800ee22:	4603      	mov	r3, r0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	24000b08 	.word	0x24000b08
 800ee30:	a1c00100 	.word	0xa1c00100

0800ee34 <ai_mnist_nn_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_mnist_nn_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d104      	bne.n	800ee4e <ai_mnist_nn_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ee44:	4b06      	ldr	r3, [pc, #24]	@ (800ee60 <ai_mnist_nn_outputs_get+0x2c>)
 800ee46:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a06      	ldr	r2, [pc, #24]	@ (800ee64 <ai_mnist_nn_outputs_get+0x30>)
 800ee4c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 fa1f 	bl	800f294 <ai_platform_outputs_get>
 800ee56:	4603      	mov	r3, r0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	24000b08 	.word	0x24000b08
 800ee64:	a1c00100 	.word	0xa1c00100

0800ee68 <ai_mnist_nn_init>:


AI_API_ENTRY
ai_bool ai_mnist_nn_init(
  ai_handle network, const ai_network_params* params)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fac5 	bl	800f404 <ai_platform_network_init>
 800ee7a:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d101      	bne.n	800ee8a <ai_mnist_nn_init+0x22>
 800ee86:	2300      	movs	r3, #0
 800ee88:	e026      	b.n	800eed8 <ai_mnist_nn_init+0x70>
  ok &= mnist_nn_configure_weights(net_ctx, params);
 800ee8a:	6839      	ldr	r1, [r7, #0]
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f7ff fe2d 	bl	800eaec <mnist_nn_configure_weights>
 800ee92:	4603      	mov	r3, r0
 800ee94:	461a      	mov	r2, r3
 800ee96:	7afb      	ldrb	r3, [r7, #11]
 800ee98:	4013      	ands	r3, r2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	bf14      	ite	ne
 800ee9e:	2301      	movne	r3, #1
 800eea0:	2300      	moveq	r3, #0
 800eea2:	72fb      	strb	r3, [r7, #11]
  ok &= mnist_nn_configure_activations(net_ctx, params);
 800eea4:	6839      	ldr	r1, [r7, #0]
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f7ff fd80 	bl	800e9ac <mnist_nn_configure_activations>
 800eeac:	4603      	mov	r3, r0
 800eeae:	461a      	mov	r2, r3
 800eeb0:	7afb      	ldrb	r3, [r7, #11]
 800eeb2:	4013      	ands	r3, r2
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	bf14      	ite	ne
 800eeb8:	2301      	movne	r3, #1
 800eeba:	2300      	moveq	r3, #0
 800eebc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fb60 	bl	800f584 <ai_platform_network_post_init>
 800eec4:	4603      	mov	r3, r0
 800eec6:	461a      	mov	r2, r3
 800eec8:	7afb      	ldrb	r3, [r7, #11]
 800eeca:	4013      	ands	r3, r2
 800eecc:	2b00      	cmp	r3, #0
 800eece:	bf14      	ite	ne
 800eed0:	2301      	movne	r3, #1
 800eed2:	2300      	moveq	r3, #0
 800eed4:	72fb      	strb	r3, [r7, #11]

  return ok;
 800eed6:	7afb      	ldrb	r3, [r7, #11]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3710      	adds	r7, #16
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <ai_mnist_nn_run>:


AI_API_ENTRY
ai_i32 ai_mnist_nn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	68b9      	ldr	r1, [r7, #8]
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f000 fb77 	bl	800f5e4 <ai_platform_network_process>
 800eef6:	4603      	mov	r3, r0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3710      	adds	r7, #16
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <ai_mnist_nn_data_params_get>:
 * @ingroup mnist_nn_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mnist_nn_data_params_get(ai_network_params* params)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <ai_mnist_nn_data_params_get+0x12>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	e016      	b.n	800ef40 <ai_mnist_nn_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800ef12:	4a0d      	ldr	r2, [pc, #52]	@ (800ef48 <ai_mnist_nn_data_params_get+0x48>)
 800ef14:	f107 0310 	add.w	r3, r7, #16
 800ef18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef1c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNIST_NN_DATA_ACTIVATIONS_COUNT, g_mnist_nn_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800ef20:	4a0a      	ldr	r2, [pc, #40]	@ (800ef4c <ai_mnist_nn_data_params_get+0x4c>)
 800ef22:	f107 0308 	add.w	r3, r7, #8
 800ef26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef2a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNIST_NN_DATA_WEIGHTS_COUNT, g_mnist_nn_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800ef2e:	f107 0210 	add.w	r2, r7, #16
 800ef32:	f107 0308 	add.w	r3, r7, #8
 800ef36:	4619      	mov	r1, r3
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 f907 	bl	800f14c <ai_platform_bind_network_params>
 800ef3e:	4603      	mov	r3, r0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}
 800ef48:	080165b8 	.word	0x080165b8
 800ef4c:	080165c0 	.word	0x080165c0

0800ef50 <ai_buffer_get_size>:
 800ef50:	b368      	cbz	r0, 800efae <ai_buffer_get_size+0x5e>
 800ef52:	4b17      	ldr	r3, [pc, #92]	@ (800efb0 <ai_buffer_get_size+0x60>)
 800ef54:	4a17      	ldr	r2, [pc, #92]	@ (800efb4 <ai_buffer_get_size+0x64>)
 800ef56:	b410      	push	{r4}
 800ef58:	6804      	ldr	r4, [r0, #0]
 800ef5a:	4023      	ands	r3, r4
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d123      	bne.n	800efa8 <ai_buffer_get_size+0x58>
 800ef60:	b311      	cbz	r1, 800efa8 <ai_buffer_get_size+0x58>
 800ef62:	6984      	ldr	r4, [r0, #24]
 800ef64:	6862      	ldr	r2, [r4, #4]
 800ef66:	321f      	adds	r2, #31
 800ef68:	f022 021f 	bic.w	r2, r2, #31
 800ef6c:	7d03      	ldrb	r3, [r0, #20]
 800ef6e:	6941      	ldr	r1, [r0, #20]
 800ef70:	f1a3 0301 	sub.w	r3, r3, #1
 800ef74:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ef78:	fab3 f383 	clz	r3, r3
 800ef7c:	095b      	lsrs	r3, r3, #5
 800ef7e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ef82:	da0c      	bge.n	800ef9e <ai_buffer_get_size+0x4e>
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d103      	bne.n	800ef90 <ai_buffer_get_size+0x40>
 800ef88:	2802      	cmp	r0, #2
 800ef8a:	f04f 0302 	mov.w	r3, #2
 800ef8e:	d006      	beq.n	800ef9e <ai_buffer_get_size+0x4e>
 800ef90:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ef94:	3301      	adds	r3, #1
 800ef96:	4298      	cmp	r0, r3
 800ef98:	fb01 f202 	mul.w	r2, r1, r2
 800ef9c:	d1f2      	bne.n	800ef84 <ai_buffer_get_size+0x34>
 800ef9e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800efa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	6984      	ldr	r4, [r0, #24]
 800efaa:	6862      	ldr	r2, [r4, #4]
 800efac:	e7de      	b.n	800ef6c <ai_buffer_get_size+0x1c>
 800efae:	4770      	bx	lr
 800efb0:	017fffff 	.word	0x017fffff
 800efb4:	000400c0 	.word	0x000400c0

0800efb8 <ai_buffer_array_sane>:
 800efb8:	b138      	cbz	r0, 800efca <ai_buffer_array_sane+0x12>
 800efba:	6843      	ldr	r3, [r0, #4]
 800efbc:	b123      	cbz	r3, 800efc8 <ai_buffer_array_sane+0x10>
 800efbe:	8840      	ldrh	r0, [r0, #2]
 800efc0:	3800      	subs	r0, #0
 800efc2:	bf18      	it	ne
 800efc4:	2001      	movne	r0, #1
 800efc6:	4770      	bx	lr
 800efc8:	4618      	mov	r0, r3
 800efca:	4770      	bx	lr

0800efcc <ai_buffer_array_item_set_address>:
 800efcc:	b150      	cbz	r0, 800efe4 <ai_buffer_array_item_set_address+0x18>
 800efce:	6843      	ldr	r3, [r0, #4]
 800efd0:	b14b      	cbz	r3, 800efe6 <ai_buffer_array_item_set_address+0x1a>
 800efd2:	8840      	ldrh	r0, [r0, #2]
 800efd4:	b900      	cbnz	r0, 800efd8 <ai_buffer_array_item_set_address+0xc>
 800efd6:	4770      	bx	lr
 800efd8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800efdc:	2001      	movs	r0, #1
 800efde:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800efe2:	605a      	str	r2, [r3, #4]
 800efe4:	4770      	bx	lr
 800efe6:	4618      	mov	r0, r3
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop

0800efec <ai_platform_get_weights_map>:
 800efec:	2900      	cmp	r1, #0
 800efee:	bf18      	it	ne
 800eff0:	2800      	cmpne	r0, #0
 800eff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eff4:	bf0c      	ite	eq
 800eff6:	2401      	moveq	r4, #1
 800eff8:	2400      	movne	r4, #0
 800effa:	2a00      	cmp	r2, #0
 800effc:	bf08      	it	eq
 800effe:	f044 0401 	orreq.w	r4, r4, #1
 800f002:	b114      	cbz	r4, 800f00a <ai_platform_get_weights_map+0x1e>
 800f004:	2400      	movs	r4, #0
 800f006:	4620      	mov	r0, r4
 800f008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f00a:	4616      	mov	r6, r2
 800f00c:	4b22      	ldr	r3, [pc, #136]	@ (800f098 <ai_platform_get_weights_map+0xac>)
 800f00e:	6812      	ldr	r2, [r2, #0]
 800f010:	4605      	mov	r5, r0
 800f012:	460f      	mov	r7, r1
 800f014:	429a      	cmp	r2, r3
 800f016:	d022      	beq.n	800f05e <ai_platform_get_weights_map+0x72>
 800f018:	6870      	ldr	r0, [r6, #4]
 800f01a:	2800      	cmp	r0, #0
 800f01c:	d0f2      	beq.n	800f004 <ai_platform_get_weights_map+0x18>
 800f01e:	6806      	ldr	r6, [r0, #0]
 800f020:	429e      	cmp	r6, r3
 800f022:	d006      	beq.n	800f032 <ai_platform_get_weights_map+0x46>
 800f024:	f1a1 0401 	sub.w	r4, r1, #1
 800f028:	6028      	str	r0, [r5, #0]
 800f02a:	fab4 f484 	clz	r4, r4
 800f02e:	0964      	lsrs	r4, r4, #5
 800f030:	e7e9      	b.n	800f006 <ai_platform_get_weights_map+0x1a>
 800f032:	3d04      	subs	r5, #4
 800f034:	4602      	mov	r2, r0
 800f036:	4621      	mov	r1, r4
 800f038:	e000      	b.n	800f03c <ai_platform_get_weights_map+0x50>
 800f03a:	4619      	mov	r1, r3
 800f03c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f040:	42b3      	cmp	r3, r6
 800f042:	d025      	beq.n	800f090 <ai_platform_get_weights_map+0xa4>
 800f044:	f845 3f04 	str.w	r3, [r5, #4]!
 800f048:	1c4b      	adds	r3, r1, #1
 800f04a:	429f      	cmp	r7, r3
 800f04c:	d8f5      	bhi.n	800f03a <ai_platform_get_weights_map+0x4e>
 800f04e:	d1da      	bne.n	800f006 <ai_platform_get_weights_map+0x1a>
 800f050:	3102      	adds	r1, #2
 800f052:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f056:	42b3      	cmp	r3, r6
 800f058:	d1d5      	bne.n	800f006 <ai_platform_get_weights_map+0x1a>
 800f05a:	2401      	movs	r4, #1
 800f05c:	e7d3      	b.n	800f006 <ai_platform_get_weights_map+0x1a>
 800f05e:	1d30      	adds	r0, r6, #4
 800f060:	f7ff ffaa 	bl	800efb8 <ai_buffer_array_sane>
 800f064:	2800      	cmp	r0, #0
 800f066:	d0cd      	beq.n	800f004 <ai_platform_get_weights_map+0x18>
 800f068:	88f3      	ldrh	r3, [r6, #6]
 800f06a:	429f      	cmp	r7, r3
 800f06c:	d1ca      	bne.n	800f004 <ai_platform_get_weights_map+0x18>
 800f06e:	3d04      	subs	r5, #4
 800f070:	4622      	mov	r2, r4
 800f072:	68b3      	ldr	r3, [r6, #8]
 800f074:	4423      	add	r3, r4
 800f076:	341c      	adds	r4, #28
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	b123      	cbz	r3, 800f086 <ai_platform_get_weights_map+0x9a>
 800f07c:	3201      	adds	r2, #1
 800f07e:	f845 3f04 	str.w	r3, [r5, #4]!
 800f082:	4297      	cmp	r7, r2
 800f084:	d8f5      	bhi.n	800f072 <ai_platform_get_weights_map+0x86>
 800f086:	1abc      	subs	r4, r7, r2
 800f088:	fab4 f484 	clz	r4, r4
 800f08c:	0964      	lsrs	r4, r4, #5
 800f08e:	e7ba      	b.n	800f006 <ai_platform_get_weights_map+0x1a>
 800f090:	428f      	cmp	r7, r1
 800f092:	d1b8      	bne.n	800f006 <ai_platform_get_weights_map+0x1a>
 800f094:	e7e1      	b.n	800f05a <ai_platform_get_weights_map+0x6e>
 800f096:	bf00      	nop
 800f098:	a1facade 	.word	0xa1facade

0800f09c <ai_platform_get_activations_map>:
 800f09c:	2900      	cmp	r1, #0
 800f09e:	bf18      	it	ne
 800f0a0:	2800      	cmpne	r0, #0
 800f0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a4:	bf0c      	ite	eq
 800f0a6:	2401      	moveq	r4, #1
 800f0a8:	2400      	movne	r4, #0
 800f0aa:	2a00      	cmp	r2, #0
 800f0ac:	bf08      	it	eq
 800f0ae:	f044 0401 	orreq.w	r4, r4, #1
 800f0b2:	b114      	cbz	r4, 800f0ba <ai_platform_get_activations_map+0x1e>
 800f0b4:	2400      	movs	r4, #0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ba:	4616      	mov	r6, r2
 800f0bc:	4b22      	ldr	r3, [pc, #136]	@ (800f148 <ai_platform_get_activations_map+0xac>)
 800f0be:	6812      	ldr	r2, [r2, #0]
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	460f      	mov	r7, r1
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d022      	beq.n	800f10e <ai_platform_get_activations_map+0x72>
 800f0c8:	6a30      	ldr	r0, [r6, #32]
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d0f2      	beq.n	800f0b4 <ai_platform_get_activations_map+0x18>
 800f0ce:	6806      	ldr	r6, [r0, #0]
 800f0d0:	429e      	cmp	r6, r3
 800f0d2:	d006      	beq.n	800f0e2 <ai_platform_get_activations_map+0x46>
 800f0d4:	f1a1 0401 	sub.w	r4, r1, #1
 800f0d8:	6028      	str	r0, [r5, #0]
 800f0da:	fab4 f484 	clz	r4, r4
 800f0de:	0964      	lsrs	r4, r4, #5
 800f0e0:	e7e9      	b.n	800f0b6 <ai_platform_get_activations_map+0x1a>
 800f0e2:	3d04      	subs	r5, #4
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	e000      	b.n	800f0ec <ai_platform_get_activations_map+0x50>
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f0f0:	42b3      	cmp	r3, r6
 800f0f2:	d026      	beq.n	800f142 <ai_platform_get_activations_map+0xa6>
 800f0f4:	f845 3f04 	str.w	r3, [r5, #4]!
 800f0f8:	1c4b      	adds	r3, r1, #1
 800f0fa:	429f      	cmp	r7, r3
 800f0fc:	d8f5      	bhi.n	800f0ea <ai_platform_get_activations_map+0x4e>
 800f0fe:	d1da      	bne.n	800f0b6 <ai_platform_get_activations_map+0x1a>
 800f100:	3102      	adds	r1, #2
 800f102:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f106:	42b3      	cmp	r3, r6
 800f108:	d1d5      	bne.n	800f0b6 <ai_platform_get_activations_map+0x1a>
 800f10a:	2401      	movs	r4, #1
 800f10c:	e7d3      	b.n	800f0b6 <ai_platform_get_activations_map+0x1a>
 800f10e:	f106 000c 	add.w	r0, r6, #12
 800f112:	f7ff ff51 	bl	800efb8 <ai_buffer_array_sane>
 800f116:	2800      	cmp	r0, #0
 800f118:	d0cc      	beq.n	800f0b4 <ai_platform_get_activations_map+0x18>
 800f11a:	89f3      	ldrh	r3, [r6, #14]
 800f11c:	429f      	cmp	r7, r3
 800f11e:	d1c9      	bne.n	800f0b4 <ai_platform_get_activations_map+0x18>
 800f120:	3d04      	subs	r5, #4
 800f122:	4622      	mov	r2, r4
 800f124:	6933      	ldr	r3, [r6, #16]
 800f126:	4423      	add	r3, r4
 800f128:	341c      	adds	r4, #28
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	b123      	cbz	r3, 800f138 <ai_platform_get_activations_map+0x9c>
 800f12e:	3201      	adds	r2, #1
 800f130:	f845 3f04 	str.w	r3, [r5, #4]!
 800f134:	4297      	cmp	r7, r2
 800f136:	d8f5      	bhi.n	800f124 <ai_platform_get_activations_map+0x88>
 800f138:	1abc      	subs	r4, r7, r2
 800f13a:	fab4 f484 	clz	r4, r4
 800f13e:	0964      	lsrs	r4, r4, #5
 800f140:	e7b9      	b.n	800f0b6 <ai_platform_get_activations_map+0x1a>
 800f142:	428f      	cmp	r7, r1
 800f144:	d1b7      	bne.n	800f0b6 <ai_platform_get_activations_map+0x1a>
 800f146:	e7e0      	b.n	800f10a <ai_platform_get_activations_map+0x6e>
 800f148:	a1facade 	.word	0xa1facade

0800f14c <ai_platform_bind_network_params>:
 800f14c:	2a00      	cmp	r2, #0
 800f14e:	bf18      	it	ne
 800f150:	2900      	cmpne	r1, #0
 800f152:	d010      	beq.n	800f176 <ai_platform_bind_network_params+0x2a>
 800f154:	b178      	cbz	r0, 800f176 <ai_platform_bind_network_params+0x2a>
 800f156:	4603      	mov	r3, r0
 800f158:	4808      	ldr	r0, [pc, #32]	@ (800f17c <ai_platform_bind_network_params+0x30>)
 800f15a:	f103 0c0c 	add.w	ip, r3, #12
 800f15e:	f843 0b04 	str.w	r0, [r3], #4
 800f162:	c903      	ldmia	r1, {r0, r1}
 800f164:	e883 0003 	stmia.w	r3, {r0, r1}
 800f168:	2301      	movs	r3, #1
 800f16a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f16e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f172:	4618      	mov	r0, r3
 800f174:	4770      	bx	lr
 800f176:	2300      	movs	r3, #0
 800f178:	4618      	mov	r0, r3
 800f17a:	4770      	bx	lr
 800f17c:	a1facade 	.word	0xa1facade

0800f180 <ai_platform_network_get_error>:
 800f180:	4b04      	ldr	r3, [pc, #16]	@ (800f194 <ai_platform_network_get_error+0x14>)
 800f182:	6802      	ldr	r2, [r0, #0]
 800f184:	4393      	bics	r3, r2
 800f186:	d102      	bne.n	800f18e <ai_platform_network_get_error+0xe>
 800f188:	300c      	adds	r0, #12
 800f18a:	f000 bc73 	b.w	800fa74 <core_get_error>
 800f18e:	f241 0010 	movw	r0, #4112	@ 0x1010
 800f192:	4770      	bx	lr
 800f194:	a1c00100 	.word	0xa1c00100

0800f198 <ai_platform_network_set_error>:
 800f198:	b110      	cbz	r0, 800f1a0 <ai_platform_network_set_error+0x8>
 800f19a:	300c      	adds	r0, #12
 800f19c:	f000 bc70 	b.w	800fa80 <core_set_error>
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop

0800f1a4 <ai_platform_inputs_get>:
 800f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	4b39      	ldr	r3, [pc, #228]	@ (800f290 <ai_platform_inputs_get+0xec>)
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	6802      	ldr	r2, [r0, #0]
 800f1ae:	4393      	bics	r3, r2
 800f1b0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f1b4:	d162      	bne.n	800f27c <ai_platform_inputs_get+0xd8>
 800f1b6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d051      	beq.n	800f260 <ai_platform_inputs_get+0xbc>
 800f1bc:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800f1c0:	f1ba 0f00 	cmp.w	sl, #0
 800f1c4:	d04c      	beq.n	800f260 <ai_platform_inputs_get+0xbc>
 800f1c6:	f04f 0900 	mov.w	r9, #0
 800f1ca:	464d      	mov	r5, r9
 800f1cc:	e016      	b.n	800f1fc <ai_platform_inputs_get+0x58>
 800f1ce:	9901      	ldr	r1, [sp, #4]
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	f848 3001 	str.w	r3, [r8, r1]
 800f1d6:	69b1      	ldr	r1, [r6, #24]
 800f1d8:	f04f 0301 	mov.w	r3, #1
 800f1dc:	684e      	ldr	r6, [r1, #4]
 800f1de:	3501      	adds	r5, #1
 800f1e0:	f109 091c 	add.w	r9, r9, #28
 800f1e4:	7523      	strb	r3, [r4, #20]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	6961      	ldr	r1, [r4, #20]
 800f1ea:	6020      	str	r0, [r4, #0]
 800f1ec:	f36b 211f 	bfi	r1, fp, #8, #24
 800f1f0:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f1f4:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f1f8:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f1fc:	f8ba 3000 	ldrh.w	r3, [sl]
 800f200:	b2ac      	uxth	r4, r5
 800f202:	42ab      	cmp	r3, r5
 800f204:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f208:	9301      	str	r3, [sp, #4]
 800f20a:	d93b      	bls.n	800f284 <ai_platform_inputs_get+0xe0>
 800f20c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d037      	beq.n	800f284 <ai_platform_inputs_get+0xe0>
 800f214:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f218:	2e00      	cmp	r6, #0
 800f21a:	d033      	beq.n	800f284 <ai_platform_inputs_get+0xe0>
 800f21c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f220:	69b2      	ldr	r2, [r6, #24]
 800f222:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f226:	6810      	ldr	r0, [r2, #0]
 800f228:	68b3      	ldr	r3, [r6, #8]
 800f22a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f22e:	68f2      	ldr	r2, [r6, #12]
 800f230:	444c      	add	r4, r9
 800f232:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f236:	9200      	str	r2, [sp, #0]
 800f238:	f002 fc52 	bl	8011ae0 <ai_array_to_buffer_fmt>
 800f23c:	69b1      	ldr	r1, [r6, #24]
 800f23e:	9a00      	ldr	r2, [sp, #0]
 800f240:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f244:	2f00      	cmp	r7, #0
 800f246:	d0c7      	beq.n	800f1d8 <ai_platform_inputs_get+0x34>
 800f248:	2100      	movs	r1, #0
 800f24a:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f24e:	6831      	ldr	r1, [r6, #0]
 800f250:	6079      	str	r1, [r7, #4]
 800f252:	b111      	cbz	r1, 800f25a <ai_platform_inputs_get+0xb6>
 800f254:	8849      	ldrh	r1, [r1, #2]
 800f256:	2900      	cmp	r1, #0
 800f258:	d1b9      	bne.n	800f1ce <ai_platform_inputs_get+0x2a>
 800f25a:	69b1      	ldr	r1, [r6, #24]
 800f25c:	2700      	movs	r7, #0
 800f25e:	e7bb      	b.n	800f1d8 <ai_platform_inputs_get+0x34>
 800f260:	9803      	ldr	r0, [sp, #12]
 800f262:	2400      	movs	r4, #0
 800f264:	2218      	movs	r2, #24
 800f266:	2111      	movs	r1, #17
 800f268:	300c      	adds	r0, #12
 800f26a:	f000 fc09 	bl	800fa80 <core_set_error>
 800f26e:	4620      	mov	r0, r4
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	b103      	cbz	r3, 800f276 <ai_platform_inputs_get+0xd2>
 800f274:	801c      	strh	r4, [r3, #0]
 800f276:	b005      	add	sp, #20
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27c:	2000      	movs	r0, #0
 800f27e:	b005      	add	sp, #20
 800f280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f284:	2c00      	cmp	r4, #0
 800f286:	d0eb      	beq.n	800f260 <ai_platform_inputs_get+0xbc>
 800f288:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f28c:	6858      	ldr	r0, [r3, #4]
 800f28e:	e7ef      	b.n	800f270 <ai_platform_inputs_get+0xcc>
 800f290:	a1c00100 	.word	0xa1c00100

0800f294 <ai_platform_outputs_get>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	4b38      	ldr	r3, [pc, #224]	@ (800f37c <ai_platform_outputs_get+0xe8>)
 800f29a:	b085      	sub	sp, #20
 800f29c:	6802      	ldr	r2, [r0, #0]
 800f29e:	4393      	bics	r3, r2
 800f2a0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f2a4:	d15f      	bne.n	800f366 <ai_platform_outputs_get+0xd2>
 800f2a6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d94e      	bls.n	800f34a <ai_platform_outputs_get+0xb6>
 800f2ac:	f04f 0900 	mov.w	r9, #0
 800f2b0:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800f2b4:	464d      	mov	r5, r9
 800f2b6:	e016      	b.n	800f2e6 <ai_platform_outputs_get+0x52>
 800f2b8:	9901      	ldr	r1, [sp, #4]
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	f848 3001 	str.w	r3, [r8, r1]
 800f2c0:	69b1      	ldr	r1, [r6, #24]
 800f2c2:	f04f 0301 	mov.w	r3, #1
 800f2c6:	684e      	ldr	r6, [r1, #4]
 800f2c8:	3501      	adds	r5, #1
 800f2ca:	f109 091c 	add.w	r9, r9, #28
 800f2ce:	7523      	strb	r3, [r4, #20]
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	6961      	ldr	r1, [r4, #20]
 800f2d4:	6020      	str	r0, [r4, #0]
 800f2d6:	f36b 211f 	bfi	r1, fp, #8, #24
 800f2da:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f2de:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f2e2:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f2e6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f2ea:	b2ac      	uxth	r4, r5
 800f2ec:	42ab      	cmp	r3, r5
 800f2ee:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f2f2:	9301      	str	r3, [sp, #4]
 800f2f4:	d93b      	bls.n	800f36e <ai_platform_outputs_get+0xda>
 800f2f6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d037      	beq.n	800f36e <ai_platform_outputs_get+0xda>
 800f2fe:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f302:	2e00      	cmp	r6, #0
 800f304:	d033      	beq.n	800f36e <ai_platform_outputs_get+0xda>
 800f306:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f30a:	69b2      	ldr	r2, [r6, #24]
 800f30c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f310:	6810      	ldr	r0, [r2, #0]
 800f312:	68b3      	ldr	r3, [r6, #8]
 800f314:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f318:	68f2      	ldr	r2, [r6, #12]
 800f31a:	444c      	add	r4, r9
 800f31c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f320:	9200      	str	r2, [sp, #0]
 800f322:	f002 fbdd 	bl	8011ae0 <ai_array_to_buffer_fmt>
 800f326:	69b1      	ldr	r1, [r6, #24]
 800f328:	9a00      	ldr	r2, [sp, #0]
 800f32a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f32e:	2f00      	cmp	r7, #0
 800f330:	d0c7      	beq.n	800f2c2 <ai_platform_outputs_get+0x2e>
 800f332:	2100      	movs	r1, #0
 800f334:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f338:	6831      	ldr	r1, [r6, #0]
 800f33a:	6079      	str	r1, [r7, #4]
 800f33c:	b111      	cbz	r1, 800f344 <ai_platform_outputs_get+0xb0>
 800f33e:	8849      	ldrh	r1, [r1, #2]
 800f340:	2900      	cmp	r1, #0
 800f342:	d1b9      	bne.n	800f2b8 <ai_platform_outputs_get+0x24>
 800f344:	69b1      	ldr	r1, [r6, #24]
 800f346:	2700      	movs	r7, #0
 800f348:	e7bb      	b.n	800f2c2 <ai_platform_outputs_get+0x2e>
 800f34a:	9803      	ldr	r0, [sp, #12]
 800f34c:	2400      	movs	r4, #0
 800f34e:	2218      	movs	r2, #24
 800f350:	2111      	movs	r1, #17
 800f352:	300c      	adds	r0, #12
 800f354:	f000 fb94 	bl	800fa80 <core_set_error>
 800f358:	4620      	mov	r0, r4
 800f35a:	9b02      	ldr	r3, [sp, #8]
 800f35c:	b103      	cbz	r3, 800f360 <ai_platform_outputs_get+0xcc>
 800f35e:	801c      	strh	r4, [r3, #0]
 800f360:	b005      	add	sp, #20
 800f362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f366:	2000      	movs	r0, #0
 800f368:	b005      	add	sp, #20
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	2c00      	cmp	r4, #0
 800f370:	d0eb      	beq.n	800f34a <ai_platform_outputs_get+0xb6>
 800f372:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f376:	6858      	ldr	r0, [r3, #4]
 800f378:	e7ef      	b.n	800f35a <ai_platform_outputs_get+0xc6>
 800f37a:	bf00      	nop
 800f37c:	a1c00100 	.word	0xa1c00100

0800f380 <ai_platform_network_create>:
 800f380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f384:	b083      	sub	sp, #12
 800f386:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800f38a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800f38e:	b320      	cbz	r0, 800f3da <ai_platform_network_create+0x5a>
 800f390:	6002      	str	r2, [r0, #0]
 800f392:	4616      	mov	r6, r2
 800f394:	461f      	mov	r7, r3
 800f396:	4604      	mov	r4, r0
 800f398:	f000 fb6a 	bl	800fa70 <core_init>
 800f39c:	b970      	cbnz	r0, 800f3bc <ai_platform_network_create+0x3c>
 800f39e:	2530      	movs	r5, #48	@ 0x30
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	2410      	movs	r4, #16
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	4641      	mov	r1, r8
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	f002 fc42 	bl	8011c34 <ai_version_get>
 800f3b0:	60b0      	str	r0, [r6, #8]
 800f3b2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800f3b6:	b003      	add	sp, #12
 800f3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3bc:	2200      	movs	r2, #0
 800f3be:	4641      	mov	r1, r8
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	f002 fc37 	bl	8011c34 <ai_version_get>
 800f3c6:	4605      	mov	r5, r0
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	2105      	movs	r1, #5
 800f3cc:	2001      	movs	r0, #1
 800f3ce:	f002 fc31 	bl	8011c34 <ai_version_get>
 800f3d2:	4285      	cmp	r5, r0
 800f3d4:	d008      	beq.n	800f3e8 <ai_platform_network_create+0x68>
 800f3d6:	2501      	movs	r5, #1
 800f3d8:	e7e2      	b.n	800f3a0 <ai_platform_network_create+0x20>
 800f3da:	2510      	movs	r5, #16
 800f3dc:	462c      	mov	r4, r5
 800f3de:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800f3e2:	b003      	add	sp, #12
 800f3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3e8:	4b05      	ldr	r3, [pc, #20]	@ (800f400 <ai_platform_network_create+0x80>)
 800f3ea:	a801      	add	r0, sp, #4
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	f000 fb53 	bl	800fa98 <ai_check_custom_types>
 800f3f2:	b110      	cbz	r0, 800f3fa <ai_platform_network_create+0x7a>
 800f3f4:	2400      	movs	r4, #0
 800f3f6:	4625      	mov	r5, r4
 800f3f8:	e7d5      	b.n	800f3a6 <ai_platform_network_create+0x26>
 800f3fa:	2502      	movs	r5, #2
 800f3fc:	e7d0      	b.n	800f3a0 <ai_platform_network_create+0x20>
 800f3fe:	bf00      	nop
 800f400:	84048403 	.word	0x84048403

0800f404 <ai_platform_network_init>:
 800f404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f408:	4a5c      	ldr	r2, [pc, #368]	@ (800f57c <ai_platform_network_init+0x178>)
 800f40a:	460c      	mov	r4, r1
 800f40c:	6801      	ldr	r1, [r0, #0]
 800f40e:	438a      	bics	r2, r1
 800f410:	d133      	bne.n	800f47a <ai_platform_network_init+0x76>
 800f412:	4605      	mov	r5, r0
 800f414:	2c00      	cmp	r4, #0
 800f416:	f000 8093 	beq.w	800f540 <ai_platform_network_init+0x13c>
 800f41a:	f8d4 b000 	ldr.w	fp, [r4]
 800f41e:	4a58      	ldr	r2, [pc, #352]	@ (800f580 <ai_platform_network_init+0x17c>)
 800f420:	4593      	cmp	fp, r2
 800f422:	d10f      	bne.n	800f444 <ai_platform_network_init+0x40>
 800f424:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800f428:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f42c:	4b53      	ldr	r3, [pc, #332]	@ (800f57c <ai_platform_network_init+0x178>)
 800f42e:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800f432:	0c32      	lsrs	r2, r6, #16
 800f434:	4299      	cmp	r1, r3
 800f436:	d02c      	beq.n	800f492 <ai_platform_network_init+0x8e>
 800f438:	2303      	movs	r3, #3
 800f43a:	462c      	mov	r4, r5
 800f43c:	612b      	str	r3, [r5, #16]
 800f43e:	4620      	mov	r0, r4
 800f440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f444:	4627      	mov	r7, r4
 800f446:	2101      	movs	r1, #1
 800f448:	6864      	ldr	r4, [r4, #4]
 800f44a:	4638      	mov	r0, r7
 800f44c:	f107 081c 	add.w	r8, r7, #28
 800f450:	f7ff fd7e 	bl	800ef50 <ai_buffer_get_size>
 800f454:	4606      	mov	r6, r0
 800f456:	2101      	movs	r1, #1
 800f458:	4640      	mov	r0, r8
 800f45a:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800f45e:	f7ff fd77 	bl	800ef50 <ai_buffer_get_size>
 800f462:	b976      	cbnz	r6, 800f482 <ai_platform_network_init+0x7e>
 800f464:	2800      	cmp	r0, #0
 800f466:	d150      	bne.n	800f50a <ai_platform_network_init+0x106>
 800f468:	4680      	mov	r8, r0
 800f46a:	4686      	mov	lr, r0
 800f46c:	4606      	mov	r6, r0
 800f46e:	4607      	mov	r7, r0
 800f470:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800f474:	6829      	ldr	r1, [r5, #0]
 800f476:	0436      	lsls	r6, r6, #16
 800f478:	e7d8      	b.n	800f42c <ai_platform_network_init+0x28>
 800f47a:	2400      	movs	r4, #0
 800f47c:	4620      	mov	r0, r4
 800f47e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f482:	2800      	cmp	r0, #0
 800f484:	d13b      	bne.n	800f4fe <ai_platform_network_init+0xfa>
 800f486:	4680      	mov	r8, r0
 800f488:	4686      	mov	lr, r0
 800f48a:	2c00      	cmp	r4, #0
 800f48c:	d05e      	beq.n	800f54c <ai_platform_network_init+0x148>
 800f48e:	2601      	movs	r6, #1
 800f490:	e7ee      	b.n	800f470 <ai_platform_network_init+0x6c>
 800f492:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800f494:	4293      	cmp	r3, r2
 800f496:	4b3a      	ldr	r3, [pc, #232]	@ (800f580 <ai_platform_network_init+0x17c>)
 800f498:	d33e      	bcc.n	800f518 <ai_platform_network_init+0x114>
 800f49a:	459b      	cmp	fp, r3
 800f49c:	d03e      	beq.n	800f51c <ai_platform_network_init+0x118>
 800f49e:	b1a2      	cbz	r2, 800f4ca <ai_platform_network_init+0xc6>
 800f4a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f4a4:	f04f 0c00 	mov.w	ip, #0
 800f4a8:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800f4ac:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800f4ae:	eb07 0b0c 	add.w	fp, r7, ip
 800f4b2:	4464      	add	r4, ip
 800f4b4:	f10c 0c1c 	add.w	ip, ip, #28
 800f4b8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f4bc:	45cc      	cmp	ip, r9
 800f4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4c0:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800f4c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f4c8:	d1f0      	bne.n	800f4ac <ai_platform_network_init+0xa8>
 800f4ca:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800f4cc:	622e      	str	r6, [r5, #32]
 800f4ce:	4553      	cmp	r3, sl
 800f4d0:	d34b      	bcc.n	800f56a <ai_platform_network_init+0x166>
 800f4d2:	f1ba 0f00 	cmp.w	sl, #0
 800f4d6:	d025      	beq.n	800f524 <ai_platform_network_init+0x120>
 800f4d8:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800f4dc:	2700      	movs	r7, #0
 800f4de:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800f4e2:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800f4e4:	eb08 0607 	add.w	r6, r8, r7
 800f4e8:	443c      	add	r4, r7
 800f4ea:	371c      	adds	r7, #28
 800f4ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f4ee:	4557      	cmp	r7, sl
 800f4f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4f2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f4f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f4fa:	d1f2      	bne.n	800f4e2 <ai_platform_network_init+0xde>
 800f4fc:	e012      	b.n	800f524 <ai_platform_network_init+0x120>
 800f4fe:	f1b9 0f00 	cmp.w	r9, #0
 800f502:	d015      	beq.n	800f530 <ai_platform_network_init+0x12c>
 800f504:	f04f 0e01 	mov.w	lr, #1
 800f508:	e7bf      	b.n	800f48a <ai_platform_network_init+0x86>
 800f50a:	f1b9 0f00 	cmp.w	r9, #0
 800f50e:	d00f      	beq.n	800f530 <ai_platform_network_init+0x12c>
 800f510:	f04f 0e01 	mov.w	lr, #1
 800f514:	4637      	mov	r7, r6
 800f516:	e7ab      	b.n	800f470 <ai_platform_network_init+0x6c>
 800f518:	459b      	cmp	fp, r3
 800f51a:	d11e      	bne.n	800f55a <ai_platform_network_init+0x156>
 800f51c:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800f520:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800f524:	4628      	mov	r0, r5
 800f526:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800f52a:	f000 fadd 	bl	800fae8 <ai_layers_init_all>
 800f52e:	e783      	b.n	800f438 <ai_platform_network_init+0x34>
 800f530:	2213      	movs	r2, #19
 800f532:	2110      	movs	r1, #16
 800f534:	f105 000c 	add.w	r0, r5, #12
 800f538:	2400      	movs	r4, #0
 800f53a:	f000 faa1 	bl	800fa80 <core_set_error>
 800f53e:	e77e      	b.n	800f43e <ai_platform_network_init+0x3a>
 800f540:	2211      	movs	r2, #17
 800f542:	2110      	movs	r1, #16
 800f544:	300c      	adds	r0, #12
 800f546:	f000 fa9b 	bl	800fa80 <core_set_error>
 800f54a:	e778      	b.n	800f43e <ai_platform_network_init+0x3a>
 800f54c:	2212      	movs	r2, #18
 800f54e:	2110      	movs	r1, #16
 800f550:	f105 000c 	add.w	r0, r5, #12
 800f554:	f000 fa94 	bl	800fa80 <core_set_error>
 800f558:	e771      	b.n	800f43e <ai_platform_network_init+0x3a>
 800f55a:	2212      	movs	r2, #18
 800f55c:	2116      	movs	r1, #22
 800f55e:	f105 000c 	add.w	r0, r5, #12
 800f562:	2400      	movs	r4, #0
 800f564:	f000 fa8c 	bl	800fa80 <core_set_error>
 800f568:	e769      	b.n	800f43e <ai_platform_network_init+0x3a>
 800f56a:	2213      	movs	r2, #19
 800f56c:	2116      	movs	r1, #22
 800f56e:	f105 000c 	add.w	r0, r5, #12
 800f572:	2400      	movs	r4, #0
 800f574:	f000 fa84 	bl	800fa80 <core_set_error>
 800f578:	e761      	b.n	800f43e <ai_platform_network_init+0x3a>
 800f57a:	bf00      	nop
 800f57c:	a1c00100 	.word	0xa1c00100
 800f580:	a1facade 	.word	0xa1facade

0800f584 <ai_platform_network_post_init>:
 800f584:	b538      	push	{r3, r4, r5, lr}
 800f586:	4b16      	ldr	r3, [pc, #88]	@ (800f5e0 <ai_platform_network_post_init+0x5c>)
 800f588:	6802      	ldr	r2, [r0, #0]
 800f58a:	ea02 0103 	and.w	r1, r2, r3
 800f58e:	4393      	bics	r3, r2
 800f590:	d108      	bne.n	800f5a4 <ai_platform_network_post_init+0x20>
 800f592:	6903      	ldr	r3, [r0, #16]
 800f594:	4604      	mov	r4, r0
 800f596:	f013 0502 	ands.w	r5, r3, #2
 800f59a:	d005      	beq.n	800f5a8 <ai_platform_network_post_init+0x24>
 800f59c:	428a      	cmp	r2, r1
 800f59e:	d00a      	beq.n	800f5b6 <ai_platform_network_post_init+0x32>
 800f5a0:	2001      	movs	r0, #1
 800f5a2:	bd38      	pop	{r3, r4, r5, pc}
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	bd38      	pop	{r3, r4, r5, pc}
 800f5a8:	2210      	movs	r2, #16
 800f5aa:	2111      	movs	r1, #17
 800f5ac:	300c      	adds	r0, #12
 800f5ae:	f000 fa67 	bl	800fa80 <core_set_error>
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	bd38      	pop	{r3, r4, r5, pc}
 800f5b6:	f000 faa5 	bl	800fb04 <ai_layers_post_init_all>
 800f5ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d0ef      	beq.n	800f5a0 <ai_platform_network_post_init+0x1c>
 800f5c0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800f5c2:	e008      	b.n	800f5d6 <ai_platform_network_post_init+0x52>
 800f5c4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800f5c8:	4798      	blx	r3
 800f5ca:	692b      	ldr	r3, [r5, #16]
 800f5cc:	42ab      	cmp	r3, r5
 800f5ce:	461d      	mov	r5, r3
 800f5d0:	d0e6      	beq.n	800f5a0 <ai_platform_network_post_init+0x1c>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d0e4      	beq.n	800f5a0 <ai_platform_network_post_init+0x1c>
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	2000      	movs	r0, #0
 800f5da:	2d00      	cmp	r5, #0
 800f5dc:	d1f2      	bne.n	800f5c4 <ai_platform_network_post_init+0x40>
 800f5de:	e7df      	b.n	800f5a0 <ai_platform_network_post_init+0x1c>
 800f5e0:	a1c00100 	.word	0xa1c00100

0800f5e4 <ai_platform_network_process>:
 800f5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e8:	b085      	sub	sp, #20
 800f5ea:	4bb7      	ldr	r3, [pc, #732]	@ (800f8c8 <ai_platform_network_process+0x2e4>)
 800f5ec:	9202      	str	r2, [sp, #8]
 800f5ee:	6802      	ldr	r2, [r0, #0]
 800f5f0:	4393      	bics	r3, r2
 800f5f2:	f040 8142 	bne.w	800f87a <ai_platform_network_process+0x296>
 800f5f6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f000 8126 	beq.w	800f84c <ai_platform_network_process+0x268>
 800f600:	6903      	ldr	r3, [r0, #16]
 800f602:	2200      	movs	r2, #0
 800f604:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 800f608:	f003 0303 	and.w	r3, r3, #3
 800f60c:	6182      	str	r2, [r0, #24]
 800f60e:	2b03      	cmp	r3, #3
 800f610:	f040 8122 	bne.w	800f858 <ai_platform_network_process+0x274>
 800f614:	2900      	cmp	r1, #0
 800f616:	f000 8136 	beq.w	800f886 <ai_platform_network_process+0x2a2>
 800f61a:	fab8 f788 	clz	r7, r8
 800f61e:	097f      	lsrs	r7, r7, #5
 800f620:	f1b8 0f00 	cmp.w	r8, #0
 800f624:	f000 812f 	beq.w	800f886 <ai_platform_network_process+0x2a2>
 800f628:	f8b8 3000 	ldrh.w	r3, [r8]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f000 812a 	beq.w	800f886 <ai_platform_network_process+0x2a2>
 800f632:	698b      	ldr	r3, [r1, #24]
 800f634:	460e      	mov	r6, r1
 800f636:	9003      	str	r0, [sp, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	9301      	str	r3, [sp, #4]
 800f63c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d072      	beq.n	800f72a <ai_platform_network_process+0x146>
 800f644:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f648:	2c00      	cmp	r4, #0
 800f64a:	d06e      	beq.n	800f72a <ai_platform_network_process+0x146>
 800f64c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f650:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f654:	f8d3 a000 	ldr.w	sl, [r3]
 800f658:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800f65c:	f000 8112 	beq.w	800f884 <ai_platform_network_process+0x2a0>
 800f660:	69a3      	ldr	r3, [r4, #24]
 800f662:	2101      	movs	r1, #1
 800f664:	4630      	mov	r0, r6
 800f666:	685d      	ldr	r5, [r3, #4]
 800f668:	f7ff fc72 	bl	800ef50 <ai_buffer_get_size>
 800f66c:	4285      	cmp	r5, r0
 800f66e:	f0c0 8115 	bcc.w	800f89c <ai_platform_network_process+0x2b8>
 800f672:	68e0      	ldr	r0, [r4, #12]
 800f674:	69b1      	ldr	r1, [r6, #24]
 800f676:	68c2      	ldr	r2, [r0, #12]
 800f678:	68cb      	ldr	r3, [r1, #12]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	f040 810e 	bne.w	800f89c <ai_platform_network_process+0x2b8>
 800f680:	6882      	ldr	r2, [r0, #8]
 800f682:	688b      	ldr	r3, [r1, #8]
 800f684:	429a      	cmp	r2, r3
 800f686:	f040 8109 	bne.w	800f89c <ai_platform_network_process+0x2b8>
 800f68a:	6842      	ldr	r2, [r0, #4]
 800f68c:	684b      	ldr	r3, [r1, #4]
 800f68e:	429a      	cmp	r2, r3
 800f690:	f040 8104 	bne.w	800f89c <ai_platform_network_process+0x2b8>
 800f694:	69a3      	ldr	r3, [r4, #24]
 800f696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f69a:	f002 fab9 	bl	8011c10 <ai_array_get_data_byte_size>
 800f69e:	4605      	mov	r5, r0
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f002 facd 	bl	8011c40 <get_tensor_byte_size>
 800f6a6:	4285      	cmp	r5, r0
 800f6a8:	f0c0 80f8 	bcc.w	800f89c <ai_platform_network_process+0x2b8>
 800f6ac:	69a3      	ldr	r3, [r4, #24]
 800f6ae:	6818      	ldr	r0, [r3, #0]
 800f6b0:	f002 fa16 	bl	8011ae0 <ai_array_to_buffer_fmt>
 800f6b4:	6833      	ldr	r3, [r6, #0]
 800f6b6:	4058      	eors	r0, r3
 800f6b8:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800f6bc:	f040 81a4 	bne.w	800fa08 <ai_platform_network_process+0x424>
 800f6c0:	6873      	ldr	r3, [r6, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	f000 80de 	beq.w	800f884 <ai_platform_network_process+0x2a0>
 800f6c8:	69b3      	ldr	r3, [r6, #24]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f000 81a4 	beq.w	800fa1a <ai_platform_network_process+0x436>
 800f6d2:	9a01      	ldr	r2, [sp, #4]
 800f6d4:	4620      	mov	r0, r4
 800f6d6:	3701      	adds	r7, #1
 800f6d8:	361c      	adds	r6, #28
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	bf38      	it	cc
 800f6de:	461a      	movcc	r2, r3
 800f6e0:	9201      	str	r2, [sp, #4]
 800f6e2:	f002 faad 	bl	8011c40 <get_tensor_byte_size>
 800f6e6:	f8c9 0008 	str.w	r0, [r9, #8]
 800f6ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	fb00 f303 	mul.w	r3, r0, r3
 800f6f4:	f8c9 300c 	str.w	r3, [r9, #12]
 800f6f8:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f6fc:	440b      	add	r3, r1
 800f6fe:	f8c9 1004 	str.w	r1, [r9, #4]
 800f702:	f84a 300b 	str.w	r3, [sl, fp]
 800f706:	69a0      	ldr	r0, [r4, #24]
 800f708:	6803      	ldr	r3, [r0, #0]
 800f70a:	009a      	lsls	r2, r3, #2
 800f70c:	f100 80af 	bmi.w	800f86e <ai_platform_network_process+0x28a>
 800f710:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f714:	1a9b      	subs	r3, r3, r2
 800f716:	4419      	add	r1, r3
 800f718:	6081      	str	r1, [r0, #8]
 800f71a:	69a3      	ldr	r3, [r4, #24]
 800f71c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f720:	60da      	str	r2, [r3, #12]
 800f722:	f8b8 3000 	ldrh.w	r3, [r8]
 800f726:	42bb      	cmp	r3, r7
 800f728:	d888      	bhi.n	800f63c <ai_platform_network_process+0x58>
 800f72a:	9d03      	ldr	r5, [sp, #12]
 800f72c:	9b02      	ldr	r3, [sp, #8]
 800f72e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 817b 	beq.w	800fa2c <ai_platform_network_process+0x448>
 800f736:	2a01      	cmp	r2, #1
 800f738:	f240 80bd 	bls.w	800f8b6 <ai_platform_network_process+0x2d2>
 800f73c:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 800f740:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f744:	2b00      	cmp	r3, #0
 800f746:	f000 80b6 	beq.w	800f8b6 <ai_platform_network_process+0x2d2>
 800f74a:	2700      	movs	r7, #0
 800f74c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f750:	9502      	str	r5, [sp, #8]
 800f752:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 80bd 	beq.w	800f8d6 <ai_platform_network_process+0x2f2>
 800f75c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800f760:	2e00      	cmp	r6, #0
 800f762:	f000 80b8 	beq.w	800f8d6 <ai_platform_network_process+0x2f2>
 800f766:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f76a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800f76e:	681c      	ldr	r4, [r3, #0]
 800f770:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800f774:	f000 8170 	beq.w	800fa58 <ai_platform_network_process+0x474>
 800f778:	69b3      	ldr	r3, [r6, #24]
 800f77a:	2101      	movs	r1, #1
 800f77c:	4658      	mov	r0, fp
 800f77e:	685d      	ldr	r5, [r3, #4]
 800f780:	f7ff fbe6 	bl	800ef50 <ai_buffer_get_size>
 800f784:	4285      	cmp	r5, r0
 800f786:	f0c0 8095 	bcc.w	800f8b4 <ai_platform_network_process+0x2d0>
 800f78a:	68f0      	ldr	r0, [r6, #12]
 800f78c:	f8db 1018 	ldr.w	r1, [fp, #24]
 800f790:	68c2      	ldr	r2, [r0, #12]
 800f792:	68cb      	ldr	r3, [r1, #12]
 800f794:	429a      	cmp	r2, r3
 800f796:	f040 808d 	bne.w	800f8b4 <ai_platform_network_process+0x2d0>
 800f79a:	6882      	ldr	r2, [r0, #8]
 800f79c:	688b      	ldr	r3, [r1, #8]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	f040 8088 	bne.w	800f8b4 <ai_platform_network_process+0x2d0>
 800f7a4:	6842      	ldr	r2, [r0, #4]
 800f7a6:	684b      	ldr	r3, [r1, #4]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	f040 8083 	bne.w	800f8b4 <ai_platform_network_process+0x2d0>
 800f7ae:	69b3      	ldr	r3, [r6, #24]
 800f7b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7b4:	f002 fa2c 	bl	8011c10 <ai_array_get_data_byte_size>
 800f7b8:	9003      	str	r0, [sp, #12]
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f002 fa40 	bl	8011c40 <get_tensor_byte_size>
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	4283      	cmp	r3, r0
 800f7c4:	d376      	bcc.n	800f8b4 <ai_platform_network_process+0x2d0>
 800f7c6:	69b3      	ldr	r3, [r6, #24]
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	f002 f989 	bl	8011ae0 <ai_array_to_buffer_fmt>
 800f7ce:	f8db 3000 	ldr.w	r3, [fp]
 800f7d2:	4058      	eors	r0, r3
 800f7d4:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800f7d8:	f040 812c 	bne.w	800fa34 <ai_platform_network_process+0x450>
 800f7dc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 8139 	beq.w	800fa58 <ai_platform_network_process+0x474>
 800f7e6:	f8db 3018 	ldr.w	r3, [fp, #24]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 812a 	beq.w	800fa46 <ai_platform_network_process+0x462>
 800f7f2:	9a01      	ldr	r2, [sp, #4]
 800f7f4:	4630      	mov	r0, r6
 800f7f6:	3701      	adds	r7, #1
 800f7f8:	f10b 0b1c 	add.w	fp, fp, #28
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	bf38      	it	cc
 800f800:	461a      	movcc	r2, r3
 800f802:	9201      	str	r2, [sp, #4]
 800f804:	f002 fa1c 	bl	8011c40 <get_tensor_byte_size>
 800f808:	f8c8 0008 	str.w	r0, [r8, #8]
 800f80c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	fb00 f303 	mul.w	r3, r0, r3
 800f816:	f8c8 300c 	str.w	r3, [r8, #12]
 800f81a:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800f81e:	440b      	add	r3, r1
 800f820:	f8c8 1004 	str.w	r1, [r8, #4]
 800f824:	f844 300a 	str.w	r3, [r4, sl]
 800f828:	69b0      	ldr	r0, [r6, #24]
 800f82a:	6803      	ldr	r3, [r0, #0]
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	d44d      	bmi.n	800f8cc <ai_platform_network_process+0x2e8>
 800f830:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f834:	1a9b      	subs	r3, r3, r2
 800f836:	4419      	add	r1, r3
 800f838:	6081      	str	r1, [r0, #8]
 800f83a:	69b3      	ldr	r3, [r6, #24]
 800f83c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f840:	60da      	str	r2, [r3, #12]
 800f842:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f846:	42bb      	cmp	r3, r7
 800f848:	d883      	bhi.n	800f752 <ai_platform_network_process+0x16e>
 800f84a:	e044      	b.n	800f8d6 <ai_platform_network_process+0x2f2>
 800f84c:	6902      	ldr	r2, [r0, #16]
 800f84e:	6183      	str	r3, [r0, #24]
 800f850:	f002 0203 	and.w	r2, r2, #3
 800f854:	2a03      	cmp	r2, #3
 800f856:	d016      	beq.n	800f886 <ai_platform_network_process+0x2a2>
 800f858:	2230      	movs	r2, #48	@ 0x30
 800f85a:	2111      	movs	r1, #17
 800f85c:	f105 000c 	add.w	r0, r5, #12
 800f860:	2400      	movs	r4, #0
 800f862:	f000 f90d 	bl	800fa80 <core_set_error>
 800f866:	4620      	mov	r0, r4
 800f868:	b005      	add	sp, #20
 800f86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f86e:	f8b8 3000 	ldrh.w	r3, [r8]
 800f872:	429f      	cmp	r7, r3
 800f874:	f4ff aee2 	bcc.w	800f63c <ai_platform_network_process+0x58>
 800f878:	e757      	b.n	800f72a <ai_platform_network_process+0x146>
 800f87a:	2400      	movs	r4, #0
 800f87c:	4620      	mov	r0, r4
 800f87e:	b005      	add	sp, #20
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	9d03      	ldr	r5, [sp, #12]
 800f886:	2400      	movs	r4, #0
 800f888:	2217      	movs	r2, #23
 800f88a:	2112      	movs	r1, #18
 800f88c:	f105 000c 	add.w	r0, r5, #12
 800f890:	f000 f8f6 	bl	800fa80 <core_set_error>
 800f894:	4620      	mov	r0, r4
 800f896:	b005      	add	sp, #20
 800f898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89c:	9d03      	ldr	r5, [sp, #12]
 800f89e:	2400      	movs	r4, #0
 800f8a0:	2218      	movs	r2, #24
 800f8a2:	2112      	movs	r1, #18
 800f8a4:	f105 000c 	add.w	r0, r5, #12
 800f8a8:	f000 f8ea 	bl	800fa80 <core_set_error>
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	b005      	add	sp, #20
 800f8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b4:	9d02      	ldr	r5, [sp, #8]
 800f8b6:	2218      	movs	r2, #24
 800f8b8:	2113      	movs	r1, #19
 800f8ba:	f105 000c 	add.w	r0, r5, #12
 800f8be:	2400      	movs	r4, #0
 800f8c0:	f000 f8de 	bl	800fa80 <core_set_error>
 800f8c4:	e7cf      	b.n	800f866 <ai_platform_network_process+0x282>
 800f8c6:	bf00      	nop
 800f8c8:	a1c00100 	.word	0xa1c00100
 800f8cc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f8d0:	429f      	cmp	r7, r3
 800f8d2:	f4ff af3e 	bcc.w	800f752 <ai_platform_network_process+0x16e>
 800f8d6:	9d02      	ldr	r5, [sp, #8]
 800f8d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f8dc:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800f8de:	832b      	strh	r3, [r5, #24]
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	f040 808b 	bne.w	800f9fc <ai_platform_network_process+0x418>
 800f8e6:	4616      	mov	r6, r2
 800f8e8:	4617      	mov	r7, r2
 800f8ea:	8b6c      	ldrh	r4, [r5, #26]
 800f8ec:	429c      	cmp	r4, r3
 800f8ee:	d2ba      	bcs.n	800f866 <ai_platform_network_process+0x282>
 800f8f0:	46ab      	mov	fp, r5
 800f8f2:	2e00      	cmp	r6, #0
 800f8f4:	d030      	beq.n	800f958 <ai_platform_network_process+0x374>
 800f8f6:	f04f 0800 	mov.w	r8, #0
 800f8fa:	e014      	b.n	800f926 <ai_platform_network_process+0x342>
 800f8fc:	6882      	ldr	r2, [r0, #8]
 800f8fe:	68c5      	ldr	r5, [r0, #12]
 800f900:	6863      	ldr	r3, [r4, #4]
 800f902:	1b52      	subs	r2, r2, r5
 800f904:	4413      	add	r3, r2
 800f906:	6083      	str	r3, [r0, #8]
 800f908:	698b      	ldr	r3, [r1, #24]
 800f90a:	6862      	ldr	r2, [r4, #4]
 800f90c:	60da      	str	r2, [r3, #12]
 800f90e:	f859 200a 	ldr.w	r2, [r9, sl]
 800f912:	f108 0801 	add.w	r8, r8, #1
 800f916:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800f91a:	440b      	add	r3, r1
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d301      	bcc.n	800f924 <ai_platform_network_process+0x340>
 800f920:	68e3      	ldr	r3, [r4, #12]
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	6063      	str	r3, [r4, #4]
 800f926:	8833      	ldrh	r3, [r6, #0]
 800f928:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800f92c:	4543      	cmp	r3, r8
 800f92e:	d913      	bls.n	800f958 <ai_platform_network_process+0x374>
 800f930:	6873      	ldr	r3, [r6, #4]
 800f932:	b18b      	cbz	r3, 800f958 <ai_platform_network_process+0x374>
 800f934:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800f938:	b171      	cbz	r1, 800f958 <ai_platform_network_process+0x374>
 800f93a:	6988      	ldr	r0, [r1, #24]
 800f93c:	68b2      	ldr	r2, [r6, #8]
 800f93e:	6803      	ldr	r3, [r0, #0]
 800f940:	f8d2 9000 	ldr.w	r9, [r2]
 800f944:	009d      	lsls	r5, r3, #2
 800f946:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800f94a:	d5d7      	bpl.n	800f8fc <ai_platform_network_process+0x318>
 800f94c:	6881      	ldr	r1, [r0, #8]
 800f94e:	68a2      	ldr	r2, [r4, #8]
 800f950:	6860      	ldr	r0, [r4, #4]
 800f952:	f002 f83d 	bl	80119d0 <st_int8_copy>
 800f956:	e7da      	b.n	800f90e <ai_platform_network_process+0x32a>
 800f958:	4658      	mov	r0, fp
 800f95a:	f000 f8e7 	bl	800fb2c <ai_layers_forward_all>
 800f95e:	2f00      	cmp	r7, #0
 800f960:	d03d      	beq.n	800f9de <ai_platform_network_process+0x3fa>
 800f962:	2400      	movs	r4, #0
 800f964:	e016      	b.n	800f994 <ai_platform_network_process+0x3b0>
 800f966:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800f96a:	f859 100a 	ldr.w	r1, [r9, sl]
 800f96e:	4413      	add	r3, r2
 800f970:	428b      	cmp	r3, r1
 800f972:	d302      	bcc.n	800f97a <ai_platform_network_process+0x396>
 800f974:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f978:	1acb      	subs	r3, r1, r3
 800f97a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f97e:	6981      	ldr	r1, [r0, #24]
 800f980:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800f984:	1b52      	subs	r2, r2, r5
 800f986:	4413      	add	r3, r2
 800f988:	608b      	str	r3, [r1, #8]
 800f98a:	6983      	ldr	r3, [r0, #24]
 800f98c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f990:	60da      	str	r2, [r3, #12]
 800f992:	3401      	adds	r4, #1
 800f994:	883b      	ldrh	r3, [r7, #0]
 800f996:	42a3      	cmp	r3, r4
 800f998:	d921      	bls.n	800f9de <ai_platform_network_process+0x3fa>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	b1fb      	cbz	r3, 800f9de <ai_platform_network_process+0x3fa>
 800f99e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f9a2:	b1e0      	cbz	r0, 800f9de <ai_platform_network_process+0x3fa>
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f9aa:	6983      	ldr	r3, [r0, #24]
 800f9ac:	f8d2 9000 	ldr.w	r9, [r2]
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f9b6:	0092      	lsls	r2, r2, #2
 800f9b8:	d5d5      	bpl.n	800f966 <ai_platform_network_process+0x382>
 800f9ba:	6898      	ldr	r0, [r3, #8]
 800f9bc:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800f9c0:	f002 f806 	bl	80119d0 <st_int8_copy>
 800f9c4:	f859 200a 	ldr.w	r2, [r9, sl]
 800f9c8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f9cc:	440b      	add	r3, r1
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d302      	bcc.n	800f9d8 <ai_platform_network_process+0x3f4>
 800f9d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	f8c8 3004 	str.w	r3, [r8, #4]
 800f9dc:	e7d9      	b.n	800f992 <ai_platform_network_process+0x3ae>
 800f9de:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800f9e2:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800f9e6:	3401      	adds	r4, #1
 800f9e8:	b2a4      	uxth	r4, r4
 800f9ea:	42a3      	cmp	r3, r4
 800f9ec:	f8ab 401a 	strh.w	r4, [fp, #26]
 800f9f0:	f63f af7f 	bhi.w	800f8f2 <ai_platform_network_process+0x30e>
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	b005      	add	sp, #20
 800f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fc:	2a01      	cmp	r2, #1
 800f9fe:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800fa00:	d033      	beq.n	800fa6a <ai_platform_network_process+0x486>
 800fa02:	f106 070c 	add.w	r7, r6, #12
 800fa06:	e770      	b.n	800f8ea <ai_platform_network_process+0x306>
 800fa08:	9d03      	ldr	r5, [sp, #12]
 800fa0a:	2219      	movs	r2, #25
 800fa0c:	2112      	movs	r1, #18
 800fa0e:	2400      	movs	r4, #0
 800fa10:	f105 000c 	add.w	r0, r5, #12
 800fa14:	f000 f834 	bl	800fa80 <core_set_error>
 800fa18:	e725      	b.n	800f866 <ai_platform_network_process+0x282>
 800fa1a:	9d03      	ldr	r5, [sp, #12]
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	2221      	movs	r2, #33	@ 0x21
 800fa20:	2112      	movs	r1, #18
 800fa22:	f105 000c 	add.w	r0, r5, #12
 800fa26:	f000 f82b 	bl	800fa80 <core_set_error>
 800fa2a:	e71c      	b.n	800f866 <ai_platform_network_process+0x282>
 800fa2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fa30:	832b      	strh	r3, [r5, #24]
 800fa32:	e755      	b.n	800f8e0 <ai_platform_network_process+0x2fc>
 800fa34:	9d02      	ldr	r5, [sp, #8]
 800fa36:	2219      	movs	r2, #25
 800fa38:	2113      	movs	r1, #19
 800fa3a:	2400      	movs	r4, #0
 800fa3c:	f105 000c 	add.w	r0, r5, #12
 800fa40:	f000 f81e 	bl	800fa80 <core_set_error>
 800fa44:	e70f      	b.n	800f866 <ai_platform_network_process+0x282>
 800fa46:	9d02      	ldr	r5, [sp, #8]
 800fa48:	4604      	mov	r4, r0
 800fa4a:	2221      	movs	r2, #33	@ 0x21
 800fa4c:	2113      	movs	r1, #19
 800fa4e:	f105 000c 	add.w	r0, r5, #12
 800fa52:	f000 f815 	bl	800fa80 <core_set_error>
 800fa56:	e706      	b.n	800f866 <ai_platform_network_process+0x282>
 800fa58:	9d02      	ldr	r5, [sp, #8]
 800fa5a:	2217      	movs	r2, #23
 800fa5c:	2113      	movs	r1, #19
 800fa5e:	2400      	movs	r4, #0
 800fa60:	f105 000c 	add.w	r0, r5, #12
 800fa64:	f000 f80c 	bl	800fa80 <core_set_error>
 800fa68:	e6fd      	b.n	800f866 <ai_platform_network_process+0x282>
 800fa6a:	2700      	movs	r7, #0
 800fa6c:	e73d      	b.n	800f8ea <ai_platform_network_process+0x306>
 800fa6e:	bf00      	nop

0800fa70 <core_init>:
 800fa70:	2001      	movs	r0, #1
 800fa72:	4770      	bx	lr

0800fa74 <core_get_error>:
 800fa74:	4603      	mov	r3, r0
 800fa76:	2200      	movs	r2, #0
 800fa78:	6800      	ldr	r0, [r0, #0]
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop

0800fa80 <core_set_error>:
 800fa80:	4603      	mov	r3, r0
 800fa82:	7800      	ldrb	r0, [r0, #0]
 800fa84:	b108      	cbz	r0, 800fa8a <core_set_error+0xa>
 800fa86:	2000      	movs	r0, #0
 800fa88:	4770      	bx	lr
 800fa8a:	7019      	strb	r1, [r3, #0]
 800fa8c:	2001      	movs	r0, #1
 800fa8e:	6819      	ldr	r1, [r3, #0]
 800fa90:	f362 211f 	bfi	r1, r2, #8, #24
 800fa94:	6019      	str	r1, [r3, #0]
 800fa96:	4770      	bx	lr

0800fa98 <ai_check_custom_types>:
 800fa98:	b082      	sub	sp, #8
 800fa9a:	4b12      	ldr	r3, [pc, #72]	@ (800fae4 <ai_check_custom_types+0x4c>)
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	b118      	cbz	r0, 800faa8 <ai_check_custom_types+0x10>
 800faa0:	7803      	ldrb	r3, [r0, #0]
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d002      	beq.n	800faac <ai_check_custom_types+0x14>
 800faa6:	2000      	movs	r0, #0
 800faa8:	b002      	add	sp, #8
 800faaa:	4770      	bx	lr
 800faac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d004      	beq.n	800fabe <ai_check_custom_types+0x26>
 800fab4:	2001      	movs	r0, #1
 800fab6:	f080 0001 	eor.w	r0, r0, #1
 800faba:	b002      	add	sp, #8
 800fabc:	4770      	bx	lr
 800fabe:	7842      	ldrb	r2, [r0, #1]
 800fac0:	3001      	adds	r0, #1
 800fac2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d1f4      	bne.n	800fab4 <ai_check_custom_types+0x1c>
 800faca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800face:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d1ee      	bne.n	800fab4 <ai_check_custom_types+0x1c>
 800fad6:	7842      	ldrb	r2, [r0, #1]
 800fad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d1e9      	bne.n	800fab4 <ai_check_custom_types+0x1c>
 800fae0:	2000      	movs	r0, #0
 800fae2:	e7e8      	b.n	800fab6 <ai_check_custom_types+0x1e>
 800fae4:	84048403 	.word	0x84048403

0800fae8 <ai_layers_init_all>:
 800fae8:	2100      	movs	r1, #0
 800faea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800faec:	b13b      	cbz	r3, 800fafe <ai_layers_init_all+0x16>
 800faee:	691a      	ldr	r2, [r3, #16]
 800faf0:	3101      	adds	r1, #1
 800faf2:	60d8      	str	r0, [r3, #12]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	4613      	mov	r3, r2
 800faf8:	d001      	beq.n	800fafe <ai_layers_init_all+0x16>
 800fafa:	2a00      	cmp	r2, #0
 800fafc:	d1f6      	bne.n	800faec <ai_layers_init_all+0x4>
 800fafe:	4608      	mov	r0, r1
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop

0800fb04 <ai_layers_post_init_all>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	2500      	movs	r5, #0
 800fb08:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800fb0a:	b16c      	cbz	r4, 800fb28 <ai_layers_post_init_all+0x24>
 800fb0c:	6863      	ldr	r3, [r4, #4]
 800fb0e:	07db      	lsls	r3, r3, #31
 800fb10:	d504      	bpl.n	800fb1c <ai_layers_post_init_all+0x18>
 800fb12:	6a23      	ldr	r3, [r4, #32]
 800fb14:	4620      	mov	r0, r4
 800fb16:	b10b      	cbz	r3, 800fb1c <ai_layers_post_init_all+0x18>
 800fb18:	3501      	adds	r5, #1
 800fb1a:	4798      	blx	r3
 800fb1c:	6923      	ldr	r3, [r4, #16]
 800fb1e:	42a3      	cmp	r3, r4
 800fb20:	461c      	mov	r4, r3
 800fb22:	d001      	beq.n	800fb28 <ai_layers_post_init_all+0x24>
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1f0      	bne.n	800fb0a <ai_layers_post_init_all+0x6>
 800fb28:	4628      	mov	r0, r5
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}

0800fb2c <ai_layers_forward_all>:
 800fb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb30:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800fb34:	4604      	mov	r4, r0
 800fb36:	f1b8 0f00 	cmp.w	r8, #0
 800fb3a:	d02a      	beq.n	800fb92 <ai_layers_forward_all+0x66>
 800fb3c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800fb3e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800fb40:	b319      	cbz	r1, 800fb8a <ai_layers_forward_all+0x5e>
 800fb42:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800fb44:	2001      	movs	r0, #1
 800fb46:	47c0      	blx	r8
 800fb48:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800fb4a:	b1f6      	cbz	r6, 800fb8a <ai_layers_forward_all+0x5e>
 800fb4c:	2700      	movs	r7, #0
 800fb4e:	4631      	mov	r1, r6
 800fb50:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800fb52:	2002      	movs	r0, #2
 800fb54:	47c0      	blx	r8
 800fb56:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800fb58:	4628      	mov	r0, r5
 800fb5a:	696b      	ldr	r3, [r5, #20]
 800fb5c:	4798      	blx	r3
 800fb5e:	692e      	ldr	r6, [r5, #16]
 800fb60:	2003      	movs	r0, #3
 800fb62:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800fb64:	42b5      	cmp	r5, r6
 800fb66:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800fb68:	d007      	beq.n	800fb7a <ai_layers_forward_all+0x4e>
 800fb6a:	47c0      	blx	r8
 800fb6c:	3701      	adds	r7, #1
 800fb6e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800fb70:	2e00      	cmp	r6, #0
 800fb72:	d1ec      	bne.n	800fb4e <ai_layers_forward_all+0x22>
 800fb74:	4638      	mov	r0, r7
 800fb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7a:	2003      	movs	r0, #3
 800fb7c:	3701      	adds	r7, #1
 800fb7e:	47c0      	blx	r8
 800fb80:	2300      	movs	r3, #0
 800fb82:	4638      	mov	r0, r7
 800fb84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800fb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8a:	2700      	movs	r7, #0
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb92:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800fb94:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800fb96:	2d00      	cmp	r5, #0
 800fb98:	d0f7      	beq.n	800fb8a <ai_layers_forward_all+0x5e>
 800fb9a:	4647      	mov	r7, r8
 800fb9c:	696b      	ldr	r3, [r5, #20]
 800fb9e:	4628      	mov	r0, r5
 800fba0:	4798      	blx	r3
 800fba2:	462b      	mov	r3, r5
 800fba4:	692d      	ldr	r5, [r5, #16]
 800fba6:	429d      	cmp	r5, r3
 800fba8:	d004      	beq.n	800fbb4 <ai_layers_forward_all+0x88>
 800fbaa:	3701      	adds	r7, #1
 800fbac:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800fbae:	2d00      	cmp	r5, #0
 800fbb0:	d1f4      	bne.n	800fb9c <ai_layers_forward_all+0x70>
 800fbb2:	e7df      	b.n	800fb74 <ai_layers_forward_all+0x48>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	3701      	adds	r7, #1
 800fbb8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800fbba:	e7db      	b.n	800fb74 <ai_layers_forward_all+0x48>

0800fbbc <forward_conv2d_if32of32wf32>:
 800fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc0:	6983      	ldr	r3, [r0, #24]
 800fbc2:	b0a7      	sub	sp, #156	@ 0x9c
 800fbc4:	881d      	ldrh	r5, [r3, #0]
 800fbc6:	2d00      	cmp	r5, #0
 800fbc8:	f000 80a3 	beq.w	800fd12 <forward_conv2d_if32of32wf32+0x156>
 800fbcc:	685e      	ldr	r6, [r3, #4]
 800fbce:	4680      	mov	r8, r0
 800fbd0:	6872      	ldr	r2, [r6, #4]
 800fbd2:	b102      	cbz	r2, 800fbd6 <forward_conv2d_if32of32wf32+0x1a>
 800fbd4:	6812      	ldr	r2, [r2, #0]
 800fbd6:	2d01      	cmp	r5, #1
 800fbd8:	f000 8098 	beq.w	800fd0c <forward_conv2d_if32of32wf32+0x150>
 800fbdc:	6931      	ldr	r1, [r6, #16]
 800fbde:	b101      	cbz	r1, 800fbe2 <forward_conv2d_if32of32wf32+0x26>
 800fbe0:	6809      	ldr	r1, [r1, #0]
 800fbe2:	2d02      	cmp	r5, #2
 800fbe4:	f000 8092 	beq.w	800fd0c <forward_conv2d_if32of32wf32+0x150>
 800fbe8:	69f3      	ldr	r3, [r6, #28]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f000 80c6 	beq.w	800fd7c <forward_conv2d_if32of32wf32+0x1c0>
 800fbf0:	8b30      	ldrh	r0, [r6, #24]
 800fbf2:	681c      	ldr	r4, [r3, #0]
 800fbf4:	2801      	cmp	r0, #1
 800fbf6:	f240 80c3 	bls.w	800fd80 <forward_conv2d_if32of32wf32+0x1c4>
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800fc00:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800fc04:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800fc08:	f8d8 e03c 	ldr.w	lr, [r8, #60]	@ 0x3c
 800fc0c:	9015      	str	r0, [sp, #84]	@ 0x54
 800fc0e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800fc12:	6992      	ldr	r2, [r2, #24]
 800fc14:	9016      	str	r0, [sp, #88]	@ 0x58
 800fc16:	f8da 000c 	ldr.w	r0, [sl, #12]
 800fc1a:	edd2 7a02 	vldr	s15, [r2, #8]
 800fc1e:	9017      	str	r0, [sp, #92]	@ 0x5c
 800fc20:	f8da 0008 	ldr.w	r0, [sl, #8]
 800fc24:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fc28:	9018      	str	r0, [sp, #96]	@ 0x60
 800fc2a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800fc2e:	69a4      	ldr	r4, [r4, #24]
 800fc30:	9019      	str	r0, [sp, #100]	@ 0x64
 800fc32:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800fc36:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc38:	f8b8 0028 	ldrh.w	r0, [r8, #40]	@ 0x28
 800fc3c:	901b      	str	r0, [sp, #108]	@ 0x6c
 800fc3e:	f8b8 002c 	ldrh.w	r0, [r8, #44]	@ 0x2c
 800fc42:	901c      	str	r0, [sp, #112]	@ 0x70
 800fc44:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800fc48:	9021      	str	r0, [sp, #132]	@ 0x84
 800fc4a:	f8be 0000 	ldrh.w	r0, [lr]
 800fc4e:	e9d8 270c 	ldrd	r2, r7, [r8, #48]	@ 0x30
 800fc52:	901d      	str	r0, [sp, #116]	@ 0x74
 800fc54:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800fc58:	901e      	str	r0, [sp, #120]	@ 0x78
 800fc5a:	b290      	uxth	r0, r2
 800fc5c:	901f      	str	r0, [sp, #124]	@ 0x7c
 800fc5e:	b2b8      	uxth	r0, r7
 800fc60:	9020      	str	r0, [sp, #128]	@ 0x80
 800fc62:	68a0      	ldr	r0, [r4, #8]
 800fc64:	e9dc ab01 	ldrd	sl, fp, [ip, #4]
 800fc68:	9023      	str	r0, [sp, #140]	@ 0x8c
 800fc6a:	b10b      	cbz	r3, 800fc70 <forward_conv2d_if32of32wf32+0xb4>
 800fc6c:	699b      	ldr	r3, [r3, #24]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	b2bf      	uxth	r7, r7
 800fc72:	f10b 3cff 	add.w	ip, fp, #4294967295
 800fc76:	b292      	uxth	r2, r2
 800fc78:	6989      	ldr	r1, [r1, #24]
 800fc7a:	3f01      	subs	r7, #1
 800fc7c:	2d03      	cmp	r5, #3
 800fc7e:	f102 32ff 	add.w	r2, r2, #4294967295
 800fc82:	6889      	ldr	r1, [r1, #8]
 800fc84:	fb0c b707 	mla	r7, ip, r7, fp
 800fc88:	9713      	str	r7, [sp, #76]	@ 0x4c
 800fc8a:	f10a 37ff 	add.w	r7, sl, #4294967295
 800fc8e:	fb07 a202 	mla	r2, r7, r2, sl
 800fc92:	9214      	str	r2, [sp, #80]	@ 0x50
 800fc94:	d03a      	beq.n	800fd0c <forward_conv2d_if32of32wf32+0x150>
 800fc96:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800fc98:	2a00      	cmp	r2, #0
 800fc9a:	d05f      	beq.n	800fd5c <forward_conv2d_if32of32wf32+0x1a0>
 800fc9c:	6812      	ldr	r2, [r2, #0]
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	d05c      	beq.n	800fd5c <forward_conv2d_if32of32wf32+0x1a0>
 800fca2:	6826      	ldr	r6, [r4, #0]
 800fca4:	6997      	ldr	r7, [r2, #24]
 800fca6:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800fcaa:	f3c6 4543 	ubfx	r5, r6, #17, #4
 800fcae:	fa42 f505 	asr.w	r5, r2, r5
 800fcb2:	68ba      	ldr	r2, [r7, #8]
 800fcb4:	07e8      	lsls	r0, r5, #31
 800fcb6:	d52e      	bpl.n	800fd16 <forward_conv2d_if32of32wf32+0x15a>
 800fcb8:	2a00      	cmp	r2, #0
 800fcba:	d058      	beq.n	800fd6e <forward_conv2d_if32of32wf32+0x1b2>
 800fcbc:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800fcbe:	ee17 0a90 	vmov	r0, s15
 800fcc2:	f8cd a018 	str.w	sl, [sp, #24]
 800fcc6:	940e      	str	r4, [sp, #56]	@ 0x38
 800fcc8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800fcca:	940d      	str	r4, [sp, #52]	@ 0x34
 800fccc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fcce:	940c      	str	r4, [sp, #48]	@ 0x30
 800fcd0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800fcd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fcd4:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800fcd6:	940a      	str	r4, [sp, #40]	@ 0x28
 800fcd8:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 800fcda:	9409      	str	r4, [sp, #36]	@ 0x24
 800fcdc:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 800fcde:	e9cd b407 	strd	fp, r4, [sp, #28]
 800fce2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 800fce4:	9405      	str	r4, [sp, #20]
 800fce6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800fce8:	9404      	str	r4, [sp, #16]
 800fcea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fcec:	9403      	str	r4, [sp, #12]
 800fcee:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800fcf0:	9402      	str	r4, [sp, #8]
 800fcf2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800fcf4:	9401      	str	r4, [sp, #4]
 800fcf6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800fcf8:	9400      	str	r4, [sp, #0]
 800fcfa:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 800fcfc:	9410      	str	r4, [sp, #64]	@ 0x40
 800fcfe:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 800fd00:	940f      	str	r4, [sp, #60]	@ 0x3c
 800fd02:	f000 fddb 	bl	80108bc <forward_lite_conv2d_if32of32wf32>
 800fd06:	b027      	add	sp, #156	@ 0x9c
 800fd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	deff      	udf	#255	@ 0xff
 800fd12:	686b      	ldr	r3, [r5, #4]
 800fd14:	deff      	udf	#255	@ 0xff
 800fd16:	68e5      	ldr	r5, [r4, #12]
 800fd18:	2d00      	cmp	r5, #0
 800fd1a:	d0cd      	beq.n	800fcb8 <forward_conv2d_if32of32wf32+0xfc>
 800fd1c:	687c      	ldr	r4, [r7, #4]
 800fd1e:	f3c6 17c6 	ubfx	r7, r6, #7, #7
 800fd22:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 800fd26:	f3c6 5441 	ubfx	r4, r6, #21, #2
 800fd2a:	fa47 f404 	asr.w	r4, r7, r4
 800fd2e:	2c04      	cmp	r4, #4
 800fd30:	b2a6      	uxth	r6, r4
 800fd32:	d027      	beq.n	800fd84 <forward_conv2d_if32of32wf32+0x1c8>
 800fd34:	2e08      	cmp	r6, #8
 800fd36:	d1bf      	bne.n	800fcb8 <forward_conv2d_if32of32wf32+0xfc>
 800fd38:	454a      	cmp	r2, r9
 800fd3a:	d2bd      	bcs.n	800fcb8 <forward_conv2d_if32of32wf32+0xfc>
 800fd3c:	4616      	mov	r6, r2
 800fd3e:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800fd40:	ee17 0a90 	vmov	r0, s15
 800fd44:	f817 4b01 	ldrb.w	r4, [r7], #1
 800fd48:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fd4c:	6824      	ldr	r4, [r4, #0]
 800fd4e:	f846 4b04 	str.w	r4, [r6], #4
 800fd52:	45b1      	cmp	r9, r6
 800fd54:	d8f6      	bhi.n	800fd44 <forward_conv2d_if32of32wf32+0x188>
 800fd56:	ee07 0a90 	vmov	s15, r0
 800fd5a:	e7ad      	b.n	800fcb8 <forward_conv2d_if32of32wf32+0xfc>
 800fd5c:	6822      	ldr	r2, [r4, #0]
 800fd5e:	f46f 7588 	mvn.w	r5, #272	@ 0x110
 800fd62:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800fd66:	4115      	asrs	r5, r2
 800fd68:	f015 0501 	ands.w	r5, r5, #1
 800fd6c:	d001      	beq.n	800fd72 <forward_conv2d_if32of32wf32+0x1b6>
 800fd6e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd70:	e7a4      	b.n	800fcbc <forward_conv2d_if32of32wf32+0x100>
 800fd72:	68e2      	ldr	r2, [r4, #12]
 800fd74:	2a00      	cmp	r2, #0
 800fd76:	d0fa      	beq.n	800fd6e <forward_conv2d_if32of32wf32+0x1b2>
 800fd78:	69ab      	ldr	r3, [r5, #24]
 800fd7a:	deff      	udf	#255	@ 0xff
 800fd7c:	461c      	mov	r4, r3
 800fd7e:	e73d      	b.n	800fbfc <forward_conv2d_if32of32wf32+0x40>
 800fd80:	2300      	movs	r3, #0
 800fd82:	e73b      	b.n	800fbfc <forward_conv2d_if32of32wf32+0x40>
 800fd84:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800fd86:	4617      	mov	r7, r2
 800fd88:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
 800fd8c:	0860      	lsrs	r0, r4, #1
 800fd8e:	f004 0401 	and.w	r4, r4, #1
 800fd92:	9422      	str	r4, [sp, #136]	@ 0x88
 800fd94:	00c4      	lsls	r4, r0, #3
 800fd96:	9012      	str	r0, [sp, #72]	@ 0x48
 800fd98:	3801      	subs	r0, #1
 800fd9a:	9424      	str	r4, [sp, #144]	@ 0x90
 800fd9c:	4654      	mov	r4, sl
 800fd9e:	9025      	str	r0, [sp, #148]	@ 0x94
 800fda0:	4692      	mov	sl, r2
 800fda2:	ee17 0a90 	vmov	r0, s15
 800fda6:	461a      	mov	r2, r3
 800fda8:	4623      	mov	r3, r4
 800fdaa:	45b9      	cmp	r9, r7
 800fdac:	d93a      	bls.n	800fe24 <forward_conv2d_if32of32wf32+0x268>
 800fdae:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800fdb0:	b374      	cbz	r4, 800fe10 <forward_conv2d_if32of32wf32+0x254>
 800fdb2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800fdb4:	f108 3cff 	add.w	ip, r8, #4294967295
 800fdb8:	f107 0608 	add.w	r6, r7, #8
 800fdbc:	eb08 0e04 	add.w	lr, r8, r4
 800fdc0:	4664      	mov	r4, ip
 800fdc2:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800fdc6:	3608      	adds	r6, #8
 800fdc8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800fdcc:	4574      	cmp	r4, lr
 800fdce:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800fdd2:	f8dc c000 	ldr.w	ip, [ip]
 800fdd6:	f846 cc10 	str.w	ip, [r6, #-16]
 800fdda:	f894 c000 	ldrb.w	ip, [r4]
 800fdde:	f00c 0c0f 	and.w	ip, ip, #15
 800fde2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800fde6:	f8dc c000 	ldr.w	ip, [ip]
 800fdea:	f846 cc0c 	str.w	ip, [r6, #-12]
 800fdee:	d1e8      	bne.n	800fdc2 <forward_conv2d_if32of32wf32+0x206>
 800fdf0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800fdf2:	44a0      	add	r8, r4
 800fdf4:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800fdf6:	4427      	add	r7, r4
 800fdf8:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800fdfa:	2c00      	cmp	r4, #0
 800fdfc:	d0d5      	beq.n	800fdaa <forward_conv2d_if32of32wf32+0x1ee>
 800fdfe:	f818 4b01 	ldrb.w	r4, [r8], #1
 800fe02:	0924      	lsrs	r4, r4, #4
 800fe04:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fe08:	6824      	ldr	r4, [r4, #0]
 800fe0a:	f847 4b04 	str.w	r4, [r7], #4
 800fe0e:	e7cc      	b.n	800fdaa <forward_conv2d_if32of32wf32+0x1ee>
 800fe10:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800fe12:	2c00      	cmp	r4, #0
 800fe14:	d1f3      	bne.n	800fdfe <forward_conv2d_if32of32wf32+0x242>
 800fe16:	461c      	mov	r4, r3
 800fe18:	4613      	mov	r3, r2
 800fe1a:	4652      	mov	r2, sl
 800fe1c:	46a2      	mov	sl, r4
 800fe1e:	45b9      	cmp	r9, r7
 800fe20:	d8fd      	bhi.n	800fe1e <forward_conv2d_if32of32wf32+0x262>
 800fe22:	e798      	b.n	800fd56 <forward_conv2d_if32of32wf32+0x19a>
 800fe24:	461c      	mov	r4, r3
 800fe26:	ee07 0a90 	vmov	s15, r0
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	4652      	mov	r2, sl
 800fe2e:	46a2      	mov	sl, r4
 800fe30:	e742      	b.n	800fcb8 <forward_conv2d_if32of32wf32+0xfc>
 800fe32:	bf00      	nop

0800fe34 <forward_conv2d_if32of32wf32_nl_pool>:
 800fe34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe38:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800fe3c:	b0c1      	sub	sp, #260	@ 0x104
 800fe3e:	f8bc 7000 	ldrh.w	r7, [ip]
 800fe42:	2f00      	cmp	r7, #0
 800fe44:	f000 813c 	beq.w	80100c0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800fe48:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800fe52:	f1bb 0f00 	cmp.w	fp, #0
 800fe56:	d001      	beq.n	800fe5c <forward_conv2d_if32of32wf32_nl_pool+0x28>
 800fe58:	f8db b000 	ldr.w	fp, [fp]
 800fe5c:	2f01      	cmp	r7, #1
 800fe5e:	f000 812c 	beq.w	80100ba <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800fe62:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800fe66:	f1ba 0f00 	cmp.w	sl, #0
 800fe6a:	d001      	beq.n	800fe70 <forward_conv2d_if32of32wf32_nl_pool+0x3c>
 800fe6c:	f8da a000 	ldr.w	sl, [sl]
 800fe70:	2f02      	cmp	r7, #2
 800fe72:	f000 8122 	beq.w	80100ba <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800fe76:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800fe7a:	8b1b      	ldrh	r3, [r3, #24]
 800fe7c:	f1b8 0f00 	cmp.w	r8, #0
 800fe80:	f000 8130 	beq.w	80100e4 <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	f8d8 2000 	ldr.w	r2, [r8]
 800fe8a:	f240 8131 	bls.w	80100f0 <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 800fe8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe92:	933e      	str	r3, [sp, #248]	@ 0xf8
 800fe94:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800fe98:	f8db 000c 	ldr.w	r0, [fp, #12]
 800fe9c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800fea0:	9020      	str	r0, [sp, #128]	@ 0x80
 800fea2:	f8da 000c 	ldr.w	r0, [sl, #12]
 800fea6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fea8:	9021      	str	r0, [sp, #132]	@ 0x84
 800feaa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800feac:	f8de 1004 	ldr.w	r1, [lr, #4]
 800feb0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800feb4:	681e      	ldr	r6, [r3, #0]
 800feb6:	902e      	str	r0, [sp, #184]	@ 0xb8
 800feb8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800feba:	9127      	str	r1, [sp, #156]	@ 0x9c
 800febc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800fec0:	f8de 1008 	ldr.w	r1, [lr, #8]
 800fec4:	902f      	str	r0, [sp, #188]	@ 0xbc
 800fec6:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800fec8:	9625      	str	r6, [sp, #148]	@ 0x94
 800feca:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800fece:	912c      	str	r1, [sp, #176]	@ 0xb0
 800fed0:	9030      	str	r0, [sp, #192]	@ 0xc0
 800fed2:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800fed4:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 800fed8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800fedc:	9524      	str	r5, [sp, #144]	@ 0x90
 800fede:	9031      	str	r0, [sp, #196]	@ 0xc4
 800fee0:	685d      	ldr	r5, [r3, #4]
 800fee2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800fee4:	9526      	str	r5, [sp, #152]	@ 0x98
 800fee6:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 800feea:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800feee:	9021      	str	r0, [sp, #132]	@ 0x84
 800fef0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800fef2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800fef6:	9022      	str	r0, [sp, #136]	@ 0x88
 800fef8:	fa1f f089 	uxth.w	r0, r9
 800fefc:	9032      	str	r0, [sp, #200]	@ 0xc8
 800fefe:	f8bd 0090 	ldrh.w	r0, [sp, #144]	@ 0x90
 800ff02:	9033      	str	r0, [sp, #204]	@ 0xcc
 800ff04:	f8bd 0094 	ldrh.w	r0, [sp, #148]	@ 0x94
 800ff08:	9034      	str	r0, [sp, #208]	@ 0xd0
 800ff0a:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 800ff0e:	9035      	str	r0, [sp, #212]	@ 0xd4
 800ff10:	6898      	ldr	r0, [r3, #8]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	902a      	str	r0, [sp, #168]	@ 0xa8
 800ff16:	932b      	str	r3, [sp, #172]	@ 0xac
 800ff18:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800ff1c:	9336      	str	r3, [sp, #216]	@ 0xd8
 800ff1e:	b2ab      	uxth	r3, r5
 800ff20:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ff22:	b2b3      	uxth	r3, r6
 800ff24:	9338      	str	r3, [sp, #224]	@ 0xe0
 800ff26:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	@ 0x9c
 800ff2a:	9323      	str	r3, [sp, #140]	@ 0x8c
 800ff2c:	b20b      	sxth	r3, r1
 800ff2e:	932d      	str	r3, [sp, #180]	@ 0xb4
 800ff30:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800ff34:	9339      	str	r3, [sp, #228]	@ 0xe4
 800ff36:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800ff3a:	933a      	str	r3, [sp, #232]	@ 0xe8
 800ff3c:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800ff40:	933b      	str	r3, [sp, #236]	@ 0xec
 800ff42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ff44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff48:	933c      	str	r3, [sp, #240]	@ 0xf0
 800ff4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ff4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff50:	933d      	str	r3, [sp, #244]	@ 0xf4
 800ff52:	6a23      	ldr	r3, [r4, #32]
 800ff54:	9320      	str	r3, [sp, #128]	@ 0x80
 800ff56:	f1b8 0f00 	cmp.w	r8, #0
 800ff5a:	f000 80b3 	beq.w	80100c4 <forward_conv2d_if32of32wf32_nl_pool+0x290>
 800ff5e:	f8d8 e018 	ldr.w	lr, [r8, #24]
 800ff62:	f1be 0f00 	cmp.w	lr, #0
 800ff66:	f000 80b5 	beq.w	80100d4 <forward_conv2d_if32of32wf32_nl_pool+0x2a0>
 800ff6a:	f8de 3008 	ldr.w	r3, [lr, #8]
 800ff6e:	9228      	str	r2, [sp, #160]	@ 0xa0
 800ff70:	9320      	str	r3, [sp, #128]	@ 0x80
 800ff72:	e9de 0100 	ldrd	r0, r1, [lr]
 800ff76:	f001 fe23 	bl	8011bc0 <ai_array_get_byte_size>
 800ff7a:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800ff7e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800ff80:	9029      	str	r0, [sp, #164]	@ 0xa4
 800ff82:	2f00      	cmp	r7, #0
 800ff84:	f000 80b7 	beq.w	80100f6 <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 800ff88:	923f      	str	r2, [sp, #252]	@ 0xfc
 800ff8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff8e:	f001 fe17 	bl	8011bc0 <ai_array_get_byte_size>
 800ff92:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800ff96:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800ff98:	f8bc 7000 	ldrh.w	r7, [ip]
 800ff9c:	9028      	str	r0, [sp, #160]	@ 0xa0
 800ff9e:	6992      	ldr	r2, [r2, #24]
 800ffa0:	b2ad      	uxth	r5, r5
 800ffa2:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800ffa4:	b2b6      	uxth	r6, r6
 800ffa6:	f8bd 8090 	ldrh.w	r8, [sp, #144]	@ 0x90
 800ffaa:	3d01      	subs	r5, #1
 800ffac:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800ffb0:	3e01      	subs	r6, #1
 800ffb2:	6893      	ldr	r3, [r2, #8]
 800ffb4:	fa1f f989 	uxth.w	r9, r9
 800ffb8:	f8db 0018 	ldr.w	r0, [fp, #24]
 800ffbc:	2f03      	cmp	r7, #3
 800ffbe:	9324      	str	r3, [sp, #144]	@ 0x90
 800ffc0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ffc2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800ffc4:	f103 3bff 	add.w	fp, r3, #4294967295
 800ffc8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800ffca:	f8da 1018 	ldr.w	r1, [sl, #24]
 800ffce:	fb15 250b 	smlabb	r5, r5, fp, r2
 800ffd2:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800ffd4:	f8de a008 	ldr.w	sl, [lr, #8]
 800ffd8:	fa0f fb85 	sxth.w	fp, r5
 800ffdc:	f103 35ff 	add.w	r5, r3, #4294967295
 800ffe0:	6880      	ldr	r0, [r0, #8]
 800ffe2:	fb16 2605 	smlabb	r6, r6, r5, r2
 800ffe6:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 800ffe8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800ffea:	eba5 050b 	sub.w	r5, r5, fp
 800ffee:	b236      	sxth	r6, r6
 800fff0:	6889      	ldr	r1, [r1, #8]
 800fff2:	fa15 f582 	uxtah	r5, r5, r2
 800fff6:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 800fff8:	fa15 f582 	uxtah	r5, r5, r2
 800fffc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fffe:	eba2 0e06 	sub.w	lr, r2, r6
 8010002:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8010004:	fa1e fe82 	uxtah	lr, lr, r2
 8010008:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801000a:	fb95 f5f9 	sdiv	r5, r5, r9
 801000e:	fa1e fe82 	uxtah	lr, lr, r2
 8010012:	f105 0501 	add.w	r5, r5, #1
 8010016:	f8d4 905c 	ldr.w	r9, [r4, #92]	@ 0x5c
 801001a:	b22d      	sxth	r5, r5
 801001c:	fb9e fef8 	sdiv	lr, lr, r8
 8010020:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8010024:	f10e 0e01 	add.w	lr, lr, #1
 8010028:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 801002c:	d945      	bls.n	80100ba <forward_conv2d_if32of32wf32_nl_pool+0x286>
 801002e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010032:	6abf      	ldr	r7, [r7, #40]	@ 0x28
 8010034:	2f00      	cmp	r7, #0
 8010036:	d068      	beq.n	801010a <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8010038:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 801003a:	9512      	str	r5, [sp, #72]	@ 0x48
 801003c:	921e      	str	r2, [sp, #120]	@ 0x78
 801003e:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8010040:	960d      	str	r6, [sp, #52]	@ 0x34
 8010042:	921d      	str	r2, [sp, #116]	@ 0x74
 8010044:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8010046:	921c      	str	r2, [sp, #112]	@ 0x70
 8010048:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 801004a:	e9cd 421a 	strd	r4, r2, [sp, #104]	@ 0x68
 801004e:	9c39      	ldr	r4, [sp, #228]	@ 0xe4
 8010050:	e9cd 9418 	strd	r9, r4, [sp, #96]	@ 0x60
 8010054:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8010056:	9417      	str	r4, [sp, #92]	@ 0x5c
 8010058:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801005a:	9416      	str	r4, [sp, #88]	@ 0x58
 801005c:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 801005e:	e9cd 8414 	strd	r8, r4, [sp, #80]	@ 0x50
 8010062:	9c36      	ldr	r4, [sp, #216]	@ 0xd8
 8010064:	9411      	str	r4, [sp, #68]	@ 0x44
 8010066:	9c38      	ldr	r4, [sp, #224]	@ 0xe0
 8010068:	9410      	str	r4, [sp, #64]	@ 0x40
 801006a:	9c37      	ldr	r4, [sp, #220]	@ 0xdc
 801006c:	e9cd b40e 	strd	fp, r4, [sp, #56]	@ 0x38
 8010070:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 8010072:	940c      	str	r4, [sp, #48]	@ 0x30
 8010074:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 8010076:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010078:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
 801007a:	9308      	str	r3, [sp, #32]
 801007c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801007e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010080:	9307      	str	r3, [sp, #28]
 8010082:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8010084:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8010086:	9306      	str	r3, [sp, #24]
 8010088:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 801008a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801008c:	9305      	str	r3, [sp, #20]
 801008e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8010090:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8010092:	9302      	str	r3, [sp, #8]
 8010094:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8010096:	9204      	str	r2, [sp, #16]
 8010098:	9301      	str	r3, [sp, #4]
 801009a:	fa0f f38e 	sxth.w	r3, lr
 801009e:	9409      	str	r4, [sp, #36]	@ 0x24
 80100a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100a2:	4653      	mov	r3, sl
 80100a4:	9503      	str	r5, [sp, #12]
 80100a6:	683c      	ldr	r4, [r7, #0]
 80100a8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80100aa:	69a4      	ldr	r4, [r4, #24]
 80100ac:	68a4      	ldr	r4, [r4, #8]
 80100ae:	9400      	str	r4, [sp, #0]
 80100b0:	f000 fd60 	bl	8010b74 <forward_lite_conv2d_if32of32wf32_pool>
 80100b4:	b041      	add	sp, #260	@ 0x104
 80100b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ba:	2300      	movs	r3, #0
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	deff      	udf	#255	@ 0xff
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	deff      	udf	#255	@ 0xff
 80100c4:	b10b      	cbz	r3, 80100ca <forward_conv2d_if32of32wf32_nl_pool+0x296>
 80100c6:	689b      	ldr	r3, [r3, #8]
 80100c8:	9320      	str	r3, [sp, #128]	@ 0x80
 80100ca:	2301      	movs	r3, #1
 80100cc:	f8cd 80a4 	str.w	r8, [sp, #164]	@ 0xa4
 80100d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80100d2:	e764      	b.n	800ff9e <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 80100d4:	b10b      	cbz	r3, 80100da <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	9320      	str	r3, [sp, #128]	@ 0x80
 80100da:	2301      	movs	r3, #1
 80100dc:	2100      	movs	r1, #0
 80100de:	e9cd 3128 	strd	r3, r1, [sp, #160]	@ 0xa0
 80100e2:	e75c      	b.n	800ff9e <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d90d      	bls.n	8010104 <forward_conv2d_if32of32wf32_nl_pool+0x2d0>
 80100e8:	4642      	mov	r2, r8
 80100ea:	f8cd 80f8 	str.w	r8, [sp, #248]	@ 0xf8
 80100ee:	e6d3      	b.n	800fe98 <forward_conv2d_if32of32wf32_nl_pool+0x64>
 80100f0:	2300      	movs	r3, #0
 80100f2:	933e      	str	r3, [sp, #248]	@ 0xf8
 80100f4:	e6ce      	b.n	800fe94 <forward_conv2d_if32of32wf32_nl_pool+0x60>
 80100f6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80100fa:	2301      	movs	r3, #1
 80100fc:	f8bc 7000 	ldrh.w	r7, [ip]
 8010100:	9328      	str	r3, [sp, #160]	@ 0xa0
 8010102:	e74c      	b.n	800ff9e <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 8010104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010108:	deff      	udf	#255	@ 0xff
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	deff      	udf	#255	@ 0xff
 801010e:	bf00      	nop

08010110 <forward_dense>:
 8010110:	6983      	ldr	r3, [r0, #24]
 8010112:	881a      	ldrh	r2, [r3, #0]
 8010114:	2a00      	cmp	r2, #0
 8010116:	f000 80cb 	beq.w	80102b0 <forward_dense+0x1a0>
 801011a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011e:	ed2d 8b02 	vpush	{d8}
 8010122:	6858      	ldr	r0, [r3, #4]
 8010124:	b09b      	sub	sp, #108	@ 0x6c
 8010126:	6844      	ldr	r4, [r0, #4]
 8010128:	b104      	cbz	r4, 801012c <forward_dense+0x1c>
 801012a:	6824      	ldr	r4, [r4, #0]
 801012c:	2a01      	cmp	r2, #1
 801012e:	f000 81d8 	beq.w	80104e2 <forward_dense+0x3d2>
 8010132:	6905      	ldr	r5, [r0, #16]
 8010134:	b105      	cbz	r5, 8010138 <forward_dense+0x28>
 8010136:	682d      	ldr	r5, [r5, #0]
 8010138:	2a02      	cmp	r2, #2
 801013a:	f000 80bb 	beq.w	80102b4 <forward_dense+0x1a4>
 801013e:	69c3      	ldr	r3, [r0, #28]
 8010140:	9308      	str	r3, [sp, #32]
 8010142:	2b00      	cmp	r3, #0
 8010144:	f000 81c4 	beq.w	80104d0 <forward_dense+0x3c0>
 8010148:	4619      	mov	r1, r3
 801014a:	8b03      	ldrh	r3, [r0, #24]
 801014c:	6809      	ldr	r1, [r1, #0]
 801014e:	2b01      	cmp	r3, #1
 8010150:	910a      	str	r1, [sp, #40]	@ 0x28
 8010152:	f240 81bf 	bls.w	80104d4 <forward_dense+0x3c4>
 8010156:	9b08      	ldr	r3, [sp, #32]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	9308      	str	r3, [sp, #32]
 801015c:	460b      	mov	r3, r1
 801015e:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8010162:	2a03      	cmp	r2, #3
 8010164:	68e3      	ldr	r3, [r4, #12]
 8010166:	68ee      	ldr	r6, [r5, #12]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	6877      	ldr	r7, [r6, #4]
 801016c:	9310      	str	r3, [sp, #64]	@ 0x40
 801016e:	f8d9 3000 	ldr.w	r3, [r9]
 8010172:	4639      	mov	r1, r7
 8010174:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010176:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 801017a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 801017e:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 8010182:	fb01 f707 	mul.w	r7, r1, r7
 8010186:	fa4e f10c 	asr.w	r1, lr, ip
 801018a:	910d      	str	r1, [sp, #52]	@ 0x34
 801018c:	f000 81a6 	beq.w	80104dc <forward_dense+0x3cc>
 8010190:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 8010194:	f1b8 0f00 	cmp.w	r8, #0
 8010198:	d006      	beq.n	80101a8 <forward_dense+0x98>
 801019a:	f8d8 8000 	ldr.w	r8, [r8]
 801019e:	f1b8 0f00 	cmp.w	r8, #0
 80101a2:	d001      	beq.n	80101a8 <forward_dense+0x98>
 80101a4:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80101a8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80101ac:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 80101b0:	fa42 f303 	asr.w	r3, r2, r3
 80101b4:	07db      	lsls	r3, r3, #31
 80101b6:	f140 8178 	bpl.w	80104aa <forward_dense+0x39a>
 80101ba:	f04f 0900 	mov.w	r9, #0
 80101be:	69a3      	ldr	r3, [r4, #24]
 80101c0:	fb07 f606 	mul.w	r6, r7, r6
 80101c4:	69aa      	ldr	r2, [r5, #24]
 80101c6:	6891      	ldr	r1, [r2, #8]
 80101c8:	689a      	ldr	r2, [r3, #8]
 80101ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101cc:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80101d0:	9102      	str	r1, [sp, #8]
 80101d2:	695b      	ldr	r3, [r3, #20]
 80101d4:	4281      	cmp	r1, r0
 80101d6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	9303      	str	r3, [sp, #12]
 80101dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101de:	ea4f 0483 	mov.w	r4, r3, lsl #2
 80101e2:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 80101e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80101e8:	d25d      	bcs.n	80102a6 <forward_dense+0x196>
 80101ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101ec:	4693      	mov	fp, r2
 80101ee:	464c      	mov	r4, r9
 80101f0:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 80104e8 <forward_dense+0x3d8>
 80101f4:	08d9      	lsrs	r1, r3, #3
 80101f6:	46c1      	mov	r9, r8
 80101f8:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80101fc:	461a      	mov	r2, r3
 80101fe:	f023 0301 	bic.w	r3, r3, #1
 8010202:	9104      	str	r1, [sp, #16]
 8010204:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	014b      	lsls	r3, r1, #5
 801020c:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8010210:	9311      	str	r3, [sp, #68]	@ 0x44
 8010212:	0093      	lsls	r3, r2, #2
 8010214:	930c      	str	r3, [sp, #48]	@ 0x30
 8010216:	f002 0301 	and.w	r3, r2, #1
 801021a:	9305      	str	r3, [sp, #20]
 801021c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801021e:	699b      	ldr	r3, [r3, #24]
 8010220:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8010224:	9b08      	ldr	r3, [sp, #32]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d04a      	beq.n	80102c0 <forward_dense+0x1b0>
 801022a:	699b      	ldr	r3, [r3, #24]
 801022c:	689d      	ldr	r5, [r3, #8]
 801022e:	2c00      	cmp	r4, #0
 8010230:	d049      	beq.n	80102c6 <forward_dense+0x1b6>
 8010232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010234:	2b04      	cmp	r3, #4
 8010236:	9b02      	ldr	r3, [sp, #8]
 8010238:	d058      	beq.n	80102ec <forward_dense+0x1dc>
 801023a:	4599      	cmp	r9, r3
 801023c:	d927      	bls.n	801028e <forward_dense+0x17e>
 801023e:	4618      	mov	r0, r3
 8010240:	9e03      	ldr	r6, [sp, #12]
 8010242:	2d00      	cmp	r5, #0
 8010244:	d039      	beq.n	80102ba <forward_dense+0x1aa>
 8010246:	ecb5 6a01 	vldmia	r5!, {s12}
 801024a:	45da      	cmp	sl, fp
 801024c:	d911      	bls.n	8010272 <forward_dense+0x162>
 801024e:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80104e8 <forward_dense+0x3d8>
 8010252:	465a      	mov	r2, fp
 8010254:	4661      	mov	r1, ip
 8010256:	f811 3b01 	ldrb.w	r3, [r1], #1
 801025a:	ecb2 7a01 	vldmia	r2!, {s14}
 801025e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010262:	4592      	cmp	sl, r2
 8010264:	edd3 6a00 	vldr	s13, [r3]
 8010268:	eee6 7a87 	vfma.f32	s15, s13, s14
 801026c:	d8f3      	bhi.n	8010256 <forward_dense+0x146>
 801026e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8010272:	eca0 6a01 	vstmia	r0!, {s12}
 8010276:	4548      	cmp	r0, r9
 8010278:	44b4      	add	ip, r6
 801027a:	d3e2      	bcc.n	8010242 <forward_dense+0x132>
 801027c:	9a02      	ldr	r2, [sp, #8]
 801027e:	eba9 0302 	sub.w	r3, r9, r2
 8010282:	3b01      	subs	r3, #1
 8010284:	f023 0303 	bic.w	r3, r3, #3
 8010288:	3304      	adds	r3, #4
 801028a:	18d3      	adds	r3, r2, r3
 801028c:	9302      	str	r3, [sp, #8]
 801028e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010290:	9a01      	ldr	r2, [sp, #4]
 8010292:	4499      	add	r9, r3
 8010294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010296:	441a      	add	r2, r3
 8010298:	449a      	add	sl, r3
 801029a:	449b      	add	fp, r3
 801029c:	9b02      	ldr	r3, [sp, #8]
 801029e:	9201      	str	r2, [sp, #4]
 80102a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d3ba      	bcc.n	801021c <forward_dense+0x10c>
 80102a6:	b01b      	add	sp, #108	@ 0x6c
 80102a8:	ecbd 8b02 	vpop	{d8}
 80102ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b0:	6853      	ldr	r3, [r2, #4]
 80102b2:	deff      	udf	#255	@ 0xff
 80102b4:	2300      	movs	r3, #0
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	deff      	udf	#255	@ 0xff
 80102ba:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 80104e8 <forward_dense+0x3d8>
 80102be:	e7c4      	b.n	801024a <forward_dense+0x13a>
 80102c0:	461d      	mov	r5, r3
 80102c2:	2c00      	cmp	r4, #0
 80102c4:	d1b5      	bne.n	8010232 <forward_dense+0x122>
 80102c6:	9b02      	ldr	r3, [sp, #8]
 80102c8:	a813      	add	r0, sp, #76	@ 0x4c
 80102ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80102ce:	4413      	add	r3, r2
 80102d0:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 80102d4:	9302      	str	r3, [sp, #8]
 80102d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102d8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80102da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102dc:	9318      	str	r3, [sp, #96]	@ 0x60
 80102de:	2301      	movs	r3, #1
 80102e0:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 80102e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80102e6:	f001 f9f9 	bl	80116dc <forward_lite_dense_if32of32wf32>
 80102ea:	e7d0      	b.n	801028e <forward_dense+0x17e>
 80102ec:	4599      	cmp	r9, r3
 80102ee:	d9ce      	bls.n	801028e <forward_dense+0x17e>
 80102f0:	9a04      	ldr	r2, [sp, #16]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	1c57      	adds	r7, r2, #1
 80102f6:	9b01      	ldr	r3, [sp, #4]
 80102f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80102fa:	3b01      	subs	r3, #1
 80102fc:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8010300:	4452      	add	r2, sl
 8010302:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8010306:	9307      	str	r3, [sp, #28]
 8010308:	9206      	str	r2, [sp, #24]
 801030a:	2d00      	cmp	r5, #0
 801030c:	f000 80c2 	beq.w	8010494 <forward_dense+0x384>
 8010310:	9b04      	ldr	r3, [sp, #16]
 8010312:	ecf5 2a01 	vldmia	r5!, {s5}
 8010316:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80104e8 <forward_dense+0x3d8>
 801031a:	2b00      	cmp	r3, #0
 801031c:	f000 80c2 	beq.w	80104a4 <forward_dense+0x394>
 8010320:	f10c 0204 	add.w	r2, ip, #4
 8010324:	f10b 0320 	add.w	r3, fp, #32
 8010328:	f812 6c04 	ldrb.w	r6, [r2, #-4]
 801032c:	3204      	adds	r2, #4
 801032e:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8010332:	3320      	adds	r3, #32
 8010334:	f006 0e0f 	and.w	lr, r6, #15
 8010338:	0936      	lsrs	r6, r6, #4
 801033a:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 801033e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8010342:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8010346:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801034a:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 801034e:	edde 7a00 	vldr	s15, [lr]
 8010352:	ed96 3a00 	vldr	s6, [r6]
 8010356:	0906      	lsrs	r6, r0, #4
 8010358:	ee67 7a82 	vmul.f32	s15, s15, s4
 801035c:	f000 000f 	and.w	r0, r0, #15
 8010360:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010364:	f812 1c06 	ldrb.w	r1, [r2, #-6]
 8010368:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801036c:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8010370:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010374:	ed96 3a00 	vldr	s6, [r6]
 8010378:	ed90 4a00 	vldr	s8, [r0]
 801037c:	0908      	lsrs	r0, r1, #4
 801037e:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8010382:	f001 010f 	and.w	r1, r1, #15
 8010386:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 801038a:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 801038e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010392:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8010396:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 801039a:	eee3 7a23 	vfma.f32	s15, s6, s7
 801039e:	eee4 7a05 	vfma.f32	s15, s8, s10
 80103a2:	ed90 4a00 	vldr	s8, [r0]
 80103a6:	ed91 5a00 	vldr	s10, [r1]
 80103aa:	f812 1c05 	ldrb.w	r1, [r2, #-5]
 80103ae:	42ba      	cmp	r2, r7
 80103b0:	ea4f 1011 	mov.w	r0, r1, lsr #4
 80103b4:	f001 010f 	and.w	r1, r1, #15
 80103b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80103bc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80103c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80103c4:	eee5 7a06 	vfma.f32	s15, s10, s12
 80103c8:	ed90 5a00 	vldr	s10, [r0]
 80103cc:	ed91 6a00 	vldr	s12, [r1]
 80103d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80103d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80103d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103dc:	d1a4      	bne.n	8010328 <forward_dense+0x218>
 80103de:	f1a7 0804 	sub.w	r8, r7, #4
 80103e2:	f8dd e018 	ldr.w	lr, [sp, #24]
 80103e6:	9b01      	ldr	r3, [sp, #4]
 80103e8:	459e      	cmp	lr, r3
 80103ea:	d229      	bcs.n	8010440 <forward_dense+0x330>
 80103ec:	9b07      	ldr	r3, [sp, #28]
 80103ee:	f10e 0208 	add.w	r2, lr, #8
 80103f2:	f108 30ff 	add.w	r0, r8, #4294967295
 80103f6:	eba3 060e 	sub.w	r6, r3, lr
 80103fa:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 80103fe:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8010402:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010406:	3208      	adds	r2, #8
 8010408:	ed52 5a03 	vldr	s11, [r2, #-12]
 801040c:	f003 010f 	and.w	r1, r3, #15
 8010410:	091b      	lsrs	r3, r3, #4
 8010412:	ed52 6a04 	vldr	s13, [r2, #-16]
 8010416:	42b0      	cmp	r0, r6
 8010418:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801041c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010420:	edd1 7a00 	vldr	s15, [r1]
 8010424:	ed93 6a00 	vldr	s12, [r3]
 8010428:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801042c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010434:	d1e5      	bne.n	8010402 <forward_dense+0x2f2>
 8010436:	f10a 0a01 	add.w	sl, sl, #1
 801043a:	44d0      	add	r8, sl
 801043c:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8010440:	9b05      	ldr	r3, [sp, #20]
 8010442:	b1cb      	cbz	r3, 8010478 <forward_dense+0x368>
 8010444:	f898 3000 	ldrb.w	r3, [r8]
 8010448:	edde 7a00 	vldr	s15, [lr]
 801044c:	091b      	lsrs	r3, r3, #4
 801044e:	9a03      	ldr	r2, [sp, #12]
 8010450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010454:	4494      	add	ip, r2
 8010456:	4417      	add	r7, r2
 8010458:	edd3 6a00 	vldr	s13, [r3]
 801045c:	9b00      	ldr	r3, [sp, #0]
 801045e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010462:	ee32 7a87 	vadd.f32	s14, s5, s14
 8010466:	eca3 7a01 	vstmia	r3!, {s14}
 801046a:	4599      	cmp	r9, r3
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	f63f af4c 	bhi.w	801030a <forward_dense+0x1fa>
 8010472:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8010476:	e701      	b.n	801027c <forward_dense+0x16c>
 8010478:	9b03      	ldr	r3, [sp, #12]
 801047a:	ee72 2a87 	vadd.f32	s5, s5, s14
 801047e:	449c      	add	ip, r3
 8010480:	441f      	add	r7, r3
 8010482:	9b00      	ldr	r3, [sp, #0]
 8010484:	ece3 2a01 	vstmia	r3!, {s5}
 8010488:	454b      	cmp	r3, r9
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	d2f1      	bcs.n	8010472 <forward_dense+0x362>
 801048e:	2d00      	cmp	r5, #0
 8010490:	f47f af3e 	bne.w	8010310 <forward_dense+0x200>
 8010494:	9b04      	ldr	r3, [sp, #16]
 8010496:	eef0 2a48 	vmov.f32	s5, s16
 801049a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80104e8 <forward_dense+0x3d8>
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f47f af3e 	bne.w	8010320 <forward_dense+0x210>
 80104a4:	46de      	mov	lr, fp
 80104a6:	46e0      	mov	r8, ip
 80104a8:	e79d      	b.n	80103e6 <forward_dense+0x2d6>
 80104aa:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80104ae:	f1b8 0f00 	cmp.w	r8, #0
 80104b2:	f43f ae84 	beq.w	80101be <forward_dense+0xae>
 80104b6:	e9d8 0100 	ldrd	r0, r1, [r8]
 80104ba:	f001 fb81 	bl	8011bc0 <ai_array_get_byte_size>
 80104be:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80104c2:	4602      	mov	r2, r0
 80104c4:	4648      	mov	r0, r9
 80104c6:	4641      	mov	r1, r8
 80104c8:	46c1      	mov	r9, r8
 80104ca:	f001 fa81 	bl	80119d0 <st_int8_copy>
 80104ce:	e676      	b.n	80101be <forward_dense+0xae>
 80104d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80104d2:	e644      	b.n	801015e <forward_dense+0x4e>
 80104d4:	2300      	movs	r3, #0
 80104d6:	9308      	str	r3, [sp, #32]
 80104d8:	460b      	mov	r3, r1
 80104da:	e640      	b.n	801015e <forward_dense+0x4e>
 80104dc:	2300      	movs	r3, #0
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	deff      	udf	#255	@ 0xff
 80104e2:	2300      	movs	r3, #0
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	deff      	udf	#255	@ 0xff
 80104e8:	00000000 	.word	0x00000000

080104ec <forward_relu>:
 80104ec:	6982      	ldr	r2, [r0, #24]
 80104ee:	8813      	ldrh	r3, [r2, #0]
 80104f0:	b323      	cbz	r3, 801053c <forward_relu+0x50>
 80104f2:	6851      	ldr	r1, [r2, #4]
 80104f4:	684a      	ldr	r2, [r1, #4]
 80104f6:	b102      	cbz	r2, 80104fa <forward_relu+0xe>
 80104f8:	6812      	ldr	r2, [r2, #0]
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	f000 8086 	beq.w	801060c <forward_relu+0x120>
 8010500:	b470      	push	{r4, r5, r6}
 8010502:	690b      	ldr	r3, [r1, #16]
 8010504:	b103      	cbz	r3, 8010508 <forward_relu+0x1c>
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	69c6      	ldr	r6, [r0, #28]
 801050a:	b1ce      	cbz	r6, 8010540 <forward_relu+0x54>
 801050c:	6871      	ldr	r1, [r6, #4]
 801050e:	6998      	ldr	r0, [r3, #24]
 8010510:	2901      	cmp	r1, #1
 8010512:	d03f      	beq.n	8010594 <forward_relu+0xa8>
 8010514:	6893      	ldr	r3, [r2, #8]
 8010516:	6991      	ldr	r1, [r2, #24]
 8010518:	0a1b      	lsrs	r3, r3, #8
 801051a:	6880      	ldr	r0, [r0, #8]
 801051c:	6889      	ldr	r1, [r1, #8]
 801051e:	d06c      	beq.n	80105fa <forward_relu+0x10e>
 8010520:	68d5      	ldr	r5, [r2, #12]
 8010522:	2201      	movs	r2, #1
 8010524:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010528:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801052c:	429d      	cmp	r5, r3
 801052e:	fb04 f202 	mul.w	r2, r4, r2
 8010532:	d1f9      	bne.n	8010528 <forward_relu+0x3c>
 8010534:	68b3      	ldr	r3, [r6, #8]
 8010536:	bc70      	pop	{r4, r5, r6}
 8010538:	f000 be52 	b.w	80111e0 <forward_lite_nl_relu_generic_if32of32_kernel>
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	deff      	udf	#255	@ 0xff
 8010540:	6999      	ldr	r1, [r3, #24]
 8010542:	6893      	ldr	r3, [r2, #8]
 8010544:	6990      	ldr	r0, [r2, #24]
 8010546:	0a1b      	lsrs	r3, r3, #8
 8010548:	6889      	ldr	r1, [r1, #8]
 801054a:	6884      	ldr	r4, [r0, #8]
 801054c:	d057      	beq.n	80105fe <forward_relu+0x112>
 801054e:	68d5      	ldr	r5, [r2, #12]
 8010550:	2201      	movs	r2, #1
 8010552:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010556:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801055a:	429d      	cmp	r5, r3
 801055c:	fb00 f202 	mul.w	r2, r0, r2
 8010560:	d1f9      	bne.n	8010556 <forward_relu+0x6a>
 8010562:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010566:	4413      	add	r3, r2
 8010568:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801056c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010570:	4294      	cmp	r4, r2
 8010572:	d80d      	bhi.n	8010590 <forward_relu+0xa4>
 8010574:	3204      	adds	r2, #4
 8010576:	3104      	adds	r1, #4
 8010578:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010614 <forward_relu+0x128>
 801057c:	4613      	mov	r3, r2
 801057e:	ed72 7a01 	vldmdb	r2!, {s15}
 8010582:	3b08      	subs	r3, #8
 8010584:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010588:	ed61 7a01 	vstmdb	r1!, {s15}
 801058c:	429c      	cmp	r4, r3
 801058e:	d9f5      	bls.n	801057c <forward_relu+0x90>
 8010590:	bc70      	pop	{r4, r5, r6}
 8010592:	4770      	bx	lr
 8010594:	6993      	ldr	r3, [r2, #24]
 8010596:	6880      	ldr	r0, [r0, #8]
 8010598:	689c      	ldr	r4, [r3, #8]
 801059a:	6893      	ldr	r3, [r2, #8]
 801059c:	0a1b      	lsrs	r3, r3, #8
 801059e:	d030      	beq.n	8010602 <forward_relu+0x116>
 80105a0:	68d5      	ldr	r5, [r2, #12]
 80105a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80105a6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80105aa:	429d      	cmp	r5, r3
 80105ac:	fb02 f101 	mul.w	r1, r2, r1
 80105b0:	d1f9      	bne.n	80105a6 <forward_relu+0xba>
 80105b2:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80105b6:	68b3      	ldr	r3, [r6, #8]
 80105b8:	440a      	add	r2, r1
 80105ba:	ed93 7a00 	vldr	s14, [r3]
 80105be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105c2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80105c6:	429c      	cmp	r4, r3
 80105c8:	d8e2      	bhi.n	8010590 <forward_relu+0xa4>
 80105ca:	1d02      	adds	r2, r0, #4
 80105cc:	3304      	adds	r3, #4
 80105ce:	2000      	movs	r0, #0
 80105d0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80105d4:	1f19      	subs	r1, r3, #4
 80105d6:	3b08      	subs	r3, #8
 80105d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e0:	d405      	bmi.n	80105ee <forward_relu+0x102>
 80105e2:	429c      	cmp	r4, r3
 80105e4:	f842 0d04 	str.w	r0, [r2, #-4]!
 80105e8:	d8d2      	bhi.n	8010590 <forward_relu+0xa4>
 80105ea:	460b      	mov	r3, r1
 80105ec:	e7f0      	b.n	80105d0 <forward_relu+0xe4>
 80105ee:	429c      	cmp	r4, r3
 80105f0:	ed62 7a01 	vstmdb	r2!, {s15}
 80105f4:	d8cc      	bhi.n	8010590 <forward_relu+0xa4>
 80105f6:	460b      	mov	r3, r1
 80105f8:	e7ea      	b.n	80105d0 <forward_relu+0xe4>
 80105fa:	2201      	movs	r2, #1
 80105fc:	e79a      	b.n	8010534 <forward_relu+0x48>
 80105fe:	4622      	mov	r2, r4
 8010600:	e7b8      	b.n	8010574 <forward_relu+0x88>
 8010602:	68b2      	ldr	r2, [r6, #8]
 8010604:	4623      	mov	r3, r4
 8010606:	ed92 7a00 	vldr	s14, [r2]
 801060a:	e7de      	b.n	80105ca <forward_relu+0xde>
 801060c:	2300      	movs	r3, #0
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	deff      	udf	#255	@ 0xff
 8010612:	bf00      	nop
 8010614:	00000000 	.word	0x00000000

08010618 <forward_sm>:
 8010618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801061c:	6982      	ldr	r2, [r0, #24]
 801061e:	8813      	ldrh	r3, [r2, #0]
 8010620:	b383      	cbz	r3, 8010684 <forward_sm+0x6c>
 8010622:	6852      	ldr	r2, [r2, #4]
 8010624:	6855      	ldr	r5, [r2, #4]
 8010626:	b105      	cbz	r5, 801062a <forward_sm+0x12>
 8010628:	682d      	ldr	r5, [r5, #0]
 801062a:	2b01      	cmp	r3, #1
 801062c:	d029      	beq.n	8010682 <forward_sm+0x6a>
 801062e:	6913      	ldr	r3, [r2, #16]
 8010630:	b363      	cbz	r3, 801068c <forward_sm+0x74>
 8010632:	681e      	ldr	r6, [r3, #0]
 8010634:	68a9      	ldr	r1, [r5, #8]
 8010636:	68ec      	ldr	r4, [r5, #12]
 8010638:	68f3      	ldr	r3, [r6, #12]
 801063a:	0a09      	lsrs	r1, r1, #8
 801063c:	6867      	ldr	r7, [r4, #4]
 801063e:	685a      	ldr	r2, [r3, #4]
 8010640:	d022      	beq.n	8010688 <forward_sm+0x70>
 8010642:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010646:	2301      	movs	r3, #1
 8010648:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 801064c:	428c      	cmp	r4, r1
 801064e:	fb00 f303 	mul.w	r3, r0, r3
 8010652:	d1f9      	bne.n	8010648 <forward_sm+0x30>
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	69a8      	ldr	r0, [r5, #24]
 8010658:	69b1      	ldr	r1, [r6, #24]
 801065a:	6884      	ldr	r4, [r0, #8]
 801065c:	688e      	ldr	r6, [r1, #8]
 801065e:	18e5      	adds	r5, r4, r3
 8010660:	42ac      	cmp	r4, r5
 8010662:	d20c      	bcs.n	801067e <forward_sm+0x66>
 8010664:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8010668:	ea4f 0987 	mov.w	r9, r7, lsl #2
 801066c:	4621      	mov	r1, r4
 801066e:	444c      	add	r4, r9
 8010670:	4630      	mov	r0, r6
 8010672:	463a      	mov	r2, r7
 8010674:	f000 fd70 	bl	8011158 <forward_lite_nl_softmax_if32of32_kernel>
 8010678:	42a5      	cmp	r5, r4
 801067a:	4446      	add	r6, r8
 801067c:	d8f6      	bhi.n	801066c <forward_sm+0x54>
 801067e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010682:	2300      	movs	r3, #0
 8010684:	685b      	ldr	r3, [r3, #4]
 8010686:	deff      	udf	#255	@ 0xff
 8010688:	2304      	movs	r3, #4
 801068a:	e7e4      	b.n	8010656 <forward_sm+0x3e>
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	deff      	udf	#255	@ 0xff

08010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	ed2d 8b0c 	vpush	{d8-d13}
 8010698:	b08d      	sub	sp, #52	@ 0x34
 801069a:	461d      	mov	r5, r3
 801069c:	9003      	str	r0, [sp, #12]
 801069e:	9207      	str	r2, [sp, #28]
 80106a0:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 80106a2:	9308      	str	r3, [sp, #32]
 80106a4:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 80106a8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80106aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80106ac:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 80106b0:	fb00 f002 	mul.w	r0, r0, r2
 80106b4:	9004      	str	r0, [sp, #16]
 80106b6:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 80106ba:	9009      	str	r0, [sp, #36]	@ 0x24
 80106bc:	2c00      	cmp	r4, #0
 80106be:	f000 80ed 	beq.w	801089c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 80106c2:	009c      	lsls	r4, r3, #2
 80106c4:	fb00 f305 	mul.w	r3, r0, r5
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	9405      	str	r4, [sp, #20]
 80106cc:	9306      	str	r3, [sp, #24]
 80106ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80106d0:	fb03 f305 	mul.w	r3, r3, r5
 80106d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80106d8:	9301      	str	r3, [sp, #4]
 80106da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80106dc:	425b      	negs	r3, r3
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	2300      	movs	r3, #0
 80106e2:	9302      	str	r3, [sp, #8]
 80106e4:	00ab      	lsls	r3, r5, #2
 80106e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80106e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f2c0 80dd 	blt.w	80108aa <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 80106f0:	9e01      	ldr	r6, [sp, #4]
 80106f2:	2000      	movs	r0, #0
 80106f4:	9d04      	ldr	r5, [sp, #16]
 80106f6:	9b07      	ldr	r3, [sp, #28]
 80106f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106fa:	9900      	ldr	r1, [sp, #0]
 80106fc:	fb05 3502 	mla	r5, r5, r2, r3
 8010700:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010702:	440b      	add	r3, r1
 8010704:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8010706:	428b      	cmp	r3, r1
 8010708:	bf94      	ite	ls
 801070a:	ebc0 0003 	rsbls	r0, r0, r3
 801070e:	ebc0 0001 	rsbhi	r0, r0, r1
 8010712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010714:	f1bb 0f00 	cmp.w	fp, #0
 8010718:	eba3 0a00 	sub.w	sl, r3, r0
 801071c:	9b08      	ldr	r3, [sp, #32]
 801071e:	eba1 0900 	sub.w	r9, r1, r0
 8010722:	fb03 f000 	mul.w	r0, r3, r0
 8010726:	f340 80c6 	ble.w	80108b6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 801072a:	f020 040f 	bic.w	r4, r0, #15
 801072e:	eeb0 7a40 	vmov.f32	s14, s0
 8010732:	fb02 fa0a 	mul.w	sl, r2, sl
 8010736:	f04f 0c00 	mov.w	ip, #0
 801073a:	f104 38ff 	add.w	r8, r4, #4294967295
 801073e:	fb02 f909 	mul.w	r9, r2, r9
 8010742:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8010746:	f108 0801 	add.w	r8, r8, #1
 801074a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 801074e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8010752:	2c00      	cmp	r4, #0
 8010754:	f340 80a7 	ble.w	80108a6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8010758:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 801075c:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8010760:	2100      	movs	r1, #0
 8010762:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8010766:	3110      	adds	r1, #16
 8010768:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 801076c:	3340      	adds	r3, #64	@ 0x40
 801076e:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8010772:	42a1      	cmp	r1, r4
 8010774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010778:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 801077c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8010780:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8010784:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8010788:	eee4 7a85 	vfma.f32	s15, s9, s10
 801078c:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8010790:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 8010794:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 8010798:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 801079c:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 80107a0:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 80107a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80107a8:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 80107ac:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 80107b0:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 80107b4:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 80107b8:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 80107bc:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 80107c0:	eeed 7aa6 	vfma.f32	s15, s27, s13
 80107c4:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 80107c8:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80107cc:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80107d0:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80107d4:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80107d8:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80107dc:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80107e0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80107e4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80107e8:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80107ec:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80107f0:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80107f4:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80107f8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80107fc:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8010800:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8010804:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8010808:	eeea 7a29 	vfma.f32	s15, s20, s19
 801080c:	eee9 7a28 	vfma.f32	s15, s18, s17
 8010810:	eee8 7a20 	vfma.f32	s15, s16, s1
 8010814:	eee1 7a21 	vfma.f32	s15, s2, s3
 8010818:	eee2 7a22 	vfma.f32	s15, s4, s5
 801081c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010820:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010824:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010828:	eee6 7a26 	vfma.f32	s15, s12, s13
 801082c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010830:	db97      	blt.n	8010762 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8010832:	4476      	add	r6, lr
 8010834:	4475      	add	r5, lr
 8010836:	4647      	mov	r7, r8
 8010838:	42b8      	cmp	r0, r7
 801083a:	dd10      	ble.n	801085e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 801083c:	463b      	mov	r3, r7
 801083e:	4631      	mov	r1, r6
 8010840:	462a      	mov	r2, r5
 8010842:	3301      	adds	r3, #1
 8010844:	ecf2 6a01 	vldmia	r2!, {s13}
 8010848:	ecf1 7a01 	vldmia	r1!, {s15}
 801084c:	4298      	cmp	r0, r3
 801084e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010852:	d1f6      	bne.n	8010842 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8010854:	1bc7      	subs	r7, r0, r7
 8010856:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801085a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 801085e:	f10c 0c01 	add.w	ip, ip, #1
 8010862:	4456      	add	r6, sl
 8010864:	444d      	add	r5, r9
 8010866:	45dc      	cmp	ip, fp
 8010868:	f47f af73 	bne.w	8010752 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 801086c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801086e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010870:	9a03      	ldr	r2, [sp, #12]
 8010872:	4401      	add	r1, r0
 8010874:	9b02      	ldr	r3, [sp, #8]
 8010876:	ed82 7a00 	vstr	s14, [r2]
 801087a:	9128      	str	r1, [sp, #160]	@ 0xa0
 801087c:	3301      	adds	r3, #1
 801087e:	9905      	ldr	r1, [sp, #20]
 8010880:	9302      	str	r3, [sp, #8]
 8010882:	440a      	add	r2, r1
 8010884:	9906      	ldr	r1, [sp, #24]
 8010886:	9203      	str	r2, [sp, #12]
 8010888:	9a00      	ldr	r2, [sp, #0]
 801088a:	1a12      	subs	r2, r2, r0
 801088c:	9200      	str	r2, [sp, #0]
 801088e:	9a01      	ldr	r2, [sp, #4]
 8010890:	440a      	add	r2, r1
 8010892:	9201      	str	r2, [sp, #4]
 8010894:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010896:	4293      	cmp	r3, r2
 8010898:	f47f af26 	bne.w	80106e8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 801089c:	b00d      	add	sp, #52	@ 0x34
 801089e:	ecbd 8b0c 	vpop	{d8-d13}
 80108a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a6:	2700      	movs	r7, #0
 80108a8:	e7c6      	b.n	8010838 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 80108aa:	9a00      	ldr	r2, [sp, #0]
 80108ac:	9b04      	ldr	r3, [sp, #16]
 80108ae:	4610      	mov	r0, r2
 80108b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80108b2:	189d      	adds	r5, r3, r2
 80108b4:	e71f      	b.n	80106f6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 80108b6:	eeb0 7a40 	vmov.f32	s14, s0
 80108ba:	e7d7      	b.n	801086c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

080108bc <forward_lite_conv2d_if32of32wf32>:
 80108bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c0:	ed2d 8b02 	vpush	{d8}
 80108c4:	b09f      	sub	sp, #124	@ 0x7c
 80108c6:	4686      	mov	lr, r0
 80108c8:	4694      	mov	ip, r2
 80108ca:	af08      	add	r7, sp, #32
 80108cc:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 80108d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80108d2:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 80108d6:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 80108da:	424e      	negs	r6, r1
 80108dc:	64fc      	str	r4, [r7, #76]	@ 0x4c
 80108de:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	613a      	str	r2, [r7, #16]
 80108e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80108e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80108ec:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 80108f0:	617d      	str	r5, [r7, #20]
 80108f2:	633e      	str	r6, [r7, #48]	@ 0x30
 80108f4:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 80108f8:	2c00      	cmp	r4, #0
 80108fa:	f000 8090 	beq.w	8010a1e <forward_lite_conv2d_if32of32wf32+0x162>
 80108fe:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8010902:	6379      	str	r1, [r7, #52]	@ 0x34
 8010904:	fb04 f202 	mul.w	r2, r4, r2
 8010908:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801090c:	4244      	negs	r4, r0
 801090e:	ed9f 8a98 	vldr	s16, [pc, #608]	@ 8010b70 <forward_lite_conv2d_if32of32wf32+0x2b4>
 8010912:	653c      	str	r4, [r7, #80]	@ 0x50
 8010914:	fb03 f402 	mul.w	r4, r3, r2
 8010918:	fb03 f201 	mul.w	r2, r3, r1
 801091c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8010920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010924:	63bc      	str	r4, [r7, #56]	@ 0x38
 8010926:	fb01 f10a 	mul.w	r1, r1, sl
 801092a:	0089      	lsls	r1, r1, #2
 801092c:	61f9      	str	r1, [r7, #28]
 801092e:	fb05 f102 	mul.w	r1, r5, r2
 8010932:	4655      	mov	r5, sl
 8010934:	fb06 f202 	mul.w	r2, r6, r2
 8010938:	46da      	mov	sl, fp
 801093a:	0089      	lsls	r1, r1, #2
 801093c:	61b9      	str	r1, [r7, #24]
 801093e:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8010942:	f10b 0207 	add.w	r2, fp, #7
 8010946:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010948:	f022 0107 	bic.w	r1, r2, #7
 801094c:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8010950:	60f9      	str	r1, [r7, #12]
 8010952:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 8010956:	60ba      	str	r2, [r7, #8]
 8010958:	2200      	movs	r2, #0
 801095a:	6239      	str	r1, [r7, #32]
 801095c:	627a      	str	r2, [r7, #36]	@ 0x24
 801095e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010960:	2a00      	cmp	r2, #0
 8010962:	f2c0 80d3 	blt.w	8010b0c <forward_lite_conv2d_if32of32wf32+0x250>
 8010966:	2200      	movs	r2, #0
 8010968:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 801096c:	657a      	str	r2, [r7, #84]	@ 0x54
 801096e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8010972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010974:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8010978:	440a      	add	r2, r1
 801097a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801097c:	4282      	cmp	r2, r0
 801097e:	bf94      	ite	ls
 8010980:	ebc1 0102 	rsbls	r1, r1, r2
 8010984:	ebc1 0100 	rsbhi	r1, r1, r0
 8010988:	6a3a      	ldr	r2, [r7, #32]
 801098a:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 801098e:	6439      	str	r1, [r7, #64]	@ 0x40
 8010990:	d24b      	bcs.n	8010a2a <forward_lite_conv2d_if32of32wf32+0x16e>
 8010992:	b375      	cbz	r5, 80109f2 <forward_lite_conv2d_if32of32wf32+0x136>
 8010994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010996:	2a00      	cmp	r2, #0
 8010998:	f000 80bd 	beq.w	8010b16 <forward_lite_conv2d_if32of32wf32+0x25a>
 801099c:	4659      	mov	r1, fp
 801099e:	4691      	mov	r9, r2
 80109a0:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 80109a4:	2400      	movs	r4, #0
 80109a6:	693e      	ldr	r6, [r7, #16]
 80109a8:	f8d7 b040 	ldr.w	fp, [r7, #64]	@ 0x40
 80109ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80109ae:	3401      	adds	r4, #1
 80109b0:	ecb9 0a01 	vldmia	r9!, {s0}
 80109b4:	4640      	mov	r0, r8
 80109b6:	9207      	str	r2, [sp, #28]
 80109b8:	f108 0804 	add.w	r8, r8, #4
 80109bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80109be:	e9cd b205 	strd	fp, r2, [sp, #20]
 80109c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80109c4:	9204      	str	r2, [sp, #16]
 80109c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80109ca:	9203      	str	r2, [sp, #12]
 80109cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80109d0:	9202      	str	r2, [sp, #8]
 80109d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80109d6:	e9cd 5200 	strd	r5, r2, [sp]
 80109da:	4632      	mov	r2, r6
 80109dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80109e0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80109e2:	4456      	add	r6, sl
 80109e4:	f7ff fe54 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80109e8:	42a5      	cmp	r5, r4
 80109ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80109ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80109f0:	d1dc      	bne.n	80109ac <forward_lite_conv2d_if32of32wf32+0xf0>
 80109f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109f4:	69f8      	ldr	r0, [r7, #28]
 80109f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109f8:	4401      	add	r1, r0
 80109fa:	6978      	ldr	r0, [r7, #20]
 80109fc:	3201      	adds	r2, #1
 80109fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8010a00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010a02:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a04:	4401      	add	r1, r0
 8010a06:	6339      	str	r1, [r7, #48]	@ 0x30
 8010a08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010a0a:	1a09      	subs	r1, r1, r0
 8010a0c:	69b8      	ldr	r0, [r7, #24]
 8010a0e:	6379      	str	r1, [r7, #52]	@ 0x34
 8010a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a12:	4401      	add	r1, r0
 8010a14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010a16:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8010a1a:	4291      	cmp	r1, r2
 8010a1c:	d19f      	bne.n	801095e <forward_lite_conv2d_if32of32wf32+0xa2>
 8010a1e:	375c      	adds	r7, #92	@ 0x5c
 8010a20:	46bd      	mov	sp, r7
 8010a22:	ecbd 8b02 	vpop	{d8}
 8010a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a2a:	466a      	mov	r2, sp
 8010a2c:	ee08 2a90 	vmov	s17, r2
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	ebad 0d02 	sub.w	sp, sp, r2
 8010a36:	aa08      	add	r2, sp, #32
 8010a38:	2d00      	cmp	r5, #0
 8010a3a:	d03d      	beq.n	8010ab8 <forward_lite_conv2d_if32of32wf32+0x1fc>
 8010a3c:	6938      	ldr	r0, [r7, #16]
 8010a3e:	4659      	mov	r1, fp
 8010a40:	68bc      	ldr	r4, [r7, #8]
 8010a42:	46ab      	mov	fp, r5
 8010a44:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 8010a48:	f04f 0800 	mov.w	r8, #0
 8010a4c:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8010a4e:	4605      	mov	r5, r0
 8010a50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a52:	b138      	cbz	r0, 8010a64 <forward_lite_conv2d_if32of32wf32+0x1a8>
 8010a54:	4628      	mov	r0, r5
 8010a56:	4694      	mov	ip, r2
 8010a58:	f850 eb04 	ldr.w	lr, [r0], #4
 8010a5c:	42a0      	cmp	r0, r4
 8010a5e:	f84c eb04 	str.w	lr, [ip], #4
 8010a62:	d1f9      	bne.n	8010a58 <forward_lite_conv2d_if32of32wf32+0x19c>
 8010a64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010a66:	f108 0801 	add.w	r8, r8, #1
 8010a6a:	b348      	cbz	r0, 8010ac0 <forward_lite_conv2d_if32of32wf32+0x204>
 8010a6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a6e:	4455      	add	r5, sl
 8010a70:	ecb6 0a01 	vldmia	r6!, {s0}
 8010a74:	4454      	add	r4, sl
 8010a76:	9007      	str	r0, [sp, #28]
 8010a78:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010a7a:	9006      	str	r0, [sp, #24]
 8010a7c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010a7e:	9005      	str	r0, [sp, #20]
 8010a80:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010a82:	9004      	str	r0, [sp, #16]
 8010a84:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8010a88:	9003      	str	r0, [sp, #12]
 8010a8a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8010a8e:	9002      	str	r0, [sp, #8]
 8010a90:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8010a94:	e9cd b000 	strd	fp, r0, [sp]
 8010a98:	4648      	mov	r0, r9
 8010a9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a9e:	f109 0904 	add.w	r9, r9, #4
 8010aa2:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 8010aa6:	f7ff fdf3 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010aaa:	45d8      	cmp	r8, fp
 8010aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ab0:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 8010ab4:	d1cc      	bne.n	8010a50 <forward_lite_conv2d_if32of32wf32+0x194>
 8010ab6:	465d      	mov	r5, fp
 8010ab8:	ee18 2a90 	vmov	r2, s17
 8010abc:	4695      	mov	sp, r2
 8010abe:	e798      	b.n	80109f2 <forward_lite_conv2d_if32of32wf32+0x136>
 8010ac0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010ac2:	eeb0 0a48 	vmov.f32	s0, s16
 8010ac6:	4455      	add	r5, sl
 8010ac8:	4454      	add	r4, sl
 8010aca:	9007      	str	r0, [sp, #28]
 8010acc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010ace:	9006      	str	r0, [sp, #24]
 8010ad0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010ad2:	9005      	str	r0, [sp, #20]
 8010ad4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010ad6:	9004      	str	r0, [sp, #16]
 8010ad8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8010adc:	9003      	str	r0, [sp, #12]
 8010ade:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8010ae2:	9002      	str	r0, [sp, #8]
 8010ae4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8010ae8:	e9cd b000 	strd	fp, r0, [sp]
 8010aec:	4648      	mov	r0, r9
 8010aee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010af2:	f109 0904 	add.w	r9, r9, #4
 8010af6:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 8010afa:	f7ff fdc9 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010afe:	45c3      	cmp	fp, r8
 8010b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b04:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 8010b08:	d1a2      	bne.n	8010a50 <forward_lite_conv2d_if32of32wf32+0x194>
 8010b0a:	e7d4      	b.n	8010ab6 <forward_lite_conv2d_if32of32wf32+0x1fa>
 8010b0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b0e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8010b12:	657a      	str	r2, [r7, #84]	@ 0x54
 8010b14:	e72b      	b.n	801096e <forward_lite_conv2d_if32of32wf32+0xb2>
 8010b16:	4659      	mov	r1, fp
 8010b18:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8010b1c:	693e      	ldr	r6, [r7, #16]
 8010b1e:	4614      	mov	r4, r2
 8010b20:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 8010b24:	f8d7 b040 	ldr.w	fp, [r7, #64]	@ 0x40
 8010b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b2a:	3401      	adds	r4, #1
 8010b2c:	4640      	mov	r0, r8
 8010b2e:	eeb0 0a48 	vmov.f32	s0, s16
 8010b32:	9207      	str	r2, [sp, #28]
 8010b34:	f108 0804 	add.w	r8, r8, #4
 8010b38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b3a:	f8cd 9010 	str.w	r9, [sp, #16]
 8010b3e:	e9cd b205 	strd	fp, r2, [sp, #20]
 8010b42:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8010b46:	9203      	str	r2, [sp, #12]
 8010b48:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010b52:	e9cd 5200 	strd	r5, r2, [sp]
 8010b56:	4632      	mov	r2, r6
 8010b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b5c:	6579      	str	r1, [r7, #84]	@ 0x54
 8010b5e:	4456      	add	r6, sl
 8010b60:	f7ff fd96 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010b64:	42a5      	cmp	r5, r4
 8010b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010b6c:	d1dc      	bne.n	8010b28 <forward_lite_conv2d_if32of32wf32+0x26c>
 8010b6e:	e740      	b.n	80109f2 <forward_lite_conv2d_if32of32wf32+0x136>
 8010b70:	00000000 	.word	0x00000000

08010b74 <forward_lite_conv2d_if32of32wf32_pool>:
 8010b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b78:	ed2d 8b04 	vpush	{d8-d9}
 8010b7c:	b0bd      	sub	sp, #244	@ 0xf4
 8010b7e:	469c      	mov	ip, r3
 8010b80:	4696      	mov	lr, r2
 8010b82:	4681      	mov	r9, r0
 8010b84:	af0a      	add	r7, sp, #40	@ 0x28
 8010b86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010b8a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
 8010b8e:	f9b7 5148 	ldrsh.w	r5, [r7, #328]	@ 0x148
 8010b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b94:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	@ 0x114
 8010b98:	f9b7 a11c 	ldrsh.w	sl, [r7, #284]	@ 0x11c
 8010b9c:	6579      	str	r1, [r7, #84]	@ 0x54
 8010b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ba0:	f9b7 1168 	ldrsh.w	r1, [r7, #360]	@ 0x168
 8010ba4:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8010ba8:	f9b7 410c 	ldrsh.w	r4, [r7, #268]	@ 0x10c
 8010bac:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010bae:	6739      	str	r1, [r7, #112]	@ 0x70
 8010bb0:	fb05 f201 	mul.w	r2, r5, r1
 8010bb4:	f9b7 1118 	ldrsh.w	r1, [r7, #280]	@ 0x118
 8010bb8:	f8c7 a0b0 	str.w	sl, [r7, #176]	@ 0xb0
 8010bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010bc0:	f9b7 a134 	ldrsh.w	sl, [r7, #308]	@ 0x134
 8010bc4:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8010bc8:	f9b7 8108 	ldrsh.w	r8, [r7, #264]	@ 0x108
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	6639      	str	r1, [r7, #96]	@ 0x60
 8010bd0:	f8b7 0128 	ldrh.w	r0, [r7, #296]	@ 0x128
 8010bd4:	fb08 f202 	mul.w	r2, r8, r2
 8010bd8:	f8c7 40b4 	str.w	r4, [r7, #180]	@ 0xb4
 8010bdc:	f8c7 a030 	str.w	sl, [r7, #48]	@ 0x30
 8010be0:	4241      	negs	r1, r0
 8010be2:	f9b7 6104 	ldrsh.w	r6, [r7, #260]	@ 0x104
 8010be6:	f9b7 b120 	ldrsh.w	fp, [r7, #288]	@ 0x120
 8010bea:	f8b7 4124 	ldrh.w	r4, [r7, #292]	@ 0x124
 8010bee:	f8c7 50c4 	str.w	r5, [r7, #196]	@ 0xc4
 8010bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010bf4:	f9b7 314c 	ldrsh.w	r3, [r7, #332]	@ 0x14c
 8010bf8:	f9b7 a164 	ldrsh.w	sl, [r7, #356]	@ 0x164
 8010bfc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8010c00:	f8c7 a044 	str.w	sl, [r7, #68]	@ 0x44
 8010c04:	f9b7 a16c 	ldrsh.w	sl, [r7, #364]	@ 0x16c
 8010c08:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010c0a:	f8c7 a040 	str.w	sl, [r7, #64]	@ 0x40
 8010c0e:	f9b7 a170 	ldrsh.w	sl, [r7, #368]	@ 0x170
 8010c12:	2900      	cmp	r1, #0
 8010c14:	f8c7 a068 	str.w	sl, [r7, #104]	@ 0x68
 8010c18:	f9b7 a174 	ldrsh.w	sl, [r7, #372]	@ 0x174
 8010c1c:	f8c7 a03c 	str.w	sl, [r7, #60]	@ 0x3c
 8010c20:	f9b7 a178 	ldrsh.w	sl, [r7, #376]	@ 0x178
 8010c24:	f8c7 a0bc 	str.w	sl, [r7, #188]	@ 0xbc
 8010c28:	f340 80ca 	ble.w	8010dc0 <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8010c32:	4260      	negs	r0, r4
 8010c34:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010c38:	ee09 6a10 	vmov	s18, r6
 8010c3c:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 8010f34 <forward_lite_conv2d_if32of32wf32_pool+0x3c0>
 8010c40:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8010c44:	b298      	uxth	r0, r3
 8010c46:	fb01 f10b 	mul.w	r1, r1, fp
 8010c4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8010c4e:	fa1f f088 	uxth.w	r0, r8
 8010c52:	fb06 fa01 	mul.w	sl, r6, r1
 8010c56:	4604      	mov	r4, r0
 8010c58:	ee08 0a90 	vmov	s17, r0
 8010c5c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8010c5e:	4651      	mov	r1, sl
 8010c60:	f8c7 a06c 	str.w	sl, [r7, #108]	@ 0x6c
 8010c64:	fb08 f300 	mul.w	r3, r8, r0
 8010c68:	fb05 f303 	mul.w	r3, r5, r3
 8010c6c:	fb08 f505 	mul.w	r5, r8, r5
 8010c70:	0098      	lsls	r0, r3, #2
 8010c72:	1e63      	subs	r3, r4, #1
 8010c74:	008c      	lsls	r4, r1, #2
 8010c76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	6238      	str	r0, [r7, #32]
 8010c7c:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8010c7e:	eb0e 008a 	add.w	r0, lr, sl, lsl #2
 8010c82:	f8d7 40b4 	ldr.w	r4, [r7, #180]	@ 0xb4
 8010c86:	3301      	adds	r3, #1
 8010c88:	627d      	str	r5, [r7, #36]	@ 0x24
 8010c8a:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8010c8e:	fb01 f104 	mul.w	r1, r1, r4
 8010c92:	f8d7 a154 	ldr.w	sl, [r7, #340]	@ 0x154
 8010c96:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8010c98:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8010c9c:	fb06 f101 	mul.w	r1, r6, r1
 8010ca0:	6138      	str	r0, [r7, #16]
 8010ca2:	0098      	lsls	r0, r3, #2
 8010ca4:	0089      	lsls	r1, r1, #2
 8010ca6:	f8c7 5098 	str.w	r5, [r7, #152]	@ 0x98
 8010caa:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8010cae:	61f8      	str	r0, [r7, #28]
 8010cb0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8010cb2:	fb04 f106 	mul.w	r1, r4, r6
 8010cb6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8010cba:	607b      	str	r3, [r7, #4]
 8010cbc:	fb04 f101 	mul.w	r1, r4, r1
 8010cc0:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 8010cc4:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8010cc8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010cca:	eb04 0b82 	add.w	fp, r4, r2, lsl #2
 8010cce:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8010cd0:	f8c7 609c 	str.w	r6, [r7, #156]	@ 0x9c
 8010cd4:	0096      	lsls	r6, r2, #2
 8010cd6:	fb08 f201 	mul.w	r2, r8, r1
 8010cda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010cde:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8010ce2:	4275      	negs	r5, r6
 8010ce4:	0092      	lsls	r2, r2, #2
 8010ce6:	f8d7 9100 	ldr.w	r9, [r7, #256]	@ 0x100
 8010cea:	60be      	str	r6, [r7, #8]
 8010cec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8010cee:	2200      	movs	r2, #0
 8010cf0:	667d      	str	r5, [r7, #100]	@ 0x64
 8010cf2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010cf4:	1de2      	adds	r2, r4, #7
 8010cf6:	6539      	str	r1, [r7, #80]	@ 0x50
 8010cf8:	f022 0407 	bic.w	r4, r2, #7
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	617c      	str	r4, [r7, #20]
 8010d00:	67ba      	str	r2, [r7, #120]	@ 0x78
 8010d02:	603b      	str	r3, [r7, #0]
 8010d04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010d08:	3301      	adds	r3, #1
 8010d0a:	b21b      	sxth	r3, r3
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	dc7e      	bgt.n	8010e0e <forward_lite_conv2d_if32of32wf32_pool+0x29a>
 8010d10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010d14:	041b      	lsls	r3, r3, #16
 8010d16:	f100 810f 	bmi.w	8010f38 <forward_lite_conv2d_if32of32wf32_pool+0x3c4>
 8010d1a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010d1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8010d20:	428a      	cmp	r2, r1
 8010d22:	dc53      	bgt.n	8010dcc <forward_lite_conv2d_if32of32wf32_pool+0x258>
 8010d24:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010d26:	b292      	uxth	r2, r2
 8010d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d2a:	9008      	str	r0, [sp, #32]
 8010d2c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8010d30:	3301      	adds	r3, #1
 8010d32:	6dbd      	ldr	r5, [r7, #88]	@ 0x58
 8010d34:	442c      	add	r4, r5
 8010d36:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8010d3a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8010d3c:	4420      	add	r0, r4
 8010d3e:	b21c      	sxth	r4, r3
 8010d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d44:	6578      	str	r0, [r7, #84]	@ 0x54
 8010d46:	1b5b      	subs	r3, r3, r5
 8010d48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010d4a:	67bc      	str	r4, [r7, #120]	@ 0x78
 8010d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010d54:	4403      	add	r3, r0
 8010d56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010d5a:	9201      	str	r2, [sp, #4]
 8010d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d5e:	1ad2      	subs	r2, r2, r3
 8010d60:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010d64:	1ac9      	subs	r1, r1, r3
 8010d66:	9305      	str	r3, [sp, #20]
 8010d68:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 8010d6a:	b292      	uxth	r2, r2
 8010d6c:	b20b      	sxth	r3, r1
 8010d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010d72:	b2b3      	uxth	r3, r6
 8010d74:	9303      	str	r3, [sp, #12]
 8010d76:	2301      	movs	r3, #1
 8010d78:	9307      	str	r3, [sp, #28]
 8010d7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8010d7e:	9306      	str	r3, [sp, #24]
 8010d80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010d84:	9304      	str	r3, [sp, #16]
 8010d86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010d88:	9302      	str	r3, [sp, #8]
 8010d8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	ee18 3a90 	vmov	r3, s17
 8010d94:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	@ 0xc4
 8010d98:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8010d9c:	f8d7 5160 	ldr.w	r5, [r7, #352]	@ 0x160
 8010da0:	47a8      	blx	r5
 8010da2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010da4:	1ab3      	subs	r3, r6, r2
 8010da6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010daa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010dae:	3a01      	subs	r2, #1
 8010db0:	b21b      	sxth	r3, r3
 8010db2:	b292      	uxth	r2, r2
 8010db4:	653b      	str	r3, [r7, #80]	@ 0x50
 8010db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010db8:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8010dbc:	42a3      	cmp	r3, r4
 8010dbe:	dca1      	bgt.n	8010d04 <forward_lite_conv2d_if32of32wf32_pool+0x190>
 8010dc0:	37cc      	adds	r7, #204	@ 0xcc
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	ecbd 8b04 	vpop	{d8-d9}
 8010dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dcc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010dce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8010dd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010dd6:	440a      	add	r2, r1
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8010dde:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	1a52      	subs	r2, r2, r1
 8010de6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010de8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010dec:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010df0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8010df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010df6:	440a      	add	r2, r1
 8010df8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8010dfc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	ddde      	ble.n	8010dc0 <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8010e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010e06:	3301      	adds	r3, #1
 8010e08:	b21b      	sxth	r3, r3
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	dd80      	ble.n	8010d10 <forward_lite_conv2d_if32of32wf32_pool+0x19c>
 8010e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f2c0 8150 	blt.w	80110b8 <forward_lite_conv2d_if32of32wf32_pool+0x544>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8010e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010e22:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e2a:	4413      	add	r3, r2
 8010e2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010e30:	4283      	cmp	r3, r0
 8010e32:	bfd4      	ite	le
 8010e34:	ebc2 0203 	rsble	r2, r2, r3
 8010e38:	ebc2 0200 	rsbgt	r2, r2, r0
 8010e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e42:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8010e46:	f080 80b4 	bcs.w	8010fb2 <forward_lite_conv2d_if32of32wf32_pool+0x43e>
 8010e4a:	f1b8 0f00 	cmp.w	r8, #0
 8010e4e:	dd3b      	ble.n	8010ec8 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8010e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	f000 8143 	beq.w	80110e0 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 8010e5a:	461d      	mov	r5, r3
 8010e5c:	464e      	mov	r6, r9
 8010e5e:	f8c7 a08c 	str.w	sl, [r7, #140]	@ 0x8c
 8010e62:	ee19 3a10 	vmov	r3, s18
 8010e66:	f8c7 b080 	str.w	fp, [r7, #128]	@ 0x80
 8010e6a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8010e6c:	f8d7 b084 	ldr.w	fp, [r7, #132]	@ 0x84
 8010e70:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8010e74:	f8c7 9084 	str.w	r9, [r7, #132]	@ 0x84
 8010e78:	f8d7 907c 	ldr.w	r9, [r7, #124]	@ 0x7c
 8010e7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010e80:	4630      	mov	r0, r6
 8010e82:	ecb5 0a01 	vldmia	r5!, {s0}
 8010e86:	3604      	adds	r6, #4
 8010e88:	9207      	str	r2, [sp, #28]
 8010e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010e8e:	e9cd b205 	strd	fp, r2, [sp, #20]
 8010e92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010e96:	9204      	str	r2, [sp, #16]
 8010e98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010e9c:	9203      	str	r2, [sp, #12]
 8010e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010ea2:	9202      	str	r2, [sp, #8]
 8010ea4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010ea8:	e9cd 8200 	strd	r8, r2, [sp]
 8010eac:	4622      	mov	r2, r4
 8010eae:	444c      	add	r4, r9
 8010eb0:	e9c7 3124 	strd	r3, r1, [r7, #144]	@ 0x90
 8010eb4:	f7ff fbec 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010eb8:	45aa      	cmp	sl, r5
 8010eba:	e9d7 3124 	ldrd	r3, r1, [r7, #144]	@ 0x90
 8010ebe:	d1dd      	bne.n	8010e7c <forward_lite_conv2d_if32of32wf32_pool+0x308>
 8010ec0:	f8d7 a08c 	ldr.w	sl, [r7, #140]	@ 0x8c
 8010ec4:	e9d7 b920 	ldrd	fp, r9, [r7, #128]	@ 0x80
 8010ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dd29      	ble.n	8010f24 <forward_lite_conv2d_if32of32wf32_pool+0x3b0>
 8010ed0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f000 80f5 	beq.w	80110c4 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 8010eda:	464e      	mov	r6, r9
 8010edc:	2400      	movs	r4, #0
 8010ede:	f8d7 9158 	ldr.w	r9, [r7, #344]	@ 0x158
 8010ee2:	4653      	mov	r3, sl
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4642      	mov	r2, r8
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f8d7 5150 	ldr.w	r5, [r7, #336]	@ 0x150
 8010eee:	44ca      	add	sl, r9
 8010ef0:	47a8      	blx	r5
 8010ef2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010ef6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8010efa:	3401      	adds	r4, #1
 8010efc:	4416      	add	r6, r2
 8010efe:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8010f02:	ebaa 0303 	sub.w	r3, sl, r3
 8010f06:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8010f0a:	b224      	sxth	r4, r4
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	bfa8      	it	ge
 8010f10:	468a      	movge	sl, r1
 8010f12:	455e      	cmp	r6, fp
 8010f14:	d301      	bcc.n	8010f1a <forward_lite_conv2d_if32of32wf32_pool+0x3a6>
 8010f16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f18:	441e      	add	r6, r3
 8010f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010f1e:	42a3      	cmp	r3, r4
 8010f20:	d1df      	bne.n	8010ee2 <forward_lite_conv2d_if32of32wf32_pool+0x36e>
 8010f22:	46b1      	mov	r9, r6
 8010f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010f28:	3301      	adds	r3, #1
 8010f2a:	b21b      	sxth	r3, r3
 8010f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010f30:	e6f3      	b.n	8010d1a <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8010f32:	bf00      	nop
 8010f34:	00000000 	.word	0x00000000
 8010f38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f3e:	fb02 f203 	mul.w	r2, r2, r3
 8010f42:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010f46:	eba9 0282 	sub.w	r2, r9, r2, lsl #2
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d901      	bls.n	8010f52 <forward_lite_conv2d_if32of32wf32_pool+0x3de>
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	441a      	add	r2, r3
 8010f52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d214      	bcs.n	8010f84 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 8010f5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010f5c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8010f60:	428b      	cmp	r3, r1
 8010f62:	d00f      	beq.n	8010f84 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 8010f64:	4593      	cmp	fp, r2
 8010f66:	d90d      	bls.n	8010f84 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 8010f68:	4649      	mov	r1, r9
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	f853 0b04 	ldr.w	r0, [r3], #4
 8010f70:	459b      	cmp	fp, r3
 8010f72:	f841 0b04 	str.w	r0, [r1], #4
 8010f76:	d8f9      	bhi.n	8010f6c <forward_lite_conv2d_if32of32wf32_pool+0x3f8>
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	1a9b      	subs	r3, r3, r2
 8010f7c:	f023 0303 	bic.w	r3, r3, #3
 8010f80:	3304      	adds	r3, #4
 8010f82:	4499      	add	r9, r3
 8010f84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010f86:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8010f88:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8010f8c:	440a      	add	r2, r1
 8010f8e:	6a39      	ldr	r1, [r7, #32]
 8010f90:	4489      	add	r9, r1
 8010f92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010f94:	1ad2      	subs	r2, r2, r3
 8010f96:	440b      	add	r3, r1
 8010f98:	45cb      	cmp	fp, r9
 8010f9a:	b212      	sxth	r2, r2
 8010f9c:	b21b      	sxth	r3, r3
 8010f9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010fa4:	f63f aeb9 	bhi.w	8010d1a <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8010fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010faa:	4499      	add	r9, r3
 8010fac:	45cb      	cmp	fp, r9
 8010fae:	d9fc      	bls.n	8010faa <forward_lite_conv2d_if32of32wf32_pool+0x436>
 8010fb0:	e6b3      	b.n	8010d1a <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8010fb2:	466b      	mov	r3, sp
 8010fb4:	f1b8 0f00 	cmp.w	r8, #0
 8010fb8:	ee09 3a90 	vmov	s19, r3
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	ebad 0d03 	sub.w	sp, sp, r3
 8010fc2:	aa0a      	add	r2, sp, #40	@ 0x28
 8010fc4:	dd74      	ble.n	80110b0 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 8010fc6:	69fb      	ldr	r3, [r7, #28]
 8010fc8:	464e      	mov	r6, r9
 8010fca:	f8c7 9018 	str.w	r9, [r7, #24]
 8010fce:	444b      	add	r3, r9
 8010fd0:	693c      	ldr	r4, [r7, #16]
 8010fd2:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8010fd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8010fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fda:	4699      	mov	r9, r3
 8010fdc:	ee19 3a10 	vmov	r3, s18
 8010fe0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010fe2:	b138      	cbz	r0, 8010ff4 <forward_lite_conv2d_if32of32wf32_pool+0x480>
 8010fe4:	4648      	mov	r0, r9
 8010fe6:	4694      	mov	ip, r2
 8010fe8:	f850 eb04 	ldr.w	lr, [r0], #4
 8010fec:	4284      	cmp	r4, r0
 8010fee:	f84c eb04 	str.w	lr, [ip], #4
 8010ff2:	d1f9      	bne.n	8010fe8 <forward_lite_conv2d_if32of32wf32_pool+0x474>
 8010ff4:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8010ff8:	b370      	cbz	r0, 8011058 <forward_lite_conv2d_if32of32wf32_pool+0x4e4>
 8010ffa:	ecb5 0a01 	vldmia	r5!, {s0}
 8010ffe:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8011000:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 8011004:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 8011008:	4481      	add	r9, r0
 801100a:	4404      	add	r4, r0
 801100c:	4630      	mov	r0, r6
 801100e:	9507      	str	r5, [sp, #28]
 8011010:	3604      	adds	r6, #4
 8011012:	f8d7 50a8 	ldr.w	r5, [r7, #168]	@ 0xa8
 8011016:	9506      	str	r5, [sp, #24]
 8011018:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 801101c:	9505      	str	r5, [sp, #20]
 801101e:	f8d7 50b8 	ldr.w	r5, [r7, #184]	@ 0xb8
 8011022:	9504      	str	r5, [sp, #16]
 8011024:	f8d7 50b0 	ldr.w	r5, [r7, #176]	@ 0xb0
 8011028:	9503      	str	r5, [sp, #12]
 801102a:	f8d7 50c4 	ldr.w	r5, [r7, #196]	@ 0xc4
 801102e:	9502      	str	r5, [sp, #8]
 8011030:	f8d7 50b4 	ldr.w	r5, [r7, #180]	@ 0xb4
 8011034:	e9cd 8500 	strd	r8, r5, [sp]
 8011038:	e9c7 3223 	strd	r3, r2, [r7, #140]	@ 0x8c
 801103c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8011040:	f7ff fb26 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011046:	42b3      	cmp	r3, r6
 8011048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801104c:	e9d7 2124 	ldrd	r2, r1, [r7, #144]	@ 0x90
 8011050:	d02c      	beq.n	80110ac <forward_lite_conv2d_if32of32wf32_pool+0x538>
 8011052:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 8011056:	e7c3      	b.n	8010fe0 <forward_lite_conv2d_if32of32wf32_pool+0x46c>
 8011058:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801105c:	eeb0 0a48 	vmov.f32	s0, s16
 8011060:	9007      	str	r0, [sp, #28]
 8011062:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8011066:	9006      	str	r0, [sp, #24]
 8011068:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801106c:	9005      	str	r0, [sp, #20]
 801106e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8011072:	9004      	str	r0, [sp, #16]
 8011074:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8011078:	9003      	str	r0, [sp, #12]
 801107a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 801107e:	9002      	str	r0, [sp, #8]
 8011080:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8011084:	e9cd 8000 	strd	r8, r0, [sp]
 8011088:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801108a:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 801108e:	4481      	add	r9, r0
 8011090:	4404      	add	r4, r0
 8011092:	4630      	mov	r0, r6
 8011094:	3604      	adds	r6, #4
 8011096:	e9c7 3223 	strd	r3, r2, [r7, #140]	@ 0x8c
 801109a:	f7ff faf9 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801109e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80110a0:	42b3      	cmp	r3, r6
 80110a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80110a6:	e9d7 2124 	ldrd	r2, r1, [r7, #144]	@ 0x90
 80110aa:	d199      	bne.n	8010fe0 <forward_lite_conv2d_if32of32wf32_pool+0x46c>
 80110ac:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80110b0:	ee19 3a90 	vmov	r3, s19
 80110b4:	469d      	mov	sp, r3
 80110b6:	e707      	b.n	8010ec8 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 80110b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80110bc:	68f9      	ldr	r1, [r7, #12]
 80110be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80110c2:	e6ae      	b.n	8010e22 <forward_lite_conv2d_if32of32wf32_pool+0x2ae>
 80110c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80110c8:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 80110ca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80110ce:	4489      	add	r9, r1
 80110d0:	3301      	adds	r3, #1
 80110d2:	45cb      	cmp	fp, r9
 80110d4:	b21a      	sxth	r2, r3
 80110d6:	bf98      	it	ls
 80110d8:	44a1      	addls	r9, r4
 80110da:	4282      	cmp	r2, r0
 80110dc:	dbf7      	blt.n	80110ce <forward_lite_conv2d_if32of32wf32_pool+0x55a>
 80110de:	e721      	b.n	8010f24 <forward_lite_conv2d_if32of32wf32_pool+0x3b0>
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	464c      	mov	r4, r9
 80110e4:	f8c7 a090 	str.w	sl, [r7, #144]	@ 0x90
 80110e8:	eb09 0603 	add.w	r6, r9, r3
 80110ec:	f8c7 b08c 	str.w	fp, [r7, #140]	@ 0x8c
 80110f0:	f8c7 9084 	str.w	r9, [r7, #132]	@ 0x84
 80110f4:	4693      	mov	fp, r2
 80110f6:	46b2      	mov	sl, r6
 80110f8:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 80110fa:	f8d7 60b8 	ldr.w	r6, [r7, #184]	@ 0xb8
 80110fe:	ee19 3a10 	vmov	r3, s18
 8011102:	f8d7 907c 	ldr.w	r9, [r7, #124]	@ 0x7c
 8011106:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801110a:	4620      	mov	r0, r4
 801110c:	3404      	adds	r4, #4
 801110e:	eeb0 0a48 	vmov.f32	s0, s16
 8011112:	9207      	str	r2, [sp, #28]
 8011114:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011118:	9604      	str	r6, [sp, #16]
 801111a:	e9cd b205 	strd	fp, r2, [sp, #20]
 801111e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011122:	9203      	str	r2, [sp, #12]
 8011124:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011128:	9202      	str	r2, [sp, #8]
 801112a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801112e:	e9cd 8200 	strd	r8, r2, [sp]
 8011132:	462a      	mov	r2, r5
 8011134:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011138:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 801113c:	444d      	add	r5, r9
 801113e:	f7ff faa7 	bl	8010690 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011142:	45a2      	cmp	sl, r4
 8011144:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8011148:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801114c:	d1db      	bne.n	8011106 <forward_lite_conv2d_if32of32wf32_pool+0x592>
 801114e:	f8d7 9084 	ldr.w	r9, [r7, #132]	@ 0x84
 8011152:	e9d7 ba23 	ldrd	fp, sl, [r7, #140]	@ 0x8c
 8011156:	e6b7      	b.n	8010ec8 <forward_lite_conv2d_if32of32wf32_pool+0x354>

08011158 <forward_lite_nl_softmax_if32of32_kernel>:
 8011158:	2a01      	cmp	r2, #1
 801115a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801115e:	4617      	mov	r7, r2
 8011160:	ed2d 8b02 	vpush	{d8}
 8011164:	ed91 8a00 	vldr	s16, [r1]
 8011168:	d932      	bls.n	80111d0 <forward_lite_nl_softmax_if32of32_kernel+0x78>
 801116a:	1d0b      	adds	r3, r1, #4
 801116c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011170:	ecf3 7a01 	vldmia	r3!, {s15}
 8011174:	429a      	cmp	r2, r3
 8011176:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801117a:	d1f9      	bne.n	8011170 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 801117c:	4606      	mov	r6, r0
 801117e:	460d      	mov	r5, r1
 8011180:	2400      	movs	r4, #0
 8011182:	eddf 8a16 	vldr	s17, [pc, #88]	@ 80111dc <forward_lite_nl_softmax_if32of32_kernel+0x84>
 8011186:	4680      	mov	r8, r0
 8011188:	ecb5 0a01 	vldmia	r5!, {s0}
 801118c:	3401      	adds	r4, #1
 801118e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011192:	f005 f8b7 	bl	8016304 <expf>
 8011196:	42a7      	cmp	r7, r4
 8011198:	ee78 8a80 	vadd.f32	s17, s17, s0
 801119c:	eca8 0a01 	vstmia	r8!, {s0}
 80111a0:	d8f2      	bhi.n	8011188 <forward_lite_nl_softmax_if32of32_kernel+0x30>
 80111a2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80111a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111aa:	d00d      	beq.n	80111c8 <forward_lite_nl_softmax_if32of32_kernel+0x70>
 80111ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80111b0:	2300      	movs	r3, #0
 80111b2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80111b6:	edd6 7a00 	vldr	s15, [r6]
 80111ba:	3301      	adds	r3, #1
 80111bc:	429f      	cmp	r7, r3
 80111be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111c2:	ece6 7a01 	vstmia	r6!, {s15}
 80111c6:	d8f6      	bhi.n	80111b6 <forward_lite_nl_softmax_if32of32_kernel+0x5e>
 80111c8:	ecbd 8b02 	vpop	{d8}
 80111cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d0:	2a00      	cmp	r2, #0
 80111d2:	d1d3      	bne.n	801117c <forward_lite_nl_softmax_if32of32_kernel+0x24>
 80111d4:	ecbd 8b02 	vpop	{d8}
 80111d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111dc:	00000000 	.word	0x00000000

080111e0 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80111e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80111e4:	ed93 7a00 	vldr	s14, [r3]
 80111e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80111ec:	ed93 6a01 	vldr	s12, [r3, #4]
 80111f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f4:	d42b      	bmi.n	801124e <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80111f6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80111fa:	4413      	add	r3, r2
 80111fc:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011200:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8011204:	4291      	cmp	r1, r2
 8011206:	d821      	bhi.n	801124c <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8011208:	f10c 0104 	add.w	r1, ip, #4
 801120c:	1d13      	adds	r3, r2, #4
 801120e:	eba2 020c 	sub.w	r2, r2, ip
 8011212:	4408      	add	r0, r1
 8011214:	e00c      	b.n	8011230 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801121a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011222:	db01      	blt.n	8011228 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8011224:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011228:	4293      	cmp	r3, r2
 801122a:	ed60 7a01 	vstmdb	r0!, {s15}
 801122e:	d00c      	beq.n	801124a <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8011230:	ed73 7a01 	vldmdb	r3!, {s15}
 8011234:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123c:	daeb      	bge.n	8011216 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 801123e:	eef0 7a66 	vmov.f32	s15, s13
 8011242:	4293      	cmp	r3, r2
 8011244:	ed60 7a01 	vstmdb	r0!, {s15}
 8011248:	d1f2      	bne.n	8011230 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 801124a:	4770      	bx	lr
 801124c:	4770      	bx	lr
 801124e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011252:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011256:	4413      	add	r3, r2
 8011258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801125c:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8011260:	b500      	push	{lr}
 8011262:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8011266:	d019      	beq.n	801129c <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8011268:	4561      	cmp	r1, ip
 801126a:	d815      	bhi.n	8011298 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801126c:	f10e 0204 	add.w	r2, lr, #4
 8011270:	f10c 0304 	add.w	r3, ip, #4
 8011274:	ebac 010e 	sub.w	r1, ip, lr
 8011278:	4402      	add	r2, r0
 801127a:	ed73 7a01 	vldmdb	r3!, {s15}
 801127e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011282:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801128e:	d827      	bhi.n	80112e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8011290:	428b      	cmp	r3, r1
 8011292:	ed62 6a01 	vstmdb	r2!, {s13}
 8011296:	d1f0      	bne.n	801127a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011298:	f85d fb04 	ldr.w	pc, [sp], #4
 801129c:	4561      	cmp	r1, ip
 801129e:	d8fb      	bhi.n	8011298 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112a0:	f10e 0204 	add.w	r2, lr, #4
 80112a4:	f10c 0304 	add.w	r3, ip, #4
 80112a8:	ebac 010e 	sub.w	r1, ip, lr
 80112ac:	f04f 0c00 	mov.w	ip, #0
 80112b0:	4402      	add	r2, r0
 80112b2:	ed73 7a01 	vldmdb	r3!, {s15}
 80112b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112be:	d40a      	bmi.n	80112d6 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80112c0:	428b      	cmp	r3, r1
 80112c2:	f842 cd04 	str.w	ip, [r2, #-4]!
 80112c6:	d0e7      	beq.n	8011298 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112c8:	ed73 7a01 	vldmdb	r3!, {s15}
 80112cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d4:	d5f4      	bpl.n	80112c0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80112d6:	428b      	cmp	r3, r1
 80112d8:	ed62 7a01 	vstmdb	r2!, {s15}
 80112dc:	d1e9      	bne.n	80112b2 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80112de:	e7db      	b.n	8011298 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112e0:	428b      	cmp	r3, r1
 80112e2:	ed62 7a01 	vstmdb	r2!, {s15}
 80112e6:	d1c8      	bne.n	801127a <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80112e8:	e7d6      	b.n	8011298 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112ea:	bf00      	nop

080112ec <pool_func_mp_array_f32>:
 80112ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f0:	b091      	sub	sp, #68	@ 0x44
 80112f2:	468b      	mov	fp, r1
 80112f4:	469c      	mov	ip, r3
 80112f6:	4690      	mov	r8, r2
 80112f8:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80112fc:	4681      	mov	r9, r0
 80112fe:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8011302:	9101      	str	r1, [sp, #4]
 8011304:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8011308:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 801130c:	9105      	str	r1, [sp, #20]
 801130e:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8011312:	9304      	str	r3, [sp, #16]
 8011314:	9106      	str	r1, [sp, #24]
 8011316:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801131a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 801131e:	ea52 0403 	orrs.w	r4, r2, r3
 8011322:	9102      	str	r1, [sp, #8]
 8011324:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8011328:	9103      	str	r1, [sp, #12]
 801132a:	d173      	bne.n	8011414 <pool_func_mp_array_f32+0x128>
 801132c:	9904      	ldr	r1, [sp, #16]
 801132e:	9d02      	ldr	r5, [sp, #8]
 8011330:	eba1 000b 	sub.w	r0, r1, fp
 8011334:	9e05      	ldr	r6, [sp, #20]
 8011336:	1e69      	subs	r1, r5, #1
 8011338:	3801      	subs	r0, #1
 801133a:	fb11 0106 	smlabb	r1, r1, r6, r0
 801133e:	0409      	lsls	r1, r1, #16
 8011340:	d568      	bpl.n	8011414 <pool_func_mp_array_f32+0x128>
 8011342:	9901      	ldr	r1, [sp, #4]
 8011344:	9e03      	ldr	r6, [sp, #12]
 8011346:	eba1 0008 	sub.w	r0, r1, r8
 801134a:	9f06      	ldr	r7, [sp, #24]
 801134c:	1e71      	subs	r1, r6, #1
 801134e:	3801      	subs	r0, #1
 8011350:	fb11 0107 	smlabb	r1, r1, r7, r0
 8011354:	040f      	lsls	r7, r1, #16
 8011356:	d55d      	bpl.n	8011414 <pool_func_mp_array_f32+0x128>
 8011358:	2e00      	cmp	r6, #0
 801135a:	d058      	beq.n	801140e <pool_func_mp_array_f32+0x122>
 801135c:	2d00      	cmp	r5, #0
 801135e:	d056      	beq.n	801140e <pool_func_mp_array_f32+0x122>
 8011360:	4663      	mov	r3, ip
 8011362:	2b00      	cmp	r3, #0
 8011364:	d053      	beq.n	801140e <pool_func_mp_array_f32+0x122>
 8011366:	2b01      	cmp	r3, #1
 8011368:	f040 814a 	bne.w	8011600 <pool_func_mp_array_f32+0x314>
 801136c:	46a2      	mov	sl, r4
 801136e:	4623      	mov	r3, r4
 8011370:	9407      	str	r4, [sp, #28]
 8011372:	9a02      	ldr	r2, [sp, #8]
 8011374:	2700      	movs	r7, #0
 8011376:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801137a:	fb02 f303 	mul.w	r3, r2, r3
 801137e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011382:	46be      	mov	lr, r7
 8011384:	46bc      	mov	ip, r7
 8011386:	9308      	str	r3, [sp, #32]
 8011388:	fa0f f38a 	sxth.w	r3, sl
 801138c:	9309      	str	r3, [sp, #36]	@ 0x24
 801138e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8011390:	b23d      	sxth	r5, r7
 8011392:	9b08      	ldr	r3, [sp, #32]
 8011394:	fa0f f088 	sxth.w	r0, r8
 8011398:	42b4      	cmp	r4, r6
 801139a:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80115fc <pool_func_mp_array_f32+0x310>
 801139e:	449c      	add	ip, r3
 80113a0:	da12      	bge.n	80113c8 <pool_func_mp_array_f32+0xdc>
 80113a2:	4285      	cmp	r5, r0
 80113a4:	da0c      	bge.n	80113c0 <pool_func_mp_array_f32+0xd4>
 80113a6:	fb04 520b 	mla	r2, r4, fp, r5
 80113aa:	462b      	mov	r3, r5
 80113ac:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80113b0:	3301      	adds	r3, #1
 80113b2:	ecb2 7a01 	vldmia	r2!, {s14}
 80113b6:	b219      	sxth	r1, r3
 80113b8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80113bc:	4281      	cmp	r1, r0
 80113be:	dbf7      	blt.n	80113b0 <pool_func_mp_array_f32+0xc4>
 80113c0:	3401      	adds	r4, #1
 80113c2:	b224      	sxth	r4, r4
 80113c4:	42b4      	cmp	r4, r6
 80113c6:	dbec      	blt.n	80113a2 <pool_func_mp_array_f32+0xb6>
 80113c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80113ca:	f10e 0e01 	add.w	lr, lr, #1
 80113ce:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80113d2:	9b05      	ldr	r3, [sp, #20]
 80113d4:	fa0f fe8e 	sxth.w	lr, lr
 80113d8:	4498      	add	r8, r3
 80113da:	441f      	add	r7, r3
 80113dc:	9b02      	ldr	r3, [sp, #8]
 80113de:	edcc 7a00 	vstr	s15, [ip]
 80113e2:	fa1f f888 	uxth.w	r8, r8
 80113e6:	4573      	cmp	r3, lr
 80113e8:	b2bf      	uxth	r7, r7
 80113ea:	46f4      	mov	ip, lr
 80113ec:	dccf      	bgt.n	801138e <pool_func_mp_array_f32+0xa2>
 80113ee:	9a07      	ldr	r2, [sp, #28]
 80113f0:	9906      	ldr	r1, [sp, #24]
 80113f2:	9b01      	ldr	r3, [sp, #4]
 80113f4:	3201      	adds	r2, #1
 80113f6:	448a      	add	sl, r1
 80113f8:	b212      	sxth	r2, r2
 80113fa:	440b      	add	r3, r1
 80113fc:	9903      	ldr	r1, [sp, #12]
 80113fe:	fa1f fa8a 	uxth.w	sl, sl
 8011402:	b29b      	uxth	r3, r3
 8011404:	9207      	str	r2, [sp, #28]
 8011406:	4291      	cmp	r1, r2
 8011408:	9301      	str	r3, [sp, #4]
 801140a:	4613      	mov	r3, r2
 801140c:	dcb1      	bgt.n	8011372 <pool_func_mp_array_f32+0x86>
 801140e:	b011      	add	sp, #68	@ 0x44
 8011410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011414:	9903      	ldr	r1, [sp, #12]
 8011416:	2900      	cmp	r1, #0
 8011418:	d0f9      	beq.n	801140e <pool_func_mp_array_f32+0x122>
 801141a:	9902      	ldr	r1, [sp, #8]
 801141c:	2900      	cmp	r1, #0
 801141e:	d0f6      	beq.n	801140e <pool_func_mp_array_f32+0x122>
 8011420:	4661      	mov	r1, ip
 8011422:	2900      	cmp	r1, #0
 8011424:	d0f3      	beq.n	801140e <pool_func_mp_array_f32+0x122>
 8011426:	2901      	cmp	r1, #1
 8011428:	9901      	ldr	r1, [sp, #4]
 801142a:	d163      	bne.n	80114f4 <pool_func_mp_array_f32+0x208>
 801142c:	1a8a      	subs	r2, r1, r2
 801142e:	9904      	ldr	r1, [sp, #16]
 8011430:	1ac9      	subs	r1, r1, r3
 8011432:	425b      	negs	r3, r3
 8011434:	b292      	uxth	r2, r2
 8011436:	b29b      	uxth	r3, r3
 8011438:	9204      	str	r2, [sp, #16]
 801143a:	b28a      	uxth	r2, r1
 801143c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801143e:	2300      	movs	r3, #0
 8011440:	920a      	str	r2, [sp, #40]	@ 0x28
 8011442:	9307      	str	r3, [sp, #28]
 8011444:	9a02      	ldr	r2, [sp, #8]
 8011446:	2700      	movs	r7, #0
 8011448:	fb02 f303 	mul.w	r3, r2, r3
 801144c:	9a04      	ldr	r2, [sp, #16]
 801144e:	46bc      	mov	ip, r7
 8011450:	9308      	str	r3, [sp, #32]
 8011452:	b216      	sxth	r6, r2
 8011454:	9b01      	ldr	r3, [sp, #4]
 8011456:	1ad3      	subs	r3, r2, r3
 8011458:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 801145c:	b21b      	sxth	r3, r3
 801145e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011460:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011462:	fa0f f58e 	sxth.w	r5, lr
 8011466:	9b08      	ldr	r3, [sp, #32]
 8011468:	fa0f f48a 	sxth.w	r4, sl
 801146c:	428e      	cmp	r6, r1
 801146e:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80115fc <pool_func_mp_array_f32+0x310>
 8011472:	449c      	add	ip, r3
 8011474:	dd1c      	ble.n	80114b0 <pool_func_mp_array_f32+0x1c4>
 8011476:	42a5      	cmp	r5, r4
 8011478:	da16      	bge.n	80114a8 <pool_func_mp_array_f32+0x1bc>
 801147a:	4588      	cmp	r8, r1
 801147c:	fb01 f20b 	mul.w	r2, r1, fp
 8011480:	dd12      	ble.n	80114a8 <pool_func_mp_array_f32+0x1bc>
 8011482:	442a      	add	r2, r5
 8011484:	462b      	mov	r3, r5
 8011486:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801148a:	ea41 0003 	orr.w	r0, r1, r3
 801148e:	0400      	lsls	r0, r0, #16
 8011490:	d405      	bmi.n	801149e <pool_func_mp_array_f32+0x1b2>
 8011492:	459b      	cmp	fp, r3
 8011494:	dd03      	ble.n	801149e <pool_func_mp_array_f32+0x1b2>
 8011496:	ed92 7a00 	vldr	s14, [r2]
 801149a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801149e:	3301      	adds	r3, #1
 80114a0:	3204      	adds	r2, #4
 80114a2:	b218      	sxth	r0, r3
 80114a4:	42a0      	cmp	r0, r4
 80114a6:	dbf0      	blt.n	801148a <pool_func_mp_array_f32+0x19e>
 80114a8:	3101      	adds	r1, #1
 80114aa:	b209      	sxth	r1, r1
 80114ac:	42b1      	cmp	r1, r6
 80114ae:	dbe2      	blt.n	8011476 <pool_func_mp_array_f32+0x18a>
 80114b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80114b2:	3701      	adds	r7, #1
 80114b4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80114b8:	9b05      	ldr	r3, [sp, #20]
 80114ba:	b23f      	sxth	r7, r7
 80114bc:	449a      	add	sl, r3
 80114be:	449e      	add	lr, r3
 80114c0:	9b02      	ldr	r3, [sp, #8]
 80114c2:	edcc 7a00 	vstr	s15, [ip]
 80114c6:	fa1f fa8a 	uxth.w	sl, sl
 80114ca:	42bb      	cmp	r3, r7
 80114cc:	fa1f fe8e 	uxth.w	lr, lr
 80114d0:	46bc      	mov	ip, r7
 80114d2:	dcc5      	bgt.n	8011460 <pool_func_mp_array_f32+0x174>
 80114d4:	9a07      	ldr	r2, [sp, #28]
 80114d6:	9b04      	ldr	r3, [sp, #16]
 80114d8:	9906      	ldr	r1, [sp, #24]
 80114da:	3201      	adds	r2, #1
 80114dc:	440b      	add	r3, r1
 80114de:	b212      	sxth	r2, r2
 80114e0:	9903      	ldr	r1, [sp, #12]
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	9207      	str	r2, [sp, #28]
 80114e6:	4291      	cmp	r1, r2
 80114e8:	9304      	str	r3, [sp, #16]
 80114ea:	4613      	mov	r3, r2
 80114ec:	dcaa      	bgt.n	8011444 <pool_func_mp_array_f32+0x158>
 80114ee:	b011      	add	sp, #68	@ 0x44
 80114f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f4:	1a88      	subs	r0, r1, r2
 80114f6:	9904      	ldr	r1, [sp, #16]
 80114f8:	4252      	negs	r2, r2
 80114fa:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80114fe:	1ac9      	subs	r1, r1, r3
 8011500:	425b      	negs	r3, r3
 8011502:	b292      	uxth	r2, r2
 8011504:	46e6      	mov	lr, ip
 8011506:	b29b      	uxth	r3, r3
 8011508:	b280      	uxth	r0, r0
 801150a:	9208      	str	r2, [sp, #32]
 801150c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801150e:	b28a      	uxth	r2, r1
 8011510:	2300      	movs	r3, #0
 8011512:	9007      	str	r0, [sp, #28]
 8011514:	920e      	str	r2, [sp, #56]	@ 0x38
 8011516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011518:	9a02      	ldr	r2, [sp, #8]
 801151a:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 801151e:	fb02 f303 	mul.w	r3, r2, r3
 8011522:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011526:	920a      	str	r2, [sp, #40]	@ 0x28
 8011528:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801152a:	930d      	str	r3, [sp, #52]	@ 0x34
 801152c:	2300      	movs	r3, #0
 801152e:	9201      	str	r2, [sp, #4]
 8011530:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011532:	930c      	str	r3, [sp, #48]	@ 0x30
 8011534:	9204      	str	r2, [sp, #16]
 8011536:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011538:	f04f 0c00 	mov.w	ip, #0
 801153c:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8011540:	4413      	add	r3, r2
 8011542:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8011546:	4667      	mov	r7, ip
 8011548:	fb0e f303 	mul.w	r3, lr, r3
 801154c:	9309      	str	r3, [sp, #36]	@ 0x24
 801154e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011550:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80115fc <pool_func_mp_array_f32+0x310>
 8011554:	42b1      	cmp	r1, r6
 8011556:	da1e      	bge.n	8011596 <pool_func_mp_array_f32+0x2aa>
 8011558:	42a5      	cmp	r5, r4
 801155a:	da18      	bge.n	801158e <pool_func_mp_array_f32+0x2a2>
 801155c:	4541      	cmp	r1, r8
 801155e:	fb01 f30b 	mul.w	r3, r1, fp
 8011562:	da14      	bge.n	801158e <pool_func_mp_array_f32+0x2a2>
 8011564:	195a      	adds	r2, r3, r5
 8011566:	462b      	mov	r3, r5
 8011568:	fb0e 7202 	mla	r2, lr, r2, r7
 801156c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011570:	ea41 0003 	orr.w	r0, r1, r3
 8011574:	0400      	lsls	r0, r0, #16
 8011576:	d405      	bmi.n	8011584 <pool_func_mp_array_f32+0x298>
 8011578:	459b      	cmp	fp, r3
 801157a:	dd03      	ble.n	8011584 <pool_func_mp_array_f32+0x298>
 801157c:	ed92 7a00 	vldr	s14, [r2]
 8011580:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011584:	3301      	adds	r3, #1
 8011586:	4452      	add	r2, sl
 8011588:	b218      	sxth	r0, r3
 801158a:	42a0      	cmp	r0, r4
 801158c:	dbf0      	blt.n	8011570 <pool_func_mp_array_f32+0x284>
 801158e:	3101      	adds	r1, #1
 8011590:	b209      	sxth	r1, r1
 8011592:	42b1      	cmp	r1, r6
 8011594:	dbe0      	blt.n	8011558 <pool_func_mp_array_f32+0x26c>
 8011596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011598:	f10c 0c01 	add.w	ip, ip, #1
 801159c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801159e:	443b      	add	r3, r7
 80115a0:	fa0f fc8c 	sxth.w	ip, ip
 80115a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115a8:	45f4      	cmp	ip, lr
 80115aa:	4667      	mov	r7, ip
 80115ac:	edc3 7a00 	vstr	s15, [r3]
 80115b0:	dbcd      	blt.n	801154e <pool_func_mp_array_f32+0x262>
 80115b2:	9a01      	ldr	r2, [sp, #4]
 80115b4:	9805      	ldr	r0, [sp, #20]
 80115b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80115b8:	4402      	add	r2, r0
 80115ba:	9b04      	ldr	r3, [sp, #16]
 80115bc:	3101      	adds	r1, #1
 80115be:	b292      	uxth	r2, r2
 80115c0:	4403      	add	r3, r0
 80115c2:	b209      	sxth	r1, r1
 80115c4:	9201      	str	r2, [sp, #4]
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	9a02      	ldr	r2, [sp, #8]
 80115ca:	9304      	str	r3, [sp, #16]
 80115cc:	460b      	mov	r3, r1
 80115ce:	428a      	cmp	r2, r1
 80115d0:	910c      	str	r1, [sp, #48]	@ 0x30
 80115d2:	dcb0      	bgt.n	8011536 <pool_func_mp_array_f32+0x24a>
 80115d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80115d6:	9b08      	ldr	r3, [sp, #32]
 80115d8:	3101      	adds	r1, #1
 80115da:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80115de:	b209      	sxth	r1, r1
 80115e0:	4402      	add	r2, r0
 80115e2:	4403      	add	r3, r0
 80115e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80115e6:	b292      	uxth	r2, r2
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	9207      	str	r2, [sp, #28]
 80115ec:	9a03      	ldr	r2, [sp, #12]
 80115ee:	9308      	str	r3, [sp, #32]
 80115f0:	460b      	mov	r3, r1
 80115f2:	428a      	cmp	r2, r1
 80115f4:	dc90      	bgt.n	8011518 <pool_func_mp_array_f32+0x22c>
 80115f6:	b011      	add	sp, #68	@ 0x44
 80115f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fc:	cf000000 	.word	0xcf000000
 8011600:	4623      	mov	r3, r4
 8011602:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8011606:	46e0      	mov	r8, ip
 8011608:	9408      	str	r4, [sp, #32]
 801160a:	9409      	str	r4, [sp, #36]	@ 0x24
 801160c:	9a02      	ldr	r2, [sp, #8]
 801160e:	f04f 0c00 	mov.w	ip, #0
 8011612:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8011616:	fb02 f303 	mul.w	r3, r2, r3
 801161a:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 801161e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011620:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011624:	930d      	str	r3, [sp, #52]	@ 0x34
 8011626:	9b04      	ldr	r3, [sp, #16]
 8011628:	9307      	str	r3, [sp, #28]
 801162a:	4663      	mov	r3, ip
 801162c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801162e:	f04f 0e00 	mov.w	lr, #0
 8011632:	fa0f f58c 	sxth.w	r5, ip
 8011636:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801163a:	4413      	add	r3, r2
 801163c:	4676      	mov	r6, lr
 801163e:	fb08 f303 	mul.w	r3, r8, r3
 8011642:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011644:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8011646:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80115fc <pool_func_mp_array_f32+0x310>
 801164a:	42bc      	cmp	r4, r7
 801164c:	da15      	bge.n	801167a <pool_func_mp_array_f32+0x38e>
 801164e:	4285      	cmp	r5, r0
 8011650:	da0f      	bge.n	8011672 <pool_func_mp_array_f32+0x386>
 8011652:	fb0b 5304 	mla	r3, fp, r4, r5
 8011656:	462a      	mov	r2, r5
 8011658:	fb08 6303 	mla	r3, r8, r3, r6
 801165c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8011660:	3201      	adds	r2, #1
 8011662:	ed93 7a00 	vldr	s14, [r3]
 8011666:	4453      	add	r3, sl
 8011668:	b211      	sxth	r1, r2
 801166a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801166e:	4281      	cmp	r1, r0
 8011670:	dbf6      	blt.n	8011660 <pool_func_mp_array_f32+0x374>
 8011672:	3401      	adds	r4, #1
 8011674:	b224      	sxth	r4, r4
 8011676:	42bc      	cmp	r4, r7
 8011678:	dbe9      	blt.n	801164e <pool_func_mp_array_f32+0x362>
 801167a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801167c:	f10e 0e01 	add.w	lr, lr, #1
 8011680:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011682:	4433      	add	r3, r6
 8011684:	fa0f fe8e 	sxth.w	lr, lr
 8011688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801168c:	45c6      	cmp	lr, r8
 801168e:	4676      	mov	r6, lr
 8011690:	edc3 7a00 	vstr	s15, [r3]
 8011694:	dbd6      	blt.n	8011644 <pool_func_mp_array_f32+0x358>
 8011696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011698:	9905      	ldr	r1, [sp, #20]
 801169a:	9b07      	ldr	r3, [sp, #28]
 801169c:	3201      	adds	r2, #1
 801169e:	448c      	add	ip, r1
 80116a0:	b212      	sxth	r2, r2
 80116a2:	440b      	add	r3, r1
 80116a4:	9902      	ldr	r1, [sp, #8]
 80116a6:	fa1f fc8c 	uxth.w	ip, ip
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80116ae:	4291      	cmp	r1, r2
 80116b0:	9307      	str	r3, [sp, #28]
 80116b2:	4613      	mov	r3, r2
 80116b4:	dcba      	bgt.n	801162c <pool_func_mp_array_f32+0x340>
 80116b6:	9a01      	ldr	r2, [sp, #4]
 80116b8:	9806      	ldr	r0, [sp, #24]
 80116ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116bc:	4402      	add	r2, r0
 80116be:	9b08      	ldr	r3, [sp, #32]
 80116c0:	3101      	adds	r1, #1
 80116c2:	b292      	uxth	r2, r2
 80116c4:	4403      	add	r3, r0
 80116c6:	b209      	sxth	r1, r1
 80116c8:	9201      	str	r2, [sp, #4]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	9a03      	ldr	r2, [sp, #12]
 80116ce:	9308      	str	r3, [sp, #32]
 80116d0:	460b      	mov	r3, r1
 80116d2:	428a      	cmp	r2, r1
 80116d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80116d6:	dc99      	bgt.n	801160c <pool_func_mp_array_f32+0x320>
 80116d8:	e699      	b.n	801140e <pool_func_mp_array_f32+0x122>
 80116da:	bf00      	nop

080116dc <forward_lite_dense_if32of32wf32>:
 80116dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e0:	ed2d 8b0c 	vpush	{d8-d13}
 80116e4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80116e8:	6801      	ldr	r1, [r0, #0]
 80116ea:	b083      	sub	sp, #12
 80116ec:	fb02 f303 	mul.w	r3, r2, r3
 80116f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80116f4:	9100      	str	r1, [sp, #0]
 80116f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80116fa:	4299      	cmp	r1, r3
 80116fc:	9301      	str	r3, [sp, #4]
 80116fe:	f080 811c 	bcs.w	801193a <forward_lite_dense_if32of32wf32+0x25e>
 8011702:	4607      	mov	r7, r0
 8011704:	6904      	ldr	r4, [r0, #16]
 8011706:	0096      	lsls	r6, r2, #2
 8011708:	9b00      	ldr	r3, [sp, #0]
 801170a:	68bd      	ldr	r5, [r7, #8]
 801170c:	eb03 0e06 	add.w	lr, r3, r6
 8011710:	461e      	mov	r6, r3
 8011712:	459e      	cmp	lr, r3
 8011714:	f240 8103 	bls.w	801191e <forward_lite_dense_if32of32wf32+0x242>
 8011718:	f1a4 0c10 	sub.w	ip, r4, #16
 801171c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8011720:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8011724:	f10c 0c01 	add.w	ip, ip, #1
 8011728:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 801172c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8011730:	2c0f      	cmp	r4, #15
 8011732:	f240 8107 	bls.w	8011944 <forward_lite_dense_if32of32wf32+0x268>
 8011736:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 801173a:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 801173e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8011994 <forward_lite_dense_if32of32wf32+0x2b8>
 8011742:	4621      	mov	r1, r4
 8011744:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8011748:	3910      	subs	r1, #16
 801174a:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 801174e:	3340      	adds	r3, #64	@ 0x40
 8011750:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8011754:	290f      	cmp	r1, #15
 8011756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801175a:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 801175e:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8011762:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8011766:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 801176a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801176e:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8011772:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8011776:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 801177a:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 801177e:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8011782:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8011786:	eee5 7a86 	vfma.f32	s15, s11, s12
 801178a:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 801178e:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8011792:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8011796:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 801179a:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 801179e:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 80117a2:	eeed 7a26 	vfma.f32	s15, s26, s13
 80117a6:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 80117aa:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80117ae:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80117b2:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80117b6:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80117ba:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80117be:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80117c2:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80117c6:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80117ca:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80117ce:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80117d2:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80117d6:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80117da:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80117de:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80117e2:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80117e6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80117ea:	eee9 7a89 	vfma.f32	s15, s19, s18
 80117ee:	eee8 7a88 	vfma.f32	s15, s17, s16
 80117f2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80117f6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80117fa:	eee2 7a22 	vfma.f32	s15, s4, s5
 80117fe:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011802:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011806:	eee5 7a25 	vfma.f32	s15, s10, s11
 801180a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011812:	d897      	bhi.n	8011744 <forward_lite_dense_if32of32wf32+0x68>
 8011814:	eb05 020b 	add.w	r2, r5, fp
 8011818:	f004 010f 	and.w	r1, r4, #15
 801181c:	4663      	mov	r3, ip
 801181e:	2903      	cmp	r1, #3
 8011820:	d95f      	bls.n	80118e2 <forward_lite_dense_if32of32wf32+0x206>
 8011822:	edd2 6a01 	vldr	s13, [r2, #4]
 8011826:	1f08      	subs	r0, r1, #4
 8011828:	edd3 7a01 	vldr	s15, [r3, #4]
 801182c:	ed93 4a00 	vldr	s8, [r3]
 8011830:	2803      	cmp	r0, #3
 8011832:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011836:	edd2 4a00 	vldr	s9, [r2]
 801183a:	ed93 5a02 	vldr	s10, [r3, #8]
 801183e:	edd2 5a02 	vldr	s11, [r2, #8]
 8011842:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011846:	ed93 6a03 	vldr	s12, [r3, #12]
 801184a:	edd2 6a03 	vldr	s13, [r2, #12]
 801184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011852:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011856:	eee6 7a26 	vfma.f32	s15, s12, s13
 801185a:	eeb0 7a67 	vmov.f32	s14, s15
 801185e:	d938      	bls.n	80118d2 <forward_lite_dense_if32of32wf32+0x1f6>
 8011860:	edd2 6a05 	vldr	s13, [r2, #20]
 8011864:	f1a1 0a08 	sub.w	sl, r1, #8
 8011868:	edd3 7a05 	vldr	s15, [r3, #20]
 801186c:	ed93 4a04 	vldr	s8, [r3, #16]
 8011870:	f1ba 0f03 	cmp.w	sl, #3
 8011874:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011878:	edd2 4a04 	vldr	s9, [r2, #16]
 801187c:	ed93 5a06 	vldr	s10, [r3, #24]
 8011880:	edd2 5a06 	vldr	s11, [r2, #24]
 8011884:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011888:	ed93 6a07 	vldr	s12, [r3, #28]
 801188c:	edd2 6a07 	vldr	s13, [r2, #28]
 8011890:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011894:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011898:	ee37 7a27 	vadd.f32	s14, s14, s15
 801189c:	d919      	bls.n	80118d2 <forward_lite_dense_if32of32wf32+0x1f6>
 801189e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80118a2:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80118a6:	ed92 4a08 	vldr	s8, [r2, #32]
 80118aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80118ae:	edd3 4a08 	vldr	s9, [r3, #32]
 80118b2:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80118b6:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80118ba:	eee4 7a24 	vfma.f32	s15, s8, s9
 80118be:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80118c2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80118c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80118ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80118ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118d2:	0880      	lsrs	r0, r0, #2
 80118d4:	f001 0103 	and.w	r1, r1, #3
 80118d8:	3001      	adds	r0, #1
 80118da:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80118de:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80118e2:	b1a9      	cbz	r1, 8011910 <forward_lite_dense_if32of32wf32+0x234>
 80118e4:	edd3 6a00 	vldr	s13, [r3]
 80118e8:	3901      	subs	r1, #1
 80118ea:	edd2 7a00 	vldr	s15, [r2]
 80118ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118f2:	d00d      	beq.n	8011910 <forward_lite_dense_if32of32wf32+0x234>
 80118f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80118f8:	2901      	cmp	r1, #1
 80118fa:	edd2 7a01 	vldr	s15, [r2, #4]
 80118fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011902:	d005      	beq.n	8011910 <forward_lite_dense_if32of32wf32+0x234>
 8011904:	edd2 6a02 	vldr	s13, [r2, #8]
 8011908:	edd3 7a02 	vldr	s15, [r3, #8]
 801190c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011910:	eca6 7a01 	vstmia	r6!, {s14}
 8011914:	45b6      	cmp	lr, r6
 8011916:	444d      	add	r5, r9
 8011918:	f63f af0a 	bhi.w	8011730 <forward_lite_dense_if32of32wf32+0x54>
 801191c:	697a      	ldr	r2, [r7, #20]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	b9b3      	cbnz	r3, 8011950 <forward_lite_dense_if32of32wf32+0x274>
 8011922:	9b00      	ldr	r3, [sp, #0]
 8011924:	0096      	lsls	r6, r2, #2
 8011926:	9901      	ldr	r1, [sp, #4]
 8011928:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801192c:	693c      	ldr	r4, [r7, #16]
 801192e:	4299      	cmp	r1, r3
 8011930:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	f63f aee7 	bhi.w	8011708 <forward_lite_dense_if32of32wf32+0x2c>
 801193a:	b003      	add	sp, #12
 801193c:	ecbd 8b0c 	vpop	{d8-d13}
 8011940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011944:	4621      	mov	r1, r4
 8011946:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011994 <forward_lite_dense_if32of32wf32+0x2b8>
 801194a:	462a      	mov	r2, r5
 801194c:	4643      	mov	r3, r8
 801194e:	e766      	b.n	801181e <forward_lite_dense_if32of32wf32+0x142>
 8011950:	2a00      	cmp	r2, #0
 8011952:	d0e6      	beq.n	8011922 <forward_lite_dense_if32of32wf32+0x246>
 8011954:	9a00      	ldr	r2, [sp, #0]
 8011956:	ed93 7a00 	vldr	s14, [r3]
 801195a:	edd2 7a00 	vldr	s15, [r2]
 801195e:	4613      	mov	r3, r2
 8011960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011964:	edc2 7a00 	vstr	s15, [r2]
 8011968:	697a      	ldr	r2, [r7, #20]
 801196a:	2a01      	cmp	r2, #1
 801196c:	d9d9      	bls.n	8011922 <forward_lite_dense_if32of32wf32+0x246>
 801196e:	1d19      	adds	r1, r3, #4
 8011970:	2301      	movs	r3, #1
 8011972:	68fa      	ldr	r2, [r7, #12]
 8011974:	ed91 7a00 	vldr	s14, [r1]
 8011978:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801197c:	3301      	adds	r3, #1
 801197e:	edd2 7a00 	vldr	s15, [r2]
 8011982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011986:	ece1 7a01 	vstmia	r1!, {s15}
 801198a:	697a      	ldr	r2, [r7, #20]
 801198c:	429a      	cmp	r2, r3
 801198e:	d8f0      	bhi.n	8011972 <forward_lite_dense_if32of32wf32+0x296>
 8011990:	e7c7      	b.n	8011922 <forward_lite_dense_if32of32wf32+0x246>
 8011992:	bf00      	nop
 8011994:	00000000 	.word	0x00000000

08011998 <forward_lite_nl_relu_if32of32>:
 8011998:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801199c:	4413      	add	r3, r2
 801199e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80119a2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80119a6:	4291      	cmp	r1, r2
 80119a8:	d80f      	bhi.n	80119ca <forward_lite_nl_relu_if32of32+0x32>
 80119aa:	f10c 0104 	add.w	r1, ip, #4
 80119ae:	1d13      	adds	r3, r2, #4
 80119b0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80119cc <forward_lite_nl_relu_if32of32+0x34>
 80119b4:	eba2 020c 	sub.w	r2, r2, ip
 80119b8:	4408      	add	r0, r1
 80119ba:	ed73 7a01 	vldmdb	r3!, {s15}
 80119be:	4293      	cmp	r3, r2
 80119c0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80119c4:	ed60 7a01 	vstmdb	r0!, {s15}
 80119c8:	d1f7      	bne.n	80119ba <forward_lite_nl_relu_if32of32+0x22>
 80119ca:	4770      	bx	lr
 80119cc:	00000000 	.word	0x00000000

080119d0 <st_int8_copy>:
 80119d0:	4288      	cmp	r0, r1
 80119d2:	d010      	beq.n	80119f6 <st_int8_copy+0x26>
 80119d4:	b17a      	cbz	r2, 80119f6 <st_int8_copy+0x26>
 80119d6:	4288      	cmp	r0, r1
 80119d8:	eb00 0302 	add.w	r3, r0, r2
 80119dc:	d20c      	bcs.n	80119f8 <st_int8_copy+0x28>
 80119de:	428b      	cmp	r3, r1
 80119e0:	d90a      	bls.n	80119f8 <st_int8_copy+0x28>
 80119e2:	4283      	cmp	r3, r0
 80119e4:	440a      	add	r2, r1
 80119e6:	d906      	bls.n	80119f6 <st_int8_copy+0x26>
 80119e8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80119ec:	4283      	cmp	r3, r0
 80119ee:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80119f2:	d1f9      	bne.n	80119e8 <st_int8_copy+0x18>
 80119f4:	4770      	bx	lr
 80119f6:	4770      	bx	lr
 80119f8:	078b      	lsls	r3, r1, #30
 80119fa:	d102      	bne.n	8011a02 <st_int8_copy+0x32>
 80119fc:	e008      	b.n	8011a10 <st_int8_copy+0x40>
 80119fe:	2a00      	cmp	r2, #0
 8011a00:	d04c      	beq.n	8011a9c <st_int8_copy+0xcc>
 8011a02:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8011a06:	3a01      	subs	r2, #1
 8011a08:	f801 3b01 	strb.w	r3, [r1], #1
 8011a0c:	078b      	lsls	r3, r1, #30
 8011a0e:	d1f6      	bne.n	80119fe <st_int8_copy+0x2e>
 8011a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a14:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8011a18:	d05d      	beq.n	8011ad6 <st_int8_copy+0x106>
 8011a1a:	ea41 0300 	orr.w	r3, r1, r0
 8011a1e:	075b      	lsls	r3, r3, #29
 8011a20:	d13d      	bne.n	8011a9e <st_int8_copy+0xce>
 8011a22:	f1be 0f01 	cmp.w	lr, #1
 8011a26:	d03a      	beq.n	8011a9e <st_int8_copy+0xce>
 8011a28:	f100 0310 	add.w	r3, r0, #16
 8011a2c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011a30:	f101 0c10 	add.w	ip, r1, #16
 8011a34:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8011a38:	3310      	adds	r3, #16
 8011a3a:	f10c 0c10 	add.w	ip, ip, #16
 8011a3e:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8011a42:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8011a46:	4573      	cmp	r3, lr
 8011a48:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8011a4c:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8011a50:	d1f2      	bne.n	8011a38 <st_int8_copy+0x68>
 8011a52:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011a56:	4421      	add	r1, r4
 8011a58:	4420      	add	r0, r4
 8011a5a:	f002 0203 	and.w	r2, r2, #3
 8011a5e:	b16b      	cbz	r3, 8011a7c <st_int8_copy+0xac>
 8011a60:	6804      	ldr	r4, [r0, #0]
 8011a62:	600c      	str	r4, [r1, #0]
 8011a64:	1e5c      	subs	r4, r3, #1
 8011a66:	d005      	beq.n	8011a74 <st_int8_copy+0xa4>
 8011a68:	6845      	ldr	r5, [r0, #4]
 8011a6a:	2c01      	cmp	r4, #1
 8011a6c:	604d      	str	r5, [r1, #4]
 8011a6e:	d001      	beq.n	8011a74 <st_int8_copy+0xa4>
 8011a70:	6884      	ldr	r4, [r0, #8]
 8011a72:	608c      	str	r4, [r1, #8]
 8011a74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011a78:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011a7c:	b162      	cbz	r2, 8011a98 <st_int8_copy+0xc8>
 8011a7e:	f990 3000 	ldrsb.w	r3, [r0]
 8011a82:	3a01      	subs	r2, #1
 8011a84:	700b      	strb	r3, [r1, #0]
 8011a86:	d007      	beq.n	8011a98 <st_int8_copy+0xc8>
 8011a88:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011a8c:	2a01      	cmp	r2, #1
 8011a8e:	704b      	strb	r3, [r1, #1]
 8011a90:	d002      	beq.n	8011a98 <st_int8_copy+0xc8>
 8011a92:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8011a96:	708b      	strb	r3, [r1, #2]
 8011a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a9c:	4770      	bx	lr
 8011a9e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8011aa8:	4684      	mov	ip, r0
 8011aaa:	f8dc 8000 	ldr.w	r8, [ip]
 8011aae:	3310      	adds	r3, #16
 8011ab0:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8011ab4:	f10c 0c10 	add.w	ip, ip, #16
 8011ab8:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8011abc:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8011ac0:	f843 8c10 	str.w	r8, [r3, #-16]
 8011ac4:	f843 7c0c 	str.w	r7, [r3, #-12]
 8011ac8:	f843 6c08 	str.w	r6, [r3, #-8]
 8011acc:	f843 5c04 	str.w	r5, [r3, #-4]
 8011ad0:	459e      	cmp	lr, r3
 8011ad2:	d1ea      	bne.n	8011aaa <st_int8_copy+0xda>
 8011ad4:	e7bd      	b.n	8011a52 <st_int8_copy+0x82>
 8011ad6:	0893      	lsrs	r3, r2, #2
 8011ad8:	f002 0203 	and.w	r2, r2, #3
 8011adc:	e7bf      	b.n	8011a5e <st_int8_copy+0x8e>
 8011ade:	bf00      	nop

08011ae0 <ai_array_to_buffer_fmt>:
 8011ae0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d053      	beq.n	8011b90 <ai_array_to_buffer_fmt+0xb0>
 8011ae8:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8011aec:	4a2b      	ldr	r2, [pc, #172]	@ (8011b9c <ai_array_to_buffer_fmt+0xbc>)
 8011aee:	4293      	cmp	r3, r2
 8011af0:	d010      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011af2:	dc21      	bgt.n	8011b38 <ai_array_to_buffer_fmt+0x58>
 8011af4:	4a2a      	ldr	r2, [pc, #168]	@ (8011ba0 <ai_array_to_buffer_fmt+0xc0>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d00c      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011afa:	dd0f      	ble.n	8011b1c <ai_array_to_buffer_fmt+0x3c>
 8011afc:	4a29      	ldr	r2, [pc, #164]	@ (8011ba4 <ai_array_to_buffer_fmt+0xc4>)
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d008      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b02:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d004      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b0a:	4a27      	ldr	r2, [pc, #156]	@ (8011ba8 <ai_array_to_buffer_fmt+0xc8>)
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	bf0c      	ite	eq
 8011b10:	4613      	moveq	r3, r2
 8011b12:	2340      	movne	r3, #64	@ 0x40
 8011b14:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011b18:	4318      	orrs	r0, r3
 8011b1a:	4770      	bx	lr
 8011b1c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8011b20:	4293      	cmp	r3, r2
 8011b22:	d0f7      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b24:	dd2a      	ble.n	8011b7c <ai_array_to_buffer_fmt+0x9c>
 8011b26:	4a21      	ldr	r2, [pc, #132]	@ (8011bac <ai_array_to_buffer_fmt+0xcc>)
 8011b28:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	bf0c      	ite	eq
 8011b30:	4613      	moveq	r3, r2
 8011b32:	2340      	movne	r3, #64	@ 0x40
 8011b34:	4318      	orrs	r0, r3
 8011b36:	4770      	bx	lr
 8011b38:	4a1d      	ldr	r2, [pc, #116]	@ (8011bb0 <ai_array_to_buffer_fmt+0xd0>)
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d0ea      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b3e:	dd0f      	ble.n	8011b60 <ai_array_to_buffer_fmt+0x80>
 8011b40:	4a1c      	ldr	r2, [pc, #112]	@ (8011bb4 <ai_array_to_buffer_fmt+0xd4>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d0e6      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b46:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d0e2      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8011bb8 <ai_array_to_buffer_fmt+0xd8>)
 8011b50:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8011b54:	4293      	cmp	r3, r2
 8011b56:	bf0c      	ite	eq
 8011b58:	4613      	moveq	r3, r2
 8011b5a:	2340      	movne	r3, #64	@ 0x40
 8011b5c:	4318      	orrs	r0, r3
 8011b5e:	4770      	bx	lr
 8011b60:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8011b64:	4293      	cmp	r3, r2
 8011b66:	d0d5      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b68:	3207      	adds	r2, #7
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d0d2      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b6e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8011b72:	4293      	cmp	r3, r2
 8011b74:	bf0c      	ite	eq
 8011b76:	4613      	moveq	r3, r2
 8011b78:	2340      	movne	r3, #64	@ 0x40
 8011b7a:	e7cb      	b.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b7c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d0c7      	beq.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b84:	3280      	adds	r2, #128	@ 0x80
 8011b86:	4293      	cmp	r3, r2
 8011b88:	bf0c      	ite	eq
 8011b8a:	4613      	moveq	r3, r2
 8011b8c:	2340      	movne	r3, #64	@ 0x40
 8011b8e:	e7c1      	b.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b90:	4b0a      	ldr	r3, [pc, #40]	@ (8011bbc <ai_array_to_buffer_fmt+0xdc>)
 8011b92:	4003      	ands	r3, r0
 8011b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011b98:	e7bc      	b.n	8011b14 <ai_array_to_buffer_fmt+0x34>
 8011b9a:	bf00      	nop
 8011b9c:	00840040 	.word	0x00840040
 8011ba0:	00040840 	.word	0x00040840
 8011ba4:	00041040 	.word	0x00041040
 8011ba8:	0004084f 	.word	0x0004084f
 8011bac:	00040447 	.word	0x00040447
 8011bb0:	00840840 	.word	0x00840840
 8011bb4:	00841040 	.word	0x00841040
 8011bb8:	0084084f 	.word	0x0084084f
 8011bbc:	00803fff 	.word	0x00803fff

08011bc0 <ai_array_get_byte_size>:
 8011bc0:	b319      	cbz	r1, 8011c0a <ai_array_get_byte_size+0x4a>
 8011bc2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011bc6:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8011bca:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8011bce:	11c0      	asrs	r0, r0, #7
 8011bd0:	fb01 f303 	mul.w	r3, r1, r3
 8011bd4:	2a04      	cmp	r2, #4
 8011bd6:	f103 0307 	add.w	r3, r3, #7
 8011bda:	f023 0307 	bic.w	r3, r3, #7
 8011bde:	fa23 f10c 	lsr.w	r1, r3, ip
 8011be2:	d00b      	beq.n	8011bfc <ai_array_get_byte_size+0x3c>
 8011be4:	2a08      	cmp	r2, #8
 8011be6:	d002      	beq.n	8011bee <ai_array_get_byte_size+0x2e>
 8011be8:	3107      	adds	r1, #7
 8011bea:	08c8      	lsrs	r0, r1, #3
 8011bec:	4770      	bx	lr
 8011bee:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8011bf2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8011bf6:	3107      	adds	r1, #7
 8011bf8:	08c8      	lsrs	r0, r1, #3
 8011bfa:	4770      	bx	lr
 8011bfc:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8011c00:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8011c04:	3107      	adds	r1, #7
 8011c06:	08c8      	lsrs	r0, r1, #3
 8011c08:	4770      	bx	lr
 8011c0a:	4608      	mov	r0, r1
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop

08011c10 <ai_array_get_data_byte_size>:
 8011c10:	b169      	cbz	r1, 8011c2e <ai_array_get_data_byte_size+0x1e>
 8011c12:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011c16:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8011c1a:	fb03 f101 	mul.w	r1, r3, r1
 8011c1e:	1dcb      	adds	r3, r1, #7
 8011c20:	f023 0307 	bic.w	r3, r3, #7
 8011c24:	fa23 f000 	lsr.w	r0, r3, r0
 8011c28:	3007      	adds	r0, #7
 8011c2a:	08c0      	lsrs	r0, r0, #3
 8011c2c:	4770      	bx	lr
 8011c2e:	4608      	mov	r0, r1
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop

08011c34 <ai_version_get>:
 8011c34:	0212      	lsls	r2, r2, #8
 8011c36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011c3a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8011c3e:	4770      	bx	lr

08011c40 <get_tensor_byte_size>:
 8011c40:	b430      	push	{r4, r5}
 8011c42:	6985      	ldr	r5, [r0, #24]
 8011c44:	68c4      	ldr	r4, [r0, #12]
 8011c46:	6941      	ldr	r1, [r0, #20]
 8011c48:	4b06      	ldr	r3, [pc, #24]	@ (8011c64 <get_tensor_byte_size+0x24>)
 8011c4a:	6828      	ldr	r0, [r5, #0]
 8011c4c:	4a06      	ldr	r2, [pc, #24]	@ (8011c68 <get_tensor_byte_size+0x28>)
 8011c4e:	4003      	ands	r3, r0
 8011c50:	68c9      	ldr	r1, [r1, #12]
 8011c52:	68e0      	ldr	r0, [r4, #12]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	fb01 f000 	mul.w	r0, r1, r0
 8011c5a:	d101      	bne.n	8011c60 <get_tensor_byte_size+0x20>
 8011c5c:	3007      	adds	r0, #7
 8011c5e:	08c0      	lsrs	r0, r0, #3
 8011c60:	bc30      	pop	{r4, r5}
 8011c62:	4770      	bx	lr
 8011c64:	017fffff 	.word	0x017fffff
 8011c68:	000400c0 	.word	0x000400c0

08011c6c <malloc>:
 8011c6c:	4b02      	ldr	r3, [pc, #8]	@ (8011c78 <malloc+0xc>)
 8011c6e:	4601      	mov	r1, r0
 8011c70:	6818      	ldr	r0, [r3, #0]
 8011c72:	f000 b825 	b.w	8011cc0 <_malloc_r>
 8011c76:	bf00      	nop
 8011c78:	24000bb8 	.word	0x24000bb8

08011c7c <sbrk_aligned>:
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8011cbc <sbrk_aligned+0x40>)
 8011c80:	460c      	mov	r4, r1
 8011c82:	6831      	ldr	r1, [r6, #0]
 8011c84:	4605      	mov	r5, r0
 8011c86:	b911      	cbnz	r1, 8011c8e <sbrk_aligned+0x12>
 8011c88:	f001 f9de 	bl	8013048 <_sbrk_r>
 8011c8c:	6030      	str	r0, [r6, #0]
 8011c8e:	4621      	mov	r1, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	f001 f9d9 	bl	8013048 <_sbrk_r>
 8011c96:	1c43      	adds	r3, r0, #1
 8011c98:	d103      	bne.n	8011ca2 <sbrk_aligned+0x26>
 8011c9a:	f04f 34ff 	mov.w	r4, #4294967295
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	bd70      	pop	{r4, r5, r6, pc}
 8011ca2:	1cc4      	adds	r4, r0, #3
 8011ca4:	f024 0403 	bic.w	r4, r4, #3
 8011ca8:	42a0      	cmp	r0, r4
 8011caa:	d0f8      	beq.n	8011c9e <sbrk_aligned+0x22>
 8011cac:	1a21      	subs	r1, r4, r0
 8011cae:	4628      	mov	r0, r5
 8011cb0:	f001 f9ca 	bl	8013048 <_sbrk_r>
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	d1f2      	bne.n	8011c9e <sbrk_aligned+0x22>
 8011cb8:	e7ef      	b.n	8011c9a <sbrk_aligned+0x1e>
 8011cba:	bf00      	nop
 8011cbc:	24009e10 	.word	0x24009e10

08011cc0 <_malloc_r>:
 8011cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc4:	1ccd      	adds	r5, r1, #3
 8011cc6:	f025 0503 	bic.w	r5, r5, #3
 8011cca:	3508      	adds	r5, #8
 8011ccc:	2d0c      	cmp	r5, #12
 8011cce:	bf38      	it	cc
 8011cd0:	250c      	movcc	r5, #12
 8011cd2:	2d00      	cmp	r5, #0
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	db01      	blt.n	8011cdc <_malloc_r+0x1c>
 8011cd8:	42a9      	cmp	r1, r5
 8011cda:	d904      	bls.n	8011ce6 <_malloc_r+0x26>
 8011cdc:	230c      	movs	r3, #12
 8011cde:	6033      	str	r3, [r6, #0]
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011dbc <_malloc_r+0xfc>
 8011cea:	f000 f869 	bl	8011dc0 <__malloc_lock>
 8011cee:	f8d8 3000 	ldr.w	r3, [r8]
 8011cf2:	461c      	mov	r4, r3
 8011cf4:	bb44      	cbnz	r4, 8011d48 <_malloc_r+0x88>
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	f7ff ffbf 	bl	8011c7c <sbrk_aligned>
 8011cfe:	1c43      	adds	r3, r0, #1
 8011d00:	4604      	mov	r4, r0
 8011d02:	d158      	bne.n	8011db6 <_malloc_r+0xf6>
 8011d04:	f8d8 4000 	ldr.w	r4, [r8]
 8011d08:	4627      	mov	r7, r4
 8011d0a:	2f00      	cmp	r7, #0
 8011d0c:	d143      	bne.n	8011d96 <_malloc_r+0xd6>
 8011d0e:	2c00      	cmp	r4, #0
 8011d10:	d04b      	beq.n	8011daa <_malloc_r+0xea>
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	4639      	mov	r1, r7
 8011d16:	4630      	mov	r0, r6
 8011d18:	eb04 0903 	add.w	r9, r4, r3
 8011d1c:	f001 f994 	bl	8013048 <_sbrk_r>
 8011d20:	4581      	cmp	r9, r0
 8011d22:	d142      	bne.n	8011daa <_malloc_r+0xea>
 8011d24:	6821      	ldr	r1, [r4, #0]
 8011d26:	1a6d      	subs	r5, r5, r1
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	f7ff ffa6 	bl	8011c7c <sbrk_aligned>
 8011d30:	3001      	adds	r0, #1
 8011d32:	d03a      	beq.n	8011daa <_malloc_r+0xea>
 8011d34:	6823      	ldr	r3, [r4, #0]
 8011d36:	442b      	add	r3, r5
 8011d38:	6023      	str	r3, [r4, #0]
 8011d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8011d3e:	685a      	ldr	r2, [r3, #4]
 8011d40:	bb62      	cbnz	r2, 8011d9c <_malloc_r+0xdc>
 8011d42:	f8c8 7000 	str.w	r7, [r8]
 8011d46:	e00f      	b.n	8011d68 <_malloc_r+0xa8>
 8011d48:	6822      	ldr	r2, [r4, #0]
 8011d4a:	1b52      	subs	r2, r2, r5
 8011d4c:	d420      	bmi.n	8011d90 <_malloc_r+0xd0>
 8011d4e:	2a0b      	cmp	r2, #11
 8011d50:	d917      	bls.n	8011d82 <_malloc_r+0xc2>
 8011d52:	1961      	adds	r1, r4, r5
 8011d54:	42a3      	cmp	r3, r4
 8011d56:	6025      	str	r5, [r4, #0]
 8011d58:	bf18      	it	ne
 8011d5a:	6059      	strne	r1, [r3, #4]
 8011d5c:	6863      	ldr	r3, [r4, #4]
 8011d5e:	bf08      	it	eq
 8011d60:	f8c8 1000 	streq.w	r1, [r8]
 8011d64:	5162      	str	r2, [r4, r5]
 8011d66:	604b      	str	r3, [r1, #4]
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f000 f82f 	bl	8011dcc <__malloc_unlock>
 8011d6e:	f104 000b 	add.w	r0, r4, #11
 8011d72:	1d23      	adds	r3, r4, #4
 8011d74:	f020 0007 	bic.w	r0, r0, #7
 8011d78:	1ac2      	subs	r2, r0, r3
 8011d7a:	bf1c      	itt	ne
 8011d7c:	1a1b      	subne	r3, r3, r0
 8011d7e:	50a3      	strne	r3, [r4, r2]
 8011d80:	e7af      	b.n	8011ce2 <_malloc_r+0x22>
 8011d82:	6862      	ldr	r2, [r4, #4]
 8011d84:	42a3      	cmp	r3, r4
 8011d86:	bf0c      	ite	eq
 8011d88:	f8c8 2000 	streq.w	r2, [r8]
 8011d8c:	605a      	strne	r2, [r3, #4]
 8011d8e:	e7eb      	b.n	8011d68 <_malloc_r+0xa8>
 8011d90:	4623      	mov	r3, r4
 8011d92:	6864      	ldr	r4, [r4, #4]
 8011d94:	e7ae      	b.n	8011cf4 <_malloc_r+0x34>
 8011d96:	463c      	mov	r4, r7
 8011d98:	687f      	ldr	r7, [r7, #4]
 8011d9a:	e7b6      	b.n	8011d0a <_malloc_r+0x4a>
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	42a3      	cmp	r3, r4
 8011da2:	d1fb      	bne.n	8011d9c <_malloc_r+0xdc>
 8011da4:	2300      	movs	r3, #0
 8011da6:	6053      	str	r3, [r2, #4]
 8011da8:	e7de      	b.n	8011d68 <_malloc_r+0xa8>
 8011daa:	230c      	movs	r3, #12
 8011dac:	6033      	str	r3, [r6, #0]
 8011dae:	4630      	mov	r0, r6
 8011db0:	f000 f80c 	bl	8011dcc <__malloc_unlock>
 8011db4:	e794      	b.n	8011ce0 <_malloc_r+0x20>
 8011db6:	6005      	str	r5, [r0, #0]
 8011db8:	e7d6      	b.n	8011d68 <_malloc_r+0xa8>
 8011dba:	bf00      	nop
 8011dbc:	24009e14 	.word	0x24009e14

08011dc0 <__malloc_lock>:
 8011dc0:	4801      	ldr	r0, [pc, #4]	@ (8011dc8 <__malloc_lock+0x8>)
 8011dc2:	f001 b98e 	b.w	80130e2 <__retarget_lock_acquire_recursive>
 8011dc6:	bf00      	nop
 8011dc8:	24009f58 	.word	0x24009f58

08011dcc <__malloc_unlock>:
 8011dcc:	4801      	ldr	r0, [pc, #4]	@ (8011dd4 <__malloc_unlock+0x8>)
 8011dce:	f001 b989 	b.w	80130e4 <__retarget_lock_release_recursive>
 8011dd2:	bf00      	nop
 8011dd4:	24009f58 	.word	0x24009f58

08011dd8 <srand>:
 8011dd8:	b538      	push	{r3, r4, r5, lr}
 8011dda:	4b10      	ldr	r3, [pc, #64]	@ (8011e1c <srand+0x44>)
 8011ddc:	681d      	ldr	r5, [r3, #0]
 8011dde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011de0:	4604      	mov	r4, r0
 8011de2:	b9b3      	cbnz	r3, 8011e12 <srand+0x3a>
 8011de4:	2018      	movs	r0, #24
 8011de6:	f7ff ff41 	bl	8011c6c <malloc>
 8011dea:	4602      	mov	r2, r0
 8011dec:	6328      	str	r0, [r5, #48]	@ 0x30
 8011dee:	b920      	cbnz	r0, 8011dfa <srand+0x22>
 8011df0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e20 <srand+0x48>)
 8011df2:	480c      	ldr	r0, [pc, #48]	@ (8011e24 <srand+0x4c>)
 8011df4:	2146      	movs	r1, #70	@ 0x46
 8011df6:	f001 f98b 	bl	8013110 <__assert_func>
 8011dfa:	490b      	ldr	r1, [pc, #44]	@ (8011e28 <srand+0x50>)
 8011dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8011e2c <srand+0x54>)
 8011dfe:	e9c0 1300 	strd	r1, r3, [r0]
 8011e02:	4b0b      	ldr	r3, [pc, #44]	@ (8011e30 <srand+0x58>)
 8011e04:	6083      	str	r3, [r0, #8]
 8011e06:	230b      	movs	r3, #11
 8011e08:	8183      	strh	r3, [r0, #12]
 8011e0a:	2100      	movs	r1, #0
 8011e0c:	2001      	movs	r0, #1
 8011e0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011e12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011e14:	2200      	movs	r2, #0
 8011e16:	611c      	str	r4, [r3, #16]
 8011e18:	615a      	str	r2, [r3, #20]
 8011e1a:	bd38      	pop	{r3, r4, r5, pc}
 8011e1c:	24000bb8 	.word	0x24000bb8
 8011e20:	08018194 	.word	0x08018194
 8011e24:	080181ab 	.word	0x080181ab
 8011e28:	abcd330e 	.word	0xabcd330e
 8011e2c:	e66d1234 	.word	0xe66d1234
 8011e30:	0005deec 	.word	0x0005deec

08011e34 <_realloc_r>:
 8011e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e38:	4680      	mov	r8, r0
 8011e3a:	4615      	mov	r5, r2
 8011e3c:	460c      	mov	r4, r1
 8011e3e:	b921      	cbnz	r1, 8011e4a <_realloc_r+0x16>
 8011e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e44:	4611      	mov	r1, r2
 8011e46:	f7ff bf3b 	b.w	8011cc0 <_malloc_r>
 8011e4a:	b92a      	cbnz	r2, 8011e58 <_realloc_r+0x24>
 8011e4c:	f001 ff5e 	bl	8013d0c <_free_r>
 8011e50:	2400      	movs	r4, #0
 8011e52:	4620      	mov	r0, r4
 8011e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e58:	f002 fc51 	bl	80146fe <_malloc_usable_size_r>
 8011e5c:	4285      	cmp	r5, r0
 8011e5e:	4606      	mov	r6, r0
 8011e60:	d802      	bhi.n	8011e68 <_realloc_r+0x34>
 8011e62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011e66:	d8f4      	bhi.n	8011e52 <_realloc_r+0x1e>
 8011e68:	4629      	mov	r1, r5
 8011e6a:	4640      	mov	r0, r8
 8011e6c:	f7ff ff28 	bl	8011cc0 <_malloc_r>
 8011e70:	4607      	mov	r7, r0
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d0ec      	beq.n	8011e50 <_realloc_r+0x1c>
 8011e76:	42b5      	cmp	r5, r6
 8011e78:	462a      	mov	r2, r5
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	bf28      	it	cs
 8011e7e:	4632      	movcs	r2, r6
 8011e80:	f001 f931 	bl	80130e6 <memcpy>
 8011e84:	4621      	mov	r1, r4
 8011e86:	4640      	mov	r0, r8
 8011e88:	f001 ff40 	bl	8013d0c <_free_r>
 8011e8c:	463c      	mov	r4, r7
 8011e8e:	e7e0      	b.n	8011e52 <_realloc_r+0x1e>

08011e90 <__cvt>:
 8011e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e92:	ed2d 8b02 	vpush	{d8}
 8011e96:	eeb0 8b40 	vmov.f64	d8, d0
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	4617      	mov	r7, r2
 8011e9e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011ea0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011ea2:	ee18 2a90 	vmov	r2, s17
 8011ea6:	f025 0520 	bic.w	r5, r5, #32
 8011eaa:	2a00      	cmp	r2, #0
 8011eac:	bfb6      	itet	lt
 8011eae:	222d      	movlt	r2, #45	@ 0x2d
 8011eb0:	2200      	movge	r2, #0
 8011eb2:	eeb1 8b40 	vneglt.f64	d8, d0
 8011eb6:	2d46      	cmp	r5, #70	@ 0x46
 8011eb8:	460c      	mov	r4, r1
 8011eba:	701a      	strb	r2, [r3, #0]
 8011ebc:	d004      	beq.n	8011ec8 <__cvt+0x38>
 8011ebe:	2d45      	cmp	r5, #69	@ 0x45
 8011ec0:	d100      	bne.n	8011ec4 <__cvt+0x34>
 8011ec2:	3401      	adds	r4, #1
 8011ec4:	2102      	movs	r1, #2
 8011ec6:	e000      	b.n	8011eca <__cvt+0x3a>
 8011ec8:	2103      	movs	r1, #3
 8011eca:	ab03      	add	r3, sp, #12
 8011ecc:	9301      	str	r3, [sp, #4]
 8011ece:	ab02      	add	r3, sp, #8
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	4622      	mov	r2, r4
 8011ed4:	4633      	mov	r3, r6
 8011ed6:	eeb0 0b48 	vmov.f64	d0, d8
 8011eda:	f001 f9c1 	bl	8013260 <_dtoa_r>
 8011ede:	2d47      	cmp	r5, #71	@ 0x47
 8011ee0:	d114      	bne.n	8011f0c <__cvt+0x7c>
 8011ee2:	07fb      	lsls	r3, r7, #31
 8011ee4:	d50a      	bpl.n	8011efc <__cvt+0x6c>
 8011ee6:	1902      	adds	r2, r0, r4
 8011ee8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	bf08      	it	eq
 8011ef2:	9203      	streq	r2, [sp, #12]
 8011ef4:	2130      	movs	r1, #48	@ 0x30
 8011ef6:	9b03      	ldr	r3, [sp, #12]
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	d319      	bcc.n	8011f30 <__cvt+0xa0>
 8011efc:	9b03      	ldr	r3, [sp, #12]
 8011efe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f00:	1a1b      	subs	r3, r3, r0
 8011f02:	6013      	str	r3, [r2, #0]
 8011f04:	b005      	add	sp, #20
 8011f06:	ecbd 8b02 	vpop	{d8}
 8011f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f0c:	2d46      	cmp	r5, #70	@ 0x46
 8011f0e:	eb00 0204 	add.w	r2, r0, r4
 8011f12:	d1e9      	bne.n	8011ee8 <__cvt+0x58>
 8011f14:	7803      	ldrb	r3, [r0, #0]
 8011f16:	2b30      	cmp	r3, #48	@ 0x30
 8011f18:	d107      	bne.n	8011f2a <__cvt+0x9a>
 8011f1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f22:	bf1c      	itt	ne
 8011f24:	f1c4 0401 	rsbne	r4, r4, #1
 8011f28:	6034      	strne	r4, [r6, #0]
 8011f2a:	6833      	ldr	r3, [r6, #0]
 8011f2c:	441a      	add	r2, r3
 8011f2e:	e7db      	b.n	8011ee8 <__cvt+0x58>
 8011f30:	1c5c      	adds	r4, r3, #1
 8011f32:	9403      	str	r4, [sp, #12]
 8011f34:	7019      	strb	r1, [r3, #0]
 8011f36:	e7de      	b.n	8011ef6 <__cvt+0x66>

08011f38 <__exponent>:
 8011f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f3a:	2900      	cmp	r1, #0
 8011f3c:	bfba      	itte	lt
 8011f3e:	4249      	neglt	r1, r1
 8011f40:	232d      	movlt	r3, #45	@ 0x2d
 8011f42:	232b      	movge	r3, #43	@ 0x2b
 8011f44:	2909      	cmp	r1, #9
 8011f46:	7002      	strb	r2, [r0, #0]
 8011f48:	7043      	strb	r3, [r0, #1]
 8011f4a:	dd29      	ble.n	8011fa0 <__exponent+0x68>
 8011f4c:	f10d 0307 	add.w	r3, sp, #7
 8011f50:	461d      	mov	r5, r3
 8011f52:	270a      	movs	r7, #10
 8011f54:	461a      	mov	r2, r3
 8011f56:	fbb1 f6f7 	udiv	r6, r1, r7
 8011f5a:	fb07 1416 	mls	r4, r7, r6, r1
 8011f5e:	3430      	adds	r4, #48	@ 0x30
 8011f60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011f64:	460c      	mov	r4, r1
 8011f66:	2c63      	cmp	r4, #99	@ 0x63
 8011f68:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	dcf1      	bgt.n	8011f54 <__exponent+0x1c>
 8011f70:	3130      	adds	r1, #48	@ 0x30
 8011f72:	1e94      	subs	r4, r2, #2
 8011f74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011f78:	1c41      	adds	r1, r0, #1
 8011f7a:	4623      	mov	r3, r4
 8011f7c:	42ab      	cmp	r3, r5
 8011f7e:	d30a      	bcc.n	8011f96 <__exponent+0x5e>
 8011f80:	f10d 0309 	add.w	r3, sp, #9
 8011f84:	1a9b      	subs	r3, r3, r2
 8011f86:	42ac      	cmp	r4, r5
 8011f88:	bf88      	it	hi
 8011f8a:	2300      	movhi	r3, #0
 8011f8c:	3302      	adds	r3, #2
 8011f8e:	4403      	add	r3, r0
 8011f90:	1a18      	subs	r0, r3, r0
 8011f92:	b003      	add	sp, #12
 8011f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011f9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011f9e:	e7ed      	b.n	8011f7c <__exponent+0x44>
 8011fa0:	2330      	movs	r3, #48	@ 0x30
 8011fa2:	3130      	adds	r1, #48	@ 0x30
 8011fa4:	7083      	strb	r3, [r0, #2]
 8011fa6:	70c1      	strb	r1, [r0, #3]
 8011fa8:	1d03      	adds	r3, r0, #4
 8011faa:	e7f1      	b.n	8011f90 <__exponent+0x58>
 8011fac:	0000      	movs	r0, r0
	...

08011fb0 <_printf_float>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	b08d      	sub	sp, #52	@ 0x34
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011fbc:	4616      	mov	r6, r2
 8011fbe:	461f      	mov	r7, r3
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	f000 fff7 	bl	8012fb4 <_localeconv_r>
 8011fc6:	f8d0 b000 	ldr.w	fp, [r0]
 8011fca:	4658      	mov	r0, fp
 8011fcc:	f7ee f9d8 	bl	8000380 <strlen>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8011fd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011fdc:	6822      	ldr	r2, [r4, #0]
 8011fde:	9005      	str	r0, [sp, #20]
 8011fe0:	3307      	adds	r3, #7
 8011fe2:	f023 0307 	bic.w	r3, r3, #7
 8011fe6:	f103 0108 	add.w	r1, r3, #8
 8011fea:	f8c8 1000 	str.w	r1, [r8]
 8011fee:	ed93 0b00 	vldr	d0, [r3]
 8011ff2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012250 <_printf_float+0x2a0>
 8011ff6:	eeb0 7bc0 	vabs.f64	d7, d0
 8011ffa:	eeb4 7b46 	vcmp.f64	d7, d6
 8011ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012002:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012006:	dd24      	ble.n	8012052 <_printf_float+0xa2>
 8012008:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	d502      	bpl.n	8012018 <_printf_float+0x68>
 8012012:	232d      	movs	r3, #45	@ 0x2d
 8012014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012018:	498f      	ldr	r1, [pc, #572]	@ (8012258 <_printf_float+0x2a8>)
 801201a:	4b90      	ldr	r3, [pc, #576]	@ (801225c <_printf_float+0x2ac>)
 801201c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012020:	bf94      	ite	ls
 8012022:	4688      	movls	r8, r1
 8012024:	4698      	movhi	r8, r3
 8012026:	f022 0204 	bic.w	r2, r2, #4
 801202a:	2303      	movs	r3, #3
 801202c:	6123      	str	r3, [r4, #16]
 801202e:	6022      	str	r2, [r4, #0]
 8012030:	f04f 0a00 	mov.w	sl, #0
 8012034:	9700      	str	r7, [sp, #0]
 8012036:	4633      	mov	r3, r6
 8012038:	aa0b      	add	r2, sp, #44	@ 0x2c
 801203a:	4621      	mov	r1, r4
 801203c:	4628      	mov	r0, r5
 801203e:	f000 f9d1 	bl	80123e4 <_printf_common>
 8012042:	3001      	adds	r0, #1
 8012044:	f040 8089 	bne.w	801215a <_printf_float+0x1aa>
 8012048:	f04f 30ff 	mov.w	r0, #4294967295
 801204c:	b00d      	add	sp, #52	@ 0x34
 801204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012052:	eeb4 0b40 	vcmp.f64	d0, d0
 8012056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205a:	d709      	bvc.n	8012070 <_printf_float+0xc0>
 801205c:	ee10 3a90 	vmov	r3, s1
 8012060:	2b00      	cmp	r3, #0
 8012062:	bfbc      	itt	lt
 8012064:	232d      	movlt	r3, #45	@ 0x2d
 8012066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801206a:	497d      	ldr	r1, [pc, #500]	@ (8012260 <_printf_float+0x2b0>)
 801206c:	4b7d      	ldr	r3, [pc, #500]	@ (8012264 <_printf_float+0x2b4>)
 801206e:	e7d5      	b.n	801201c <_printf_float+0x6c>
 8012070:	6863      	ldr	r3, [r4, #4]
 8012072:	1c59      	adds	r1, r3, #1
 8012074:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012078:	d139      	bne.n	80120ee <_printf_float+0x13e>
 801207a:	2306      	movs	r3, #6
 801207c:	6063      	str	r3, [r4, #4]
 801207e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012082:	2300      	movs	r3, #0
 8012084:	6022      	str	r2, [r4, #0]
 8012086:	9303      	str	r3, [sp, #12]
 8012088:	ab0a      	add	r3, sp, #40	@ 0x28
 801208a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801208e:	ab09      	add	r3, sp, #36	@ 0x24
 8012090:	9300      	str	r3, [sp, #0]
 8012092:	6861      	ldr	r1, [r4, #4]
 8012094:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012098:	4628      	mov	r0, r5
 801209a:	f7ff fef9 	bl	8011e90 <__cvt>
 801209e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80120a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80120a4:	4680      	mov	r8, r0
 80120a6:	d129      	bne.n	80120fc <_printf_float+0x14c>
 80120a8:	1cc8      	adds	r0, r1, #3
 80120aa:	db02      	blt.n	80120b2 <_printf_float+0x102>
 80120ac:	6863      	ldr	r3, [r4, #4]
 80120ae:	4299      	cmp	r1, r3
 80120b0:	dd41      	ble.n	8012136 <_printf_float+0x186>
 80120b2:	f1a9 0902 	sub.w	r9, r9, #2
 80120b6:	fa5f f989 	uxtb.w	r9, r9
 80120ba:	3901      	subs	r1, #1
 80120bc:	464a      	mov	r2, r9
 80120be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80120c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80120c4:	f7ff ff38 	bl	8011f38 <__exponent>
 80120c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120ca:	1813      	adds	r3, r2, r0
 80120cc:	2a01      	cmp	r2, #1
 80120ce:	4682      	mov	sl, r0
 80120d0:	6123      	str	r3, [r4, #16]
 80120d2:	dc02      	bgt.n	80120da <_printf_float+0x12a>
 80120d4:	6822      	ldr	r2, [r4, #0]
 80120d6:	07d2      	lsls	r2, r2, #31
 80120d8:	d501      	bpl.n	80120de <_printf_float+0x12e>
 80120da:	3301      	adds	r3, #1
 80120dc:	6123      	str	r3, [r4, #16]
 80120de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d0a6      	beq.n	8012034 <_printf_float+0x84>
 80120e6:	232d      	movs	r3, #45	@ 0x2d
 80120e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120ec:	e7a2      	b.n	8012034 <_printf_float+0x84>
 80120ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80120f2:	d1c4      	bne.n	801207e <_printf_float+0xce>
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d1c2      	bne.n	801207e <_printf_float+0xce>
 80120f8:	2301      	movs	r3, #1
 80120fa:	e7bf      	b.n	801207c <_printf_float+0xcc>
 80120fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012100:	d9db      	bls.n	80120ba <_printf_float+0x10a>
 8012102:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012106:	d118      	bne.n	801213a <_printf_float+0x18a>
 8012108:	2900      	cmp	r1, #0
 801210a:	6863      	ldr	r3, [r4, #4]
 801210c:	dd0b      	ble.n	8012126 <_printf_float+0x176>
 801210e:	6121      	str	r1, [r4, #16]
 8012110:	b913      	cbnz	r3, 8012118 <_printf_float+0x168>
 8012112:	6822      	ldr	r2, [r4, #0]
 8012114:	07d0      	lsls	r0, r2, #31
 8012116:	d502      	bpl.n	801211e <_printf_float+0x16e>
 8012118:	3301      	adds	r3, #1
 801211a:	440b      	add	r3, r1
 801211c:	6123      	str	r3, [r4, #16]
 801211e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012120:	f04f 0a00 	mov.w	sl, #0
 8012124:	e7db      	b.n	80120de <_printf_float+0x12e>
 8012126:	b913      	cbnz	r3, 801212e <_printf_float+0x17e>
 8012128:	6822      	ldr	r2, [r4, #0]
 801212a:	07d2      	lsls	r2, r2, #31
 801212c:	d501      	bpl.n	8012132 <_printf_float+0x182>
 801212e:	3302      	adds	r3, #2
 8012130:	e7f4      	b.n	801211c <_printf_float+0x16c>
 8012132:	2301      	movs	r3, #1
 8012134:	e7f2      	b.n	801211c <_printf_float+0x16c>
 8012136:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801213a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801213c:	4299      	cmp	r1, r3
 801213e:	db05      	blt.n	801214c <_printf_float+0x19c>
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	6121      	str	r1, [r4, #16]
 8012144:	07d8      	lsls	r0, r3, #31
 8012146:	d5ea      	bpl.n	801211e <_printf_float+0x16e>
 8012148:	1c4b      	adds	r3, r1, #1
 801214a:	e7e7      	b.n	801211c <_printf_float+0x16c>
 801214c:	2900      	cmp	r1, #0
 801214e:	bfd4      	ite	le
 8012150:	f1c1 0202 	rsble	r2, r1, #2
 8012154:	2201      	movgt	r2, #1
 8012156:	4413      	add	r3, r2
 8012158:	e7e0      	b.n	801211c <_printf_float+0x16c>
 801215a:	6823      	ldr	r3, [r4, #0]
 801215c:	055a      	lsls	r2, r3, #21
 801215e:	d407      	bmi.n	8012170 <_printf_float+0x1c0>
 8012160:	6923      	ldr	r3, [r4, #16]
 8012162:	4642      	mov	r2, r8
 8012164:	4631      	mov	r1, r6
 8012166:	4628      	mov	r0, r5
 8012168:	47b8      	blx	r7
 801216a:	3001      	adds	r0, #1
 801216c:	d12a      	bne.n	80121c4 <_printf_float+0x214>
 801216e:	e76b      	b.n	8012048 <_printf_float+0x98>
 8012170:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012174:	f240 80e0 	bls.w	8012338 <_printf_float+0x388>
 8012178:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801217c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	d133      	bne.n	80121ee <_printf_float+0x23e>
 8012186:	4a38      	ldr	r2, [pc, #224]	@ (8012268 <_printf_float+0x2b8>)
 8012188:	2301      	movs	r3, #1
 801218a:	4631      	mov	r1, r6
 801218c:	4628      	mov	r0, r5
 801218e:	47b8      	blx	r7
 8012190:	3001      	adds	r0, #1
 8012192:	f43f af59 	beq.w	8012048 <_printf_float+0x98>
 8012196:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801219a:	4543      	cmp	r3, r8
 801219c:	db02      	blt.n	80121a4 <_printf_float+0x1f4>
 801219e:	6823      	ldr	r3, [r4, #0]
 80121a0:	07d8      	lsls	r0, r3, #31
 80121a2:	d50f      	bpl.n	80121c4 <_printf_float+0x214>
 80121a4:	9b05      	ldr	r3, [sp, #20]
 80121a6:	465a      	mov	r2, fp
 80121a8:	4631      	mov	r1, r6
 80121aa:	4628      	mov	r0, r5
 80121ac:	47b8      	blx	r7
 80121ae:	3001      	adds	r0, #1
 80121b0:	f43f af4a 	beq.w	8012048 <_printf_float+0x98>
 80121b4:	f04f 0900 	mov.w	r9, #0
 80121b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80121bc:	f104 0a1a 	add.w	sl, r4, #26
 80121c0:	45c8      	cmp	r8, r9
 80121c2:	dc09      	bgt.n	80121d8 <_printf_float+0x228>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	079b      	lsls	r3, r3, #30
 80121c8:	f100 8107 	bmi.w	80123da <_printf_float+0x42a>
 80121cc:	68e0      	ldr	r0, [r4, #12]
 80121ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121d0:	4298      	cmp	r0, r3
 80121d2:	bfb8      	it	lt
 80121d4:	4618      	movlt	r0, r3
 80121d6:	e739      	b.n	801204c <_printf_float+0x9c>
 80121d8:	2301      	movs	r3, #1
 80121da:	4652      	mov	r2, sl
 80121dc:	4631      	mov	r1, r6
 80121de:	4628      	mov	r0, r5
 80121e0:	47b8      	blx	r7
 80121e2:	3001      	adds	r0, #1
 80121e4:	f43f af30 	beq.w	8012048 <_printf_float+0x98>
 80121e8:	f109 0901 	add.w	r9, r9, #1
 80121ec:	e7e8      	b.n	80121c0 <_printf_float+0x210>
 80121ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	dc3b      	bgt.n	801226c <_printf_float+0x2bc>
 80121f4:	4a1c      	ldr	r2, [pc, #112]	@ (8012268 <_printf_float+0x2b8>)
 80121f6:	2301      	movs	r3, #1
 80121f8:	4631      	mov	r1, r6
 80121fa:	4628      	mov	r0, r5
 80121fc:	47b8      	blx	r7
 80121fe:	3001      	adds	r0, #1
 8012200:	f43f af22 	beq.w	8012048 <_printf_float+0x98>
 8012204:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012208:	ea59 0303 	orrs.w	r3, r9, r3
 801220c:	d102      	bne.n	8012214 <_printf_float+0x264>
 801220e:	6823      	ldr	r3, [r4, #0]
 8012210:	07d9      	lsls	r1, r3, #31
 8012212:	d5d7      	bpl.n	80121c4 <_printf_float+0x214>
 8012214:	9b05      	ldr	r3, [sp, #20]
 8012216:	465a      	mov	r2, fp
 8012218:	4631      	mov	r1, r6
 801221a:	4628      	mov	r0, r5
 801221c:	47b8      	blx	r7
 801221e:	3001      	adds	r0, #1
 8012220:	f43f af12 	beq.w	8012048 <_printf_float+0x98>
 8012224:	f04f 0a00 	mov.w	sl, #0
 8012228:	f104 0b1a 	add.w	fp, r4, #26
 801222c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801222e:	425b      	negs	r3, r3
 8012230:	4553      	cmp	r3, sl
 8012232:	dc01      	bgt.n	8012238 <_printf_float+0x288>
 8012234:	464b      	mov	r3, r9
 8012236:	e794      	b.n	8012162 <_printf_float+0x1b2>
 8012238:	2301      	movs	r3, #1
 801223a:	465a      	mov	r2, fp
 801223c:	4631      	mov	r1, r6
 801223e:	4628      	mov	r0, r5
 8012240:	47b8      	blx	r7
 8012242:	3001      	adds	r0, #1
 8012244:	f43f af00 	beq.w	8012048 <_printf_float+0x98>
 8012248:	f10a 0a01 	add.w	sl, sl, #1
 801224c:	e7ee      	b.n	801222c <_printf_float+0x27c>
 801224e:	bf00      	nop
 8012250:	ffffffff 	.word	0xffffffff
 8012254:	7fefffff 	.word	0x7fefffff
 8012258:	08018203 	.word	0x08018203
 801225c:	08018207 	.word	0x08018207
 8012260:	0801820b 	.word	0x0801820b
 8012264:	0801820f 	.word	0x0801820f
 8012268:	08018213 	.word	0x08018213
 801226c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801226e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012272:	4553      	cmp	r3, sl
 8012274:	bfa8      	it	ge
 8012276:	4653      	movge	r3, sl
 8012278:	2b00      	cmp	r3, #0
 801227a:	4699      	mov	r9, r3
 801227c:	dc37      	bgt.n	80122ee <_printf_float+0x33e>
 801227e:	2300      	movs	r3, #0
 8012280:	9307      	str	r3, [sp, #28]
 8012282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012286:	f104 021a 	add.w	r2, r4, #26
 801228a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801228c:	9907      	ldr	r1, [sp, #28]
 801228e:	9306      	str	r3, [sp, #24]
 8012290:	eba3 0309 	sub.w	r3, r3, r9
 8012294:	428b      	cmp	r3, r1
 8012296:	dc31      	bgt.n	80122fc <_printf_float+0x34c>
 8012298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801229a:	459a      	cmp	sl, r3
 801229c:	dc3b      	bgt.n	8012316 <_printf_float+0x366>
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	07da      	lsls	r2, r3, #31
 80122a2:	d438      	bmi.n	8012316 <_printf_float+0x366>
 80122a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122a6:	ebaa 0903 	sub.w	r9, sl, r3
 80122aa:	9b06      	ldr	r3, [sp, #24]
 80122ac:	ebaa 0303 	sub.w	r3, sl, r3
 80122b0:	4599      	cmp	r9, r3
 80122b2:	bfa8      	it	ge
 80122b4:	4699      	movge	r9, r3
 80122b6:	f1b9 0f00 	cmp.w	r9, #0
 80122ba:	dc34      	bgt.n	8012326 <_printf_float+0x376>
 80122bc:	f04f 0800 	mov.w	r8, #0
 80122c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122c4:	f104 0b1a 	add.w	fp, r4, #26
 80122c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122ca:	ebaa 0303 	sub.w	r3, sl, r3
 80122ce:	eba3 0309 	sub.w	r3, r3, r9
 80122d2:	4543      	cmp	r3, r8
 80122d4:	f77f af76 	ble.w	80121c4 <_printf_float+0x214>
 80122d8:	2301      	movs	r3, #1
 80122da:	465a      	mov	r2, fp
 80122dc:	4631      	mov	r1, r6
 80122de:	4628      	mov	r0, r5
 80122e0:	47b8      	blx	r7
 80122e2:	3001      	adds	r0, #1
 80122e4:	f43f aeb0 	beq.w	8012048 <_printf_float+0x98>
 80122e8:	f108 0801 	add.w	r8, r8, #1
 80122ec:	e7ec      	b.n	80122c8 <_printf_float+0x318>
 80122ee:	4642      	mov	r2, r8
 80122f0:	4631      	mov	r1, r6
 80122f2:	4628      	mov	r0, r5
 80122f4:	47b8      	blx	r7
 80122f6:	3001      	adds	r0, #1
 80122f8:	d1c1      	bne.n	801227e <_printf_float+0x2ce>
 80122fa:	e6a5      	b.n	8012048 <_printf_float+0x98>
 80122fc:	2301      	movs	r3, #1
 80122fe:	4631      	mov	r1, r6
 8012300:	4628      	mov	r0, r5
 8012302:	9206      	str	r2, [sp, #24]
 8012304:	47b8      	blx	r7
 8012306:	3001      	adds	r0, #1
 8012308:	f43f ae9e 	beq.w	8012048 <_printf_float+0x98>
 801230c:	9b07      	ldr	r3, [sp, #28]
 801230e:	9a06      	ldr	r2, [sp, #24]
 8012310:	3301      	adds	r3, #1
 8012312:	9307      	str	r3, [sp, #28]
 8012314:	e7b9      	b.n	801228a <_printf_float+0x2da>
 8012316:	9b05      	ldr	r3, [sp, #20]
 8012318:	465a      	mov	r2, fp
 801231a:	4631      	mov	r1, r6
 801231c:	4628      	mov	r0, r5
 801231e:	47b8      	blx	r7
 8012320:	3001      	adds	r0, #1
 8012322:	d1bf      	bne.n	80122a4 <_printf_float+0x2f4>
 8012324:	e690      	b.n	8012048 <_printf_float+0x98>
 8012326:	9a06      	ldr	r2, [sp, #24]
 8012328:	464b      	mov	r3, r9
 801232a:	4442      	add	r2, r8
 801232c:	4631      	mov	r1, r6
 801232e:	4628      	mov	r0, r5
 8012330:	47b8      	blx	r7
 8012332:	3001      	adds	r0, #1
 8012334:	d1c2      	bne.n	80122bc <_printf_float+0x30c>
 8012336:	e687      	b.n	8012048 <_printf_float+0x98>
 8012338:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801233c:	f1b9 0f01 	cmp.w	r9, #1
 8012340:	dc01      	bgt.n	8012346 <_printf_float+0x396>
 8012342:	07db      	lsls	r3, r3, #31
 8012344:	d536      	bpl.n	80123b4 <_printf_float+0x404>
 8012346:	2301      	movs	r3, #1
 8012348:	4642      	mov	r2, r8
 801234a:	4631      	mov	r1, r6
 801234c:	4628      	mov	r0, r5
 801234e:	47b8      	blx	r7
 8012350:	3001      	adds	r0, #1
 8012352:	f43f ae79 	beq.w	8012048 <_printf_float+0x98>
 8012356:	9b05      	ldr	r3, [sp, #20]
 8012358:	465a      	mov	r2, fp
 801235a:	4631      	mov	r1, r6
 801235c:	4628      	mov	r0, r5
 801235e:	47b8      	blx	r7
 8012360:	3001      	adds	r0, #1
 8012362:	f43f ae71 	beq.w	8012048 <_printf_float+0x98>
 8012366:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801236a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012372:	f109 39ff 	add.w	r9, r9, #4294967295
 8012376:	d018      	beq.n	80123aa <_printf_float+0x3fa>
 8012378:	464b      	mov	r3, r9
 801237a:	f108 0201 	add.w	r2, r8, #1
 801237e:	4631      	mov	r1, r6
 8012380:	4628      	mov	r0, r5
 8012382:	47b8      	blx	r7
 8012384:	3001      	adds	r0, #1
 8012386:	d10c      	bne.n	80123a2 <_printf_float+0x3f2>
 8012388:	e65e      	b.n	8012048 <_printf_float+0x98>
 801238a:	2301      	movs	r3, #1
 801238c:	465a      	mov	r2, fp
 801238e:	4631      	mov	r1, r6
 8012390:	4628      	mov	r0, r5
 8012392:	47b8      	blx	r7
 8012394:	3001      	adds	r0, #1
 8012396:	f43f ae57 	beq.w	8012048 <_printf_float+0x98>
 801239a:	f108 0801 	add.w	r8, r8, #1
 801239e:	45c8      	cmp	r8, r9
 80123a0:	dbf3      	blt.n	801238a <_printf_float+0x3da>
 80123a2:	4653      	mov	r3, sl
 80123a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80123a8:	e6dc      	b.n	8012164 <_printf_float+0x1b4>
 80123aa:	f04f 0800 	mov.w	r8, #0
 80123ae:	f104 0b1a 	add.w	fp, r4, #26
 80123b2:	e7f4      	b.n	801239e <_printf_float+0x3ee>
 80123b4:	2301      	movs	r3, #1
 80123b6:	4642      	mov	r2, r8
 80123b8:	e7e1      	b.n	801237e <_printf_float+0x3ce>
 80123ba:	2301      	movs	r3, #1
 80123bc:	464a      	mov	r2, r9
 80123be:	4631      	mov	r1, r6
 80123c0:	4628      	mov	r0, r5
 80123c2:	47b8      	blx	r7
 80123c4:	3001      	adds	r0, #1
 80123c6:	f43f ae3f 	beq.w	8012048 <_printf_float+0x98>
 80123ca:	f108 0801 	add.w	r8, r8, #1
 80123ce:	68e3      	ldr	r3, [r4, #12]
 80123d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80123d2:	1a5b      	subs	r3, r3, r1
 80123d4:	4543      	cmp	r3, r8
 80123d6:	dcf0      	bgt.n	80123ba <_printf_float+0x40a>
 80123d8:	e6f8      	b.n	80121cc <_printf_float+0x21c>
 80123da:	f04f 0800 	mov.w	r8, #0
 80123de:	f104 0919 	add.w	r9, r4, #25
 80123e2:	e7f4      	b.n	80123ce <_printf_float+0x41e>

080123e4 <_printf_common>:
 80123e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123e8:	4616      	mov	r6, r2
 80123ea:	4698      	mov	r8, r3
 80123ec:	688a      	ldr	r2, [r1, #8]
 80123ee:	690b      	ldr	r3, [r1, #16]
 80123f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80123f4:	4293      	cmp	r3, r2
 80123f6:	bfb8      	it	lt
 80123f8:	4613      	movlt	r3, r2
 80123fa:	6033      	str	r3, [r6, #0]
 80123fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012400:	4607      	mov	r7, r0
 8012402:	460c      	mov	r4, r1
 8012404:	b10a      	cbz	r2, 801240a <_printf_common+0x26>
 8012406:	3301      	adds	r3, #1
 8012408:	6033      	str	r3, [r6, #0]
 801240a:	6823      	ldr	r3, [r4, #0]
 801240c:	0699      	lsls	r1, r3, #26
 801240e:	bf42      	ittt	mi
 8012410:	6833      	ldrmi	r3, [r6, #0]
 8012412:	3302      	addmi	r3, #2
 8012414:	6033      	strmi	r3, [r6, #0]
 8012416:	6825      	ldr	r5, [r4, #0]
 8012418:	f015 0506 	ands.w	r5, r5, #6
 801241c:	d106      	bne.n	801242c <_printf_common+0x48>
 801241e:	f104 0a19 	add.w	sl, r4, #25
 8012422:	68e3      	ldr	r3, [r4, #12]
 8012424:	6832      	ldr	r2, [r6, #0]
 8012426:	1a9b      	subs	r3, r3, r2
 8012428:	42ab      	cmp	r3, r5
 801242a:	dc26      	bgt.n	801247a <_printf_common+0x96>
 801242c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012430:	6822      	ldr	r2, [r4, #0]
 8012432:	3b00      	subs	r3, #0
 8012434:	bf18      	it	ne
 8012436:	2301      	movne	r3, #1
 8012438:	0692      	lsls	r2, r2, #26
 801243a:	d42b      	bmi.n	8012494 <_printf_common+0xb0>
 801243c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012440:	4641      	mov	r1, r8
 8012442:	4638      	mov	r0, r7
 8012444:	47c8      	blx	r9
 8012446:	3001      	adds	r0, #1
 8012448:	d01e      	beq.n	8012488 <_printf_common+0xa4>
 801244a:	6823      	ldr	r3, [r4, #0]
 801244c:	6922      	ldr	r2, [r4, #16]
 801244e:	f003 0306 	and.w	r3, r3, #6
 8012452:	2b04      	cmp	r3, #4
 8012454:	bf02      	ittt	eq
 8012456:	68e5      	ldreq	r5, [r4, #12]
 8012458:	6833      	ldreq	r3, [r6, #0]
 801245a:	1aed      	subeq	r5, r5, r3
 801245c:	68a3      	ldr	r3, [r4, #8]
 801245e:	bf0c      	ite	eq
 8012460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012464:	2500      	movne	r5, #0
 8012466:	4293      	cmp	r3, r2
 8012468:	bfc4      	itt	gt
 801246a:	1a9b      	subgt	r3, r3, r2
 801246c:	18ed      	addgt	r5, r5, r3
 801246e:	2600      	movs	r6, #0
 8012470:	341a      	adds	r4, #26
 8012472:	42b5      	cmp	r5, r6
 8012474:	d11a      	bne.n	80124ac <_printf_common+0xc8>
 8012476:	2000      	movs	r0, #0
 8012478:	e008      	b.n	801248c <_printf_common+0xa8>
 801247a:	2301      	movs	r3, #1
 801247c:	4652      	mov	r2, sl
 801247e:	4641      	mov	r1, r8
 8012480:	4638      	mov	r0, r7
 8012482:	47c8      	blx	r9
 8012484:	3001      	adds	r0, #1
 8012486:	d103      	bne.n	8012490 <_printf_common+0xac>
 8012488:	f04f 30ff 	mov.w	r0, #4294967295
 801248c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012490:	3501      	adds	r5, #1
 8012492:	e7c6      	b.n	8012422 <_printf_common+0x3e>
 8012494:	18e1      	adds	r1, r4, r3
 8012496:	1c5a      	adds	r2, r3, #1
 8012498:	2030      	movs	r0, #48	@ 0x30
 801249a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801249e:	4422      	add	r2, r4
 80124a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80124a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80124a8:	3302      	adds	r3, #2
 80124aa:	e7c7      	b.n	801243c <_printf_common+0x58>
 80124ac:	2301      	movs	r3, #1
 80124ae:	4622      	mov	r2, r4
 80124b0:	4641      	mov	r1, r8
 80124b2:	4638      	mov	r0, r7
 80124b4:	47c8      	blx	r9
 80124b6:	3001      	adds	r0, #1
 80124b8:	d0e6      	beq.n	8012488 <_printf_common+0xa4>
 80124ba:	3601      	adds	r6, #1
 80124bc:	e7d9      	b.n	8012472 <_printf_common+0x8e>
	...

080124c0 <_printf_i>:
 80124c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124c4:	7e0f      	ldrb	r7, [r1, #24]
 80124c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80124c8:	2f78      	cmp	r7, #120	@ 0x78
 80124ca:	4691      	mov	r9, r2
 80124cc:	4680      	mov	r8, r0
 80124ce:	460c      	mov	r4, r1
 80124d0:	469a      	mov	sl, r3
 80124d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80124d6:	d807      	bhi.n	80124e8 <_printf_i+0x28>
 80124d8:	2f62      	cmp	r7, #98	@ 0x62
 80124da:	d80a      	bhi.n	80124f2 <_printf_i+0x32>
 80124dc:	2f00      	cmp	r7, #0
 80124de:	f000 80d2 	beq.w	8012686 <_printf_i+0x1c6>
 80124e2:	2f58      	cmp	r7, #88	@ 0x58
 80124e4:	f000 80b9 	beq.w	801265a <_printf_i+0x19a>
 80124e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80124f0:	e03a      	b.n	8012568 <_printf_i+0xa8>
 80124f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80124f6:	2b15      	cmp	r3, #21
 80124f8:	d8f6      	bhi.n	80124e8 <_printf_i+0x28>
 80124fa:	a101      	add	r1, pc, #4	@ (adr r1, 8012500 <_printf_i+0x40>)
 80124fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012500:	08012559 	.word	0x08012559
 8012504:	0801256d 	.word	0x0801256d
 8012508:	080124e9 	.word	0x080124e9
 801250c:	080124e9 	.word	0x080124e9
 8012510:	080124e9 	.word	0x080124e9
 8012514:	080124e9 	.word	0x080124e9
 8012518:	0801256d 	.word	0x0801256d
 801251c:	080124e9 	.word	0x080124e9
 8012520:	080124e9 	.word	0x080124e9
 8012524:	080124e9 	.word	0x080124e9
 8012528:	080124e9 	.word	0x080124e9
 801252c:	0801266d 	.word	0x0801266d
 8012530:	08012597 	.word	0x08012597
 8012534:	08012627 	.word	0x08012627
 8012538:	080124e9 	.word	0x080124e9
 801253c:	080124e9 	.word	0x080124e9
 8012540:	0801268f 	.word	0x0801268f
 8012544:	080124e9 	.word	0x080124e9
 8012548:	08012597 	.word	0x08012597
 801254c:	080124e9 	.word	0x080124e9
 8012550:	080124e9 	.word	0x080124e9
 8012554:	0801262f 	.word	0x0801262f
 8012558:	6833      	ldr	r3, [r6, #0]
 801255a:	1d1a      	adds	r2, r3, #4
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	6032      	str	r2, [r6, #0]
 8012560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012568:	2301      	movs	r3, #1
 801256a:	e09d      	b.n	80126a8 <_printf_i+0x1e8>
 801256c:	6833      	ldr	r3, [r6, #0]
 801256e:	6820      	ldr	r0, [r4, #0]
 8012570:	1d19      	adds	r1, r3, #4
 8012572:	6031      	str	r1, [r6, #0]
 8012574:	0606      	lsls	r6, r0, #24
 8012576:	d501      	bpl.n	801257c <_printf_i+0xbc>
 8012578:	681d      	ldr	r5, [r3, #0]
 801257a:	e003      	b.n	8012584 <_printf_i+0xc4>
 801257c:	0645      	lsls	r5, r0, #25
 801257e:	d5fb      	bpl.n	8012578 <_printf_i+0xb8>
 8012580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012584:	2d00      	cmp	r5, #0
 8012586:	da03      	bge.n	8012590 <_printf_i+0xd0>
 8012588:	232d      	movs	r3, #45	@ 0x2d
 801258a:	426d      	negs	r5, r5
 801258c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012590:	4859      	ldr	r0, [pc, #356]	@ (80126f8 <_printf_i+0x238>)
 8012592:	230a      	movs	r3, #10
 8012594:	e011      	b.n	80125ba <_printf_i+0xfa>
 8012596:	6821      	ldr	r1, [r4, #0]
 8012598:	6833      	ldr	r3, [r6, #0]
 801259a:	0608      	lsls	r0, r1, #24
 801259c:	f853 5b04 	ldr.w	r5, [r3], #4
 80125a0:	d402      	bmi.n	80125a8 <_printf_i+0xe8>
 80125a2:	0649      	lsls	r1, r1, #25
 80125a4:	bf48      	it	mi
 80125a6:	b2ad      	uxthmi	r5, r5
 80125a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80125aa:	4853      	ldr	r0, [pc, #332]	@ (80126f8 <_printf_i+0x238>)
 80125ac:	6033      	str	r3, [r6, #0]
 80125ae:	bf14      	ite	ne
 80125b0:	230a      	movne	r3, #10
 80125b2:	2308      	moveq	r3, #8
 80125b4:	2100      	movs	r1, #0
 80125b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80125ba:	6866      	ldr	r6, [r4, #4]
 80125bc:	60a6      	str	r6, [r4, #8]
 80125be:	2e00      	cmp	r6, #0
 80125c0:	bfa2      	ittt	ge
 80125c2:	6821      	ldrge	r1, [r4, #0]
 80125c4:	f021 0104 	bicge.w	r1, r1, #4
 80125c8:	6021      	strge	r1, [r4, #0]
 80125ca:	b90d      	cbnz	r5, 80125d0 <_printf_i+0x110>
 80125cc:	2e00      	cmp	r6, #0
 80125ce:	d04b      	beq.n	8012668 <_printf_i+0x1a8>
 80125d0:	4616      	mov	r6, r2
 80125d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80125d6:	fb03 5711 	mls	r7, r3, r1, r5
 80125da:	5dc7      	ldrb	r7, [r0, r7]
 80125dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80125e0:	462f      	mov	r7, r5
 80125e2:	42bb      	cmp	r3, r7
 80125e4:	460d      	mov	r5, r1
 80125e6:	d9f4      	bls.n	80125d2 <_printf_i+0x112>
 80125e8:	2b08      	cmp	r3, #8
 80125ea:	d10b      	bne.n	8012604 <_printf_i+0x144>
 80125ec:	6823      	ldr	r3, [r4, #0]
 80125ee:	07df      	lsls	r7, r3, #31
 80125f0:	d508      	bpl.n	8012604 <_printf_i+0x144>
 80125f2:	6923      	ldr	r3, [r4, #16]
 80125f4:	6861      	ldr	r1, [r4, #4]
 80125f6:	4299      	cmp	r1, r3
 80125f8:	bfde      	ittt	le
 80125fa:	2330      	movle	r3, #48	@ 0x30
 80125fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012604:	1b92      	subs	r2, r2, r6
 8012606:	6122      	str	r2, [r4, #16]
 8012608:	f8cd a000 	str.w	sl, [sp]
 801260c:	464b      	mov	r3, r9
 801260e:	aa03      	add	r2, sp, #12
 8012610:	4621      	mov	r1, r4
 8012612:	4640      	mov	r0, r8
 8012614:	f7ff fee6 	bl	80123e4 <_printf_common>
 8012618:	3001      	adds	r0, #1
 801261a:	d14a      	bne.n	80126b2 <_printf_i+0x1f2>
 801261c:	f04f 30ff 	mov.w	r0, #4294967295
 8012620:	b004      	add	sp, #16
 8012622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	f043 0320 	orr.w	r3, r3, #32
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	4833      	ldr	r0, [pc, #204]	@ (80126fc <_printf_i+0x23c>)
 8012630:	2778      	movs	r7, #120	@ 0x78
 8012632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012636:	6823      	ldr	r3, [r4, #0]
 8012638:	6831      	ldr	r1, [r6, #0]
 801263a:	061f      	lsls	r7, r3, #24
 801263c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012640:	d402      	bmi.n	8012648 <_printf_i+0x188>
 8012642:	065f      	lsls	r7, r3, #25
 8012644:	bf48      	it	mi
 8012646:	b2ad      	uxthmi	r5, r5
 8012648:	6031      	str	r1, [r6, #0]
 801264a:	07d9      	lsls	r1, r3, #31
 801264c:	bf44      	itt	mi
 801264e:	f043 0320 	orrmi.w	r3, r3, #32
 8012652:	6023      	strmi	r3, [r4, #0]
 8012654:	b11d      	cbz	r5, 801265e <_printf_i+0x19e>
 8012656:	2310      	movs	r3, #16
 8012658:	e7ac      	b.n	80125b4 <_printf_i+0xf4>
 801265a:	4827      	ldr	r0, [pc, #156]	@ (80126f8 <_printf_i+0x238>)
 801265c:	e7e9      	b.n	8012632 <_printf_i+0x172>
 801265e:	6823      	ldr	r3, [r4, #0]
 8012660:	f023 0320 	bic.w	r3, r3, #32
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	e7f6      	b.n	8012656 <_printf_i+0x196>
 8012668:	4616      	mov	r6, r2
 801266a:	e7bd      	b.n	80125e8 <_printf_i+0x128>
 801266c:	6833      	ldr	r3, [r6, #0]
 801266e:	6825      	ldr	r5, [r4, #0]
 8012670:	6961      	ldr	r1, [r4, #20]
 8012672:	1d18      	adds	r0, r3, #4
 8012674:	6030      	str	r0, [r6, #0]
 8012676:	062e      	lsls	r6, r5, #24
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	d501      	bpl.n	8012680 <_printf_i+0x1c0>
 801267c:	6019      	str	r1, [r3, #0]
 801267e:	e002      	b.n	8012686 <_printf_i+0x1c6>
 8012680:	0668      	lsls	r0, r5, #25
 8012682:	d5fb      	bpl.n	801267c <_printf_i+0x1bc>
 8012684:	8019      	strh	r1, [r3, #0]
 8012686:	2300      	movs	r3, #0
 8012688:	6123      	str	r3, [r4, #16]
 801268a:	4616      	mov	r6, r2
 801268c:	e7bc      	b.n	8012608 <_printf_i+0x148>
 801268e:	6833      	ldr	r3, [r6, #0]
 8012690:	1d1a      	adds	r2, r3, #4
 8012692:	6032      	str	r2, [r6, #0]
 8012694:	681e      	ldr	r6, [r3, #0]
 8012696:	6862      	ldr	r2, [r4, #4]
 8012698:	2100      	movs	r1, #0
 801269a:	4630      	mov	r0, r6
 801269c:	f7ed fe20 	bl	80002e0 <memchr>
 80126a0:	b108      	cbz	r0, 80126a6 <_printf_i+0x1e6>
 80126a2:	1b80      	subs	r0, r0, r6
 80126a4:	6060      	str	r0, [r4, #4]
 80126a6:	6863      	ldr	r3, [r4, #4]
 80126a8:	6123      	str	r3, [r4, #16]
 80126aa:	2300      	movs	r3, #0
 80126ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126b0:	e7aa      	b.n	8012608 <_printf_i+0x148>
 80126b2:	6923      	ldr	r3, [r4, #16]
 80126b4:	4632      	mov	r2, r6
 80126b6:	4649      	mov	r1, r9
 80126b8:	4640      	mov	r0, r8
 80126ba:	47d0      	blx	sl
 80126bc:	3001      	adds	r0, #1
 80126be:	d0ad      	beq.n	801261c <_printf_i+0x15c>
 80126c0:	6823      	ldr	r3, [r4, #0]
 80126c2:	079b      	lsls	r3, r3, #30
 80126c4:	d413      	bmi.n	80126ee <_printf_i+0x22e>
 80126c6:	68e0      	ldr	r0, [r4, #12]
 80126c8:	9b03      	ldr	r3, [sp, #12]
 80126ca:	4298      	cmp	r0, r3
 80126cc:	bfb8      	it	lt
 80126ce:	4618      	movlt	r0, r3
 80126d0:	e7a6      	b.n	8012620 <_printf_i+0x160>
 80126d2:	2301      	movs	r3, #1
 80126d4:	4632      	mov	r2, r6
 80126d6:	4649      	mov	r1, r9
 80126d8:	4640      	mov	r0, r8
 80126da:	47d0      	blx	sl
 80126dc:	3001      	adds	r0, #1
 80126de:	d09d      	beq.n	801261c <_printf_i+0x15c>
 80126e0:	3501      	adds	r5, #1
 80126e2:	68e3      	ldr	r3, [r4, #12]
 80126e4:	9903      	ldr	r1, [sp, #12]
 80126e6:	1a5b      	subs	r3, r3, r1
 80126e8:	42ab      	cmp	r3, r5
 80126ea:	dcf2      	bgt.n	80126d2 <_printf_i+0x212>
 80126ec:	e7eb      	b.n	80126c6 <_printf_i+0x206>
 80126ee:	2500      	movs	r5, #0
 80126f0:	f104 0619 	add.w	r6, r4, #25
 80126f4:	e7f5      	b.n	80126e2 <_printf_i+0x222>
 80126f6:	bf00      	nop
 80126f8:	08018215 	.word	0x08018215
 80126fc:	08018226 	.word	0x08018226

08012700 <_scanf_float>:
 8012700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012704:	b087      	sub	sp, #28
 8012706:	4617      	mov	r7, r2
 8012708:	9303      	str	r3, [sp, #12]
 801270a:	688b      	ldr	r3, [r1, #8]
 801270c:	1e5a      	subs	r2, r3, #1
 801270e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012712:	bf81      	itttt	hi
 8012714:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012718:	eb03 0b05 	addhi.w	fp, r3, r5
 801271c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012720:	608b      	strhi	r3, [r1, #8]
 8012722:	680b      	ldr	r3, [r1, #0]
 8012724:	460a      	mov	r2, r1
 8012726:	f04f 0500 	mov.w	r5, #0
 801272a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801272e:	f842 3b1c 	str.w	r3, [r2], #28
 8012732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012736:	4680      	mov	r8, r0
 8012738:	460c      	mov	r4, r1
 801273a:	bf98      	it	ls
 801273c:	f04f 0b00 	movls.w	fp, #0
 8012740:	9201      	str	r2, [sp, #4]
 8012742:	4616      	mov	r6, r2
 8012744:	46aa      	mov	sl, r5
 8012746:	46a9      	mov	r9, r5
 8012748:	9502      	str	r5, [sp, #8]
 801274a:	68a2      	ldr	r2, [r4, #8]
 801274c:	b152      	cbz	r2, 8012764 <_scanf_float+0x64>
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	2b4e      	cmp	r3, #78	@ 0x4e
 8012754:	d864      	bhi.n	8012820 <_scanf_float+0x120>
 8012756:	2b40      	cmp	r3, #64	@ 0x40
 8012758:	d83c      	bhi.n	80127d4 <_scanf_float+0xd4>
 801275a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801275e:	b2c8      	uxtb	r0, r1
 8012760:	280e      	cmp	r0, #14
 8012762:	d93a      	bls.n	80127da <_scanf_float+0xda>
 8012764:	f1b9 0f00 	cmp.w	r9, #0
 8012768:	d003      	beq.n	8012772 <_scanf_float+0x72>
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012770:	6023      	str	r3, [r4, #0]
 8012772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012776:	f1ba 0f01 	cmp.w	sl, #1
 801277a:	f200 8117 	bhi.w	80129ac <_scanf_float+0x2ac>
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	429e      	cmp	r6, r3
 8012782:	f200 8108 	bhi.w	8012996 <_scanf_float+0x296>
 8012786:	2001      	movs	r0, #1
 8012788:	b007      	add	sp, #28
 801278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8012792:	2a0d      	cmp	r2, #13
 8012794:	d8e6      	bhi.n	8012764 <_scanf_float+0x64>
 8012796:	a101      	add	r1, pc, #4	@ (adr r1, 801279c <_scanf_float+0x9c>)
 8012798:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801279c:	080128e3 	.word	0x080128e3
 80127a0:	08012765 	.word	0x08012765
 80127a4:	08012765 	.word	0x08012765
 80127a8:	08012765 	.word	0x08012765
 80127ac:	08012943 	.word	0x08012943
 80127b0:	0801291b 	.word	0x0801291b
 80127b4:	08012765 	.word	0x08012765
 80127b8:	08012765 	.word	0x08012765
 80127bc:	080128f1 	.word	0x080128f1
 80127c0:	08012765 	.word	0x08012765
 80127c4:	08012765 	.word	0x08012765
 80127c8:	08012765 	.word	0x08012765
 80127cc:	08012765 	.word	0x08012765
 80127d0:	080128a9 	.word	0x080128a9
 80127d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80127d8:	e7db      	b.n	8012792 <_scanf_float+0x92>
 80127da:	290e      	cmp	r1, #14
 80127dc:	d8c2      	bhi.n	8012764 <_scanf_float+0x64>
 80127de:	a001      	add	r0, pc, #4	@ (adr r0, 80127e4 <_scanf_float+0xe4>)
 80127e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80127e4:	08012899 	.word	0x08012899
 80127e8:	08012765 	.word	0x08012765
 80127ec:	08012899 	.word	0x08012899
 80127f0:	0801292f 	.word	0x0801292f
 80127f4:	08012765 	.word	0x08012765
 80127f8:	08012841 	.word	0x08012841
 80127fc:	0801287f 	.word	0x0801287f
 8012800:	0801287f 	.word	0x0801287f
 8012804:	0801287f 	.word	0x0801287f
 8012808:	0801287f 	.word	0x0801287f
 801280c:	0801287f 	.word	0x0801287f
 8012810:	0801287f 	.word	0x0801287f
 8012814:	0801287f 	.word	0x0801287f
 8012818:	0801287f 	.word	0x0801287f
 801281c:	0801287f 	.word	0x0801287f
 8012820:	2b6e      	cmp	r3, #110	@ 0x6e
 8012822:	d809      	bhi.n	8012838 <_scanf_float+0x138>
 8012824:	2b60      	cmp	r3, #96	@ 0x60
 8012826:	d8b2      	bhi.n	801278e <_scanf_float+0x8e>
 8012828:	2b54      	cmp	r3, #84	@ 0x54
 801282a:	d07b      	beq.n	8012924 <_scanf_float+0x224>
 801282c:	2b59      	cmp	r3, #89	@ 0x59
 801282e:	d199      	bne.n	8012764 <_scanf_float+0x64>
 8012830:	2d07      	cmp	r5, #7
 8012832:	d197      	bne.n	8012764 <_scanf_float+0x64>
 8012834:	2508      	movs	r5, #8
 8012836:	e02c      	b.n	8012892 <_scanf_float+0x192>
 8012838:	2b74      	cmp	r3, #116	@ 0x74
 801283a:	d073      	beq.n	8012924 <_scanf_float+0x224>
 801283c:	2b79      	cmp	r3, #121	@ 0x79
 801283e:	e7f6      	b.n	801282e <_scanf_float+0x12e>
 8012840:	6821      	ldr	r1, [r4, #0]
 8012842:	05c8      	lsls	r0, r1, #23
 8012844:	d51b      	bpl.n	801287e <_scanf_float+0x17e>
 8012846:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801284a:	6021      	str	r1, [r4, #0]
 801284c:	f109 0901 	add.w	r9, r9, #1
 8012850:	f1bb 0f00 	cmp.w	fp, #0
 8012854:	d003      	beq.n	801285e <_scanf_float+0x15e>
 8012856:	3201      	adds	r2, #1
 8012858:	f10b 3bff 	add.w	fp, fp, #4294967295
 801285c:	60a2      	str	r2, [r4, #8]
 801285e:	68a3      	ldr	r3, [r4, #8]
 8012860:	3b01      	subs	r3, #1
 8012862:	60a3      	str	r3, [r4, #8]
 8012864:	6923      	ldr	r3, [r4, #16]
 8012866:	3301      	adds	r3, #1
 8012868:	6123      	str	r3, [r4, #16]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	3b01      	subs	r3, #1
 801286e:	2b00      	cmp	r3, #0
 8012870:	607b      	str	r3, [r7, #4]
 8012872:	f340 8087 	ble.w	8012984 <_scanf_float+0x284>
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	3301      	adds	r3, #1
 801287a:	603b      	str	r3, [r7, #0]
 801287c:	e765      	b.n	801274a <_scanf_float+0x4a>
 801287e:	eb1a 0105 	adds.w	r1, sl, r5
 8012882:	f47f af6f 	bne.w	8012764 <_scanf_float+0x64>
 8012886:	6822      	ldr	r2, [r4, #0]
 8012888:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801288c:	6022      	str	r2, [r4, #0]
 801288e:	460d      	mov	r5, r1
 8012890:	468a      	mov	sl, r1
 8012892:	f806 3b01 	strb.w	r3, [r6], #1
 8012896:	e7e2      	b.n	801285e <_scanf_float+0x15e>
 8012898:	6822      	ldr	r2, [r4, #0]
 801289a:	0610      	lsls	r0, r2, #24
 801289c:	f57f af62 	bpl.w	8012764 <_scanf_float+0x64>
 80128a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80128a4:	6022      	str	r2, [r4, #0]
 80128a6:	e7f4      	b.n	8012892 <_scanf_float+0x192>
 80128a8:	f1ba 0f00 	cmp.w	sl, #0
 80128ac:	d10e      	bne.n	80128cc <_scanf_float+0x1cc>
 80128ae:	f1b9 0f00 	cmp.w	r9, #0
 80128b2:	d10e      	bne.n	80128d2 <_scanf_float+0x1d2>
 80128b4:	6822      	ldr	r2, [r4, #0]
 80128b6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80128ba:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80128be:	d108      	bne.n	80128d2 <_scanf_float+0x1d2>
 80128c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80128c4:	6022      	str	r2, [r4, #0]
 80128c6:	f04f 0a01 	mov.w	sl, #1
 80128ca:	e7e2      	b.n	8012892 <_scanf_float+0x192>
 80128cc:	f1ba 0f02 	cmp.w	sl, #2
 80128d0:	d055      	beq.n	801297e <_scanf_float+0x27e>
 80128d2:	2d01      	cmp	r5, #1
 80128d4:	d002      	beq.n	80128dc <_scanf_float+0x1dc>
 80128d6:	2d04      	cmp	r5, #4
 80128d8:	f47f af44 	bne.w	8012764 <_scanf_float+0x64>
 80128dc:	3501      	adds	r5, #1
 80128de:	b2ed      	uxtb	r5, r5
 80128e0:	e7d7      	b.n	8012892 <_scanf_float+0x192>
 80128e2:	f1ba 0f01 	cmp.w	sl, #1
 80128e6:	f47f af3d 	bne.w	8012764 <_scanf_float+0x64>
 80128ea:	f04f 0a02 	mov.w	sl, #2
 80128ee:	e7d0      	b.n	8012892 <_scanf_float+0x192>
 80128f0:	b97d      	cbnz	r5, 8012912 <_scanf_float+0x212>
 80128f2:	f1b9 0f00 	cmp.w	r9, #0
 80128f6:	f47f af38 	bne.w	801276a <_scanf_float+0x6a>
 80128fa:	6822      	ldr	r2, [r4, #0]
 80128fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8012900:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8012904:	f040 8101 	bne.w	8012b0a <_scanf_float+0x40a>
 8012908:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801290c:	6022      	str	r2, [r4, #0]
 801290e:	2501      	movs	r5, #1
 8012910:	e7bf      	b.n	8012892 <_scanf_float+0x192>
 8012912:	2d03      	cmp	r5, #3
 8012914:	d0e2      	beq.n	80128dc <_scanf_float+0x1dc>
 8012916:	2d05      	cmp	r5, #5
 8012918:	e7de      	b.n	80128d8 <_scanf_float+0x1d8>
 801291a:	2d02      	cmp	r5, #2
 801291c:	f47f af22 	bne.w	8012764 <_scanf_float+0x64>
 8012920:	2503      	movs	r5, #3
 8012922:	e7b6      	b.n	8012892 <_scanf_float+0x192>
 8012924:	2d06      	cmp	r5, #6
 8012926:	f47f af1d 	bne.w	8012764 <_scanf_float+0x64>
 801292a:	2507      	movs	r5, #7
 801292c:	e7b1      	b.n	8012892 <_scanf_float+0x192>
 801292e:	6822      	ldr	r2, [r4, #0]
 8012930:	0591      	lsls	r1, r2, #22
 8012932:	f57f af17 	bpl.w	8012764 <_scanf_float+0x64>
 8012936:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801293a:	6022      	str	r2, [r4, #0]
 801293c:	f8cd 9008 	str.w	r9, [sp, #8]
 8012940:	e7a7      	b.n	8012892 <_scanf_float+0x192>
 8012942:	6822      	ldr	r2, [r4, #0]
 8012944:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8012948:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801294c:	d006      	beq.n	801295c <_scanf_float+0x25c>
 801294e:	0550      	lsls	r0, r2, #21
 8012950:	f57f af08 	bpl.w	8012764 <_scanf_float+0x64>
 8012954:	f1b9 0f00 	cmp.w	r9, #0
 8012958:	f000 80d7 	beq.w	8012b0a <_scanf_float+0x40a>
 801295c:	0591      	lsls	r1, r2, #22
 801295e:	bf58      	it	pl
 8012960:	9902      	ldrpl	r1, [sp, #8]
 8012962:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8012966:	bf58      	it	pl
 8012968:	eba9 0101 	subpl.w	r1, r9, r1
 801296c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8012970:	bf58      	it	pl
 8012972:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012976:	6022      	str	r2, [r4, #0]
 8012978:	f04f 0900 	mov.w	r9, #0
 801297c:	e789      	b.n	8012892 <_scanf_float+0x192>
 801297e:	f04f 0a03 	mov.w	sl, #3
 8012982:	e786      	b.n	8012892 <_scanf_float+0x192>
 8012984:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012988:	4639      	mov	r1, r7
 801298a:	4640      	mov	r0, r8
 801298c:	4798      	blx	r3
 801298e:	2800      	cmp	r0, #0
 8012990:	f43f aedb 	beq.w	801274a <_scanf_float+0x4a>
 8012994:	e6e6      	b.n	8012764 <_scanf_float+0x64>
 8012996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801299a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801299e:	463a      	mov	r2, r7
 80129a0:	4640      	mov	r0, r8
 80129a2:	4798      	blx	r3
 80129a4:	6923      	ldr	r3, [r4, #16]
 80129a6:	3b01      	subs	r3, #1
 80129a8:	6123      	str	r3, [r4, #16]
 80129aa:	e6e8      	b.n	801277e <_scanf_float+0x7e>
 80129ac:	1e6b      	subs	r3, r5, #1
 80129ae:	2b06      	cmp	r3, #6
 80129b0:	d824      	bhi.n	80129fc <_scanf_float+0x2fc>
 80129b2:	2d02      	cmp	r5, #2
 80129b4:	d836      	bhi.n	8012a24 <_scanf_float+0x324>
 80129b6:	9b01      	ldr	r3, [sp, #4]
 80129b8:	429e      	cmp	r6, r3
 80129ba:	f67f aee4 	bls.w	8012786 <_scanf_float+0x86>
 80129be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80129c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80129c6:	463a      	mov	r2, r7
 80129c8:	4640      	mov	r0, r8
 80129ca:	4798      	blx	r3
 80129cc:	6923      	ldr	r3, [r4, #16]
 80129ce:	3b01      	subs	r3, #1
 80129d0:	6123      	str	r3, [r4, #16]
 80129d2:	e7f0      	b.n	80129b6 <_scanf_float+0x2b6>
 80129d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80129d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80129dc:	463a      	mov	r2, r7
 80129de:	4640      	mov	r0, r8
 80129e0:	4798      	blx	r3
 80129e2:	6923      	ldr	r3, [r4, #16]
 80129e4:	3b01      	subs	r3, #1
 80129e6:	6123      	str	r3, [r4, #16]
 80129e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80129ec:	fa5f fa8a 	uxtb.w	sl, sl
 80129f0:	f1ba 0f02 	cmp.w	sl, #2
 80129f4:	d1ee      	bne.n	80129d4 <_scanf_float+0x2d4>
 80129f6:	3d03      	subs	r5, #3
 80129f8:	b2ed      	uxtb	r5, r5
 80129fa:	1b76      	subs	r6, r6, r5
 80129fc:	6823      	ldr	r3, [r4, #0]
 80129fe:	05da      	lsls	r2, r3, #23
 8012a00:	d530      	bpl.n	8012a64 <_scanf_float+0x364>
 8012a02:	055b      	lsls	r3, r3, #21
 8012a04:	d511      	bpl.n	8012a2a <_scanf_float+0x32a>
 8012a06:	9b01      	ldr	r3, [sp, #4]
 8012a08:	429e      	cmp	r6, r3
 8012a0a:	f67f aebc 	bls.w	8012786 <_scanf_float+0x86>
 8012a0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a16:	463a      	mov	r2, r7
 8012a18:	4640      	mov	r0, r8
 8012a1a:	4798      	blx	r3
 8012a1c:	6923      	ldr	r3, [r4, #16]
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	6123      	str	r3, [r4, #16]
 8012a22:	e7f0      	b.n	8012a06 <_scanf_float+0x306>
 8012a24:	46aa      	mov	sl, r5
 8012a26:	46b3      	mov	fp, r6
 8012a28:	e7de      	b.n	80129e8 <_scanf_float+0x2e8>
 8012a2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012a2e:	6923      	ldr	r3, [r4, #16]
 8012a30:	2965      	cmp	r1, #101	@ 0x65
 8012a32:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a36:	f106 35ff 	add.w	r5, r6, #4294967295
 8012a3a:	6123      	str	r3, [r4, #16]
 8012a3c:	d00c      	beq.n	8012a58 <_scanf_float+0x358>
 8012a3e:	2945      	cmp	r1, #69	@ 0x45
 8012a40:	d00a      	beq.n	8012a58 <_scanf_float+0x358>
 8012a42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a46:	463a      	mov	r2, r7
 8012a48:	4640      	mov	r0, r8
 8012a4a:	4798      	blx	r3
 8012a4c:	6923      	ldr	r3, [r4, #16]
 8012a4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012a52:	3b01      	subs	r3, #1
 8012a54:	1eb5      	subs	r5, r6, #2
 8012a56:	6123      	str	r3, [r4, #16]
 8012a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012a5c:	463a      	mov	r2, r7
 8012a5e:	4640      	mov	r0, r8
 8012a60:	4798      	blx	r3
 8012a62:	462e      	mov	r6, r5
 8012a64:	6822      	ldr	r2, [r4, #0]
 8012a66:	f012 0210 	ands.w	r2, r2, #16
 8012a6a:	d001      	beq.n	8012a70 <_scanf_float+0x370>
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	e68b      	b.n	8012788 <_scanf_float+0x88>
 8012a70:	7032      	strb	r2, [r6, #0]
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8012a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012a7c:	d11a      	bne.n	8012ab4 <_scanf_float+0x3b4>
 8012a7e:	9b02      	ldr	r3, [sp, #8]
 8012a80:	454b      	cmp	r3, r9
 8012a82:	eba3 0209 	sub.w	r2, r3, r9
 8012a86:	d121      	bne.n	8012acc <_scanf_float+0x3cc>
 8012a88:	9901      	ldr	r1, [sp, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	4640      	mov	r0, r8
 8012a8e:	f002 fbf1 	bl	8015274 <_strtod_r>
 8012a92:	9b03      	ldr	r3, [sp, #12]
 8012a94:	6821      	ldr	r1, [r4, #0]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f011 0f02 	tst.w	r1, #2
 8012a9c:	f103 0204 	add.w	r2, r3, #4
 8012aa0:	d01f      	beq.n	8012ae2 <_scanf_float+0x3e2>
 8012aa2:	9903      	ldr	r1, [sp, #12]
 8012aa4:	600a      	str	r2, [r1, #0]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	ed83 0b00 	vstr	d0, [r3]
 8012aac:	68e3      	ldr	r3, [r4, #12]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	60e3      	str	r3, [r4, #12]
 8012ab2:	e7db      	b.n	8012a6c <_scanf_float+0x36c>
 8012ab4:	9b04      	ldr	r3, [sp, #16]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d0e6      	beq.n	8012a88 <_scanf_float+0x388>
 8012aba:	9905      	ldr	r1, [sp, #20]
 8012abc:	230a      	movs	r3, #10
 8012abe:	3101      	adds	r1, #1
 8012ac0:	4640      	mov	r0, r8
 8012ac2:	f002 fc57 	bl	8015374 <_strtol_r>
 8012ac6:	9b04      	ldr	r3, [sp, #16]
 8012ac8:	9e05      	ldr	r6, [sp, #20]
 8012aca:	1ac2      	subs	r2, r0, r3
 8012acc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8012ad0:	429e      	cmp	r6, r3
 8012ad2:	bf28      	it	cs
 8012ad4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8012ad8:	490d      	ldr	r1, [pc, #52]	@ (8012b10 <_scanf_float+0x410>)
 8012ada:	4630      	mov	r0, r6
 8012adc:	f000 f94e 	bl	8012d7c <siprintf>
 8012ae0:	e7d2      	b.n	8012a88 <_scanf_float+0x388>
 8012ae2:	f011 0f04 	tst.w	r1, #4
 8012ae6:	9903      	ldr	r1, [sp, #12]
 8012ae8:	600a      	str	r2, [r1, #0]
 8012aea:	d1dc      	bne.n	8012aa6 <_scanf_float+0x3a6>
 8012aec:	eeb4 0b40 	vcmp.f64	d0, d0
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	681d      	ldr	r5, [r3, #0]
 8012af6:	d705      	bvc.n	8012b04 <_scanf_float+0x404>
 8012af8:	4806      	ldr	r0, [pc, #24]	@ (8012b14 <_scanf_float+0x414>)
 8012afa:	f000 fb03 	bl	8013104 <nanf>
 8012afe:	ed85 0a00 	vstr	s0, [r5]
 8012b02:	e7d3      	b.n	8012aac <_scanf_float+0x3ac>
 8012b04:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012b08:	e7f9      	b.n	8012afe <_scanf_float+0x3fe>
 8012b0a:	f04f 0900 	mov.w	r9, #0
 8012b0e:	e630      	b.n	8012772 <_scanf_float+0x72>
 8012b10:	08018237 	.word	0x08018237
 8012b14:	08018277 	.word	0x08018277

08012b18 <std>:
 8012b18:	2300      	movs	r3, #0
 8012b1a:	b510      	push	{r4, lr}
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8012b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b26:	6083      	str	r3, [r0, #8]
 8012b28:	8181      	strh	r1, [r0, #12]
 8012b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b2c:	81c2      	strh	r2, [r0, #14]
 8012b2e:	6183      	str	r3, [r0, #24]
 8012b30:	4619      	mov	r1, r3
 8012b32:	2208      	movs	r2, #8
 8012b34:	305c      	adds	r0, #92	@ 0x5c
 8012b36:	f000 fa19 	bl	8012f6c <memset>
 8012b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b70 <std+0x58>)
 8012b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b74 <std+0x5c>)
 8012b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b42:	4b0d      	ldr	r3, [pc, #52]	@ (8012b78 <std+0x60>)
 8012b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b46:	4b0d      	ldr	r3, [pc, #52]	@ (8012b7c <std+0x64>)
 8012b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b80 <std+0x68>)
 8012b4c:	6224      	str	r4, [r4, #32]
 8012b4e:	429c      	cmp	r4, r3
 8012b50:	d006      	beq.n	8012b60 <std+0x48>
 8012b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b56:	4294      	cmp	r4, r2
 8012b58:	d002      	beq.n	8012b60 <std+0x48>
 8012b5a:	33d0      	adds	r3, #208	@ 0xd0
 8012b5c:	429c      	cmp	r4, r3
 8012b5e:	d105      	bne.n	8012b6c <std+0x54>
 8012b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b68:	f000 baba 	b.w	80130e0 <__retarget_lock_init_recursive>
 8012b6c:	bd10      	pop	{r4, pc}
 8012b6e:	bf00      	nop
 8012b70:	08012dbd 	.word	0x08012dbd
 8012b74:	08012ddf 	.word	0x08012ddf
 8012b78:	08012e17 	.word	0x08012e17
 8012b7c:	08012e3b 	.word	0x08012e3b
 8012b80:	24009e18 	.word	0x24009e18

08012b84 <stdio_exit_handler>:
 8012b84:	4a02      	ldr	r2, [pc, #8]	@ (8012b90 <stdio_exit_handler+0xc>)
 8012b86:	4903      	ldr	r1, [pc, #12]	@ (8012b94 <stdio_exit_handler+0x10>)
 8012b88:	4803      	ldr	r0, [pc, #12]	@ (8012b98 <stdio_exit_handler+0x14>)
 8012b8a:	f000 b869 	b.w	8012c60 <_fwalk_sglue>
 8012b8e:	bf00      	nop
 8012b90:	24000bac 	.word	0x24000bac
 8012b94:	080159b5 	.word	0x080159b5
 8012b98:	24000bbc 	.word	0x24000bbc

08012b9c <cleanup_stdio>:
 8012b9c:	6841      	ldr	r1, [r0, #4]
 8012b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8012bd0 <cleanup_stdio+0x34>)
 8012ba0:	4299      	cmp	r1, r3
 8012ba2:	b510      	push	{r4, lr}
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	d001      	beq.n	8012bac <cleanup_stdio+0x10>
 8012ba8:	f002 ff04 	bl	80159b4 <_fflush_r>
 8012bac:	68a1      	ldr	r1, [r4, #8]
 8012bae:	4b09      	ldr	r3, [pc, #36]	@ (8012bd4 <cleanup_stdio+0x38>)
 8012bb0:	4299      	cmp	r1, r3
 8012bb2:	d002      	beq.n	8012bba <cleanup_stdio+0x1e>
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f002 fefd 	bl	80159b4 <_fflush_r>
 8012bba:	68e1      	ldr	r1, [r4, #12]
 8012bbc:	4b06      	ldr	r3, [pc, #24]	@ (8012bd8 <cleanup_stdio+0x3c>)
 8012bbe:	4299      	cmp	r1, r3
 8012bc0:	d004      	beq.n	8012bcc <cleanup_stdio+0x30>
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bc8:	f002 bef4 	b.w	80159b4 <_fflush_r>
 8012bcc:	bd10      	pop	{r4, pc}
 8012bce:	bf00      	nop
 8012bd0:	24009e18 	.word	0x24009e18
 8012bd4:	24009e80 	.word	0x24009e80
 8012bd8:	24009ee8 	.word	0x24009ee8

08012bdc <global_stdio_init.part.0>:
 8012bdc:	b510      	push	{r4, lr}
 8012bde:	4b0b      	ldr	r3, [pc, #44]	@ (8012c0c <global_stdio_init.part.0+0x30>)
 8012be0:	4c0b      	ldr	r4, [pc, #44]	@ (8012c10 <global_stdio_init.part.0+0x34>)
 8012be2:	4a0c      	ldr	r2, [pc, #48]	@ (8012c14 <global_stdio_init.part.0+0x38>)
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	4620      	mov	r0, r4
 8012be8:	2200      	movs	r2, #0
 8012bea:	2104      	movs	r1, #4
 8012bec:	f7ff ff94 	bl	8012b18 <std>
 8012bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	2109      	movs	r1, #9
 8012bf8:	f7ff ff8e 	bl	8012b18 <std>
 8012bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012c00:	2202      	movs	r2, #2
 8012c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c06:	2112      	movs	r1, #18
 8012c08:	f7ff bf86 	b.w	8012b18 <std>
 8012c0c:	24009f50 	.word	0x24009f50
 8012c10:	24009e18 	.word	0x24009e18
 8012c14:	08012b85 	.word	0x08012b85

08012c18 <__sfp_lock_acquire>:
 8012c18:	4801      	ldr	r0, [pc, #4]	@ (8012c20 <__sfp_lock_acquire+0x8>)
 8012c1a:	f000 ba62 	b.w	80130e2 <__retarget_lock_acquire_recursive>
 8012c1e:	bf00      	nop
 8012c20:	24009f59 	.word	0x24009f59

08012c24 <__sfp_lock_release>:
 8012c24:	4801      	ldr	r0, [pc, #4]	@ (8012c2c <__sfp_lock_release+0x8>)
 8012c26:	f000 ba5d 	b.w	80130e4 <__retarget_lock_release_recursive>
 8012c2a:	bf00      	nop
 8012c2c:	24009f59 	.word	0x24009f59

08012c30 <__sinit>:
 8012c30:	b510      	push	{r4, lr}
 8012c32:	4604      	mov	r4, r0
 8012c34:	f7ff fff0 	bl	8012c18 <__sfp_lock_acquire>
 8012c38:	6a23      	ldr	r3, [r4, #32]
 8012c3a:	b11b      	cbz	r3, 8012c44 <__sinit+0x14>
 8012c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c40:	f7ff bff0 	b.w	8012c24 <__sfp_lock_release>
 8012c44:	4b04      	ldr	r3, [pc, #16]	@ (8012c58 <__sinit+0x28>)
 8012c46:	6223      	str	r3, [r4, #32]
 8012c48:	4b04      	ldr	r3, [pc, #16]	@ (8012c5c <__sinit+0x2c>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d1f5      	bne.n	8012c3c <__sinit+0xc>
 8012c50:	f7ff ffc4 	bl	8012bdc <global_stdio_init.part.0>
 8012c54:	e7f2      	b.n	8012c3c <__sinit+0xc>
 8012c56:	bf00      	nop
 8012c58:	08012b9d 	.word	0x08012b9d
 8012c5c:	24009f50 	.word	0x24009f50

08012c60 <_fwalk_sglue>:
 8012c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c64:	4607      	mov	r7, r0
 8012c66:	4688      	mov	r8, r1
 8012c68:	4614      	mov	r4, r2
 8012c6a:	2600      	movs	r6, #0
 8012c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c70:	f1b9 0901 	subs.w	r9, r9, #1
 8012c74:	d505      	bpl.n	8012c82 <_fwalk_sglue+0x22>
 8012c76:	6824      	ldr	r4, [r4, #0]
 8012c78:	2c00      	cmp	r4, #0
 8012c7a:	d1f7      	bne.n	8012c6c <_fwalk_sglue+0xc>
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c82:	89ab      	ldrh	r3, [r5, #12]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d907      	bls.n	8012c98 <_fwalk_sglue+0x38>
 8012c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c8c:	3301      	adds	r3, #1
 8012c8e:	d003      	beq.n	8012c98 <_fwalk_sglue+0x38>
 8012c90:	4629      	mov	r1, r5
 8012c92:	4638      	mov	r0, r7
 8012c94:	47c0      	blx	r8
 8012c96:	4306      	orrs	r6, r0
 8012c98:	3568      	adds	r5, #104	@ 0x68
 8012c9a:	e7e9      	b.n	8012c70 <_fwalk_sglue+0x10>

08012c9c <iprintf>:
 8012c9c:	b40f      	push	{r0, r1, r2, r3}
 8012c9e:	b507      	push	{r0, r1, r2, lr}
 8012ca0:	4906      	ldr	r1, [pc, #24]	@ (8012cbc <iprintf+0x20>)
 8012ca2:	ab04      	add	r3, sp, #16
 8012ca4:	6808      	ldr	r0, [r1, #0]
 8012ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012caa:	6881      	ldr	r1, [r0, #8]
 8012cac:	9301      	str	r3, [sp, #4]
 8012cae:	f002 fce5 	bl	801567c <_vfiprintf_r>
 8012cb2:	b003      	add	sp, #12
 8012cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cb8:	b004      	add	sp, #16
 8012cba:	4770      	bx	lr
 8012cbc:	24000bb8 	.word	0x24000bb8

08012cc0 <_puts_r>:
 8012cc0:	6a03      	ldr	r3, [r0, #32]
 8012cc2:	b570      	push	{r4, r5, r6, lr}
 8012cc4:	6884      	ldr	r4, [r0, #8]
 8012cc6:	4605      	mov	r5, r0
 8012cc8:	460e      	mov	r6, r1
 8012cca:	b90b      	cbnz	r3, 8012cd0 <_puts_r+0x10>
 8012ccc:	f7ff ffb0 	bl	8012c30 <__sinit>
 8012cd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012cd2:	07db      	lsls	r3, r3, #31
 8012cd4:	d405      	bmi.n	8012ce2 <_puts_r+0x22>
 8012cd6:	89a3      	ldrh	r3, [r4, #12]
 8012cd8:	0598      	lsls	r0, r3, #22
 8012cda:	d402      	bmi.n	8012ce2 <_puts_r+0x22>
 8012cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cde:	f000 fa00 	bl	80130e2 <__retarget_lock_acquire_recursive>
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	0719      	lsls	r1, r3, #28
 8012ce6:	d502      	bpl.n	8012cee <_puts_r+0x2e>
 8012ce8:	6923      	ldr	r3, [r4, #16]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d135      	bne.n	8012d5a <_puts_r+0x9a>
 8012cee:	4621      	mov	r1, r4
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	f000 f8e5 	bl	8012ec0 <__swsetup_r>
 8012cf6:	b380      	cbz	r0, 8012d5a <_puts_r+0x9a>
 8012cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8012cfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012cfe:	07da      	lsls	r2, r3, #31
 8012d00:	d405      	bmi.n	8012d0e <_puts_r+0x4e>
 8012d02:	89a3      	ldrh	r3, [r4, #12]
 8012d04:	059b      	lsls	r3, r3, #22
 8012d06:	d402      	bmi.n	8012d0e <_puts_r+0x4e>
 8012d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d0a:	f000 f9eb 	bl	80130e4 <__retarget_lock_release_recursive>
 8012d0e:	4628      	mov	r0, r5
 8012d10:	bd70      	pop	{r4, r5, r6, pc}
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	da04      	bge.n	8012d20 <_puts_r+0x60>
 8012d16:	69a2      	ldr	r2, [r4, #24]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	dc17      	bgt.n	8012d4c <_puts_r+0x8c>
 8012d1c:	290a      	cmp	r1, #10
 8012d1e:	d015      	beq.n	8012d4c <_puts_r+0x8c>
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	1c5a      	adds	r2, r3, #1
 8012d24:	6022      	str	r2, [r4, #0]
 8012d26:	7019      	strb	r1, [r3, #0]
 8012d28:	68a3      	ldr	r3, [r4, #8]
 8012d2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012d2e:	3b01      	subs	r3, #1
 8012d30:	60a3      	str	r3, [r4, #8]
 8012d32:	2900      	cmp	r1, #0
 8012d34:	d1ed      	bne.n	8012d12 <_puts_r+0x52>
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	da11      	bge.n	8012d5e <_puts_r+0x9e>
 8012d3a:	4622      	mov	r2, r4
 8012d3c:	210a      	movs	r1, #10
 8012d3e:	4628      	mov	r0, r5
 8012d40:	f000 f87f 	bl	8012e42 <__swbuf_r>
 8012d44:	3001      	adds	r0, #1
 8012d46:	d0d7      	beq.n	8012cf8 <_puts_r+0x38>
 8012d48:	250a      	movs	r5, #10
 8012d4a:	e7d7      	b.n	8012cfc <_puts_r+0x3c>
 8012d4c:	4622      	mov	r2, r4
 8012d4e:	4628      	mov	r0, r5
 8012d50:	f000 f877 	bl	8012e42 <__swbuf_r>
 8012d54:	3001      	adds	r0, #1
 8012d56:	d1e7      	bne.n	8012d28 <_puts_r+0x68>
 8012d58:	e7ce      	b.n	8012cf8 <_puts_r+0x38>
 8012d5a:	3e01      	subs	r6, #1
 8012d5c:	e7e4      	b.n	8012d28 <_puts_r+0x68>
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	6022      	str	r2, [r4, #0]
 8012d64:	220a      	movs	r2, #10
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	e7ee      	b.n	8012d48 <_puts_r+0x88>
	...

08012d6c <puts>:
 8012d6c:	4b02      	ldr	r3, [pc, #8]	@ (8012d78 <puts+0xc>)
 8012d6e:	4601      	mov	r1, r0
 8012d70:	6818      	ldr	r0, [r3, #0]
 8012d72:	f7ff bfa5 	b.w	8012cc0 <_puts_r>
 8012d76:	bf00      	nop
 8012d78:	24000bb8 	.word	0x24000bb8

08012d7c <siprintf>:
 8012d7c:	b40e      	push	{r1, r2, r3}
 8012d7e:	b500      	push	{lr}
 8012d80:	b09c      	sub	sp, #112	@ 0x70
 8012d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8012d84:	9002      	str	r0, [sp, #8]
 8012d86:	9006      	str	r0, [sp, #24]
 8012d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d8c:	4809      	ldr	r0, [pc, #36]	@ (8012db4 <siprintf+0x38>)
 8012d8e:	9107      	str	r1, [sp, #28]
 8012d90:	9104      	str	r1, [sp, #16]
 8012d92:	4909      	ldr	r1, [pc, #36]	@ (8012db8 <siprintf+0x3c>)
 8012d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d98:	9105      	str	r1, [sp, #20]
 8012d9a:	6800      	ldr	r0, [r0, #0]
 8012d9c:	9301      	str	r3, [sp, #4]
 8012d9e:	a902      	add	r1, sp, #8
 8012da0:	f002 fb46 	bl	8015430 <_svfiprintf_r>
 8012da4:	9b02      	ldr	r3, [sp, #8]
 8012da6:	2200      	movs	r2, #0
 8012da8:	701a      	strb	r2, [r3, #0]
 8012daa:	b01c      	add	sp, #112	@ 0x70
 8012dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012db0:	b003      	add	sp, #12
 8012db2:	4770      	bx	lr
 8012db4:	24000bb8 	.word	0x24000bb8
 8012db8:	ffff0208 	.word	0xffff0208

08012dbc <__sread>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	460c      	mov	r4, r1
 8012dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dc4:	f000 f92e 	bl	8013024 <_read_r>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	bfab      	itete	ge
 8012dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012dce:	89a3      	ldrhlt	r3, [r4, #12]
 8012dd0:	181b      	addge	r3, r3, r0
 8012dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012dd6:	bfac      	ite	ge
 8012dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012dda:	81a3      	strhlt	r3, [r4, #12]
 8012ddc:	bd10      	pop	{r4, pc}

08012dde <__swrite>:
 8012dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de2:	461f      	mov	r7, r3
 8012de4:	898b      	ldrh	r3, [r1, #12]
 8012de6:	05db      	lsls	r3, r3, #23
 8012de8:	4605      	mov	r5, r0
 8012dea:	460c      	mov	r4, r1
 8012dec:	4616      	mov	r6, r2
 8012dee:	d505      	bpl.n	8012dfc <__swrite+0x1e>
 8012df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012df4:	2302      	movs	r3, #2
 8012df6:	2200      	movs	r2, #0
 8012df8:	f000 f902 	bl	8013000 <_lseek_r>
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012e06:	81a3      	strh	r3, [r4, #12]
 8012e08:	4632      	mov	r2, r6
 8012e0a:	463b      	mov	r3, r7
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e12:	f000 b929 	b.w	8013068 <_write_r>

08012e16 <__sseek>:
 8012e16:	b510      	push	{r4, lr}
 8012e18:	460c      	mov	r4, r1
 8012e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e1e:	f000 f8ef 	bl	8013000 <_lseek_r>
 8012e22:	1c43      	adds	r3, r0, #1
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	bf15      	itete	ne
 8012e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012e32:	81a3      	strheq	r3, [r4, #12]
 8012e34:	bf18      	it	ne
 8012e36:	81a3      	strhne	r3, [r4, #12]
 8012e38:	bd10      	pop	{r4, pc}

08012e3a <__sclose>:
 8012e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e3e:	f000 b8bd 	b.w	8012fbc <_close_r>

08012e42 <__swbuf_r>:
 8012e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e44:	460e      	mov	r6, r1
 8012e46:	4614      	mov	r4, r2
 8012e48:	4605      	mov	r5, r0
 8012e4a:	b118      	cbz	r0, 8012e54 <__swbuf_r+0x12>
 8012e4c:	6a03      	ldr	r3, [r0, #32]
 8012e4e:	b90b      	cbnz	r3, 8012e54 <__swbuf_r+0x12>
 8012e50:	f7ff feee 	bl	8012c30 <__sinit>
 8012e54:	69a3      	ldr	r3, [r4, #24]
 8012e56:	60a3      	str	r3, [r4, #8]
 8012e58:	89a3      	ldrh	r3, [r4, #12]
 8012e5a:	071a      	lsls	r2, r3, #28
 8012e5c:	d501      	bpl.n	8012e62 <__swbuf_r+0x20>
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	b943      	cbnz	r3, 8012e74 <__swbuf_r+0x32>
 8012e62:	4621      	mov	r1, r4
 8012e64:	4628      	mov	r0, r5
 8012e66:	f000 f82b 	bl	8012ec0 <__swsetup_r>
 8012e6a:	b118      	cbz	r0, 8012e74 <__swbuf_r+0x32>
 8012e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8012e70:	4638      	mov	r0, r7
 8012e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e74:	6823      	ldr	r3, [r4, #0]
 8012e76:	6922      	ldr	r2, [r4, #16]
 8012e78:	1a98      	subs	r0, r3, r2
 8012e7a:	6963      	ldr	r3, [r4, #20]
 8012e7c:	b2f6      	uxtb	r6, r6
 8012e7e:	4283      	cmp	r3, r0
 8012e80:	4637      	mov	r7, r6
 8012e82:	dc05      	bgt.n	8012e90 <__swbuf_r+0x4e>
 8012e84:	4621      	mov	r1, r4
 8012e86:	4628      	mov	r0, r5
 8012e88:	f002 fd94 	bl	80159b4 <_fflush_r>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	d1ed      	bne.n	8012e6c <__swbuf_r+0x2a>
 8012e90:	68a3      	ldr	r3, [r4, #8]
 8012e92:	3b01      	subs	r3, #1
 8012e94:	60a3      	str	r3, [r4, #8]
 8012e96:	6823      	ldr	r3, [r4, #0]
 8012e98:	1c5a      	adds	r2, r3, #1
 8012e9a:	6022      	str	r2, [r4, #0]
 8012e9c:	701e      	strb	r6, [r3, #0]
 8012e9e:	6962      	ldr	r2, [r4, #20]
 8012ea0:	1c43      	adds	r3, r0, #1
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d004      	beq.n	8012eb0 <__swbuf_r+0x6e>
 8012ea6:	89a3      	ldrh	r3, [r4, #12]
 8012ea8:	07db      	lsls	r3, r3, #31
 8012eaa:	d5e1      	bpl.n	8012e70 <__swbuf_r+0x2e>
 8012eac:	2e0a      	cmp	r6, #10
 8012eae:	d1df      	bne.n	8012e70 <__swbuf_r+0x2e>
 8012eb0:	4621      	mov	r1, r4
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	f002 fd7e 	bl	80159b4 <_fflush_r>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d0d9      	beq.n	8012e70 <__swbuf_r+0x2e>
 8012ebc:	e7d6      	b.n	8012e6c <__swbuf_r+0x2a>
	...

08012ec0 <__swsetup_r>:
 8012ec0:	b538      	push	{r3, r4, r5, lr}
 8012ec2:	4b29      	ldr	r3, [pc, #164]	@ (8012f68 <__swsetup_r+0xa8>)
 8012ec4:	4605      	mov	r5, r0
 8012ec6:	6818      	ldr	r0, [r3, #0]
 8012ec8:	460c      	mov	r4, r1
 8012eca:	b118      	cbz	r0, 8012ed4 <__swsetup_r+0x14>
 8012ecc:	6a03      	ldr	r3, [r0, #32]
 8012ece:	b90b      	cbnz	r3, 8012ed4 <__swsetup_r+0x14>
 8012ed0:	f7ff feae 	bl	8012c30 <__sinit>
 8012ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ed8:	0719      	lsls	r1, r3, #28
 8012eda:	d422      	bmi.n	8012f22 <__swsetup_r+0x62>
 8012edc:	06da      	lsls	r2, r3, #27
 8012ede:	d407      	bmi.n	8012ef0 <__swsetup_r+0x30>
 8012ee0:	2209      	movs	r2, #9
 8012ee2:	602a      	str	r2, [r5, #0]
 8012ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ee8:	81a3      	strh	r3, [r4, #12]
 8012eea:	f04f 30ff 	mov.w	r0, #4294967295
 8012eee:	e033      	b.n	8012f58 <__swsetup_r+0x98>
 8012ef0:	0758      	lsls	r0, r3, #29
 8012ef2:	d512      	bpl.n	8012f1a <__swsetup_r+0x5a>
 8012ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ef6:	b141      	cbz	r1, 8012f0a <__swsetup_r+0x4a>
 8012ef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012efc:	4299      	cmp	r1, r3
 8012efe:	d002      	beq.n	8012f06 <__swsetup_r+0x46>
 8012f00:	4628      	mov	r0, r5
 8012f02:	f000 ff03 	bl	8013d0c <_free_r>
 8012f06:	2300      	movs	r3, #0
 8012f08:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f10:	81a3      	strh	r3, [r4, #12]
 8012f12:	2300      	movs	r3, #0
 8012f14:	6063      	str	r3, [r4, #4]
 8012f16:	6923      	ldr	r3, [r4, #16]
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	89a3      	ldrh	r3, [r4, #12]
 8012f1c:	f043 0308 	orr.w	r3, r3, #8
 8012f20:	81a3      	strh	r3, [r4, #12]
 8012f22:	6923      	ldr	r3, [r4, #16]
 8012f24:	b94b      	cbnz	r3, 8012f3a <__swsetup_r+0x7a>
 8012f26:	89a3      	ldrh	r3, [r4, #12]
 8012f28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f30:	d003      	beq.n	8012f3a <__swsetup_r+0x7a>
 8012f32:	4621      	mov	r1, r4
 8012f34:	4628      	mov	r0, r5
 8012f36:	f002 fd9d 	bl	8015a74 <__smakebuf_r>
 8012f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f3e:	f013 0201 	ands.w	r2, r3, #1
 8012f42:	d00a      	beq.n	8012f5a <__swsetup_r+0x9a>
 8012f44:	2200      	movs	r2, #0
 8012f46:	60a2      	str	r2, [r4, #8]
 8012f48:	6962      	ldr	r2, [r4, #20]
 8012f4a:	4252      	negs	r2, r2
 8012f4c:	61a2      	str	r2, [r4, #24]
 8012f4e:	6922      	ldr	r2, [r4, #16]
 8012f50:	b942      	cbnz	r2, 8012f64 <__swsetup_r+0xa4>
 8012f52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f56:	d1c5      	bne.n	8012ee4 <__swsetup_r+0x24>
 8012f58:	bd38      	pop	{r3, r4, r5, pc}
 8012f5a:	0799      	lsls	r1, r3, #30
 8012f5c:	bf58      	it	pl
 8012f5e:	6962      	ldrpl	r2, [r4, #20]
 8012f60:	60a2      	str	r2, [r4, #8]
 8012f62:	e7f4      	b.n	8012f4e <__swsetup_r+0x8e>
 8012f64:	2000      	movs	r0, #0
 8012f66:	e7f7      	b.n	8012f58 <__swsetup_r+0x98>
 8012f68:	24000bb8 	.word	0x24000bb8

08012f6c <memset>:
 8012f6c:	4402      	add	r2, r0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d100      	bne.n	8012f76 <memset+0xa>
 8012f74:	4770      	bx	lr
 8012f76:	f803 1b01 	strb.w	r1, [r3], #1
 8012f7a:	e7f9      	b.n	8012f70 <memset+0x4>

08012f7c <time>:
 8012f7c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8012f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8012fb0 <time+0x34>)
 8012f80:	f04f 36ff 	mov.w	r6, #4294967295
 8012f84:	f04f 37ff 	mov.w	r7, #4294967295
 8012f88:	4669      	mov	r1, sp
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	6818      	ldr	r0, [r3, #0]
 8012f90:	e9cd 6700 	strd	r6, r7, [sp]
 8012f94:	f000 f822 	bl	8012fdc <_gettimeofday_r>
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	bfb8      	it	lt
 8012f9c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8012fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fa4:	b10c      	cbz	r4, 8012faa <time+0x2e>
 8012fa6:	e9c4 0100 	strd	r0, r1, [r4]
 8012faa:	b004      	add	sp, #16
 8012fac:	bdd0      	pop	{r4, r6, r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	24000bb8 	.word	0x24000bb8

08012fb4 <_localeconv_r>:
 8012fb4:	4800      	ldr	r0, [pc, #0]	@ (8012fb8 <_localeconv_r+0x4>)
 8012fb6:	4770      	bx	lr
 8012fb8:	24000cf8 	.word	0x24000cf8

08012fbc <_close_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d06      	ldr	r5, [pc, #24]	@ (8012fd8 <_close_r+0x1c>)
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	602b      	str	r3, [r5, #0]
 8012fc8:	f7ee fad6 	bl	8001578 <_close>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_close_r+0x1a>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_close_r+0x1a>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	24009f54 	.word	0x24009f54

08012fdc <_gettimeofday_r>:
 8012fdc:	b538      	push	{r3, r4, r5, lr}
 8012fde:	4d07      	ldr	r5, [pc, #28]	@ (8012ffc <_gettimeofday_r+0x20>)
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	4608      	mov	r0, r1
 8012fe6:	4611      	mov	r1, r2
 8012fe8:	602b      	str	r3, [r5, #0]
 8012fea:	f003 fa2b 	bl	8016444 <_gettimeofday>
 8012fee:	1c43      	adds	r3, r0, #1
 8012ff0:	d102      	bne.n	8012ff8 <_gettimeofday_r+0x1c>
 8012ff2:	682b      	ldr	r3, [r5, #0]
 8012ff4:	b103      	cbz	r3, 8012ff8 <_gettimeofday_r+0x1c>
 8012ff6:	6023      	str	r3, [r4, #0]
 8012ff8:	bd38      	pop	{r3, r4, r5, pc}
 8012ffa:	bf00      	nop
 8012ffc:	24009f54 	.word	0x24009f54

08013000 <_lseek_r>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4d07      	ldr	r5, [pc, #28]	@ (8013020 <_lseek_r+0x20>)
 8013004:	4604      	mov	r4, r0
 8013006:	4608      	mov	r0, r1
 8013008:	4611      	mov	r1, r2
 801300a:	2200      	movs	r2, #0
 801300c:	602a      	str	r2, [r5, #0]
 801300e:	461a      	mov	r2, r3
 8013010:	f7ee fac9 	bl	80015a6 <_lseek>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d102      	bne.n	801301e <_lseek_r+0x1e>
 8013018:	682b      	ldr	r3, [r5, #0]
 801301a:	b103      	cbz	r3, 801301e <_lseek_r+0x1e>
 801301c:	6023      	str	r3, [r4, #0]
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	24009f54 	.word	0x24009f54

08013024 <_read_r>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4d07      	ldr	r5, [pc, #28]	@ (8013044 <_read_r+0x20>)
 8013028:	4604      	mov	r4, r0
 801302a:	4608      	mov	r0, r1
 801302c:	4611      	mov	r1, r2
 801302e:	2200      	movs	r2, #0
 8013030:	602a      	str	r2, [r5, #0]
 8013032:	461a      	mov	r2, r3
 8013034:	f7ee fae4 	bl	8001600 <_read>
 8013038:	1c43      	adds	r3, r0, #1
 801303a:	d102      	bne.n	8013042 <_read_r+0x1e>
 801303c:	682b      	ldr	r3, [r5, #0]
 801303e:	b103      	cbz	r3, 8013042 <_read_r+0x1e>
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	bd38      	pop	{r3, r4, r5, pc}
 8013044:	24009f54 	.word	0x24009f54

08013048 <_sbrk_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4d06      	ldr	r5, [pc, #24]	@ (8013064 <_sbrk_r+0x1c>)
 801304c:	2300      	movs	r3, #0
 801304e:	4604      	mov	r4, r0
 8013050:	4608      	mov	r0, r1
 8013052:	602b      	str	r3, [r5, #0]
 8013054:	f7ef f9ca 	bl	80023ec <_sbrk>
 8013058:	1c43      	adds	r3, r0, #1
 801305a:	d102      	bne.n	8013062 <_sbrk_r+0x1a>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	b103      	cbz	r3, 8013062 <_sbrk_r+0x1a>
 8013060:	6023      	str	r3, [r4, #0]
 8013062:	bd38      	pop	{r3, r4, r5, pc}
 8013064:	24009f54 	.word	0x24009f54

08013068 <_write_r>:
 8013068:	b538      	push	{r3, r4, r5, lr}
 801306a:	4d07      	ldr	r5, [pc, #28]	@ (8013088 <_write_r+0x20>)
 801306c:	4604      	mov	r4, r0
 801306e:	4608      	mov	r0, r1
 8013070:	4611      	mov	r1, r2
 8013072:	2200      	movs	r2, #0
 8013074:	602a      	str	r2, [r5, #0]
 8013076:	461a      	mov	r2, r3
 8013078:	f7ee faea 	bl	8001650 <_write>
 801307c:	1c43      	adds	r3, r0, #1
 801307e:	d102      	bne.n	8013086 <_write_r+0x1e>
 8013080:	682b      	ldr	r3, [r5, #0]
 8013082:	b103      	cbz	r3, 8013086 <_write_r+0x1e>
 8013084:	6023      	str	r3, [r4, #0]
 8013086:	bd38      	pop	{r3, r4, r5, pc}
 8013088:	24009f54 	.word	0x24009f54

0801308c <__errno>:
 801308c:	4b01      	ldr	r3, [pc, #4]	@ (8013094 <__errno+0x8>)
 801308e:	6818      	ldr	r0, [r3, #0]
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	24000bb8 	.word	0x24000bb8

08013098 <__libc_init_array>:
 8013098:	b570      	push	{r4, r5, r6, lr}
 801309a:	4d0d      	ldr	r5, [pc, #52]	@ (80130d0 <__libc_init_array+0x38>)
 801309c:	4c0d      	ldr	r4, [pc, #52]	@ (80130d4 <__libc_init_array+0x3c>)
 801309e:	1b64      	subs	r4, r4, r5
 80130a0:	10a4      	asrs	r4, r4, #2
 80130a2:	2600      	movs	r6, #0
 80130a4:	42a6      	cmp	r6, r4
 80130a6:	d109      	bne.n	80130bc <__libc_init_array+0x24>
 80130a8:	4d0b      	ldr	r5, [pc, #44]	@ (80130d8 <__libc_init_array+0x40>)
 80130aa:	4c0c      	ldr	r4, [pc, #48]	@ (80130dc <__libc_init_array+0x44>)
 80130ac:	f003 f9d2 	bl	8016454 <_init>
 80130b0:	1b64      	subs	r4, r4, r5
 80130b2:	10a4      	asrs	r4, r4, #2
 80130b4:	2600      	movs	r6, #0
 80130b6:	42a6      	cmp	r6, r4
 80130b8:	d105      	bne.n	80130c6 <__libc_init_array+0x2e>
 80130ba:	bd70      	pop	{r4, r5, r6, pc}
 80130bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80130c0:	4798      	blx	r3
 80130c2:	3601      	adds	r6, #1
 80130c4:	e7ee      	b.n	80130a4 <__libc_init_array+0xc>
 80130c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80130ca:	4798      	blx	r3
 80130cc:	3601      	adds	r6, #1
 80130ce:	e7f2      	b.n	80130b6 <__libc_init_array+0x1e>
 80130d0:	08018770 	.word	0x08018770
 80130d4:	08018770 	.word	0x08018770
 80130d8:	08018770 	.word	0x08018770
 80130dc:	08018774 	.word	0x08018774

080130e0 <__retarget_lock_init_recursive>:
 80130e0:	4770      	bx	lr

080130e2 <__retarget_lock_acquire_recursive>:
 80130e2:	4770      	bx	lr

080130e4 <__retarget_lock_release_recursive>:
 80130e4:	4770      	bx	lr

080130e6 <memcpy>:
 80130e6:	440a      	add	r2, r1
 80130e8:	4291      	cmp	r1, r2
 80130ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80130ee:	d100      	bne.n	80130f2 <memcpy+0xc>
 80130f0:	4770      	bx	lr
 80130f2:	b510      	push	{r4, lr}
 80130f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130fc:	4291      	cmp	r1, r2
 80130fe:	d1f9      	bne.n	80130f4 <memcpy+0xe>
 8013100:	bd10      	pop	{r4, pc}
	...

08013104 <nanf>:
 8013104:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801310c <nanf+0x8>
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop
 801310c:	7fc00000 	.word	0x7fc00000

08013110 <__assert_func>:
 8013110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013112:	4614      	mov	r4, r2
 8013114:	461a      	mov	r2, r3
 8013116:	4b09      	ldr	r3, [pc, #36]	@ (801313c <__assert_func+0x2c>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4605      	mov	r5, r0
 801311c:	68d8      	ldr	r0, [r3, #12]
 801311e:	b954      	cbnz	r4, 8013136 <__assert_func+0x26>
 8013120:	4b07      	ldr	r3, [pc, #28]	@ (8013140 <__assert_func+0x30>)
 8013122:	461c      	mov	r4, r3
 8013124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013128:	9100      	str	r1, [sp, #0]
 801312a:	462b      	mov	r3, r5
 801312c:	4905      	ldr	r1, [pc, #20]	@ (8013144 <__assert_func+0x34>)
 801312e:	f002 fc69 	bl	8015a04 <fiprintf>
 8013132:	f002 fd31 	bl	8015b98 <abort>
 8013136:	4b04      	ldr	r3, [pc, #16]	@ (8013148 <__assert_func+0x38>)
 8013138:	e7f4      	b.n	8013124 <__assert_func+0x14>
 801313a:	bf00      	nop
 801313c:	24000bb8 	.word	0x24000bb8
 8013140:	08018277 	.word	0x08018277
 8013144:	08018249 	.word	0x08018249
 8013148:	0801823c 	.word	0x0801823c

0801314c <quorem>:
 801314c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013150:	6903      	ldr	r3, [r0, #16]
 8013152:	690c      	ldr	r4, [r1, #16]
 8013154:	42a3      	cmp	r3, r4
 8013156:	4607      	mov	r7, r0
 8013158:	db7e      	blt.n	8013258 <quorem+0x10c>
 801315a:	3c01      	subs	r4, #1
 801315c:	f101 0814 	add.w	r8, r1, #20
 8013160:	00a3      	lsls	r3, r4, #2
 8013162:	f100 0514 	add.w	r5, r0, #20
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801316c:	9301      	str	r3, [sp, #4]
 801316e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013176:	3301      	adds	r3, #1
 8013178:	429a      	cmp	r2, r3
 801317a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801317e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013182:	d32e      	bcc.n	80131e2 <quorem+0x96>
 8013184:	f04f 0a00 	mov.w	sl, #0
 8013188:	46c4      	mov	ip, r8
 801318a:	46ae      	mov	lr, r5
 801318c:	46d3      	mov	fp, sl
 801318e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013192:	b298      	uxth	r0, r3
 8013194:	fb06 a000 	mla	r0, r6, r0, sl
 8013198:	0c02      	lsrs	r2, r0, #16
 801319a:	0c1b      	lsrs	r3, r3, #16
 801319c:	fb06 2303 	mla	r3, r6, r3, r2
 80131a0:	f8de 2000 	ldr.w	r2, [lr]
 80131a4:	b280      	uxth	r0, r0
 80131a6:	b292      	uxth	r2, r2
 80131a8:	1a12      	subs	r2, r2, r0
 80131aa:	445a      	add	r2, fp
 80131ac:	f8de 0000 	ldr.w	r0, [lr]
 80131b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80131ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80131be:	b292      	uxth	r2, r2
 80131c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80131c4:	45e1      	cmp	r9, ip
 80131c6:	f84e 2b04 	str.w	r2, [lr], #4
 80131ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80131ce:	d2de      	bcs.n	801318e <quorem+0x42>
 80131d0:	9b00      	ldr	r3, [sp, #0]
 80131d2:	58eb      	ldr	r3, [r5, r3]
 80131d4:	b92b      	cbnz	r3, 80131e2 <quorem+0x96>
 80131d6:	9b01      	ldr	r3, [sp, #4]
 80131d8:	3b04      	subs	r3, #4
 80131da:	429d      	cmp	r5, r3
 80131dc:	461a      	mov	r2, r3
 80131de:	d32f      	bcc.n	8013240 <quorem+0xf4>
 80131e0:	613c      	str	r4, [r7, #16]
 80131e2:	4638      	mov	r0, r7
 80131e4:	f001 f8a0 	bl	8014328 <__mcmp>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	db25      	blt.n	8013238 <quorem+0xec>
 80131ec:	4629      	mov	r1, r5
 80131ee:	2000      	movs	r0, #0
 80131f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80131f4:	f8d1 c000 	ldr.w	ip, [r1]
 80131f8:	fa1f fe82 	uxth.w	lr, r2
 80131fc:	fa1f f38c 	uxth.w	r3, ip
 8013200:	eba3 030e 	sub.w	r3, r3, lr
 8013204:	4403      	add	r3, r0
 8013206:	0c12      	lsrs	r2, r2, #16
 8013208:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801320c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013210:	b29b      	uxth	r3, r3
 8013212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013216:	45c1      	cmp	r9, r8
 8013218:	f841 3b04 	str.w	r3, [r1], #4
 801321c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013220:	d2e6      	bcs.n	80131f0 <quorem+0xa4>
 8013222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801322a:	b922      	cbnz	r2, 8013236 <quorem+0xea>
 801322c:	3b04      	subs	r3, #4
 801322e:	429d      	cmp	r5, r3
 8013230:	461a      	mov	r2, r3
 8013232:	d30b      	bcc.n	801324c <quorem+0x100>
 8013234:	613c      	str	r4, [r7, #16]
 8013236:	3601      	adds	r6, #1
 8013238:	4630      	mov	r0, r6
 801323a:	b003      	add	sp, #12
 801323c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013240:	6812      	ldr	r2, [r2, #0]
 8013242:	3b04      	subs	r3, #4
 8013244:	2a00      	cmp	r2, #0
 8013246:	d1cb      	bne.n	80131e0 <quorem+0x94>
 8013248:	3c01      	subs	r4, #1
 801324a:	e7c6      	b.n	80131da <quorem+0x8e>
 801324c:	6812      	ldr	r2, [r2, #0]
 801324e:	3b04      	subs	r3, #4
 8013250:	2a00      	cmp	r2, #0
 8013252:	d1ef      	bne.n	8013234 <quorem+0xe8>
 8013254:	3c01      	subs	r4, #1
 8013256:	e7ea      	b.n	801322e <quorem+0xe2>
 8013258:	2000      	movs	r0, #0
 801325a:	e7ee      	b.n	801323a <quorem+0xee>
 801325c:	0000      	movs	r0, r0
	...

08013260 <_dtoa_r>:
 8013260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	ed2d 8b02 	vpush	{d8}
 8013268:	69c7      	ldr	r7, [r0, #28]
 801326a:	b091      	sub	sp, #68	@ 0x44
 801326c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013270:	ec55 4b10 	vmov	r4, r5, d0
 8013274:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013276:	9107      	str	r1, [sp, #28]
 8013278:	4681      	mov	r9, r0
 801327a:	9209      	str	r2, [sp, #36]	@ 0x24
 801327c:	930d      	str	r3, [sp, #52]	@ 0x34
 801327e:	b97f      	cbnz	r7, 80132a0 <_dtoa_r+0x40>
 8013280:	2010      	movs	r0, #16
 8013282:	f7fe fcf3 	bl	8011c6c <malloc>
 8013286:	4602      	mov	r2, r0
 8013288:	f8c9 001c 	str.w	r0, [r9, #28]
 801328c:	b920      	cbnz	r0, 8013298 <_dtoa_r+0x38>
 801328e:	4ba0      	ldr	r3, [pc, #640]	@ (8013510 <_dtoa_r+0x2b0>)
 8013290:	21ef      	movs	r1, #239	@ 0xef
 8013292:	48a0      	ldr	r0, [pc, #640]	@ (8013514 <_dtoa_r+0x2b4>)
 8013294:	f7ff ff3c 	bl	8013110 <__assert_func>
 8013298:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801329c:	6007      	str	r7, [r0, #0]
 801329e:	60c7      	str	r7, [r0, #12]
 80132a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80132a4:	6819      	ldr	r1, [r3, #0]
 80132a6:	b159      	cbz	r1, 80132c0 <_dtoa_r+0x60>
 80132a8:	685a      	ldr	r2, [r3, #4]
 80132aa:	604a      	str	r2, [r1, #4]
 80132ac:	2301      	movs	r3, #1
 80132ae:	4093      	lsls	r3, r2
 80132b0:	608b      	str	r3, [r1, #8]
 80132b2:	4648      	mov	r0, r9
 80132b4:	f000 fdb4 	bl	8013e20 <_Bfree>
 80132b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	1e2b      	subs	r3, r5, #0
 80132c2:	bfbb      	ittet	lt
 80132c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80132c8:	9303      	strlt	r3, [sp, #12]
 80132ca:	2300      	movge	r3, #0
 80132cc:	2201      	movlt	r2, #1
 80132ce:	bfac      	ite	ge
 80132d0:	6033      	strge	r3, [r6, #0]
 80132d2:	6032      	strlt	r2, [r6, #0]
 80132d4:	4b90      	ldr	r3, [pc, #576]	@ (8013518 <_dtoa_r+0x2b8>)
 80132d6:	9e03      	ldr	r6, [sp, #12]
 80132d8:	43b3      	bics	r3, r6
 80132da:	d110      	bne.n	80132fe <_dtoa_r+0x9e>
 80132dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80132de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80132e2:	6013      	str	r3, [r2, #0]
 80132e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80132e8:	4323      	orrs	r3, r4
 80132ea:	f000 84de 	beq.w	8013caa <_dtoa_r+0xa4a>
 80132ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80132f0:	4f8a      	ldr	r7, [pc, #552]	@ (801351c <_dtoa_r+0x2bc>)
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	f000 84e0 	beq.w	8013cb8 <_dtoa_r+0xa58>
 80132f8:	1cfb      	adds	r3, r7, #3
 80132fa:	f000 bcdb 	b.w	8013cb4 <_dtoa_r+0xa54>
 80132fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013302:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330a:	d10a      	bne.n	8013322 <_dtoa_r+0xc2>
 801330c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801330e:	2301      	movs	r3, #1
 8013310:	6013      	str	r3, [r2, #0]
 8013312:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013314:	b113      	cbz	r3, 801331c <_dtoa_r+0xbc>
 8013316:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013318:	4b81      	ldr	r3, [pc, #516]	@ (8013520 <_dtoa_r+0x2c0>)
 801331a:	6013      	str	r3, [r2, #0]
 801331c:	4f81      	ldr	r7, [pc, #516]	@ (8013524 <_dtoa_r+0x2c4>)
 801331e:	f000 bccb 	b.w	8013cb8 <_dtoa_r+0xa58>
 8013322:	aa0e      	add	r2, sp, #56	@ 0x38
 8013324:	a90f      	add	r1, sp, #60	@ 0x3c
 8013326:	4648      	mov	r0, r9
 8013328:	eeb0 0b48 	vmov.f64	d0, d8
 801332c:	f001 f91c 	bl	8014568 <__d2b>
 8013330:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013336:	9001      	str	r0, [sp, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d045      	beq.n	80133c8 <_dtoa_r+0x168>
 801333c:	eeb0 7b48 	vmov.f64	d7, d8
 8013340:	ee18 1a90 	vmov	r1, s17
 8013344:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013348:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801334c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013350:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013354:	2500      	movs	r5, #0
 8013356:	ee07 1a90 	vmov	s15, r1
 801335a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801335e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80134f8 <_dtoa_r+0x298>
 8013362:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013366:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013500 <_dtoa_r+0x2a0>
 801336a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801336e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013508 <_dtoa_r+0x2a8>
 8013372:	ee07 3a90 	vmov	s15, r3
 8013376:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801337a:	eeb0 7b46 	vmov.f64	d7, d6
 801337e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013382:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013386:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801338e:	ee16 8a90 	vmov	r8, s13
 8013392:	d508      	bpl.n	80133a6 <_dtoa_r+0x146>
 8013394:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013398:	eeb4 6b47 	vcmp.f64	d6, d7
 801339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a0:	bf18      	it	ne
 80133a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80133a6:	f1b8 0f16 	cmp.w	r8, #22
 80133aa:	d82b      	bhi.n	8013404 <_dtoa_r+0x1a4>
 80133ac:	495e      	ldr	r1, [pc, #376]	@ (8013528 <_dtoa_r+0x2c8>)
 80133ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80133b2:	ed91 7b00 	vldr	d7, [r1]
 80133b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80133ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133be:	d501      	bpl.n	80133c4 <_dtoa_r+0x164>
 80133c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80133c4:	2100      	movs	r1, #0
 80133c6:	e01e      	b.n	8013406 <_dtoa_r+0x1a6>
 80133c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133ca:	4413      	add	r3, r2
 80133cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80133d0:	2920      	cmp	r1, #32
 80133d2:	bfc1      	itttt	gt
 80133d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80133d8:	408e      	lslgt	r6, r1
 80133da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80133de:	fa24 f101 	lsrgt.w	r1, r4, r1
 80133e2:	bfd6      	itet	le
 80133e4:	f1c1 0120 	rsble	r1, r1, #32
 80133e8:	4331      	orrgt	r1, r6
 80133ea:	fa04 f101 	lslle.w	r1, r4, r1
 80133ee:	ee07 1a90 	vmov	s15, r1
 80133f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80133f6:	3b01      	subs	r3, #1
 80133f8:	ee17 1a90 	vmov	r1, s15
 80133fc:	2501      	movs	r5, #1
 80133fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013402:	e7a8      	b.n	8013356 <_dtoa_r+0xf6>
 8013404:	2101      	movs	r1, #1
 8013406:	1ad2      	subs	r2, r2, r3
 8013408:	1e53      	subs	r3, r2, #1
 801340a:	9306      	str	r3, [sp, #24]
 801340c:	bf45      	ittet	mi
 801340e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013412:	9305      	strmi	r3, [sp, #20]
 8013414:	2300      	movpl	r3, #0
 8013416:	2300      	movmi	r3, #0
 8013418:	bf4c      	ite	mi
 801341a:	9306      	strmi	r3, [sp, #24]
 801341c:	9305      	strpl	r3, [sp, #20]
 801341e:	f1b8 0f00 	cmp.w	r8, #0
 8013422:	910c      	str	r1, [sp, #48]	@ 0x30
 8013424:	db18      	blt.n	8013458 <_dtoa_r+0x1f8>
 8013426:	9b06      	ldr	r3, [sp, #24]
 8013428:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801342c:	4443      	add	r3, r8
 801342e:	9306      	str	r3, [sp, #24]
 8013430:	2300      	movs	r3, #0
 8013432:	9a07      	ldr	r2, [sp, #28]
 8013434:	2a09      	cmp	r2, #9
 8013436:	d849      	bhi.n	80134cc <_dtoa_r+0x26c>
 8013438:	2a05      	cmp	r2, #5
 801343a:	bfc4      	itt	gt
 801343c:	3a04      	subgt	r2, #4
 801343e:	9207      	strgt	r2, [sp, #28]
 8013440:	9a07      	ldr	r2, [sp, #28]
 8013442:	f1a2 0202 	sub.w	r2, r2, #2
 8013446:	bfcc      	ite	gt
 8013448:	2400      	movgt	r4, #0
 801344a:	2401      	movle	r4, #1
 801344c:	2a03      	cmp	r2, #3
 801344e:	d848      	bhi.n	80134e2 <_dtoa_r+0x282>
 8013450:	e8df f002 	tbb	[pc, r2]
 8013454:	3a2c2e0b 	.word	0x3a2c2e0b
 8013458:	9b05      	ldr	r3, [sp, #20]
 801345a:	2200      	movs	r2, #0
 801345c:	eba3 0308 	sub.w	r3, r3, r8
 8013460:	9305      	str	r3, [sp, #20]
 8013462:	920a      	str	r2, [sp, #40]	@ 0x28
 8013464:	f1c8 0300 	rsb	r3, r8, #0
 8013468:	e7e3      	b.n	8013432 <_dtoa_r+0x1d2>
 801346a:	2200      	movs	r2, #0
 801346c:	9208      	str	r2, [sp, #32]
 801346e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013470:	2a00      	cmp	r2, #0
 8013472:	dc39      	bgt.n	80134e8 <_dtoa_r+0x288>
 8013474:	f04f 0b01 	mov.w	fp, #1
 8013478:	46da      	mov	sl, fp
 801347a:	465a      	mov	r2, fp
 801347c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013480:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013484:	2100      	movs	r1, #0
 8013486:	2004      	movs	r0, #4
 8013488:	f100 0614 	add.w	r6, r0, #20
 801348c:	4296      	cmp	r6, r2
 801348e:	d930      	bls.n	80134f2 <_dtoa_r+0x292>
 8013490:	6079      	str	r1, [r7, #4]
 8013492:	4648      	mov	r0, r9
 8013494:	9304      	str	r3, [sp, #16]
 8013496:	f000 fc83 	bl	8013da0 <_Balloc>
 801349a:	9b04      	ldr	r3, [sp, #16]
 801349c:	4607      	mov	r7, r0
 801349e:	2800      	cmp	r0, #0
 80134a0:	d146      	bne.n	8013530 <_dtoa_r+0x2d0>
 80134a2:	4b22      	ldr	r3, [pc, #136]	@ (801352c <_dtoa_r+0x2cc>)
 80134a4:	4602      	mov	r2, r0
 80134a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80134aa:	e6f2      	b.n	8013292 <_dtoa_r+0x32>
 80134ac:	2201      	movs	r2, #1
 80134ae:	e7dd      	b.n	801346c <_dtoa_r+0x20c>
 80134b0:	2200      	movs	r2, #0
 80134b2:	9208      	str	r2, [sp, #32]
 80134b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80134b6:	eb08 0b02 	add.w	fp, r8, r2
 80134ba:	f10b 0a01 	add.w	sl, fp, #1
 80134be:	4652      	mov	r2, sl
 80134c0:	2a01      	cmp	r2, #1
 80134c2:	bfb8      	it	lt
 80134c4:	2201      	movlt	r2, #1
 80134c6:	e7db      	b.n	8013480 <_dtoa_r+0x220>
 80134c8:	2201      	movs	r2, #1
 80134ca:	e7f2      	b.n	80134b2 <_dtoa_r+0x252>
 80134cc:	2401      	movs	r4, #1
 80134ce:	2200      	movs	r2, #0
 80134d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80134d4:	f04f 3bff 	mov.w	fp, #4294967295
 80134d8:	2100      	movs	r1, #0
 80134da:	46da      	mov	sl, fp
 80134dc:	2212      	movs	r2, #18
 80134de:	9109      	str	r1, [sp, #36]	@ 0x24
 80134e0:	e7ce      	b.n	8013480 <_dtoa_r+0x220>
 80134e2:	2201      	movs	r2, #1
 80134e4:	9208      	str	r2, [sp, #32]
 80134e6:	e7f5      	b.n	80134d4 <_dtoa_r+0x274>
 80134e8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80134ec:	46da      	mov	sl, fp
 80134ee:	465a      	mov	r2, fp
 80134f0:	e7c6      	b.n	8013480 <_dtoa_r+0x220>
 80134f2:	3101      	adds	r1, #1
 80134f4:	0040      	lsls	r0, r0, #1
 80134f6:	e7c7      	b.n	8013488 <_dtoa_r+0x228>
 80134f8:	636f4361 	.word	0x636f4361
 80134fc:	3fd287a7 	.word	0x3fd287a7
 8013500:	8b60c8b3 	.word	0x8b60c8b3
 8013504:	3fc68a28 	.word	0x3fc68a28
 8013508:	509f79fb 	.word	0x509f79fb
 801350c:	3fd34413 	.word	0x3fd34413
 8013510:	08018194 	.word	0x08018194
 8013514:	08018285 	.word	0x08018285
 8013518:	7ff00000 	.word	0x7ff00000
 801351c:	08018281 	.word	0x08018281
 8013520:	08018214 	.word	0x08018214
 8013524:	08018213 	.word	0x08018213
 8013528:	08018380 	.word	0x08018380
 801352c:	080182dd 	.word	0x080182dd
 8013530:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013534:	f1ba 0f0e 	cmp.w	sl, #14
 8013538:	6010      	str	r0, [r2, #0]
 801353a:	d86f      	bhi.n	801361c <_dtoa_r+0x3bc>
 801353c:	2c00      	cmp	r4, #0
 801353e:	d06d      	beq.n	801361c <_dtoa_r+0x3bc>
 8013540:	f1b8 0f00 	cmp.w	r8, #0
 8013544:	f340 80c2 	ble.w	80136cc <_dtoa_r+0x46c>
 8013548:	4aca      	ldr	r2, [pc, #808]	@ (8013874 <_dtoa_r+0x614>)
 801354a:	f008 010f 	and.w	r1, r8, #15
 801354e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013552:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013556:	ed92 7b00 	vldr	d7, [r2]
 801355a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801355e:	f000 80a9 	beq.w	80136b4 <_dtoa_r+0x454>
 8013562:	4ac5      	ldr	r2, [pc, #788]	@ (8013878 <_dtoa_r+0x618>)
 8013564:	ed92 6b08 	vldr	d6, [r2, #32]
 8013568:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801356c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013570:	f001 010f 	and.w	r1, r1, #15
 8013574:	2203      	movs	r2, #3
 8013576:	48c0      	ldr	r0, [pc, #768]	@ (8013878 <_dtoa_r+0x618>)
 8013578:	2900      	cmp	r1, #0
 801357a:	f040 809d 	bne.w	80136b8 <_dtoa_r+0x458>
 801357e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013582:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013586:	ed8d 7b02 	vstr	d7, [sp, #8]
 801358a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801358c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013590:	2900      	cmp	r1, #0
 8013592:	f000 80c1 	beq.w	8013718 <_dtoa_r+0x4b8>
 8013596:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801359a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a2:	f140 80b9 	bpl.w	8013718 <_dtoa_r+0x4b8>
 80135a6:	f1ba 0f00 	cmp.w	sl, #0
 80135aa:	f000 80b5 	beq.w	8013718 <_dtoa_r+0x4b8>
 80135ae:	f1bb 0f00 	cmp.w	fp, #0
 80135b2:	dd31      	ble.n	8013618 <_dtoa_r+0x3b8>
 80135b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80135b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80135bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80135c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80135c4:	9104      	str	r1, [sp, #16]
 80135c6:	3201      	adds	r2, #1
 80135c8:	465c      	mov	r4, fp
 80135ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80135ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80135d2:	ee07 2a90 	vmov	s15, r2
 80135d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80135da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80135de:	ee15 2a90 	vmov	r2, s11
 80135e2:	ec51 0b15 	vmov	r0, r1, d5
 80135e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80135ea:	2c00      	cmp	r4, #0
 80135ec:	f040 8098 	bne.w	8013720 <_dtoa_r+0x4c0>
 80135f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80135f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80135f8:	ec41 0b17 	vmov	d7, r0, r1
 80135fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013604:	f300 8261 	bgt.w	8013aca <_dtoa_r+0x86a>
 8013608:	eeb1 7b47 	vneg.f64	d7, d7
 801360c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013614:	f100 80f5 	bmi.w	8013802 <_dtoa_r+0x5a2>
 8013618:	ed8d 8b02 	vstr	d8, [sp, #8]
 801361c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801361e:	2a00      	cmp	r2, #0
 8013620:	f2c0 812c 	blt.w	801387c <_dtoa_r+0x61c>
 8013624:	f1b8 0f0e 	cmp.w	r8, #14
 8013628:	f300 8128 	bgt.w	801387c <_dtoa_r+0x61c>
 801362c:	4b91      	ldr	r3, [pc, #580]	@ (8013874 <_dtoa_r+0x614>)
 801362e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013632:	ed93 6b00 	vldr	d6, [r3]
 8013636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013638:	2b00      	cmp	r3, #0
 801363a:	da03      	bge.n	8013644 <_dtoa_r+0x3e4>
 801363c:	f1ba 0f00 	cmp.w	sl, #0
 8013640:	f340 80d2 	ble.w	80137e8 <_dtoa_r+0x588>
 8013644:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013648:	ed9d 7b02 	vldr	d7, [sp, #8]
 801364c:	463e      	mov	r6, r7
 801364e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013652:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013656:	ee15 3a10 	vmov	r3, s10
 801365a:	3330      	adds	r3, #48	@ 0x30
 801365c:	f806 3b01 	strb.w	r3, [r6], #1
 8013660:	1bf3      	subs	r3, r6, r7
 8013662:	459a      	cmp	sl, r3
 8013664:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013668:	eea3 7b46 	vfms.f64	d7, d3, d6
 801366c:	f040 80f8 	bne.w	8013860 <_dtoa_r+0x600>
 8013670:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013674:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367c:	f300 80dd 	bgt.w	801383a <_dtoa_r+0x5da>
 8013680:	eeb4 7b46 	vcmp.f64	d7, d6
 8013684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013688:	d104      	bne.n	8013694 <_dtoa_r+0x434>
 801368a:	ee15 3a10 	vmov	r3, s10
 801368e:	07db      	lsls	r3, r3, #31
 8013690:	f100 80d3 	bmi.w	801383a <_dtoa_r+0x5da>
 8013694:	9901      	ldr	r1, [sp, #4]
 8013696:	4648      	mov	r0, r9
 8013698:	f000 fbc2 	bl	8013e20 <_Bfree>
 801369c:	2300      	movs	r3, #0
 801369e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80136a0:	7033      	strb	r3, [r6, #0]
 80136a2:	f108 0301 	add.w	r3, r8, #1
 80136a6:	6013      	str	r3, [r2, #0]
 80136a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f000 8304 	beq.w	8013cb8 <_dtoa_r+0xa58>
 80136b0:	601e      	str	r6, [r3, #0]
 80136b2:	e301      	b.n	8013cb8 <_dtoa_r+0xa58>
 80136b4:	2202      	movs	r2, #2
 80136b6:	e75e      	b.n	8013576 <_dtoa_r+0x316>
 80136b8:	07cc      	lsls	r4, r1, #31
 80136ba:	d504      	bpl.n	80136c6 <_dtoa_r+0x466>
 80136bc:	ed90 6b00 	vldr	d6, [r0]
 80136c0:	3201      	adds	r2, #1
 80136c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80136c6:	1049      	asrs	r1, r1, #1
 80136c8:	3008      	adds	r0, #8
 80136ca:	e755      	b.n	8013578 <_dtoa_r+0x318>
 80136cc:	d022      	beq.n	8013714 <_dtoa_r+0x4b4>
 80136ce:	f1c8 0100 	rsb	r1, r8, #0
 80136d2:	4a68      	ldr	r2, [pc, #416]	@ (8013874 <_dtoa_r+0x614>)
 80136d4:	f001 000f 	and.w	r0, r1, #15
 80136d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80136dc:	ed92 7b00 	vldr	d7, [r2]
 80136e0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80136e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136e8:	4863      	ldr	r0, [pc, #396]	@ (8013878 <_dtoa_r+0x618>)
 80136ea:	1109      	asrs	r1, r1, #4
 80136ec:	2400      	movs	r4, #0
 80136ee:	2202      	movs	r2, #2
 80136f0:	b929      	cbnz	r1, 80136fe <_dtoa_r+0x49e>
 80136f2:	2c00      	cmp	r4, #0
 80136f4:	f43f af49 	beq.w	801358a <_dtoa_r+0x32a>
 80136f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136fc:	e745      	b.n	801358a <_dtoa_r+0x32a>
 80136fe:	07ce      	lsls	r6, r1, #31
 8013700:	d505      	bpl.n	801370e <_dtoa_r+0x4ae>
 8013702:	ed90 6b00 	vldr	d6, [r0]
 8013706:	3201      	adds	r2, #1
 8013708:	2401      	movs	r4, #1
 801370a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801370e:	1049      	asrs	r1, r1, #1
 8013710:	3008      	adds	r0, #8
 8013712:	e7ed      	b.n	80136f0 <_dtoa_r+0x490>
 8013714:	2202      	movs	r2, #2
 8013716:	e738      	b.n	801358a <_dtoa_r+0x32a>
 8013718:	f8cd 8010 	str.w	r8, [sp, #16]
 801371c:	4654      	mov	r4, sl
 801371e:	e754      	b.n	80135ca <_dtoa_r+0x36a>
 8013720:	4a54      	ldr	r2, [pc, #336]	@ (8013874 <_dtoa_r+0x614>)
 8013722:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013726:	ed12 4b02 	vldr	d4, [r2, #-8]
 801372a:	9a08      	ldr	r2, [sp, #32]
 801372c:	ec41 0b17 	vmov	d7, r0, r1
 8013730:	443c      	add	r4, r7
 8013732:	b34a      	cbz	r2, 8013788 <_dtoa_r+0x528>
 8013734:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013738:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801373c:	463e      	mov	r6, r7
 801373e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013742:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013746:	ee35 7b47 	vsub.f64	d7, d5, d7
 801374a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801374e:	ee14 2a90 	vmov	r2, s9
 8013752:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013756:	3230      	adds	r2, #48	@ 0x30
 8013758:	ee36 6b45 	vsub.f64	d6, d6, d5
 801375c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013764:	f806 2b01 	strb.w	r2, [r6], #1
 8013768:	d438      	bmi.n	80137dc <_dtoa_r+0x57c>
 801376a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801376e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013776:	d462      	bmi.n	801383e <_dtoa_r+0x5de>
 8013778:	42a6      	cmp	r6, r4
 801377a:	f43f af4d 	beq.w	8013618 <_dtoa_r+0x3b8>
 801377e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013782:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013786:	e7e0      	b.n	801374a <_dtoa_r+0x4ea>
 8013788:	4621      	mov	r1, r4
 801378a:	463e      	mov	r6, r7
 801378c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013790:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013794:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013798:	ee14 2a90 	vmov	r2, s9
 801379c:	3230      	adds	r2, #48	@ 0x30
 801379e:	f806 2b01 	strb.w	r2, [r6], #1
 80137a2:	42a6      	cmp	r6, r4
 80137a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80137a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80137ac:	d119      	bne.n	80137e2 <_dtoa_r+0x582>
 80137ae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80137b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80137b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80137ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137be:	dc3e      	bgt.n	801383e <_dtoa_r+0x5de>
 80137c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80137c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80137c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137cc:	f57f af24 	bpl.w	8013618 <_dtoa_r+0x3b8>
 80137d0:	460e      	mov	r6, r1
 80137d2:	3901      	subs	r1, #1
 80137d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80137d8:	2b30      	cmp	r3, #48	@ 0x30
 80137da:	d0f9      	beq.n	80137d0 <_dtoa_r+0x570>
 80137dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80137e0:	e758      	b.n	8013694 <_dtoa_r+0x434>
 80137e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80137e6:	e7d5      	b.n	8013794 <_dtoa_r+0x534>
 80137e8:	d10b      	bne.n	8013802 <_dtoa_r+0x5a2>
 80137ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80137ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 80137f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fe:	f2c0 8161 	blt.w	8013ac4 <_dtoa_r+0x864>
 8013802:	2400      	movs	r4, #0
 8013804:	4625      	mov	r5, r4
 8013806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013808:	43db      	mvns	r3, r3
 801380a:	9304      	str	r3, [sp, #16]
 801380c:	463e      	mov	r6, r7
 801380e:	f04f 0800 	mov.w	r8, #0
 8013812:	4621      	mov	r1, r4
 8013814:	4648      	mov	r0, r9
 8013816:	f000 fb03 	bl	8013e20 <_Bfree>
 801381a:	2d00      	cmp	r5, #0
 801381c:	d0de      	beq.n	80137dc <_dtoa_r+0x57c>
 801381e:	f1b8 0f00 	cmp.w	r8, #0
 8013822:	d005      	beq.n	8013830 <_dtoa_r+0x5d0>
 8013824:	45a8      	cmp	r8, r5
 8013826:	d003      	beq.n	8013830 <_dtoa_r+0x5d0>
 8013828:	4641      	mov	r1, r8
 801382a:	4648      	mov	r0, r9
 801382c:	f000 faf8 	bl	8013e20 <_Bfree>
 8013830:	4629      	mov	r1, r5
 8013832:	4648      	mov	r0, r9
 8013834:	f000 faf4 	bl	8013e20 <_Bfree>
 8013838:	e7d0      	b.n	80137dc <_dtoa_r+0x57c>
 801383a:	f8cd 8010 	str.w	r8, [sp, #16]
 801383e:	4633      	mov	r3, r6
 8013840:	461e      	mov	r6, r3
 8013842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013846:	2a39      	cmp	r2, #57	@ 0x39
 8013848:	d106      	bne.n	8013858 <_dtoa_r+0x5f8>
 801384a:	429f      	cmp	r7, r3
 801384c:	d1f8      	bne.n	8013840 <_dtoa_r+0x5e0>
 801384e:	9a04      	ldr	r2, [sp, #16]
 8013850:	3201      	adds	r2, #1
 8013852:	9204      	str	r2, [sp, #16]
 8013854:	2230      	movs	r2, #48	@ 0x30
 8013856:	703a      	strb	r2, [r7, #0]
 8013858:	781a      	ldrb	r2, [r3, #0]
 801385a:	3201      	adds	r2, #1
 801385c:	701a      	strb	r2, [r3, #0]
 801385e:	e7bd      	b.n	80137dc <_dtoa_r+0x57c>
 8013860:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013864:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801386c:	f47f aeef 	bne.w	801364e <_dtoa_r+0x3ee>
 8013870:	e710      	b.n	8013694 <_dtoa_r+0x434>
 8013872:	bf00      	nop
 8013874:	08018380 	.word	0x08018380
 8013878:	08018358 	.word	0x08018358
 801387c:	9908      	ldr	r1, [sp, #32]
 801387e:	2900      	cmp	r1, #0
 8013880:	f000 80e3 	beq.w	8013a4a <_dtoa_r+0x7ea>
 8013884:	9907      	ldr	r1, [sp, #28]
 8013886:	2901      	cmp	r1, #1
 8013888:	f300 80c8 	bgt.w	8013a1c <_dtoa_r+0x7bc>
 801388c:	2d00      	cmp	r5, #0
 801388e:	f000 80c1 	beq.w	8013a14 <_dtoa_r+0x7b4>
 8013892:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013896:	9e05      	ldr	r6, [sp, #20]
 8013898:	461c      	mov	r4, r3
 801389a:	9304      	str	r3, [sp, #16]
 801389c:	9b05      	ldr	r3, [sp, #20]
 801389e:	4413      	add	r3, r2
 80138a0:	9305      	str	r3, [sp, #20]
 80138a2:	9b06      	ldr	r3, [sp, #24]
 80138a4:	2101      	movs	r1, #1
 80138a6:	4413      	add	r3, r2
 80138a8:	4648      	mov	r0, r9
 80138aa:	9306      	str	r3, [sp, #24]
 80138ac:	f000 fbb6 	bl	801401c <__i2b>
 80138b0:	9b04      	ldr	r3, [sp, #16]
 80138b2:	4605      	mov	r5, r0
 80138b4:	b166      	cbz	r6, 80138d0 <_dtoa_r+0x670>
 80138b6:	9a06      	ldr	r2, [sp, #24]
 80138b8:	2a00      	cmp	r2, #0
 80138ba:	dd09      	ble.n	80138d0 <_dtoa_r+0x670>
 80138bc:	42b2      	cmp	r2, r6
 80138be:	9905      	ldr	r1, [sp, #20]
 80138c0:	bfa8      	it	ge
 80138c2:	4632      	movge	r2, r6
 80138c4:	1a89      	subs	r1, r1, r2
 80138c6:	9105      	str	r1, [sp, #20]
 80138c8:	9906      	ldr	r1, [sp, #24]
 80138ca:	1ab6      	subs	r6, r6, r2
 80138cc:	1a8a      	subs	r2, r1, r2
 80138ce:	9206      	str	r2, [sp, #24]
 80138d0:	b1fb      	cbz	r3, 8013912 <_dtoa_r+0x6b2>
 80138d2:	9a08      	ldr	r2, [sp, #32]
 80138d4:	2a00      	cmp	r2, #0
 80138d6:	f000 80bc 	beq.w	8013a52 <_dtoa_r+0x7f2>
 80138da:	b19c      	cbz	r4, 8013904 <_dtoa_r+0x6a4>
 80138dc:	4629      	mov	r1, r5
 80138de:	4622      	mov	r2, r4
 80138e0:	4648      	mov	r0, r9
 80138e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138e4:	f000 fc5a 	bl	801419c <__pow5mult>
 80138e8:	9a01      	ldr	r2, [sp, #4]
 80138ea:	4601      	mov	r1, r0
 80138ec:	4605      	mov	r5, r0
 80138ee:	4648      	mov	r0, r9
 80138f0:	f000 fbaa 	bl	8014048 <__multiply>
 80138f4:	9901      	ldr	r1, [sp, #4]
 80138f6:	9004      	str	r0, [sp, #16]
 80138f8:	4648      	mov	r0, r9
 80138fa:	f000 fa91 	bl	8013e20 <_Bfree>
 80138fe:	9a04      	ldr	r2, [sp, #16]
 8013900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013902:	9201      	str	r2, [sp, #4]
 8013904:	1b1a      	subs	r2, r3, r4
 8013906:	d004      	beq.n	8013912 <_dtoa_r+0x6b2>
 8013908:	9901      	ldr	r1, [sp, #4]
 801390a:	4648      	mov	r0, r9
 801390c:	f000 fc46 	bl	801419c <__pow5mult>
 8013910:	9001      	str	r0, [sp, #4]
 8013912:	2101      	movs	r1, #1
 8013914:	4648      	mov	r0, r9
 8013916:	f000 fb81 	bl	801401c <__i2b>
 801391a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801391c:	4604      	mov	r4, r0
 801391e:	2b00      	cmp	r3, #0
 8013920:	f000 81d0 	beq.w	8013cc4 <_dtoa_r+0xa64>
 8013924:	461a      	mov	r2, r3
 8013926:	4601      	mov	r1, r0
 8013928:	4648      	mov	r0, r9
 801392a:	f000 fc37 	bl	801419c <__pow5mult>
 801392e:	9b07      	ldr	r3, [sp, #28]
 8013930:	2b01      	cmp	r3, #1
 8013932:	4604      	mov	r4, r0
 8013934:	f300 8095 	bgt.w	8013a62 <_dtoa_r+0x802>
 8013938:	9b02      	ldr	r3, [sp, #8]
 801393a:	2b00      	cmp	r3, #0
 801393c:	f040 808b 	bne.w	8013a56 <_dtoa_r+0x7f6>
 8013940:	9b03      	ldr	r3, [sp, #12]
 8013942:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013946:	2a00      	cmp	r2, #0
 8013948:	f040 8087 	bne.w	8013a5a <_dtoa_r+0x7fa>
 801394c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013950:	0d12      	lsrs	r2, r2, #20
 8013952:	0512      	lsls	r2, r2, #20
 8013954:	2a00      	cmp	r2, #0
 8013956:	f000 8082 	beq.w	8013a5e <_dtoa_r+0x7fe>
 801395a:	9b05      	ldr	r3, [sp, #20]
 801395c:	3301      	adds	r3, #1
 801395e:	9305      	str	r3, [sp, #20]
 8013960:	9b06      	ldr	r3, [sp, #24]
 8013962:	3301      	adds	r3, #1
 8013964:	9306      	str	r3, [sp, #24]
 8013966:	2301      	movs	r3, #1
 8013968:	930b      	str	r3, [sp, #44]	@ 0x2c
 801396a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801396c:	2b00      	cmp	r3, #0
 801396e:	f000 81af 	beq.w	8013cd0 <_dtoa_r+0xa70>
 8013972:	6922      	ldr	r2, [r4, #16]
 8013974:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013978:	6910      	ldr	r0, [r2, #16]
 801397a:	f000 fb03 	bl	8013f84 <__hi0bits>
 801397e:	f1c0 0020 	rsb	r0, r0, #32
 8013982:	9b06      	ldr	r3, [sp, #24]
 8013984:	4418      	add	r0, r3
 8013986:	f010 001f 	ands.w	r0, r0, #31
 801398a:	d076      	beq.n	8013a7a <_dtoa_r+0x81a>
 801398c:	f1c0 0220 	rsb	r2, r0, #32
 8013990:	2a04      	cmp	r2, #4
 8013992:	dd69      	ble.n	8013a68 <_dtoa_r+0x808>
 8013994:	9b05      	ldr	r3, [sp, #20]
 8013996:	f1c0 001c 	rsb	r0, r0, #28
 801399a:	4403      	add	r3, r0
 801399c:	9305      	str	r3, [sp, #20]
 801399e:	9b06      	ldr	r3, [sp, #24]
 80139a0:	4406      	add	r6, r0
 80139a2:	4403      	add	r3, r0
 80139a4:	9306      	str	r3, [sp, #24]
 80139a6:	9b05      	ldr	r3, [sp, #20]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	dd05      	ble.n	80139b8 <_dtoa_r+0x758>
 80139ac:	9901      	ldr	r1, [sp, #4]
 80139ae:	461a      	mov	r2, r3
 80139b0:	4648      	mov	r0, r9
 80139b2:	f000 fc4d 	bl	8014250 <__lshift>
 80139b6:	9001      	str	r0, [sp, #4]
 80139b8:	9b06      	ldr	r3, [sp, #24]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	dd05      	ble.n	80139ca <_dtoa_r+0x76a>
 80139be:	4621      	mov	r1, r4
 80139c0:	461a      	mov	r2, r3
 80139c2:	4648      	mov	r0, r9
 80139c4:	f000 fc44 	bl	8014250 <__lshift>
 80139c8:	4604      	mov	r4, r0
 80139ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d056      	beq.n	8013a7e <_dtoa_r+0x81e>
 80139d0:	9801      	ldr	r0, [sp, #4]
 80139d2:	4621      	mov	r1, r4
 80139d4:	f000 fca8 	bl	8014328 <__mcmp>
 80139d8:	2800      	cmp	r0, #0
 80139da:	da50      	bge.n	8013a7e <_dtoa_r+0x81e>
 80139dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80139e0:	9304      	str	r3, [sp, #16]
 80139e2:	9901      	ldr	r1, [sp, #4]
 80139e4:	2300      	movs	r3, #0
 80139e6:	220a      	movs	r2, #10
 80139e8:	4648      	mov	r0, r9
 80139ea:	f000 fa3b 	bl	8013e64 <__multadd>
 80139ee:	9b08      	ldr	r3, [sp, #32]
 80139f0:	9001      	str	r0, [sp, #4]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	f000 816e 	beq.w	8013cd4 <_dtoa_r+0xa74>
 80139f8:	4629      	mov	r1, r5
 80139fa:	2300      	movs	r3, #0
 80139fc:	220a      	movs	r2, #10
 80139fe:	4648      	mov	r0, r9
 8013a00:	f000 fa30 	bl	8013e64 <__multadd>
 8013a04:	f1bb 0f00 	cmp.w	fp, #0
 8013a08:	4605      	mov	r5, r0
 8013a0a:	dc64      	bgt.n	8013ad6 <_dtoa_r+0x876>
 8013a0c:	9b07      	ldr	r3, [sp, #28]
 8013a0e:	2b02      	cmp	r3, #2
 8013a10:	dc3e      	bgt.n	8013a90 <_dtoa_r+0x830>
 8013a12:	e060      	b.n	8013ad6 <_dtoa_r+0x876>
 8013a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013a1a:	e73c      	b.n	8013896 <_dtoa_r+0x636>
 8013a1c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013a20:	42a3      	cmp	r3, r4
 8013a22:	bfbf      	itttt	lt
 8013a24:	1ae2      	sublt	r2, r4, r3
 8013a26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013a28:	189b      	addlt	r3, r3, r2
 8013a2a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013a2c:	bfae      	itee	ge
 8013a2e:	1b1c      	subge	r4, r3, r4
 8013a30:	4623      	movlt	r3, r4
 8013a32:	2400      	movlt	r4, #0
 8013a34:	f1ba 0f00 	cmp.w	sl, #0
 8013a38:	bfb5      	itete	lt
 8013a3a:	9a05      	ldrlt	r2, [sp, #20]
 8013a3c:	9e05      	ldrge	r6, [sp, #20]
 8013a3e:	eba2 060a 	sublt.w	r6, r2, sl
 8013a42:	4652      	movge	r2, sl
 8013a44:	bfb8      	it	lt
 8013a46:	2200      	movlt	r2, #0
 8013a48:	e727      	b.n	801389a <_dtoa_r+0x63a>
 8013a4a:	9e05      	ldr	r6, [sp, #20]
 8013a4c:	9d08      	ldr	r5, [sp, #32]
 8013a4e:	461c      	mov	r4, r3
 8013a50:	e730      	b.n	80138b4 <_dtoa_r+0x654>
 8013a52:	461a      	mov	r2, r3
 8013a54:	e758      	b.n	8013908 <_dtoa_r+0x6a8>
 8013a56:	2300      	movs	r3, #0
 8013a58:	e786      	b.n	8013968 <_dtoa_r+0x708>
 8013a5a:	9b02      	ldr	r3, [sp, #8]
 8013a5c:	e784      	b.n	8013968 <_dtoa_r+0x708>
 8013a5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013a60:	e783      	b.n	801396a <_dtoa_r+0x70a>
 8013a62:	2300      	movs	r3, #0
 8013a64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a66:	e784      	b.n	8013972 <_dtoa_r+0x712>
 8013a68:	d09d      	beq.n	80139a6 <_dtoa_r+0x746>
 8013a6a:	9b05      	ldr	r3, [sp, #20]
 8013a6c:	321c      	adds	r2, #28
 8013a6e:	4413      	add	r3, r2
 8013a70:	9305      	str	r3, [sp, #20]
 8013a72:	9b06      	ldr	r3, [sp, #24]
 8013a74:	4416      	add	r6, r2
 8013a76:	4413      	add	r3, r2
 8013a78:	e794      	b.n	80139a4 <_dtoa_r+0x744>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	e7f5      	b.n	8013a6a <_dtoa_r+0x80a>
 8013a7e:	f1ba 0f00 	cmp.w	sl, #0
 8013a82:	f8cd 8010 	str.w	r8, [sp, #16]
 8013a86:	46d3      	mov	fp, sl
 8013a88:	dc21      	bgt.n	8013ace <_dtoa_r+0x86e>
 8013a8a:	9b07      	ldr	r3, [sp, #28]
 8013a8c:	2b02      	cmp	r3, #2
 8013a8e:	dd1e      	ble.n	8013ace <_dtoa_r+0x86e>
 8013a90:	f1bb 0f00 	cmp.w	fp, #0
 8013a94:	f47f aeb7 	bne.w	8013806 <_dtoa_r+0x5a6>
 8013a98:	4621      	mov	r1, r4
 8013a9a:	465b      	mov	r3, fp
 8013a9c:	2205      	movs	r2, #5
 8013a9e:	4648      	mov	r0, r9
 8013aa0:	f000 f9e0 	bl	8013e64 <__multadd>
 8013aa4:	4601      	mov	r1, r0
 8013aa6:	4604      	mov	r4, r0
 8013aa8:	9801      	ldr	r0, [sp, #4]
 8013aaa:	f000 fc3d 	bl	8014328 <__mcmp>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	f77f aea9 	ble.w	8013806 <_dtoa_r+0x5a6>
 8013ab4:	463e      	mov	r6, r7
 8013ab6:	2331      	movs	r3, #49	@ 0x31
 8013ab8:	f806 3b01 	strb.w	r3, [r6], #1
 8013abc:	9b04      	ldr	r3, [sp, #16]
 8013abe:	3301      	adds	r3, #1
 8013ac0:	9304      	str	r3, [sp, #16]
 8013ac2:	e6a4      	b.n	801380e <_dtoa_r+0x5ae>
 8013ac4:	f8cd 8010 	str.w	r8, [sp, #16]
 8013ac8:	4654      	mov	r4, sl
 8013aca:	4625      	mov	r5, r4
 8013acc:	e7f2      	b.n	8013ab4 <_dtoa_r+0x854>
 8013ace:	9b08      	ldr	r3, [sp, #32]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f000 8103 	beq.w	8013cdc <_dtoa_r+0xa7c>
 8013ad6:	2e00      	cmp	r6, #0
 8013ad8:	dd05      	ble.n	8013ae6 <_dtoa_r+0x886>
 8013ada:	4629      	mov	r1, r5
 8013adc:	4632      	mov	r2, r6
 8013ade:	4648      	mov	r0, r9
 8013ae0:	f000 fbb6 	bl	8014250 <__lshift>
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d058      	beq.n	8013b9e <_dtoa_r+0x93e>
 8013aec:	6869      	ldr	r1, [r5, #4]
 8013aee:	4648      	mov	r0, r9
 8013af0:	f000 f956 	bl	8013da0 <_Balloc>
 8013af4:	4606      	mov	r6, r0
 8013af6:	b928      	cbnz	r0, 8013b04 <_dtoa_r+0x8a4>
 8013af8:	4b82      	ldr	r3, [pc, #520]	@ (8013d04 <_dtoa_r+0xaa4>)
 8013afa:	4602      	mov	r2, r0
 8013afc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013b00:	f7ff bbc7 	b.w	8013292 <_dtoa_r+0x32>
 8013b04:	692a      	ldr	r2, [r5, #16]
 8013b06:	3202      	adds	r2, #2
 8013b08:	0092      	lsls	r2, r2, #2
 8013b0a:	f105 010c 	add.w	r1, r5, #12
 8013b0e:	300c      	adds	r0, #12
 8013b10:	f7ff fae9 	bl	80130e6 <memcpy>
 8013b14:	2201      	movs	r2, #1
 8013b16:	4631      	mov	r1, r6
 8013b18:	4648      	mov	r0, r9
 8013b1a:	f000 fb99 	bl	8014250 <__lshift>
 8013b1e:	1c7b      	adds	r3, r7, #1
 8013b20:	9305      	str	r3, [sp, #20]
 8013b22:	eb07 030b 	add.w	r3, r7, fp
 8013b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b28:	9b02      	ldr	r3, [sp, #8]
 8013b2a:	f003 0301 	and.w	r3, r3, #1
 8013b2e:	46a8      	mov	r8, r5
 8013b30:	9308      	str	r3, [sp, #32]
 8013b32:	4605      	mov	r5, r0
 8013b34:	9b05      	ldr	r3, [sp, #20]
 8013b36:	9801      	ldr	r0, [sp, #4]
 8013b38:	4621      	mov	r1, r4
 8013b3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8013b3e:	f7ff fb05 	bl	801314c <quorem>
 8013b42:	4641      	mov	r1, r8
 8013b44:	9002      	str	r0, [sp, #8]
 8013b46:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013b4a:	9801      	ldr	r0, [sp, #4]
 8013b4c:	f000 fbec 	bl	8014328 <__mcmp>
 8013b50:	462a      	mov	r2, r5
 8013b52:	9006      	str	r0, [sp, #24]
 8013b54:	4621      	mov	r1, r4
 8013b56:	4648      	mov	r0, r9
 8013b58:	f000 fc02 	bl	8014360 <__mdiff>
 8013b5c:	68c2      	ldr	r2, [r0, #12]
 8013b5e:	4606      	mov	r6, r0
 8013b60:	b9fa      	cbnz	r2, 8013ba2 <_dtoa_r+0x942>
 8013b62:	4601      	mov	r1, r0
 8013b64:	9801      	ldr	r0, [sp, #4]
 8013b66:	f000 fbdf 	bl	8014328 <__mcmp>
 8013b6a:	4602      	mov	r2, r0
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4648      	mov	r0, r9
 8013b70:	920a      	str	r2, [sp, #40]	@ 0x28
 8013b72:	f000 f955 	bl	8013e20 <_Bfree>
 8013b76:	9b07      	ldr	r3, [sp, #28]
 8013b78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b7a:	9e05      	ldr	r6, [sp, #20]
 8013b7c:	ea43 0102 	orr.w	r1, r3, r2
 8013b80:	9b08      	ldr	r3, [sp, #32]
 8013b82:	4319      	orrs	r1, r3
 8013b84:	d10f      	bne.n	8013ba6 <_dtoa_r+0x946>
 8013b86:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013b8a:	d028      	beq.n	8013bde <_dtoa_r+0x97e>
 8013b8c:	9b06      	ldr	r3, [sp, #24]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	dd02      	ble.n	8013b98 <_dtoa_r+0x938>
 8013b92:	9b02      	ldr	r3, [sp, #8]
 8013b94:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013b98:	f88b a000 	strb.w	sl, [fp]
 8013b9c:	e639      	b.n	8013812 <_dtoa_r+0x5b2>
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	e7bd      	b.n	8013b1e <_dtoa_r+0x8be>
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	e7e2      	b.n	8013b6c <_dtoa_r+0x90c>
 8013ba6:	9b06      	ldr	r3, [sp, #24]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	db04      	blt.n	8013bb6 <_dtoa_r+0x956>
 8013bac:	9907      	ldr	r1, [sp, #28]
 8013bae:	430b      	orrs	r3, r1
 8013bb0:	9908      	ldr	r1, [sp, #32]
 8013bb2:	430b      	orrs	r3, r1
 8013bb4:	d120      	bne.n	8013bf8 <_dtoa_r+0x998>
 8013bb6:	2a00      	cmp	r2, #0
 8013bb8:	ddee      	ble.n	8013b98 <_dtoa_r+0x938>
 8013bba:	9901      	ldr	r1, [sp, #4]
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	4648      	mov	r0, r9
 8013bc0:	f000 fb46 	bl	8014250 <__lshift>
 8013bc4:	4621      	mov	r1, r4
 8013bc6:	9001      	str	r0, [sp, #4]
 8013bc8:	f000 fbae 	bl	8014328 <__mcmp>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	dc03      	bgt.n	8013bd8 <_dtoa_r+0x978>
 8013bd0:	d1e2      	bne.n	8013b98 <_dtoa_r+0x938>
 8013bd2:	f01a 0f01 	tst.w	sl, #1
 8013bd6:	d0df      	beq.n	8013b98 <_dtoa_r+0x938>
 8013bd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013bdc:	d1d9      	bne.n	8013b92 <_dtoa_r+0x932>
 8013bde:	2339      	movs	r3, #57	@ 0x39
 8013be0:	f88b 3000 	strb.w	r3, [fp]
 8013be4:	4633      	mov	r3, r6
 8013be6:	461e      	mov	r6, r3
 8013be8:	3b01      	subs	r3, #1
 8013bea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013bee:	2a39      	cmp	r2, #57	@ 0x39
 8013bf0:	d053      	beq.n	8013c9a <_dtoa_r+0xa3a>
 8013bf2:	3201      	adds	r2, #1
 8013bf4:	701a      	strb	r2, [r3, #0]
 8013bf6:	e60c      	b.n	8013812 <_dtoa_r+0x5b2>
 8013bf8:	2a00      	cmp	r2, #0
 8013bfa:	dd07      	ble.n	8013c0c <_dtoa_r+0x9ac>
 8013bfc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013c00:	d0ed      	beq.n	8013bde <_dtoa_r+0x97e>
 8013c02:	f10a 0301 	add.w	r3, sl, #1
 8013c06:	f88b 3000 	strb.w	r3, [fp]
 8013c0a:	e602      	b.n	8013812 <_dtoa_r+0x5b2>
 8013c0c:	9b05      	ldr	r3, [sp, #20]
 8013c0e:	9a05      	ldr	r2, [sp, #20]
 8013c10:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d029      	beq.n	8013c6e <_dtoa_r+0xa0e>
 8013c1a:	9901      	ldr	r1, [sp, #4]
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	220a      	movs	r2, #10
 8013c20:	4648      	mov	r0, r9
 8013c22:	f000 f91f 	bl	8013e64 <__multadd>
 8013c26:	45a8      	cmp	r8, r5
 8013c28:	9001      	str	r0, [sp, #4]
 8013c2a:	f04f 0300 	mov.w	r3, #0
 8013c2e:	f04f 020a 	mov.w	r2, #10
 8013c32:	4641      	mov	r1, r8
 8013c34:	4648      	mov	r0, r9
 8013c36:	d107      	bne.n	8013c48 <_dtoa_r+0x9e8>
 8013c38:	f000 f914 	bl	8013e64 <__multadd>
 8013c3c:	4680      	mov	r8, r0
 8013c3e:	4605      	mov	r5, r0
 8013c40:	9b05      	ldr	r3, [sp, #20]
 8013c42:	3301      	adds	r3, #1
 8013c44:	9305      	str	r3, [sp, #20]
 8013c46:	e775      	b.n	8013b34 <_dtoa_r+0x8d4>
 8013c48:	f000 f90c 	bl	8013e64 <__multadd>
 8013c4c:	4629      	mov	r1, r5
 8013c4e:	4680      	mov	r8, r0
 8013c50:	2300      	movs	r3, #0
 8013c52:	220a      	movs	r2, #10
 8013c54:	4648      	mov	r0, r9
 8013c56:	f000 f905 	bl	8013e64 <__multadd>
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	e7f0      	b.n	8013c40 <_dtoa_r+0x9e0>
 8013c5e:	f1bb 0f00 	cmp.w	fp, #0
 8013c62:	bfcc      	ite	gt
 8013c64:	465e      	movgt	r6, fp
 8013c66:	2601      	movle	r6, #1
 8013c68:	443e      	add	r6, r7
 8013c6a:	f04f 0800 	mov.w	r8, #0
 8013c6e:	9901      	ldr	r1, [sp, #4]
 8013c70:	2201      	movs	r2, #1
 8013c72:	4648      	mov	r0, r9
 8013c74:	f000 faec 	bl	8014250 <__lshift>
 8013c78:	4621      	mov	r1, r4
 8013c7a:	9001      	str	r0, [sp, #4]
 8013c7c:	f000 fb54 	bl	8014328 <__mcmp>
 8013c80:	2800      	cmp	r0, #0
 8013c82:	dcaf      	bgt.n	8013be4 <_dtoa_r+0x984>
 8013c84:	d102      	bne.n	8013c8c <_dtoa_r+0xa2c>
 8013c86:	f01a 0f01 	tst.w	sl, #1
 8013c8a:	d1ab      	bne.n	8013be4 <_dtoa_r+0x984>
 8013c8c:	4633      	mov	r3, r6
 8013c8e:	461e      	mov	r6, r3
 8013c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c94:	2a30      	cmp	r2, #48	@ 0x30
 8013c96:	d0fa      	beq.n	8013c8e <_dtoa_r+0xa2e>
 8013c98:	e5bb      	b.n	8013812 <_dtoa_r+0x5b2>
 8013c9a:	429f      	cmp	r7, r3
 8013c9c:	d1a3      	bne.n	8013be6 <_dtoa_r+0x986>
 8013c9e:	9b04      	ldr	r3, [sp, #16]
 8013ca0:	3301      	adds	r3, #1
 8013ca2:	9304      	str	r3, [sp, #16]
 8013ca4:	2331      	movs	r3, #49	@ 0x31
 8013ca6:	703b      	strb	r3, [r7, #0]
 8013ca8:	e5b3      	b.n	8013812 <_dtoa_r+0x5b2>
 8013caa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013cac:	4f16      	ldr	r7, [pc, #88]	@ (8013d08 <_dtoa_r+0xaa8>)
 8013cae:	b11b      	cbz	r3, 8013cb8 <_dtoa_r+0xa58>
 8013cb0:	f107 0308 	add.w	r3, r7, #8
 8013cb4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013cb6:	6013      	str	r3, [r2, #0]
 8013cb8:	4638      	mov	r0, r7
 8013cba:	b011      	add	sp, #68	@ 0x44
 8013cbc:	ecbd 8b02 	vpop	{d8}
 8013cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc4:	9b07      	ldr	r3, [sp, #28]
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	f77f ae36 	ble.w	8013938 <_dtoa_r+0x6d8>
 8013ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cd0:	2001      	movs	r0, #1
 8013cd2:	e656      	b.n	8013982 <_dtoa_r+0x722>
 8013cd4:	f1bb 0f00 	cmp.w	fp, #0
 8013cd8:	f77f aed7 	ble.w	8013a8a <_dtoa_r+0x82a>
 8013cdc:	463e      	mov	r6, r7
 8013cde:	9801      	ldr	r0, [sp, #4]
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	f7ff fa33 	bl	801314c <quorem>
 8013ce6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013cea:	f806 ab01 	strb.w	sl, [r6], #1
 8013cee:	1bf2      	subs	r2, r6, r7
 8013cf0:	4593      	cmp	fp, r2
 8013cf2:	ddb4      	ble.n	8013c5e <_dtoa_r+0x9fe>
 8013cf4:	9901      	ldr	r1, [sp, #4]
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	220a      	movs	r2, #10
 8013cfa:	4648      	mov	r0, r9
 8013cfc:	f000 f8b2 	bl	8013e64 <__multadd>
 8013d00:	9001      	str	r0, [sp, #4]
 8013d02:	e7ec      	b.n	8013cde <_dtoa_r+0xa7e>
 8013d04:	080182dd 	.word	0x080182dd
 8013d08:	08018278 	.word	0x08018278

08013d0c <_free_r>:
 8013d0c:	b538      	push	{r3, r4, r5, lr}
 8013d0e:	4605      	mov	r5, r0
 8013d10:	2900      	cmp	r1, #0
 8013d12:	d041      	beq.n	8013d98 <_free_r+0x8c>
 8013d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d18:	1f0c      	subs	r4, r1, #4
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	bfb8      	it	lt
 8013d1e:	18e4      	addlt	r4, r4, r3
 8013d20:	f7fe f84e 	bl	8011dc0 <__malloc_lock>
 8013d24:	4a1d      	ldr	r2, [pc, #116]	@ (8013d9c <_free_r+0x90>)
 8013d26:	6813      	ldr	r3, [r2, #0]
 8013d28:	b933      	cbnz	r3, 8013d38 <_free_r+0x2c>
 8013d2a:	6063      	str	r3, [r4, #4]
 8013d2c:	6014      	str	r4, [r2, #0]
 8013d2e:	4628      	mov	r0, r5
 8013d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d34:	f7fe b84a 	b.w	8011dcc <__malloc_unlock>
 8013d38:	42a3      	cmp	r3, r4
 8013d3a:	d908      	bls.n	8013d4e <_free_r+0x42>
 8013d3c:	6820      	ldr	r0, [r4, #0]
 8013d3e:	1821      	adds	r1, r4, r0
 8013d40:	428b      	cmp	r3, r1
 8013d42:	bf01      	itttt	eq
 8013d44:	6819      	ldreq	r1, [r3, #0]
 8013d46:	685b      	ldreq	r3, [r3, #4]
 8013d48:	1809      	addeq	r1, r1, r0
 8013d4a:	6021      	streq	r1, [r4, #0]
 8013d4c:	e7ed      	b.n	8013d2a <_free_r+0x1e>
 8013d4e:	461a      	mov	r2, r3
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	b10b      	cbz	r3, 8013d58 <_free_r+0x4c>
 8013d54:	42a3      	cmp	r3, r4
 8013d56:	d9fa      	bls.n	8013d4e <_free_r+0x42>
 8013d58:	6811      	ldr	r1, [r2, #0]
 8013d5a:	1850      	adds	r0, r2, r1
 8013d5c:	42a0      	cmp	r0, r4
 8013d5e:	d10b      	bne.n	8013d78 <_free_r+0x6c>
 8013d60:	6820      	ldr	r0, [r4, #0]
 8013d62:	4401      	add	r1, r0
 8013d64:	1850      	adds	r0, r2, r1
 8013d66:	4283      	cmp	r3, r0
 8013d68:	6011      	str	r1, [r2, #0]
 8013d6a:	d1e0      	bne.n	8013d2e <_free_r+0x22>
 8013d6c:	6818      	ldr	r0, [r3, #0]
 8013d6e:	685b      	ldr	r3, [r3, #4]
 8013d70:	6053      	str	r3, [r2, #4]
 8013d72:	4408      	add	r0, r1
 8013d74:	6010      	str	r0, [r2, #0]
 8013d76:	e7da      	b.n	8013d2e <_free_r+0x22>
 8013d78:	d902      	bls.n	8013d80 <_free_r+0x74>
 8013d7a:	230c      	movs	r3, #12
 8013d7c:	602b      	str	r3, [r5, #0]
 8013d7e:	e7d6      	b.n	8013d2e <_free_r+0x22>
 8013d80:	6820      	ldr	r0, [r4, #0]
 8013d82:	1821      	adds	r1, r4, r0
 8013d84:	428b      	cmp	r3, r1
 8013d86:	bf04      	itt	eq
 8013d88:	6819      	ldreq	r1, [r3, #0]
 8013d8a:	685b      	ldreq	r3, [r3, #4]
 8013d8c:	6063      	str	r3, [r4, #4]
 8013d8e:	bf04      	itt	eq
 8013d90:	1809      	addeq	r1, r1, r0
 8013d92:	6021      	streq	r1, [r4, #0]
 8013d94:	6054      	str	r4, [r2, #4]
 8013d96:	e7ca      	b.n	8013d2e <_free_r+0x22>
 8013d98:	bd38      	pop	{r3, r4, r5, pc}
 8013d9a:	bf00      	nop
 8013d9c:	24009e14 	.word	0x24009e14

08013da0 <_Balloc>:
 8013da0:	b570      	push	{r4, r5, r6, lr}
 8013da2:	69c6      	ldr	r6, [r0, #28]
 8013da4:	4604      	mov	r4, r0
 8013da6:	460d      	mov	r5, r1
 8013da8:	b976      	cbnz	r6, 8013dc8 <_Balloc+0x28>
 8013daa:	2010      	movs	r0, #16
 8013dac:	f7fd ff5e 	bl	8011c6c <malloc>
 8013db0:	4602      	mov	r2, r0
 8013db2:	61e0      	str	r0, [r4, #28]
 8013db4:	b920      	cbnz	r0, 8013dc0 <_Balloc+0x20>
 8013db6:	4b18      	ldr	r3, [pc, #96]	@ (8013e18 <_Balloc+0x78>)
 8013db8:	4818      	ldr	r0, [pc, #96]	@ (8013e1c <_Balloc+0x7c>)
 8013dba:	216b      	movs	r1, #107	@ 0x6b
 8013dbc:	f7ff f9a8 	bl	8013110 <__assert_func>
 8013dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013dc4:	6006      	str	r6, [r0, #0]
 8013dc6:	60c6      	str	r6, [r0, #12]
 8013dc8:	69e6      	ldr	r6, [r4, #28]
 8013dca:	68f3      	ldr	r3, [r6, #12]
 8013dcc:	b183      	cbz	r3, 8013df0 <_Balloc+0x50>
 8013dce:	69e3      	ldr	r3, [r4, #28]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013dd6:	b9b8      	cbnz	r0, 8013e08 <_Balloc+0x68>
 8013dd8:	2101      	movs	r1, #1
 8013dda:	fa01 f605 	lsl.w	r6, r1, r5
 8013dde:	1d72      	adds	r2, r6, #5
 8013de0:	0092      	lsls	r2, r2, #2
 8013de2:	4620      	mov	r0, r4
 8013de4:	f001 fedf 	bl	8015ba6 <_calloc_r>
 8013de8:	b160      	cbz	r0, 8013e04 <_Balloc+0x64>
 8013dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013dee:	e00e      	b.n	8013e0e <_Balloc+0x6e>
 8013df0:	2221      	movs	r2, #33	@ 0x21
 8013df2:	2104      	movs	r1, #4
 8013df4:	4620      	mov	r0, r4
 8013df6:	f001 fed6 	bl	8015ba6 <_calloc_r>
 8013dfa:	69e3      	ldr	r3, [r4, #28]
 8013dfc:	60f0      	str	r0, [r6, #12]
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1e4      	bne.n	8013dce <_Balloc+0x2e>
 8013e04:	2000      	movs	r0, #0
 8013e06:	bd70      	pop	{r4, r5, r6, pc}
 8013e08:	6802      	ldr	r2, [r0, #0]
 8013e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e0e:	2300      	movs	r3, #0
 8013e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e14:	e7f7      	b.n	8013e06 <_Balloc+0x66>
 8013e16:	bf00      	nop
 8013e18:	08018194 	.word	0x08018194
 8013e1c:	080182ee 	.word	0x080182ee

08013e20 <_Bfree>:
 8013e20:	b570      	push	{r4, r5, r6, lr}
 8013e22:	69c6      	ldr	r6, [r0, #28]
 8013e24:	4605      	mov	r5, r0
 8013e26:	460c      	mov	r4, r1
 8013e28:	b976      	cbnz	r6, 8013e48 <_Bfree+0x28>
 8013e2a:	2010      	movs	r0, #16
 8013e2c:	f7fd ff1e 	bl	8011c6c <malloc>
 8013e30:	4602      	mov	r2, r0
 8013e32:	61e8      	str	r0, [r5, #28]
 8013e34:	b920      	cbnz	r0, 8013e40 <_Bfree+0x20>
 8013e36:	4b09      	ldr	r3, [pc, #36]	@ (8013e5c <_Bfree+0x3c>)
 8013e38:	4809      	ldr	r0, [pc, #36]	@ (8013e60 <_Bfree+0x40>)
 8013e3a:	218f      	movs	r1, #143	@ 0x8f
 8013e3c:	f7ff f968 	bl	8013110 <__assert_func>
 8013e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e44:	6006      	str	r6, [r0, #0]
 8013e46:	60c6      	str	r6, [r0, #12]
 8013e48:	b13c      	cbz	r4, 8013e5a <_Bfree+0x3a>
 8013e4a:	69eb      	ldr	r3, [r5, #28]
 8013e4c:	6862      	ldr	r2, [r4, #4]
 8013e4e:	68db      	ldr	r3, [r3, #12]
 8013e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e54:	6021      	str	r1, [r4, #0]
 8013e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}
 8013e5c:	08018194 	.word	0x08018194
 8013e60:	080182ee 	.word	0x080182ee

08013e64 <__multadd>:
 8013e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e68:	690d      	ldr	r5, [r1, #16]
 8013e6a:	4607      	mov	r7, r0
 8013e6c:	460c      	mov	r4, r1
 8013e6e:	461e      	mov	r6, r3
 8013e70:	f101 0c14 	add.w	ip, r1, #20
 8013e74:	2000      	movs	r0, #0
 8013e76:	f8dc 3000 	ldr.w	r3, [ip]
 8013e7a:	b299      	uxth	r1, r3
 8013e7c:	fb02 6101 	mla	r1, r2, r1, r6
 8013e80:	0c1e      	lsrs	r6, r3, #16
 8013e82:	0c0b      	lsrs	r3, r1, #16
 8013e84:	fb02 3306 	mla	r3, r2, r6, r3
 8013e88:	b289      	uxth	r1, r1
 8013e8a:	3001      	adds	r0, #1
 8013e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e90:	4285      	cmp	r5, r0
 8013e92:	f84c 1b04 	str.w	r1, [ip], #4
 8013e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e9a:	dcec      	bgt.n	8013e76 <__multadd+0x12>
 8013e9c:	b30e      	cbz	r6, 8013ee2 <__multadd+0x7e>
 8013e9e:	68a3      	ldr	r3, [r4, #8]
 8013ea0:	42ab      	cmp	r3, r5
 8013ea2:	dc19      	bgt.n	8013ed8 <__multadd+0x74>
 8013ea4:	6861      	ldr	r1, [r4, #4]
 8013ea6:	4638      	mov	r0, r7
 8013ea8:	3101      	adds	r1, #1
 8013eaa:	f7ff ff79 	bl	8013da0 <_Balloc>
 8013eae:	4680      	mov	r8, r0
 8013eb0:	b928      	cbnz	r0, 8013ebe <__multadd+0x5a>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8013ee8 <__multadd+0x84>)
 8013eb6:	480d      	ldr	r0, [pc, #52]	@ (8013eec <__multadd+0x88>)
 8013eb8:	21ba      	movs	r1, #186	@ 0xba
 8013eba:	f7ff f929 	bl	8013110 <__assert_func>
 8013ebe:	6922      	ldr	r2, [r4, #16]
 8013ec0:	3202      	adds	r2, #2
 8013ec2:	f104 010c 	add.w	r1, r4, #12
 8013ec6:	0092      	lsls	r2, r2, #2
 8013ec8:	300c      	adds	r0, #12
 8013eca:	f7ff f90c 	bl	80130e6 <memcpy>
 8013ece:	4621      	mov	r1, r4
 8013ed0:	4638      	mov	r0, r7
 8013ed2:	f7ff ffa5 	bl	8013e20 <_Bfree>
 8013ed6:	4644      	mov	r4, r8
 8013ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013edc:	3501      	adds	r5, #1
 8013ede:	615e      	str	r6, [r3, #20]
 8013ee0:	6125      	str	r5, [r4, #16]
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee8:	080182dd 	.word	0x080182dd
 8013eec:	080182ee 	.word	0x080182ee

08013ef0 <__s2b>:
 8013ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ef4:	460c      	mov	r4, r1
 8013ef6:	4615      	mov	r5, r2
 8013ef8:	461f      	mov	r7, r3
 8013efa:	2209      	movs	r2, #9
 8013efc:	3308      	adds	r3, #8
 8013efe:	4606      	mov	r6, r0
 8013f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8013f04:	2100      	movs	r1, #0
 8013f06:	2201      	movs	r2, #1
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	db09      	blt.n	8013f20 <__s2b+0x30>
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	f7ff ff47 	bl	8013da0 <_Balloc>
 8013f12:	b940      	cbnz	r0, 8013f26 <__s2b+0x36>
 8013f14:	4602      	mov	r2, r0
 8013f16:	4b19      	ldr	r3, [pc, #100]	@ (8013f7c <__s2b+0x8c>)
 8013f18:	4819      	ldr	r0, [pc, #100]	@ (8013f80 <__s2b+0x90>)
 8013f1a:	21d3      	movs	r1, #211	@ 0xd3
 8013f1c:	f7ff f8f8 	bl	8013110 <__assert_func>
 8013f20:	0052      	lsls	r2, r2, #1
 8013f22:	3101      	adds	r1, #1
 8013f24:	e7f0      	b.n	8013f08 <__s2b+0x18>
 8013f26:	9b08      	ldr	r3, [sp, #32]
 8013f28:	6143      	str	r3, [r0, #20]
 8013f2a:	2d09      	cmp	r5, #9
 8013f2c:	f04f 0301 	mov.w	r3, #1
 8013f30:	6103      	str	r3, [r0, #16]
 8013f32:	dd16      	ble.n	8013f62 <__s2b+0x72>
 8013f34:	f104 0909 	add.w	r9, r4, #9
 8013f38:	46c8      	mov	r8, r9
 8013f3a:	442c      	add	r4, r5
 8013f3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013f40:	4601      	mov	r1, r0
 8013f42:	3b30      	subs	r3, #48	@ 0x30
 8013f44:	220a      	movs	r2, #10
 8013f46:	4630      	mov	r0, r6
 8013f48:	f7ff ff8c 	bl	8013e64 <__multadd>
 8013f4c:	45a0      	cmp	r8, r4
 8013f4e:	d1f5      	bne.n	8013f3c <__s2b+0x4c>
 8013f50:	f1a5 0408 	sub.w	r4, r5, #8
 8013f54:	444c      	add	r4, r9
 8013f56:	1b2d      	subs	r5, r5, r4
 8013f58:	1963      	adds	r3, r4, r5
 8013f5a:	42bb      	cmp	r3, r7
 8013f5c:	db04      	blt.n	8013f68 <__s2b+0x78>
 8013f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f62:	340a      	adds	r4, #10
 8013f64:	2509      	movs	r5, #9
 8013f66:	e7f6      	b.n	8013f56 <__s2b+0x66>
 8013f68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	3b30      	subs	r3, #48	@ 0x30
 8013f70:	220a      	movs	r2, #10
 8013f72:	4630      	mov	r0, r6
 8013f74:	f7ff ff76 	bl	8013e64 <__multadd>
 8013f78:	e7ee      	b.n	8013f58 <__s2b+0x68>
 8013f7a:	bf00      	nop
 8013f7c:	080182dd 	.word	0x080182dd
 8013f80:	080182ee 	.word	0x080182ee

08013f84 <__hi0bits>:
 8013f84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013f88:	4603      	mov	r3, r0
 8013f8a:	bf36      	itet	cc
 8013f8c:	0403      	lslcc	r3, r0, #16
 8013f8e:	2000      	movcs	r0, #0
 8013f90:	2010      	movcc	r0, #16
 8013f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013f96:	bf3c      	itt	cc
 8013f98:	021b      	lslcc	r3, r3, #8
 8013f9a:	3008      	addcc	r0, #8
 8013f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013fa0:	bf3c      	itt	cc
 8013fa2:	011b      	lslcc	r3, r3, #4
 8013fa4:	3004      	addcc	r0, #4
 8013fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013faa:	bf3c      	itt	cc
 8013fac:	009b      	lslcc	r3, r3, #2
 8013fae:	3002      	addcc	r0, #2
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	db05      	blt.n	8013fc0 <__hi0bits+0x3c>
 8013fb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013fb8:	f100 0001 	add.w	r0, r0, #1
 8013fbc:	bf08      	it	eq
 8013fbe:	2020      	moveq	r0, #32
 8013fc0:	4770      	bx	lr

08013fc2 <__lo0bits>:
 8013fc2:	6803      	ldr	r3, [r0, #0]
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	f013 0007 	ands.w	r0, r3, #7
 8013fca:	d00b      	beq.n	8013fe4 <__lo0bits+0x22>
 8013fcc:	07d9      	lsls	r1, r3, #31
 8013fce:	d421      	bmi.n	8014014 <__lo0bits+0x52>
 8013fd0:	0798      	lsls	r0, r3, #30
 8013fd2:	bf49      	itett	mi
 8013fd4:	085b      	lsrmi	r3, r3, #1
 8013fd6:	089b      	lsrpl	r3, r3, #2
 8013fd8:	2001      	movmi	r0, #1
 8013fda:	6013      	strmi	r3, [r2, #0]
 8013fdc:	bf5c      	itt	pl
 8013fde:	6013      	strpl	r3, [r2, #0]
 8013fe0:	2002      	movpl	r0, #2
 8013fe2:	4770      	bx	lr
 8013fe4:	b299      	uxth	r1, r3
 8013fe6:	b909      	cbnz	r1, 8013fec <__lo0bits+0x2a>
 8013fe8:	0c1b      	lsrs	r3, r3, #16
 8013fea:	2010      	movs	r0, #16
 8013fec:	b2d9      	uxtb	r1, r3
 8013fee:	b909      	cbnz	r1, 8013ff4 <__lo0bits+0x32>
 8013ff0:	3008      	adds	r0, #8
 8013ff2:	0a1b      	lsrs	r3, r3, #8
 8013ff4:	0719      	lsls	r1, r3, #28
 8013ff6:	bf04      	itt	eq
 8013ff8:	091b      	lsreq	r3, r3, #4
 8013ffa:	3004      	addeq	r0, #4
 8013ffc:	0799      	lsls	r1, r3, #30
 8013ffe:	bf04      	itt	eq
 8014000:	089b      	lsreq	r3, r3, #2
 8014002:	3002      	addeq	r0, #2
 8014004:	07d9      	lsls	r1, r3, #31
 8014006:	d403      	bmi.n	8014010 <__lo0bits+0x4e>
 8014008:	085b      	lsrs	r3, r3, #1
 801400a:	f100 0001 	add.w	r0, r0, #1
 801400e:	d003      	beq.n	8014018 <__lo0bits+0x56>
 8014010:	6013      	str	r3, [r2, #0]
 8014012:	4770      	bx	lr
 8014014:	2000      	movs	r0, #0
 8014016:	4770      	bx	lr
 8014018:	2020      	movs	r0, #32
 801401a:	4770      	bx	lr

0801401c <__i2b>:
 801401c:	b510      	push	{r4, lr}
 801401e:	460c      	mov	r4, r1
 8014020:	2101      	movs	r1, #1
 8014022:	f7ff febd 	bl	8013da0 <_Balloc>
 8014026:	4602      	mov	r2, r0
 8014028:	b928      	cbnz	r0, 8014036 <__i2b+0x1a>
 801402a:	4b05      	ldr	r3, [pc, #20]	@ (8014040 <__i2b+0x24>)
 801402c:	4805      	ldr	r0, [pc, #20]	@ (8014044 <__i2b+0x28>)
 801402e:	f240 1145 	movw	r1, #325	@ 0x145
 8014032:	f7ff f86d 	bl	8013110 <__assert_func>
 8014036:	2301      	movs	r3, #1
 8014038:	6144      	str	r4, [r0, #20]
 801403a:	6103      	str	r3, [r0, #16]
 801403c:	bd10      	pop	{r4, pc}
 801403e:	bf00      	nop
 8014040:	080182dd 	.word	0x080182dd
 8014044:	080182ee 	.word	0x080182ee

08014048 <__multiply>:
 8014048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801404c:	4614      	mov	r4, r2
 801404e:	690a      	ldr	r2, [r1, #16]
 8014050:	6923      	ldr	r3, [r4, #16]
 8014052:	429a      	cmp	r2, r3
 8014054:	bfa8      	it	ge
 8014056:	4623      	movge	r3, r4
 8014058:	460f      	mov	r7, r1
 801405a:	bfa4      	itt	ge
 801405c:	460c      	movge	r4, r1
 801405e:	461f      	movge	r7, r3
 8014060:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014064:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014068:	68a3      	ldr	r3, [r4, #8]
 801406a:	6861      	ldr	r1, [r4, #4]
 801406c:	eb0a 0609 	add.w	r6, sl, r9
 8014070:	42b3      	cmp	r3, r6
 8014072:	b085      	sub	sp, #20
 8014074:	bfb8      	it	lt
 8014076:	3101      	addlt	r1, #1
 8014078:	f7ff fe92 	bl	8013da0 <_Balloc>
 801407c:	b930      	cbnz	r0, 801408c <__multiply+0x44>
 801407e:	4602      	mov	r2, r0
 8014080:	4b44      	ldr	r3, [pc, #272]	@ (8014194 <__multiply+0x14c>)
 8014082:	4845      	ldr	r0, [pc, #276]	@ (8014198 <__multiply+0x150>)
 8014084:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014088:	f7ff f842 	bl	8013110 <__assert_func>
 801408c:	f100 0514 	add.w	r5, r0, #20
 8014090:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014094:	462b      	mov	r3, r5
 8014096:	2200      	movs	r2, #0
 8014098:	4543      	cmp	r3, r8
 801409a:	d321      	bcc.n	80140e0 <__multiply+0x98>
 801409c:	f107 0114 	add.w	r1, r7, #20
 80140a0:	f104 0214 	add.w	r2, r4, #20
 80140a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80140a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80140ac:	9302      	str	r3, [sp, #8]
 80140ae:	1b13      	subs	r3, r2, r4
 80140b0:	3b15      	subs	r3, #21
 80140b2:	f023 0303 	bic.w	r3, r3, #3
 80140b6:	3304      	adds	r3, #4
 80140b8:	f104 0715 	add.w	r7, r4, #21
 80140bc:	42ba      	cmp	r2, r7
 80140be:	bf38      	it	cc
 80140c0:	2304      	movcc	r3, #4
 80140c2:	9301      	str	r3, [sp, #4]
 80140c4:	9b02      	ldr	r3, [sp, #8]
 80140c6:	9103      	str	r1, [sp, #12]
 80140c8:	428b      	cmp	r3, r1
 80140ca:	d80c      	bhi.n	80140e6 <__multiply+0x9e>
 80140cc:	2e00      	cmp	r6, #0
 80140ce:	dd03      	ble.n	80140d8 <__multiply+0x90>
 80140d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d05b      	beq.n	8014190 <__multiply+0x148>
 80140d8:	6106      	str	r6, [r0, #16]
 80140da:	b005      	add	sp, #20
 80140dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e0:	f843 2b04 	str.w	r2, [r3], #4
 80140e4:	e7d8      	b.n	8014098 <__multiply+0x50>
 80140e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80140ea:	f1ba 0f00 	cmp.w	sl, #0
 80140ee:	d024      	beq.n	801413a <__multiply+0xf2>
 80140f0:	f104 0e14 	add.w	lr, r4, #20
 80140f4:	46a9      	mov	r9, r5
 80140f6:	f04f 0c00 	mov.w	ip, #0
 80140fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80140fe:	f8d9 3000 	ldr.w	r3, [r9]
 8014102:	fa1f fb87 	uxth.w	fp, r7
 8014106:	b29b      	uxth	r3, r3
 8014108:	fb0a 330b 	mla	r3, sl, fp, r3
 801410c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014110:	f8d9 7000 	ldr.w	r7, [r9]
 8014114:	4463      	add	r3, ip
 8014116:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801411a:	fb0a c70b 	mla	r7, sl, fp, ip
 801411e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014122:	b29b      	uxth	r3, r3
 8014124:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014128:	4572      	cmp	r2, lr
 801412a:	f849 3b04 	str.w	r3, [r9], #4
 801412e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014132:	d8e2      	bhi.n	80140fa <__multiply+0xb2>
 8014134:	9b01      	ldr	r3, [sp, #4]
 8014136:	f845 c003 	str.w	ip, [r5, r3]
 801413a:	9b03      	ldr	r3, [sp, #12]
 801413c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014140:	3104      	adds	r1, #4
 8014142:	f1b9 0f00 	cmp.w	r9, #0
 8014146:	d021      	beq.n	801418c <__multiply+0x144>
 8014148:	682b      	ldr	r3, [r5, #0]
 801414a:	f104 0c14 	add.w	ip, r4, #20
 801414e:	46ae      	mov	lr, r5
 8014150:	f04f 0a00 	mov.w	sl, #0
 8014154:	f8bc b000 	ldrh.w	fp, [ip]
 8014158:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801415c:	fb09 770b 	mla	r7, r9, fp, r7
 8014160:	4457      	add	r7, sl
 8014162:	b29b      	uxth	r3, r3
 8014164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014168:	f84e 3b04 	str.w	r3, [lr], #4
 801416c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014174:	f8be 3000 	ldrh.w	r3, [lr]
 8014178:	fb09 330a 	mla	r3, r9, sl, r3
 801417c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014180:	4562      	cmp	r2, ip
 8014182:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014186:	d8e5      	bhi.n	8014154 <__multiply+0x10c>
 8014188:	9f01      	ldr	r7, [sp, #4]
 801418a:	51eb      	str	r3, [r5, r7]
 801418c:	3504      	adds	r5, #4
 801418e:	e799      	b.n	80140c4 <__multiply+0x7c>
 8014190:	3e01      	subs	r6, #1
 8014192:	e79b      	b.n	80140cc <__multiply+0x84>
 8014194:	080182dd 	.word	0x080182dd
 8014198:	080182ee 	.word	0x080182ee

0801419c <__pow5mult>:
 801419c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141a0:	4615      	mov	r5, r2
 80141a2:	f012 0203 	ands.w	r2, r2, #3
 80141a6:	4607      	mov	r7, r0
 80141a8:	460e      	mov	r6, r1
 80141aa:	d007      	beq.n	80141bc <__pow5mult+0x20>
 80141ac:	4c25      	ldr	r4, [pc, #148]	@ (8014244 <__pow5mult+0xa8>)
 80141ae:	3a01      	subs	r2, #1
 80141b0:	2300      	movs	r3, #0
 80141b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80141b6:	f7ff fe55 	bl	8013e64 <__multadd>
 80141ba:	4606      	mov	r6, r0
 80141bc:	10ad      	asrs	r5, r5, #2
 80141be:	d03d      	beq.n	801423c <__pow5mult+0xa0>
 80141c0:	69fc      	ldr	r4, [r7, #28]
 80141c2:	b97c      	cbnz	r4, 80141e4 <__pow5mult+0x48>
 80141c4:	2010      	movs	r0, #16
 80141c6:	f7fd fd51 	bl	8011c6c <malloc>
 80141ca:	4602      	mov	r2, r0
 80141cc:	61f8      	str	r0, [r7, #28]
 80141ce:	b928      	cbnz	r0, 80141dc <__pow5mult+0x40>
 80141d0:	4b1d      	ldr	r3, [pc, #116]	@ (8014248 <__pow5mult+0xac>)
 80141d2:	481e      	ldr	r0, [pc, #120]	@ (801424c <__pow5mult+0xb0>)
 80141d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80141d8:	f7fe ff9a 	bl	8013110 <__assert_func>
 80141dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80141e0:	6004      	str	r4, [r0, #0]
 80141e2:	60c4      	str	r4, [r0, #12]
 80141e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80141e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141ec:	b94c      	cbnz	r4, 8014202 <__pow5mult+0x66>
 80141ee:	f240 2171 	movw	r1, #625	@ 0x271
 80141f2:	4638      	mov	r0, r7
 80141f4:	f7ff ff12 	bl	801401c <__i2b>
 80141f8:	2300      	movs	r3, #0
 80141fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80141fe:	4604      	mov	r4, r0
 8014200:	6003      	str	r3, [r0, #0]
 8014202:	f04f 0900 	mov.w	r9, #0
 8014206:	07eb      	lsls	r3, r5, #31
 8014208:	d50a      	bpl.n	8014220 <__pow5mult+0x84>
 801420a:	4631      	mov	r1, r6
 801420c:	4622      	mov	r2, r4
 801420e:	4638      	mov	r0, r7
 8014210:	f7ff ff1a 	bl	8014048 <__multiply>
 8014214:	4631      	mov	r1, r6
 8014216:	4680      	mov	r8, r0
 8014218:	4638      	mov	r0, r7
 801421a:	f7ff fe01 	bl	8013e20 <_Bfree>
 801421e:	4646      	mov	r6, r8
 8014220:	106d      	asrs	r5, r5, #1
 8014222:	d00b      	beq.n	801423c <__pow5mult+0xa0>
 8014224:	6820      	ldr	r0, [r4, #0]
 8014226:	b938      	cbnz	r0, 8014238 <__pow5mult+0x9c>
 8014228:	4622      	mov	r2, r4
 801422a:	4621      	mov	r1, r4
 801422c:	4638      	mov	r0, r7
 801422e:	f7ff ff0b 	bl	8014048 <__multiply>
 8014232:	6020      	str	r0, [r4, #0]
 8014234:	f8c0 9000 	str.w	r9, [r0]
 8014238:	4604      	mov	r4, r0
 801423a:	e7e4      	b.n	8014206 <__pow5mult+0x6a>
 801423c:	4630      	mov	r0, r6
 801423e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014242:	bf00      	nop
 8014244:	08018348 	.word	0x08018348
 8014248:	08018194 	.word	0x08018194
 801424c:	080182ee 	.word	0x080182ee

08014250 <__lshift>:
 8014250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014254:	460c      	mov	r4, r1
 8014256:	6849      	ldr	r1, [r1, #4]
 8014258:	6923      	ldr	r3, [r4, #16]
 801425a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801425e:	68a3      	ldr	r3, [r4, #8]
 8014260:	4607      	mov	r7, r0
 8014262:	4691      	mov	r9, r2
 8014264:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014268:	f108 0601 	add.w	r6, r8, #1
 801426c:	42b3      	cmp	r3, r6
 801426e:	db0b      	blt.n	8014288 <__lshift+0x38>
 8014270:	4638      	mov	r0, r7
 8014272:	f7ff fd95 	bl	8013da0 <_Balloc>
 8014276:	4605      	mov	r5, r0
 8014278:	b948      	cbnz	r0, 801428e <__lshift+0x3e>
 801427a:	4602      	mov	r2, r0
 801427c:	4b28      	ldr	r3, [pc, #160]	@ (8014320 <__lshift+0xd0>)
 801427e:	4829      	ldr	r0, [pc, #164]	@ (8014324 <__lshift+0xd4>)
 8014280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014284:	f7fe ff44 	bl	8013110 <__assert_func>
 8014288:	3101      	adds	r1, #1
 801428a:	005b      	lsls	r3, r3, #1
 801428c:	e7ee      	b.n	801426c <__lshift+0x1c>
 801428e:	2300      	movs	r3, #0
 8014290:	f100 0114 	add.w	r1, r0, #20
 8014294:	f100 0210 	add.w	r2, r0, #16
 8014298:	4618      	mov	r0, r3
 801429a:	4553      	cmp	r3, sl
 801429c:	db33      	blt.n	8014306 <__lshift+0xb6>
 801429e:	6920      	ldr	r0, [r4, #16]
 80142a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80142a4:	f104 0314 	add.w	r3, r4, #20
 80142a8:	f019 091f 	ands.w	r9, r9, #31
 80142ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80142b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80142b4:	d02b      	beq.n	801430e <__lshift+0xbe>
 80142b6:	f1c9 0e20 	rsb	lr, r9, #32
 80142ba:	468a      	mov	sl, r1
 80142bc:	2200      	movs	r2, #0
 80142be:	6818      	ldr	r0, [r3, #0]
 80142c0:	fa00 f009 	lsl.w	r0, r0, r9
 80142c4:	4310      	orrs	r0, r2
 80142c6:	f84a 0b04 	str.w	r0, [sl], #4
 80142ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ce:	459c      	cmp	ip, r3
 80142d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80142d4:	d8f3      	bhi.n	80142be <__lshift+0x6e>
 80142d6:	ebac 0304 	sub.w	r3, ip, r4
 80142da:	3b15      	subs	r3, #21
 80142dc:	f023 0303 	bic.w	r3, r3, #3
 80142e0:	3304      	adds	r3, #4
 80142e2:	f104 0015 	add.w	r0, r4, #21
 80142e6:	4584      	cmp	ip, r0
 80142e8:	bf38      	it	cc
 80142ea:	2304      	movcc	r3, #4
 80142ec:	50ca      	str	r2, [r1, r3]
 80142ee:	b10a      	cbz	r2, 80142f4 <__lshift+0xa4>
 80142f0:	f108 0602 	add.w	r6, r8, #2
 80142f4:	3e01      	subs	r6, #1
 80142f6:	4638      	mov	r0, r7
 80142f8:	612e      	str	r6, [r5, #16]
 80142fa:	4621      	mov	r1, r4
 80142fc:	f7ff fd90 	bl	8013e20 <_Bfree>
 8014300:	4628      	mov	r0, r5
 8014302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014306:	f842 0f04 	str.w	r0, [r2, #4]!
 801430a:	3301      	adds	r3, #1
 801430c:	e7c5      	b.n	801429a <__lshift+0x4a>
 801430e:	3904      	subs	r1, #4
 8014310:	f853 2b04 	ldr.w	r2, [r3], #4
 8014314:	f841 2f04 	str.w	r2, [r1, #4]!
 8014318:	459c      	cmp	ip, r3
 801431a:	d8f9      	bhi.n	8014310 <__lshift+0xc0>
 801431c:	e7ea      	b.n	80142f4 <__lshift+0xa4>
 801431e:	bf00      	nop
 8014320:	080182dd 	.word	0x080182dd
 8014324:	080182ee 	.word	0x080182ee

08014328 <__mcmp>:
 8014328:	690a      	ldr	r2, [r1, #16]
 801432a:	4603      	mov	r3, r0
 801432c:	6900      	ldr	r0, [r0, #16]
 801432e:	1a80      	subs	r0, r0, r2
 8014330:	b530      	push	{r4, r5, lr}
 8014332:	d10e      	bne.n	8014352 <__mcmp+0x2a>
 8014334:	3314      	adds	r3, #20
 8014336:	3114      	adds	r1, #20
 8014338:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801433c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014340:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014344:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014348:	4295      	cmp	r5, r2
 801434a:	d003      	beq.n	8014354 <__mcmp+0x2c>
 801434c:	d205      	bcs.n	801435a <__mcmp+0x32>
 801434e:	f04f 30ff 	mov.w	r0, #4294967295
 8014352:	bd30      	pop	{r4, r5, pc}
 8014354:	42a3      	cmp	r3, r4
 8014356:	d3f3      	bcc.n	8014340 <__mcmp+0x18>
 8014358:	e7fb      	b.n	8014352 <__mcmp+0x2a>
 801435a:	2001      	movs	r0, #1
 801435c:	e7f9      	b.n	8014352 <__mcmp+0x2a>
	...

08014360 <__mdiff>:
 8014360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014364:	4689      	mov	r9, r1
 8014366:	4606      	mov	r6, r0
 8014368:	4611      	mov	r1, r2
 801436a:	4648      	mov	r0, r9
 801436c:	4614      	mov	r4, r2
 801436e:	f7ff ffdb 	bl	8014328 <__mcmp>
 8014372:	1e05      	subs	r5, r0, #0
 8014374:	d112      	bne.n	801439c <__mdiff+0x3c>
 8014376:	4629      	mov	r1, r5
 8014378:	4630      	mov	r0, r6
 801437a:	f7ff fd11 	bl	8013da0 <_Balloc>
 801437e:	4602      	mov	r2, r0
 8014380:	b928      	cbnz	r0, 801438e <__mdiff+0x2e>
 8014382:	4b3f      	ldr	r3, [pc, #252]	@ (8014480 <__mdiff+0x120>)
 8014384:	f240 2137 	movw	r1, #567	@ 0x237
 8014388:	483e      	ldr	r0, [pc, #248]	@ (8014484 <__mdiff+0x124>)
 801438a:	f7fe fec1 	bl	8013110 <__assert_func>
 801438e:	2301      	movs	r3, #1
 8014390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014394:	4610      	mov	r0, r2
 8014396:	b003      	add	sp, #12
 8014398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801439c:	bfbc      	itt	lt
 801439e:	464b      	movlt	r3, r9
 80143a0:	46a1      	movlt	r9, r4
 80143a2:	4630      	mov	r0, r6
 80143a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80143a8:	bfba      	itte	lt
 80143aa:	461c      	movlt	r4, r3
 80143ac:	2501      	movlt	r5, #1
 80143ae:	2500      	movge	r5, #0
 80143b0:	f7ff fcf6 	bl	8013da0 <_Balloc>
 80143b4:	4602      	mov	r2, r0
 80143b6:	b918      	cbnz	r0, 80143c0 <__mdiff+0x60>
 80143b8:	4b31      	ldr	r3, [pc, #196]	@ (8014480 <__mdiff+0x120>)
 80143ba:	f240 2145 	movw	r1, #581	@ 0x245
 80143be:	e7e3      	b.n	8014388 <__mdiff+0x28>
 80143c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80143c4:	6926      	ldr	r6, [r4, #16]
 80143c6:	60c5      	str	r5, [r0, #12]
 80143c8:	f109 0310 	add.w	r3, r9, #16
 80143cc:	f109 0514 	add.w	r5, r9, #20
 80143d0:	f104 0e14 	add.w	lr, r4, #20
 80143d4:	f100 0b14 	add.w	fp, r0, #20
 80143d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80143dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80143e0:	9301      	str	r3, [sp, #4]
 80143e2:	46d9      	mov	r9, fp
 80143e4:	f04f 0c00 	mov.w	ip, #0
 80143e8:	9b01      	ldr	r3, [sp, #4]
 80143ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80143ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80143f2:	9301      	str	r3, [sp, #4]
 80143f4:	fa1f f38a 	uxth.w	r3, sl
 80143f8:	4619      	mov	r1, r3
 80143fa:	b283      	uxth	r3, r0
 80143fc:	1acb      	subs	r3, r1, r3
 80143fe:	0c00      	lsrs	r0, r0, #16
 8014400:	4463      	add	r3, ip
 8014402:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014406:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801440a:	b29b      	uxth	r3, r3
 801440c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014410:	4576      	cmp	r6, lr
 8014412:	f849 3b04 	str.w	r3, [r9], #4
 8014416:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801441a:	d8e5      	bhi.n	80143e8 <__mdiff+0x88>
 801441c:	1b33      	subs	r3, r6, r4
 801441e:	3b15      	subs	r3, #21
 8014420:	f023 0303 	bic.w	r3, r3, #3
 8014424:	3415      	adds	r4, #21
 8014426:	3304      	adds	r3, #4
 8014428:	42a6      	cmp	r6, r4
 801442a:	bf38      	it	cc
 801442c:	2304      	movcc	r3, #4
 801442e:	441d      	add	r5, r3
 8014430:	445b      	add	r3, fp
 8014432:	461e      	mov	r6, r3
 8014434:	462c      	mov	r4, r5
 8014436:	4544      	cmp	r4, r8
 8014438:	d30e      	bcc.n	8014458 <__mdiff+0xf8>
 801443a:	f108 0103 	add.w	r1, r8, #3
 801443e:	1b49      	subs	r1, r1, r5
 8014440:	f021 0103 	bic.w	r1, r1, #3
 8014444:	3d03      	subs	r5, #3
 8014446:	45a8      	cmp	r8, r5
 8014448:	bf38      	it	cc
 801444a:	2100      	movcc	r1, #0
 801444c:	440b      	add	r3, r1
 801444e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014452:	b191      	cbz	r1, 801447a <__mdiff+0x11a>
 8014454:	6117      	str	r7, [r2, #16]
 8014456:	e79d      	b.n	8014394 <__mdiff+0x34>
 8014458:	f854 1b04 	ldr.w	r1, [r4], #4
 801445c:	46e6      	mov	lr, ip
 801445e:	0c08      	lsrs	r0, r1, #16
 8014460:	fa1c fc81 	uxtah	ip, ip, r1
 8014464:	4471      	add	r1, lr
 8014466:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801446a:	b289      	uxth	r1, r1
 801446c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014470:	f846 1b04 	str.w	r1, [r6], #4
 8014474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014478:	e7dd      	b.n	8014436 <__mdiff+0xd6>
 801447a:	3f01      	subs	r7, #1
 801447c:	e7e7      	b.n	801444e <__mdiff+0xee>
 801447e:	bf00      	nop
 8014480:	080182dd 	.word	0x080182dd
 8014484:	080182ee 	.word	0x080182ee

08014488 <__ulp>:
 8014488:	b082      	sub	sp, #8
 801448a:	ed8d 0b00 	vstr	d0, [sp]
 801448e:	9a01      	ldr	r2, [sp, #4]
 8014490:	4b0f      	ldr	r3, [pc, #60]	@ (80144d0 <__ulp+0x48>)
 8014492:	4013      	ands	r3, r2
 8014494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014498:	2b00      	cmp	r3, #0
 801449a:	dc08      	bgt.n	80144ae <__ulp+0x26>
 801449c:	425b      	negs	r3, r3
 801449e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80144a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80144a6:	da04      	bge.n	80144b2 <__ulp+0x2a>
 80144a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80144ac:	4113      	asrs	r3, r2
 80144ae:	2200      	movs	r2, #0
 80144b0:	e008      	b.n	80144c4 <__ulp+0x3c>
 80144b2:	f1a2 0314 	sub.w	r3, r2, #20
 80144b6:	2b1e      	cmp	r3, #30
 80144b8:	bfda      	itte	le
 80144ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80144be:	40da      	lsrle	r2, r3
 80144c0:	2201      	movgt	r2, #1
 80144c2:	2300      	movs	r3, #0
 80144c4:	4619      	mov	r1, r3
 80144c6:	4610      	mov	r0, r2
 80144c8:	ec41 0b10 	vmov	d0, r0, r1
 80144cc:	b002      	add	sp, #8
 80144ce:	4770      	bx	lr
 80144d0:	7ff00000 	.word	0x7ff00000

080144d4 <__b2d>:
 80144d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d8:	6906      	ldr	r6, [r0, #16]
 80144da:	f100 0814 	add.w	r8, r0, #20
 80144de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80144e2:	1f37      	subs	r7, r6, #4
 80144e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80144e8:	4610      	mov	r0, r2
 80144ea:	f7ff fd4b 	bl	8013f84 <__hi0bits>
 80144ee:	f1c0 0320 	rsb	r3, r0, #32
 80144f2:	280a      	cmp	r0, #10
 80144f4:	600b      	str	r3, [r1, #0]
 80144f6:	491b      	ldr	r1, [pc, #108]	@ (8014564 <__b2d+0x90>)
 80144f8:	dc15      	bgt.n	8014526 <__b2d+0x52>
 80144fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80144fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8014502:	45b8      	cmp	r8, r7
 8014504:	ea43 0501 	orr.w	r5, r3, r1
 8014508:	bf34      	ite	cc
 801450a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801450e:	2300      	movcs	r3, #0
 8014510:	3015      	adds	r0, #21
 8014512:	fa02 f000 	lsl.w	r0, r2, r0
 8014516:	fa23 f30c 	lsr.w	r3, r3, ip
 801451a:	4303      	orrs	r3, r0
 801451c:	461c      	mov	r4, r3
 801451e:	ec45 4b10 	vmov	d0, r4, r5
 8014522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014526:	45b8      	cmp	r8, r7
 8014528:	bf3a      	itte	cc
 801452a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801452e:	f1a6 0708 	subcc.w	r7, r6, #8
 8014532:	2300      	movcs	r3, #0
 8014534:	380b      	subs	r0, #11
 8014536:	d012      	beq.n	801455e <__b2d+0x8a>
 8014538:	f1c0 0120 	rsb	r1, r0, #32
 801453c:	fa23 f401 	lsr.w	r4, r3, r1
 8014540:	4082      	lsls	r2, r0
 8014542:	4322      	orrs	r2, r4
 8014544:	4547      	cmp	r7, r8
 8014546:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801454a:	bf8c      	ite	hi
 801454c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014550:	2200      	movls	r2, #0
 8014552:	4083      	lsls	r3, r0
 8014554:	40ca      	lsrs	r2, r1
 8014556:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801455a:	4313      	orrs	r3, r2
 801455c:	e7de      	b.n	801451c <__b2d+0x48>
 801455e:	ea42 0501 	orr.w	r5, r2, r1
 8014562:	e7db      	b.n	801451c <__b2d+0x48>
 8014564:	3ff00000 	.word	0x3ff00000

08014568 <__d2b>:
 8014568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801456c:	460f      	mov	r7, r1
 801456e:	2101      	movs	r1, #1
 8014570:	ec59 8b10 	vmov	r8, r9, d0
 8014574:	4616      	mov	r6, r2
 8014576:	f7ff fc13 	bl	8013da0 <_Balloc>
 801457a:	4604      	mov	r4, r0
 801457c:	b930      	cbnz	r0, 801458c <__d2b+0x24>
 801457e:	4602      	mov	r2, r0
 8014580:	4b23      	ldr	r3, [pc, #140]	@ (8014610 <__d2b+0xa8>)
 8014582:	4824      	ldr	r0, [pc, #144]	@ (8014614 <__d2b+0xac>)
 8014584:	f240 310f 	movw	r1, #783	@ 0x30f
 8014588:	f7fe fdc2 	bl	8013110 <__assert_func>
 801458c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014594:	b10d      	cbz	r5, 801459a <__d2b+0x32>
 8014596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801459a:	9301      	str	r3, [sp, #4]
 801459c:	f1b8 0300 	subs.w	r3, r8, #0
 80145a0:	d023      	beq.n	80145ea <__d2b+0x82>
 80145a2:	4668      	mov	r0, sp
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	f7ff fd0c 	bl	8013fc2 <__lo0bits>
 80145aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80145ae:	b1d0      	cbz	r0, 80145e6 <__d2b+0x7e>
 80145b0:	f1c0 0320 	rsb	r3, r0, #32
 80145b4:	fa02 f303 	lsl.w	r3, r2, r3
 80145b8:	430b      	orrs	r3, r1
 80145ba:	40c2      	lsrs	r2, r0
 80145bc:	6163      	str	r3, [r4, #20]
 80145be:	9201      	str	r2, [sp, #4]
 80145c0:	9b01      	ldr	r3, [sp, #4]
 80145c2:	61a3      	str	r3, [r4, #24]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	bf0c      	ite	eq
 80145c8:	2201      	moveq	r2, #1
 80145ca:	2202      	movne	r2, #2
 80145cc:	6122      	str	r2, [r4, #16]
 80145ce:	b1a5      	cbz	r5, 80145fa <__d2b+0x92>
 80145d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80145d4:	4405      	add	r5, r0
 80145d6:	603d      	str	r5, [r7, #0]
 80145d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80145dc:	6030      	str	r0, [r6, #0]
 80145de:	4620      	mov	r0, r4
 80145e0:	b003      	add	sp, #12
 80145e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145e6:	6161      	str	r1, [r4, #20]
 80145e8:	e7ea      	b.n	80145c0 <__d2b+0x58>
 80145ea:	a801      	add	r0, sp, #4
 80145ec:	f7ff fce9 	bl	8013fc2 <__lo0bits>
 80145f0:	9b01      	ldr	r3, [sp, #4]
 80145f2:	6163      	str	r3, [r4, #20]
 80145f4:	3020      	adds	r0, #32
 80145f6:	2201      	movs	r2, #1
 80145f8:	e7e8      	b.n	80145cc <__d2b+0x64>
 80145fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80145fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014602:	6038      	str	r0, [r7, #0]
 8014604:	6918      	ldr	r0, [r3, #16]
 8014606:	f7ff fcbd 	bl	8013f84 <__hi0bits>
 801460a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801460e:	e7e5      	b.n	80145dc <__d2b+0x74>
 8014610:	080182dd 	.word	0x080182dd
 8014614:	080182ee 	.word	0x080182ee

08014618 <__ratio>:
 8014618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801461c:	4688      	mov	r8, r1
 801461e:	4669      	mov	r1, sp
 8014620:	4681      	mov	r9, r0
 8014622:	f7ff ff57 	bl	80144d4 <__b2d>
 8014626:	a901      	add	r1, sp, #4
 8014628:	4640      	mov	r0, r8
 801462a:	ec55 4b10 	vmov	r4, r5, d0
 801462e:	f7ff ff51 	bl	80144d4 <__b2d>
 8014632:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014636:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801463a:	1ad2      	subs	r2, r2, r3
 801463c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8014640:	1a5b      	subs	r3, r3, r1
 8014642:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8014646:	ec57 6b10 	vmov	r6, r7, d0
 801464a:	2b00      	cmp	r3, #0
 801464c:	bfd6      	itet	le
 801464e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014652:	462a      	movgt	r2, r5
 8014654:	463a      	movle	r2, r7
 8014656:	46ab      	mov	fp, r5
 8014658:	46a2      	mov	sl, r4
 801465a:	bfce      	itee	gt
 801465c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8014660:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8014664:	ee00 3a90 	vmovle	s1, r3
 8014668:	ec4b ab17 	vmov	d7, sl, fp
 801466c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8014670:	b003      	add	sp, #12
 8014672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014676 <__copybits>:
 8014676:	3901      	subs	r1, #1
 8014678:	b570      	push	{r4, r5, r6, lr}
 801467a:	1149      	asrs	r1, r1, #5
 801467c:	6914      	ldr	r4, [r2, #16]
 801467e:	3101      	adds	r1, #1
 8014680:	f102 0314 	add.w	r3, r2, #20
 8014684:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014688:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801468c:	1f05      	subs	r5, r0, #4
 801468e:	42a3      	cmp	r3, r4
 8014690:	d30c      	bcc.n	80146ac <__copybits+0x36>
 8014692:	1aa3      	subs	r3, r4, r2
 8014694:	3b11      	subs	r3, #17
 8014696:	f023 0303 	bic.w	r3, r3, #3
 801469a:	3211      	adds	r2, #17
 801469c:	42a2      	cmp	r2, r4
 801469e:	bf88      	it	hi
 80146a0:	2300      	movhi	r3, #0
 80146a2:	4418      	add	r0, r3
 80146a4:	2300      	movs	r3, #0
 80146a6:	4288      	cmp	r0, r1
 80146a8:	d305      	bcc.n	80146b6 <__copybits+0x40>
 80146aa:	bd70      	pop	{r4, r5, r6, pc}
 80146ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80146b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80146b4:	e7eb      	b.n	801468e <__copybits+0x18>
 80146b6:	f840 3b04 	str.w	r3, [r0], #4
 80146ba:	e7f4      	b.n	80146a6 <__copybits+0x30>

080146bc <__any_on>:
 80146bc:	f100 0214 	add.w	r2, r0, #20
 80146c0:	6900      	ldr	r0, [r0, #16]
 80146c2:	114b      	asrs	r3, r1, #5
 80146c4:	4298      	cmp	r0, r3
 80146c6:	b510      	push	{r4, lr}
 80146c8:	db11      	blt.n	80146ee <__any_on+0x32>
 80146ca:	dd0a      	ble.n	80146e2 <__any_on+0x26>
 80146cc:	f011 011f 	ands.w	r1, r1, #31
 80146d0:	d007      	beq.n	80146e2 <__any_on+0x26>
 80146d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80146d6:	fa24 f001 	lsr.w	r0, r4, r1
 80146da:	fa00 f101 	lsl.w	r1, r0, r1
 80146de:	428c      	cmp	r4, r1
 80146e0:	d10b      	bne.n	80146fa <__any_on+0x3e>
 80146e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80146e6:	4293      	cmp	r3, r2
 80146e8:	d803      	bhi.n	80146f2 <__any_on+0x36>
 80146ea:	2000      	movs	r0, #0
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	4603      	mov	r3, r0
 80146f0:	e7f7      	b.n	80146e2 <__any_on+0x26>
 80146f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80146f6:	2900      	cmp	r1, #0
 80146f8:	d0f5      	beq.n	80146e6 <__any_on+0x2a>
 80146fa:	2001      	movs	r0, #1
 80146fc:	e7f6      	b.n	80146ec <__any_on+0x30>

080146fe <_malloc_usable_size_r>:
 80146fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014702:	1f18      	subs	r0, r3, #4
 8014704:	2b00      	cmp	r3, #0
 8014706:	bfbc      	itt	lt
 8014708:	580b      	ldrlt	r3, [r1, r0]
 801470a:	18c0      	addlt	r0, r0, r3
 801470c:	4770      	bx	lr

0801470e <sulp>:
 801470e:	b570      	push	{r4, r5, r6, lr}
 8014710:	4604      	mov	r4, r0
 8014712:	460d      	mov	r5, r1
 8014714:	4616      	mov	r6, r2
 8014716:	ec45 4b10 	vmov	d0, r4, r5
 801471a:	f7ff feb5 	bl	8014488 <__ulp>
 801471e:	b17e      	cbz	r6, 8014740 <sulp+0x32>
 8014720:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014724:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014728:	2b00      	cmp	r3, #0
 801472a:	dd09      	ble.n	8014740 <sulp+0x32>
 801472c:	051b      	lsls	r3, r3, #20
 801472e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014732:	2000      	movs	r0, #0
 8014734:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8014738:	ec41 0b17 	vmov	d7, r0, r1
 801473c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014740:	bd70      	pop	{r4, r5, r6, pc}
 8014742:	0000      	movs	r0, r0
 8014744:	0000      	movs	r0, r0
	...

08014748 <_strtod_l>:
 8014748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801474c:	ed2d 8b0a 	vpush	{d8-d12}
 8014750:	b097      	sub	sp, #92	@ 0x5c
 8014752:	4688      	mov	r8, r1
 8014754:	920e      	str	r2, [sp, #56]	@ 0x38
 8014756:	2200      	movs	r2, #0
 8014758:	9212      	str	r2, [sp, #72]	@ 0x48
 801475a:	9005      	str	r0, [sp, #20]
 801475c:	f04f 0a00 	mov.w	sl, #0
 8014760:	f04f 0b00 	mov.w	fp, #0
 8014764:	460a      	mov	r2, r1
 8014766:	9211      	str	r2, [sp, #68]	@ 0x44
 8014768:	7811      	ldrb	r1, [r2, #0]
 801476a:	292b      	cmp	r1, #43	@ 0x2b
 801476c:	d04c      	beq.n	8014808 <_strtod_l+0xc0>
 801476e:	d839      	bhi.n	80147e4 <_strtod_l+0x9c>
 8014770:	290d      	cmp	r1, #13
 8014772:	d833      	bhi.n	80147dc <_strtod_l+0x94>
 8014774:	2908      	cmp	r1, #8
 8014776:	d833      	bhi.n	80147e0 <_strtod_l+0x98>
 8014778:	2900      	cmp	r1, #0
 801477a:	d03c      	beq.n	80147f6 <_strtod_l+0xae>
 801477c:	2200      	movs	r2, #0
 801477e:	9208      	str	r2, [sp, #32]
 8014780:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8014782:	782a      	ldrb	r2, [r5, #0]
 8014784:	2a30      	cmp	r2, #48	@ 0x30
 8014786:	f040 80b5 	bne.w	80148f4 <_strtod_l+0x1ac>
 801478a:	786a      	ldrb	r2, [r5, #1]
 801478c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014790:	2a58      	cmp	r2, #88	@ 0x58
 8014792:	d170      	bne.n	8014876 <_strtod_l+0x12e>
 8014794:	9302      	str	r3, [sp, #8]
 8014796:	9b08      	ldr	r3, [sp, #32]
 8014798:	9301      	str	r3, [sp, #4]
 801479a:	ab12      	add	r3, sp, #72	@ 0x48
 801479c:	9300      	str	r3, [sp, #0]
 801479e:	4a8b      	ldr	r2, [pc, #556]	@ (80149cc <_strtod_l+0x284>)
 80147a0:	9805      	ldr	r0, [sp, #20]
 80147a2:	ab13      	add	r3, sp, #76	@ 0x4c
 80147a4:	a911      	add	r1, sp, #68	@ 0x44
 80147a6:	f001 fa79 	bl	8015c9c <__gethex>
 80147aa:	f010 060f 	ands.w	r6, r0, #15
 80147ae:	4604      	mov	r4, r0
 80147b0:	d005      	beq.n	80147be <_strtod_l+0x76>
 80147b2:	2e06      	cmp	r6, #6
 80147b4:	d12a      	bne.n	801480c <_strtod_l+0xc4>
 80147b6:	3501      	adds	r5, #1
 80147b8:	2300      	movs	r3, #0
 80147ba:	9511      	str	r5, [sp, #68]	@ 0x44
 80147bc:	9308      	str	r3, [sp, #32]
 80147be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	f040 852f 	bne.w	8015224 <_strtod_l+0xadc>
 80147c6:	9b08      	ldr	r3, [sp, #32]
 80147c8:	ec4b ab10 	vmov	d0, sl, fp
 80147cc:	b1cb      	cbz	r3, 8014802 <_strtod_l+0xba>
 80147ce:	eeb1 0b40 	vneg.f64	d0, d0
 80147d2:	b017      	add	sp, #92	@ 0x5c
 80147d4:	ecbd 8b0a 	vpop	{d8-d12}
 80147d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147dc:	2920      	cmp	r1, #32
 80147de:	d1cd      	bne.n	801477c <_strtod_l+0x34>
 80147e0:	3201      	adds	r2, #1
 80147e2:	e7c0      	b.n	8014766 <_strtod_l+0x1e>
 80147e4:	292d      	cmp	r1, #45	@ 0x2d
 80147e6:	d1c9      	bne.n	801477c <_strtod_l+0x34>
 80147e8:	2101      	movs	r1, #1
 80147ea:	9108      	str	r1, [sp, #32]
 80147ec:	1c51      	adds	r1, r2, #1
 80147ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80147f0:	7852      	ldrb	r2, [r2, #1]
 80147f2:	2a00      	cmp	r2, #0
 80147f4:	d1c4      	bne.n	8014780 <_strtod_l+0x38>
 80147f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147f8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f040 850f 	bne.w	8015220 <_strtod_l+0xad8>
 8014802:	ec4b ab10 	vmov	d0, sl, fp
 8014806:	e7e4      	b.n	80147d2 <_strtod_l+0x8a>
 8014808:	2100      	movs	r1, #0
 801480a:	e7ee      	b.n	80147ea <_strtod_l+0xa2>
 801480c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801480e:	b13a      	cbz	r2, 8014820 <_strtod_l+0xd8>
 8014810:	2135      	movs	r1, #53	@ 0x35
 8014812:	a814      	add	r0, sp, #80	@ 0x50
 8014814:	f7ff ff2f 	bl	8014676 <__copybits>
 8014818:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801481a:	9805      	ldr	r0, [sp, #20]
 801481c:	f7ff fb00 	bl	8013e20 <_Bfree>
 8014820:	1e73      	subs	r3, r6, #1
 8014822:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014824:	2b04      	cmp	r3, #4
 8014826:	d806      	bhi.n	8014836 <_strtod_l+0xee>
 8014828:	e8df f003 	tbb	[pc, r3]
 801482c:	201d0314 	.word	0x201d0314
 8014830:	14          	.byte	0x14
 8014831:	00          	.byte	0x00
 8014832:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8014836:	05e3      	lsls	r3, r4, #23
 8014838:	bf48      	it	mi
 801483a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801483e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014842:	0d1b      	lsrs	r3, r3, #20
 8014844:	051b      	lsls	r3, r3, #20
 8014846:	2b00      	cmp	r3, #0
 8014848:	d1b9      	bne.n	80147be <_strtod_l+0x76>
 801484a:	f7fe fc1f 	bl	801308c <__errno>
 801484e:	2322      	movs	r3, #34	@ 0x22
 8014850:	6003      	str	r3, [r0, #0]
 8014852:	e7b4      	b.n	80147be <_strtod_l+0x76>
 8014854:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8014858:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801485c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014860:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014864:	e7e7      	b.n	8014836 <_strtod_l+0xee>
 8014866:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80149d4 <_strtod_l+0x28c>
 801486a:	e7e4      	b.n	8014836 <_strtod_l+0xee>
 801486c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014870:	f04f 3aff 	mov.w	sl, #4294967295
 8014874:	e7df      	b.n	8014836 <_strtod_l+0xee>
 8014876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014878:	1c5a      	adds	r2, r3, #1
 801487a:	9211      	str	r2, [sp, #68]	@ 0x44
 801487c:	785b      	ldrb	r3, [r3, #1]
 801487e:	2b30      	cmp	r3, #48	@ 0x30
 8014880:	d0f9      	beq.n	8014876 <_strtod_l+0x12e>
 8014882:	2b00      	cmp	r3, #0
 8014884:	d09b      	beq.n	80147be <_strtod_l+0x76>
 8014886:	2301      	movs	r3, #1
 8014888:	2600      	movs	r6, #0
 801488a:	9307      	str	r3, [sp, #28]
 801488c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801488e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014890:	46b1      	mov	r9, r6
 8014892:	4635      	mov	r5, r6
 8014894:	220a      	movs	r2, #10
 8014896:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8014898:	7804      	ldrb	r4, [r0, #0]
 801489a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801489e:	b2d9      	uxtb	r1, r3
 80148a0:	2909      	cmp	r1, #9
 80148a2:	d929      	bls.n	80148f8 <_strtod_l+0x1b0>
 80148a4:	494a      	ldr	r1, [pc, #296]	@ (80149d0 <_strtod_l+0x288>)
 80148a6:	2201      	movs	r2, #1
 80148a8:	f001 f93a 	bl	8015b20 <strncmp>
 80148ac:	b378      	cbz	r0, 801490e <_strtod_l+0x1c6>
 80148ae:	2000      	movs	r0, #0
 80148b0:	4622      	mov	r2, r4
 80148b2:	462b      	mov	r3, r5
 80148b4:	4607      	mov	r7, r0
 80148b6:	9006      	str	r0, [sp, #24]
 80148b8:	2a65      	cmp	r2, #101	@ 0x65
 80148ba:	d001      	beq.n	80148c0 <_strtod_l+0x178>
 80148bc:	2a45      	cmp	r2, #69	@ 0x45
 80148be:	d117      	bne.n	80148f0 <_strtod_l+0x1a8>
 80148c0:	b91b      	cbnz	r3, 80148ca <_strtod_l+0x182>
 80148c2:	9b07      	ldr	r3, [sp, #28]
 80148c4:	4303      	orrs	r3, r0
 80148c6:	d096      	beq.n	80147f6 <_strtod_l+0xae>
 80148c8:	2300      	movs	r3, #0
 80148ca:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80148ce:	f108 0201 	add.w	r2, r8, #1
 80148d2:	9211      	str	r2, [sp, #68]	@ 0x44
 80148d4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80148d8:	2a2b      	cmp	r2, #43	@ 0x2b
 80148da:	d06b      	beq.n	80149b4 <_strtod_l+0x26c>
 80148dc:	2a2d      	cmp	r2, #45	@ 0x2d
 80148de:	d071      	beq.n	80149c4 <_strtod_l+0x27c>
 80148e0:	f04f 0e00 	mov.w	lr, #0
 80148e4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80148e8:	2c09      	cmp	r4, #9
 80148ea:	d979      	bls.n	80149e0 <_strtod_l+0x298>
 80148ec:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80148f0:	2400      	movs	r4, #0
 80148f2:	e094      	b.n	8014a1e <_strtod_l+0x2d6>
 80148f4:	2300      	movs	r3, #0
 80148f6:	e7c7      	b.n	8014888 <_strtod_l+0x140>
 80148f8:	2d08      	cmp	r5, #8
 80148fa:	f100 0001 	add.w	r0, r0, #1
 80148fe:	bfd4      	ite	le
 8014900:	fb02 3909 	mlale	r9, r2, r9, r3
 8014904:	fb02 3606 	mlagt	r6, r2, r6, r3
 8014908:	3501      	adds	r5, #1
 801490a:	9011      	str	r0, [sp, #68]	@ 0x44
 801490c:	e7c3      	b.n	8014896 <_strtod_l+0x14e>
 801490e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014910:	1c5a      	adds	r2, r3, #1
 8014912:	9211      	str	r2, [sp, #68]	@ 0x44
 8014914:	785a      	ldrb	r2, [r3, #1]
 8014916:	b375      	cbz	r5, 8014976 <_strtod_l+0x22e>
 8014918:	4607      	mov	r7, r0
 801491a:	462b      	mov	r3, r5
 801491c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014920:	2909      	cmp	r1, #9
 8014922:	d913      	bls.n	801494c <_strtod_l+0x204>
 8014924:	2101      	movs	r1, #1
 8014926:	9106      	str	r1, [sp, #24]
 8014928:	e7c6      	b.n	80148b8 <_strtod_l+0x170>
 801492a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801492c:	1c5a      	adds	r2, r3, #1
 801492e:	9211      	str	r2, [sp, #68]	@ 0x44
 8014930:	785a      	ldrb	r2, [r3, #1]
 8014932:	3001      	adds	r0, #1
 8014934:	2a30      	cmp	r2, #48	@ 0x30
 8014936:	d0f8      	beq.n	801492a <_strtod_l+0x1e2>
 8014938:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801493c:	2b08      	cmp	r3, #8
 801493e:	f200 8476 	bhi.w	801522e <_strtod_l+0xae6>
 8014942:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014944:	930a      	str	r3, [sp, #40]	@ 0x28
 8014946:	4607      	mov	r7, r0
 8014948:	2000      	movs	r0, #0
 801494a:	4603      	mov	r3, r0
 801494c:	3a30      	subs	r2, #48	@ 0x30
 801494e:	f100 0101 	add.w	r1, r0, #1
 8014952:	d023      	beq.n	801499c <_strtod_l+0x254>
 8014954:	440f      	add	r7, r1
 8014956:	eb00 0c03 	add.w	ip, r0, r3
 801495a:	4619      	mov	r1, r3
 801495c:	240a      	movs	r4, #10
 801495e:	4561      	cmp	r1, ip
 8014960:	d10b      	bne.n	801497a <_strtod_l+0x232>
 8014962:	1c5c      	adds	r4, r3, #1
 8014964:	4403      	add	r3, r0
 8014966:	2b08      	cmp	r3, #8
 8014968:	4404      	add	r4, r0
 801496a:	dc11      	bgt.n	8014990 <_strtod_l+0x248>
 801496c:	230a      	movs	r3, #10
 801496e:	fb03 2909 	mla	r9, r3, r9, r2
 8014972:	2100      	movs	r1, #0
 8014974:	e013      	b.n	801499e <_strtod_l+0x256>
 8014976:	4628      	mov	r0, r5
 8014978:	e7dc      	b.n	8014934 <_strtod_l+0x1ec>
 801497a:	2908      	cmp	r1, #8
 801497c:	f101 0101 	add.w	r1, r1, #1
 8014980:	dc02      	bgt.n	8014988 <_strtod_l+0x240>
 8014982:	fb04 f909 	mul.w	r9, r4, r9
 8014986:	e7ea      	b.n	801495e <_strtod_l+0x216>
 8014988:	2910      	cmp	r1, #16
 801498a:	bfd8      	it	le
 801498c:	4366      	mulle	r6, r4
 801498e:	e7e6      	b.n	801495e <_strtod_l+0x216>
 8014990:	2b0f      	cmp	r3, #15
 8014992:	dcee      	bgt.n	8014972 <_strtod_l+0x22a>
 8014994:	230a      	movs	r3, #10
 8014996:	fb03 2606 	mla	r6, r3, r6, r2
 801499a:	e7ea      	b.n	8014972 <_strtod_l+0x22a>
 801499c:	461c      	mov	r4, r3
 801499e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80149a0:	1c5a      	adds	r2, r3, #1
 80149a2:	9211      	str	r2, [sp, #68]	@ 0x44
 80149a4:	785a      	ldrb	r2, [r3, #1]
 80149a6:	4608      	mov	r0, r1
 80149a8:	4623      	mov	r3, r4
 80149aa:	e7b7      	b.n	801491c <_strtod_l+0x1d4>
 80149ac:	2301      	movs	r3, #1
 80149ae:	2700      	movs	r7, #0
 80149b0:	9306      	str	r3, [sp, #24]
 80149b2:	e786      	b.n	80148c2 <_strtod_l+0x17a>
 80149b4:	f04f 0e00 	mov.w	lr, #0
 80149b8:	f108 0202 	add.w	r2, r8, #2
 80149bc:	9211      	str	r2, [sp, #68]	@ 0x44
 80149be:	f898 2002 	ldrb.w	r2, [r8, #2]
 80149c2:	e78f      	b.n	80148e4 <_strtod_l+0x19c>
 80149c4:	f04f 0e01 	mov.w	lr, #1
 80149c8:	e7f6      	b.n	80149b8 <_strtod_l+0x270>
 80149ca:	bf00      	nop
 80149cc:	08018460 	.word	0x08018460
 80149d0:	08018448 	.word	0x08018448
 80149d4:	7ff00000 	.word	0x7ff00000
 80149d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80149da:	1c54      	adds	r4, r2, #1
 80149dc:	9411      	str	r4, [sp, #68]	@ 0x44
 80149de:	7852      	ldrb	r2, [r2, #1]
 80149e0:	2a30      	cmp	r2, #48	@ 0x30
 80149e2:	d0f9      	beq.n	80149d8 <_strtod_l+0x290>
 80149e4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80149e8:	2c08      	cmp	r4, #8
 80149ea:	d881      	bhi.n	80148f0 <_strtod_l+0x1a8>
 80149ec:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80149f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80149f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80149f4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80149f6:	1c51      	adds	r1, r2, #1
 80149f8:	9111      	str	r1, [sp, #68]	@ 0x44
 80149fa:	7852      	ldrb	r2, [r2, #1]
 80149fc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8014a00:	2c09      	cmp	r4, #9
 8014a02:	d938      	bls.n	8014a76 <_strtod_l+0x32e>
 8014a04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014a06:	1b0c      	subs	r4, r1, r4
 8014a08:	2c08      	cmp	r4, #8
 8014a0a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8014a0e:	dc02      	bgt.n	8014a16 <_strtod_l+0x2ce>
 8014a10:	4564      	cmp	r4, ip
 8014a12:	bfa8      	it	ge
 8014a14:	4664      	movge	r4, ip
 8014a16:	f1be 0f00 	cmp.w	lr, #0
 8014a1a:	d000      	beq.n	8014a1e <_strtod_l+0x2d6>
 8014a1c:	4264      	negs	r4, r4
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d14e      	bne.n	8014ac0 <_strtod_l+0x378>
 8014a22:	9b07      	ldr	r3, [sp, #28]
 8014a24:	4318      	orrs	r0, r3
 8014a26:	f47f aeca 	bne.w	80147be <_strtod_l+0x76>
 8014a2a:	9b06      	ldr	r3, [sp, #24]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	f47f aee2 	bne.w	80147f6 <_strtod_l+0xae>
 8014a32:	2a69      	cmp	r2, #105	@ 0x69
 8014a34:	d027      	beq.n	8014a86 <_strtod_l+0x33e>
 8014a36:	dc24      	bgt.n	8014a82 <_strtod_l+0x33a>
 8014a38:	2a49      	cmp	r2, #73	@ 0x49
 8014a3a:	d024      	beq.n	8014a86 <_strtod_l+0x33e>
 8014a3c:	2a4e      	cmp	r2, #78	@ 0x4e
 8014a3e:	f47f aeda 	bne.w	80147f6 <_strtod_l+0xae>
 8014a42:	4997      	ldr	r1, [pc, #604]	@ (8014ca0 <_strtod_l+0x558>)
 8014a44:	a811      	add	r0, sp, #68	@ 0x44
 8014a46:	f001 fb4b 	bl	80160e0 <__match>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	f43f aed3 	beq.w	80147f6 <_strtod_l+0xae>
 8014a50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	2b28      	cmp	r3, #40	@ 0x28
 8014a56:	d12d      	bne.n	8014ab4 <_strtod_l+0x36c>
 8014a58:	4992      	ldr	r1, [pc, #584]	@ (8014ca4 <_strtod_l+0x55c>)
 8014a5a:	aa14      	add	r2, sp, #80	@ 0x50
 8014a5c:	a811      	add	r0, sp, #68	@ 0x44
 8014a5e:	f001 fb53 	bl	8016108 <__hexnan>
 8014a62:	2805      	cmp	r0, #5
 8014a64:	d126      	bne.n	8014ab4 <_strtod_l+0x36c>
 8014a66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a68:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8014a6c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8014a70:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8014a74:	e6a3      	b.n	80147be <_strtod_l+0x76>
 8014a76:	240a      	movs	r4, #10
 8014a78:	fb04 2c0c 	mla	ip, r4, ip, r2
 8014a7c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8014a80:	e7b8      	b.n	80149f4 <_strtod_l+0x2ac>
 8014a82:	2a6e      	cmp	r2, #110	@ 0x6e
 8014a84:	e7db      	b.n	8014a3e <_strtod_l+0x2f6>
 8014a86:	4988      	ldr	r1, [pc, #544]	@ (8014ca8 <_strtod_l+0x560>)
 8014a88:	a811      	add	r0, sp, #68	@ 0x44
 8014a8a:	f001 fb29 	bl	80160e0 <__match>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f43f aeb1 	beq.w	80147f6 <_strtod_l+0xae>
 8014a94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014a96:	4985      	ldr	r1, [pc, #532]	@ (8014cac <_strtod_l+0x564>)
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	a811      	add	r0, sp, #68	@ 0x44
 8014a9c:	9311      	str	r3, [sp, #68]	@ 0x44
 8014a9e:	f001 fb1f 	bl	80160e0 <__match>
 8014aa2:	b910      	cbnz	r0, 8014aaa <_strtod_l+0x362>
 8014aa4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8014aaa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8014cc0 <_strtod_l+0x578>
 8014aae:	f04f 0a00 	mov.w	sl, #0
 8014ab2:	e684      	b.n	80147be <_strtod_l+0x76>
 8014ab4:	487e      	ldr	r0, [pc, #504]	@ (8014cb0 <_strtod_l+0x568>)
 8014ab6:	f001 f867 	bl	8015b88 <nan>
 8014aba:	ec5b ab10 	vmov	sl, fp, d0
 8014abe:	e67e      	b.n	80147be <_strtod_l+0x76>
 8014ac0:	ee07 9a90 	vmov	s15, r9
 8014ac4:	1be2      	subs	r2, r4, r7
 8014ac6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014aca:	2d00      	cmp	r5, #0
 8014acc:	bf08      	it	eq
 8014ace:	461d      	moveq	r5, r3
 8014ad0:	2b10      	cmp	r3, #16
 8014ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	bfa8      	it	ge
 8014ad8:	2210      	movge	r2, #16
 8014ada:	2b09      	cmp	r3, #9
 8014adc:	ec5b ab17 	vmov	sl, fp, d7
 8014ae0:	dc15      	bgt.n	8014b0e <_strtod_l+0x3c6>
 8014ae2:	1be1      	subs	r1, r4, r7
 8014ae4:	2900      	cmp	r1, #0
 8014ae6:	f43f ae6a 	beq.w	80147be <_strtod_l+0x76>
 8014aea:	eba4 0107 	sub.w	r1, r4, r7
 8014aee:	dd72      	ble.n	8014bd6 <_strtod_l+0x48e>
 8014af0:	2916      	cmp	r1, #22
 8014af2:	dc59      	bgt.n	8014ba8 <_strtod_l+0x460>
 8014af4:	4b6f      	ldr	r3, [pc, #444]	@ (8014cb4 <_strtod_l+0x56c>)
 8014af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014afc:	ed93 7b00 	vldr	d7, [r3]
 8014b00:	ec4b ab16 	vmov	d6, sl, fp
 8014b04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b08:	ec5b ab17 	vmov	sl, fp, d7
 8014b0c:	e657      	b.n	80147be <_strtod_l+0x76>
 8014b0e:	4969      	ldr	r1, [pc, #420]	@ (8014cb4 <_strtod_l+0x56c>)
 8014b10:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014b14:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8014b18:	ee06 6a90 	vmov	s13, r6
 8014b1c:	2b0f      	cmp	r3, #15
 8014b1e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8014b22:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014b26:	ec5b ab16 	vmov	sl, fp, d6
 8014b2a:	ddda      	ble.n	8014ae2 <_strtod_l+0x39a>
 8014b2c:	1a9a      	subs	r2, r3, r2
 8014b2e:	1be1      	subs	r1, r4, r7
 8014b30:	440a      	add	r2, r1
 8014b32:	2a00      	cmp	r2, #0
 8014b34:	f340 8094 	ble.w	8014c60 <_strtod_l+0x518>
 8014b38:	f012 000f 	ands.w	r0, r2, #15
 8014b3c:	d00a      	beq.n	8014b54 <_strtod_l+0x40c>
 8014b3e:	495d      	ldr	r1, [pc, #372]	@ (8014cb4 <_strtod_l+0x56c>)
 8014b40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014b44:	ed91 7b00 	vldr	d7, [r1]
 8014b48:	ec4b ab16 	vmov	d6, sl, fp
 8014b4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b50:	ec5b ab17 	vmov	sl, fp, d7
 8014b54:	f032 020f 	bics.w	r2, r2, #15
 8014b58:	d073      	beq.n	8014c42 <_strtod_l+0x4fa>
 8014b5a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8014b5e:	dd47      	ble.n	8014bf0 <_strtod_l+0x4a8>
 8014b60:	2400      	movs	r4, #0
 8014b62:	4625      	mov	r5, r4
 8014b64:	9407      	str	r4, [sp, #28]
 8014b66:	4626      	mov	r6, r4
 8014b68:	9a05      	ldr	r2, [sp, #20]
 8014b6a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8014cc0 <_strtod_l+0x578>
 8014b6e:	2322      	movs	r3, #34	@ 0x22
 8014b70:	6013      	str	r3, [r2, #0]
 8014b72:	f04f 0a00 	mov.w	sl, #0
 8014b76:	9b07      	ldr	r3, [sp, #28]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	f43f ae20 	beq.w	80147be <_strtod_l+0x76>
 8014b7e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014b80:	9805      	ldr	r0, [sp, #20]
 8014b82:	f7ff f94d 	bl	8013e20 <_Bfree>
 8014b86:	9805      	ldr	r0, [sp, #20]
 8014b88:	4631      	mov	r1, r6
 8014b8a:	f7ff f949 	bl	8013e20 <_Bfree>
 8014b8e:	9805      	ldr	r0, [sp, #20]
 8014b90:	4629      	mov	r1, r5
 8014b92:	f7ff f945 	bl	8013e20 <_Bfree>
 8014b96:	9907      	ldr	r1, [sp, #28]
 8014b98:	9805      	ldr	r0, [sp, #20]
 8014b9a:	f7ff f941 	bl	8013e20 <_Bfree>
 8014b9e:	9805      	ldr	r0, [sp, #20]
 8014ba0:	4621      	mov	r1, r4
 8014ba2:	f7ff f93d 	bl	8013e20 <_Bfree>
 8014ba6:	e60a      	b.n	80147be <_strtod_l+0x76>
 8014ba8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8014bac:	1be0      	subs	r0, r4, r7
 8014bae:	4281      	cmp	r1, r0
 8014bb0:	dbbc      	blt.n	8014b2c <_strtod_l+0x3e4>
 8014bb2:	4a40      	ldr	r2, [pc, #256]	@ (8014cb4 <_strtod_l+0x56c>)
 8014bb4:	f1c3 030f 	rsb	r3, r3, #15
 8014bb8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014bbc:	ed91 7b00 	vldr	d7, [r1]
 8014bc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014bc2:	ec4b ab16 	vmov	d6, sl, fp
 8014bc6:	1acb      	subs	r3, r1, r3
 8014bc8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014bcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014bd0:	ed92 6b00 	vldr	d6, [r2]
 8014bd4:	e796      	b.n	8014b04 <_strtod_l+0x3bc>
 8014bd6:	3116      	adds	r1, #22
 8014bd8:	dba8      	blt.n	8014b2c <_strtod_l+0x3e4>
 8014bda:	4b36      	ldr	r3, [pc, #216]	@ (8014cb4 <_strtod_l+0x56c>)
 8014bdc:	1b3c      	subs	r4, r7, r4
 8014bde:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014be2:	ed94 7b00 	vldr	d7, [r4]
 8014be6:	ec4b ab16 	vmov	d6, sl, fp
 8014bea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014bee:	e78b      	b.n	8014b08 <_strtod_l+0x3c0>
 8014bf0:	2000      	movs	r0, #0
 8014bf2:	ec4b ab17 	vmov	d7, sl, fp
 8014bf6:	4e30      	ldr	r6, [pc, #192]	@ (8014cb8 <_strtod_l+0x570>)
 8014bf8:	1112      	asrs	r2, r2, #4
 8014bfa:	4601      	mov	r1, r0
 8014bfc:	2a01      	cmp	r2, #1
 8014bfe:	dc23      	bgt.n	8014c48 <_strtod_l+0x500>
 8014c00:	b108      	cbz	r0, 8014c06 <_strtod_l+0x4be>
 8014c02:	ec5b ab17 	vmov	sl, fp, d7
 8014c06:	4a2c      	ldr	r2, [pc, #176]	@ (8014cb8 <_strtod_l+0x570>)
 8014c08:	482c      	ldr	r0, [pc, #176]	@ (8014cbc <_strtod_l+0x574>)
 8014c0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014c0e:	ed92 7b00 	vldr	d7, [r2]
 8014c12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014c16:	ec4b ab16 	vmov	d6, sl, fp
 8014c1a:	4a29      	ldr	r2, [pc, #164]	@ (8014cc0 <_strtod_l+0x578>)
 8014c1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c20:	ee17 1a90 	vmov	r1, s15
 8014c24:	400a      	ands	r2, r1
 8014c26:	4282      	cmp	r2, r0
 8014c28:	ec5b ab17 	vmov	sl, fp, d7
 8014c2c:	d898      	bhi.n	8014b60 <_strtod_l+0x418>
 8014c2e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8014c32:	4282      	cmp	r2, r0
 8014c34:	bf86      	itte	hi
 8014c36:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8014cc4 <_strtod_l+0x57c>
 8014c3a:	f04f 3aff 	movhi.w	sl, #4294967295
 8014c3e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8014c42:	2200      	movs	r2, #0
 8014c44:	9206      	str	r2, [sp, #24]
 8014c46:	e076      	b.n	8014d36 <_strtod_l+0x5ee>
 8014c48:	f012 0f01 	tst.w	r2, #1
 8014c4c:	d004      	beq.n	8014c58 <_strtod_l+0x510>
 8014c4e:	ed96 6b00 	vldr	d6, [r6]
 8014c52:	2001      	movs	r0, #1
 8014c54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c58:	3101      	adds	r1, #1
 8014c5a:	1052      	asrs	r2, r2, #1
 8014c5c:	3608      	adds	r6, #8
 8014c5e:	e7cd      	b.n	8014bfc <_strtod_l+0x4b4>
 8014c60:	d0ef      	beq.n	8014c42 <_strtod_l+0x4fa>
 8014c62:	4252      	negs	r2, r2
 8014c64:	f012 000f 	ands.w	r0, r2, #15
 8014c68:	d00a      	beq.n	8014c80 <_strtod_l+0x538>
 8014c6a:	4912      	ldr	r1, [pc, #72]	@ (8014cb4 <_strtod_l+0x56c>)
 8014c6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014c70:	ed91 7b00 	vldr	d7, [r1]
 8014c74:	ec4b ab16 	vmov	d6, sl, fp
 8014c78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014c7c:	ec5b ab17 	vmov	sl, fp, d7
 8014c80:	1112      	asrs	r2, r2, #4
 8014c82:	d0de      	beq.n	8014c42 <_strtod_l+0x4fa>
 8014c84:	2a1f      	cmp	r2, #31
 8014c86:	dd1f      	ble.n	8014cc8 <_strtod_l+0x580>
 8014c88:	2400      	movs	r4, #0
 8014c8a:	4625      	mov	r5, r4
 8014c8c:	9407      	str	r4, [sp, #28]
 8014c8e:	4626      	mov	r6, r4
 8014c90:	9a05      	ldr	r2, [sp, #20]
 8014c92:	2322      	movs	r3, #34	@ 0x22
 8014c94:	f04f 0a00 	mov.w	sl, #0
 8014c98:	f04f 0b00 	mov.w	fp, #0
 8014c9c:	6013      	str	r3, [r2, #0]
 8014c9e:	e76a      	b.n	8014b76 <_strtod_l+0x42e>
 8014ca0:	08018210 	.word	0x08018210
 8014ca4:	0801844c 	.word	0x0801844c
 8014ca8:	08018208 	.word	0x08018208
 8014cac:	0801827b 	.word	0x0801827b
 8014cb0:	08018277 	.word	0x08018277
 8014cb4:	08018380 	.word	0x08018380
 8014cb8:	08018358 	.word	0x08018358
 8014cbc:	7ca00000 	.word	0x7ca00000
 8014cc0:	7ff00000 	.word	0x7ff00000
 8014cc4:	7fefffff 	.word	0x7fefffff
 8014cc8:	f012 0110 	ands.w	r1, r2, #16
 8014ccc:	bf18      	it	ne
 8014cce:	216a      	movne	r1, #106	@ 0x6a
 8014cd0:	9106      	str	r1, [sp, #24]
 8014cd2:	ec4b ab17 	vmov	d7, sl, fp
 8014cd6:	49b0      	ldr	r1, [pc, #704]	@ (8014f98 <_strtod_l+0x850>)
 8014cd8:	2000      	movs	r0, #0
 8014cda:	07d6      	lsls	r6, r2, #31
 8014cdc:	d504      	bpl.n	8014ce8 <_strtod_l+0x5a0>
 8014cde:	ed91 6b00 	vldr	d6, [r1]
 8014ce2:	2001      	movs	r0, #1
 8014ce4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ce8:	1052      	asrs	r2, r2, #1
 8014cea:	f101 0108 	add.w	r1, r1, #8
 8014cee:	d1f4      	bne.n	8014cda <_strtod_l+0x592>
 8014cf0:	b108      	cbz	r0, 8014cf6 <_strtod_l+0x5ae>
 8014cf2:	ec5b ab17 	vmov	sl, fp, d7
 8014cf6:	9a06      	ldr	r2, [sp, #24]
 8014cf8:	b1b2      	cbz	r2, 8014d28 <_strtod_l+0x5e0>
 8014cfa:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8014cfe:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8014d02:	2a00      	cmp	r2, #0
 8014d04:	4658      	mov	r0, fp
 8014d06:	dd0f      	ble.n	8014d28 <_strtod_l+0x5e0>
 8014d08:	2a1f      	cmp	r2, #31
 8014d0a:	dd55      	ble.n	8014db8 <_strtod_l+0x670>
 8014d0c:	2a34      	cmp	r2, #52	@ 0x34
 8014d0e:	bfde      	ittt	le
 8014d10:	f04f 32ff 	movle.w	r2, #4294967295
 8014d14:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8014d18:	408a      	lslle	r2, r1
 8014d1a:	f04f 0a00 	mov.w	sl, #0
 8014d1e:	bfcc      	ite	gt
 8014d20:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014d24:	ea02 0b00 	andle.w	fp, r2, r0
 8014d28:	ec4b ab17 	vmov	d7, sl, fp
 8014d2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d34:	d0a8      	beq.n	8014c88 <_strtod_l+0x540>
 8014d36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014d38:	9805      	ldr	r0, [sp, #20]
 8014d3a:	f8cd 9000 	str.w	r9, [sp]
 8014d3e:	462a      	mov	r2, r5
 8014d40:	f7ff f8d6 	bl	8013ef0 <__s2b>
 8014d44:	9007      	str	r0, [sp, #28]
 8014d46:	2800      	cmp	r0, #0
 8014d48:	f43f af0a 	beq.w	8014b60 <_strtod_l+0x418>
 8014d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d4e:	1b3f      	subs	r7, r7, r4
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	bfb4      	ite	lt
 8014d54:	463b      	movlt	r3, r7
 8014d56:	2300      	movge	r3, #0
 8014d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d5c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8014f88 <_strtod_l+0x840>
 8014d60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014d64:	2400      	movs	r4, #0
 8014d66:	930d      	str	r3, [sp, #52]	@ 0x34
 8014d68:	4625      	mov	r5, r4
 8014d6a:	9b07      	ldr	r3, [sp, #28]
 8014d6c:	9805      	ldr	r0, [sp, #20]
 8014d6e:	6859      	ldr	r1, [r3, #4]
 8014d70:	f7ff f816 	bl	8013da0 <_Balloc>
 8014d74:	4606      	mov	r6, r0
 8014d76:	2800      	cmp	r0, #0
 8014d78:	f43f aef6 	beq.w	8014b68 <_strtod_l+0x420>
 8014d7c:	9b07      	ldr	r3, [sp, #28]
 8014d7e:	691a      	ldr	r2, [r3, #16]
 8014d80:	ec4b ab19 	vmov	d9, sl, fp
 8014d84:	3202      	adds	r2, #2
 8014d86:	f103 010c 	add.w	r1, r3, #12
 8014d8a:	0092      	lsls	r2, r2, #2
 8014d8c:	300c      	adds	r0, #12
 8014d8e:	f7fe f9aa 	bl	80130e6 <memcpy>
 8014d92:	eeb0 0b49 	vmov.f64	d0, d9
 8014d96:	9805      	ldr	r0, [sp, #20]
 8014d98:	aa14      	add	r2, sp, #80	@ 0x50
 8014d9a:	a913      	add	r1, sp, #76	@ 0x4c
 8014d9c:	f7ff fbe4 	bl	8014568 <__d2b>
 8014da0:	9012      	str	r0, [sp, #72]	@ 0x48
 8014da2:	2800      	cmp	r0, #0
 8014da4:	f43f aee0 	beq.w	8014b68 <_strtod_l+0x420>
 8014da8:	9805      	ldr	r0, [sp, #20]
 8014daa:	2101      	movs	r1, #1
 8014dac:	f7ff f936 	bl	801401c <__i2b>
 8014db0:	4605      	mov	r5, r0
 8014db2:	b940      	cbnz	r0, 8014dc6 <_strtod_l+0x67e>
 8014db4:	2500      	movs	r5, #0
 8014db6:	e6d7      	b.n	8014b68 <_strtod_l+0x420>
 8014db8:	f04f 31ff 	mov.w	r1, #4294967295
 8014dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8014dc0:	ea02 0a0a 	and.w	sl, r2, sl
 8014dc4:	e7b0      	b.n	8014d28 <_strtod_l+0x5e0>
 8014dc6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8014dc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014dca:	2f00      	cmp	r7, #0
 8014dcc:	bfab      	itete	ge
 8014dce:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8014dd0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8014dd2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8014dd6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8014dda:	bfac      	ite	ge
 8014ddc:	eb07 0903 	addge.w	r9, r7, r3
 8014de0:	eba3 0807 	sublt.w	r8, r3, r7
 8014de4:	9b06      	ldr	r3, [sp, #24]
 8014de6:	1aff      	subs	r7, r7, r3
 8014de8:	4417      	add	r7, r2
 8014dea:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8014dee:	4a6b      	ldr	r2, [pc, #428]	@ (8014f9c <_strtod_l+0x854>)
 8014df0:	3f01      	subs	r7, #1
 8014df2:	4297      	cmp	r7, r2
 8014df4:	da51      	bge.n	8014e9a <_strtod_l+0x752>
 8014df6:	1bd1      	subs	r1, r2, r7
 8014df8:	291f      	cmp	r1, #31
 8014dfa:	eba3 0301 	sub.w	r3, r3, r1
 8014dfe:	f04f 0201 	mov.w	r2, #1
 8014e02:	dc3e      	bgt.n	8014e82 <_strtod_l+0x73a>
 8014e04:	408a      	lsls	r2, r1
 8014e06:	920c      	str	r2, [sp, #48]	@ 0x30
 8014e08:	2200      	movs	r2, #0
 8014e0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014e0c:	eb09 0703 	add.w	r7, r9, r3
 8014e10:	4498      	add	r8, r3
 8014e12:	9b06      	ldr	r3, [sp, #24]
 8014e14:	45b9      	cmp	r9, r7
 8014e16:	4498      	add	r8, r3
 8014e18:	464b      	mov	r3, r9
 8014e1a:	bfa8      	it	ge
 8014e1c:	463b      	movge	r3, r7
 8014e1e:	4543      	cmp	r3, r8
 8014e20:	bfa8      	it	ge
 8014e22:	4643      	movge	r3, r8
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	bfc2      	ittt	gt
 8014e28:	1aff      	subgt	r7, r7, r3
 8014e2a:	eba8 0803 	subgt.w	r8, r8, r3
 8014e2e:	eba9 0903 	subgt.w	r9, r9, r3
 8014e32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	dd16      	ble.n	8014e66 <_strtod_l+0x71e>
 8014e38:	4629      	mov	r1, r5
 8014e3a:	9805      	ldr	r0, [sp, #20]
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	f7ff f9ad 	bl	801419c <__pow5mult>
 8014e42:	4605      	mov	r5, r0
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d0b5      	beq.n	8014db4 <_strtod_l+0x66c>
 8014e48:	4601      	mov	r1, r0
 8014e4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014e4c:	9805      	ldr	r0, [sp, #20]
 8014e4e:	f7ff f8fb 	bl	8014048 <__multiply>
 8014e52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014e54:	2800      	cmp	r0, #0
 8014e56:	f43f ae87 	beq.w	8014b68 <_strtod_l+0x420>
 8014e5a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014e5c:	9805      	ldr	r0, [sp, #20]
 8014e5e:	f7fe ffdf 	bl	8013e20 <_Bfree>
 8014e62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e64:	9312      	str	r3, [sp, #72]	@ 0x48
 8014e66:	2f00      	cmp	r7, #0
 8014e68:	dc1b      	bgt.n	8014ea2 <_strtod_l+0x75a>
 8014e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	dd21      	ble.n	8014eb4 <_strtod_l+0x76c>
 8014e70:	4631      	mov	r1, r6
 8014e72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014e74:	9805      	ldr	r0, [sp, #20]
 8014e76:	f7ff f991 	bl	801419c <__pow5mult>
 8014e7a:	4606      	mov	r6, r0
 8014e7c:	b9d0      	cbnz	r0, 8014eb4 <_strtod_l+0x76c>
 8014e7e:	2600      	movs	r6, #0
 8014e80:	e672      	b.n	8014b68 <_strtod_l+0x420>
 8014e82:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8014e86:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8014e8a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8014e8e:	37e2      	adds	r7, #226	@ 0xe2
 8014e90:	fa02 f107 	lsl.w	r1, r2, r7
 8014e94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014e96:	920c      	str	r2, [sp, #48]	@ 0x30
 8014e98:	e7b8      	b.n	8014e0c <_strtod_l+0x6c4>
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014e9e:	2201      	movs	r2, #1
 8014ea0:	e7f9      	b.n	8014e96 <_strtod_l+0x74e>
 8014ea2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014ea4:	9805      	ldr	r0, [sp, #20]
 8014ea6:	463a      	mov	r2, r7
 8014ea8:	f7ff f9d2 	bl	8014250 <__lshift>
 8014eac:	9012      	str	r0, [sp, #72]	@ 0x48
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	d1db      	bne.n	8014e6a <_strtod_l+0x722>
 8014eb2:	e659      	b.n	8014b68 <_strtod_l+0x420>
 8014eb4:	f1b8 0f00 	cmp.w	r8, #0
 8014eb8:	dd07      	ble.n	8014eca <_strtod_l+0x782>
 8014eba:	4631      	mov	r1, r6
 8014ebc:	9805      	ldr	r0, [sp, #20]
 8014ebe:	4642      	mov	r2, r8
 8014ec0:	f7ff f9c6 	bl	8014250 <__lshift>
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d0d9      	beq.n	8014e7e <_strtod_l+0x736>
 8014eca:	f1b9 0f00 	cmp.w	r9, #0
 8014ece:	dd08      	ble.n	8014ee2 <_strtod_l+0x79a>
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	9805      	ldr	r0, [sp, #20]
 8014ed4:	464a      	mov	r2, r9
 8014ed6:	f7ff f9bb 	bl	8014250 <__lshift>
 8014eda:	4605      	mov	r5, r0
 8014edc:	2800      	cmp	r0, #0
 8014ede:	f43f ae43 	beq.w	8014b68 <_strtod_l+0x420>
 8014ee2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014ee4:	9805      	ldr	r0, [sp, #20]
 8014ee6:	4632      	mov	r2, r6
 8014ee8:	f7ff fa3a 	bl	8014360 <__mdiff>
 8014eec:	4604      	mov	r4, r0
 8014eee:	2800      	cmp	r0, #0
 8014ef0:	f43f ae3a 	beq.w	8014b68 <_strtod_l+0x420>
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8014efa:	60c3      	str	r3, [r0, #12]
 8014efc:	4629      	mov	r1, r5
 8014efe:	f7ff fa13 	bl	8014328 <__mcmp>
 8014f02:	2800      	cmp	r0, #0
 8014f04:	da4e      	bge.n	8014fa4 <_strtod_l+0x85c>
 8014f06:	ea58 080a 	orrs.w	r8, r8, sl
 8014f0a:	d174      	bne.n	8014ff6 <_strtod_l+0x8ae>
 8014f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d170      	bne.n	8014ff6 <_strtod_l+0x8ae>
 8014f14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014f18:	0d1b      	lsrs	r3, r3, #20
 8014f1a:	051b      	lsls	r3, r3, #20
 8014f1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014f20:	d969      	bls.n	8014ff6 <_strtod_l+0x8ae>
 8014f22:	6963      	ldr	r3, [r4, #20]
 8014f24:	b913      	cbnz	r3, 8014f2c <_strtod_l+0x7e4>
 8014f26:	6923      	ldr	r3, [r4, #16]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	dd64      	ble.n	8014ff6 <_strtod_l+0x8ae>
 8014f2c:	4621      	mov	r1, r4
 8014f2e:	2201      	movs	r2, #1
 8014f30:	9805      	ldr	r0, [sp, #20]
 8014f32:	f7ff f98d 	bl	8014250 <__lshift>
 8014f36:	4629      	mov	r1, r5
 8014f38:	4604      	mov	r4, r0
 8014f3a:	f7ff f9f5 	bl	8014328 <__mcmp>
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	dd59      	ble.n	8014ff6 <_strtod_l+0x8ae>
 8014f42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014f46:	9a06      	ldr	r2, [sp, #24]
 8014f48:	0d1b      	lsrs	r3, r3, #20
 8014f4a:	051b      	lsls	r3, r3, #20
 8014f4c:	2a00      	cmp	r2, #0
 8014f4e:	d070      	beq.n	8015032 <_strtod_l+0x8ea>
 8014f50:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014f54:	d86d      	bhi.n	8015032 <_strtod_l+0x8ea>
 8014f56:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014f5a:	f67f ae99 	bls.w	8014c90 <_strtod_l+0x548>
 8014f5e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8014f90 <_strtod_l+0x848>
 8014f62:	ec4b ab16 	vmov	d6, sl, fp
 8014f66:	4b0e      	ldr	r3, [pc, #56]	@ (8014fa0 <_strtod_l+0x858>)
 8014f68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014f6c:	ee17 2a90 	vmov	r2, s15
 8014f70:	4013      	ands	r3, r2
 8014f72:	ec5b ab17 	vmov	sl, fp, d7
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	f47f ae01 	bne.w	8014b7e <_strtod_l+0x436>
 8014f7c:	9a05      	ldr	r2, [sp, #20]
 8014f7e:	2322      	movs	r3, #34	@ 0x22
 8014f80:	6013      	str	r3, [r2, #0]
 8014f82:	e5fc      	b.n	8014b7e <_strtod_l+0x436>
 8014f84:	f3af 8000 	nop.w
 8014f88:	ffc00000 	.word	0xffc00000
 8014f8c:	41dfffff 	.word	0x41dfffff
 8014f90:	00000000 	.word	0x00000000
 8014f94:	39500000 	.word	0x39500000
 8014f98:	08018478 	.word	0x08018478
 8014f9c:	fffffc02 	.word	0xfffffc02
 8014fa0:	7ff00000 	.word	0x7ff00000
 8014fa4:	46d9      	mov	r9, fp
 8014fa6:	d15d      	bne.n	8015064 <_strtod_l+0x91c>
 8014fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014fac:	f1b8 0f00 	cmp.w	r8, #0
 8014fb0:	d02a      	beq.n	8015008 <_strtod_l+0x8c0>
 8014fb2:	4aab      	ldr	r2, [pc, #684]	@ (8015260 <_strtod_l+0xb18>)
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	d12a      	bne.n	801500e <_strtod_l+0x8c6>
 8014fb8:	9b06      	ldr	r3, [sp, #24]
 8014fba:	4652      	mov	r2, sl
 8014fbc:	b1fb      	cbz	r3, 8014ffe <_strtod_l+0x8b6>
 8014fbe:	4ba9      	ldr	r3, [pc, #676]	@ (8015264 <_strtod_l+0xb1c>)
 8014fc0:	ea0b 0303 	and.w	r3, fp, r3
 8014fc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8014fcc:	d81a      	bhi.n	8015004 <_strtod_l+0x8bc>
 8014fce:	0d1b      	lsrs	r3, r3, #20
 8014fd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d118      	bne.n	801500e <_strtod_l+0x8c6>
 8014fdc:	4ba2      	ldr	r3, [pc, #648]	@ (8015268 <_strtod_l+0xb20>)
 8014fde:	4599      	cmp	r9, r3
 8014fe0:	d102      	bne.n	8014fe8 <_strtod_l+0x8a0>
 8014fe2:	3201      	adds	r2, #1
 8014fe4:	f43f adc0 	beq.w	8014b68 <_strtod_l+0x420>
 8014fe8:	4b9e      	ldr	r3, [pc, #632]	@ (8015264 <_strtod_l+0xb1c>)
 8014fea:	ea09 0303 	and.w	r3, r9, r3
 8014fee:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8014ff2:	f04f 0a00 	mov.w	sl, #0
 8014ff6:	9b06      	ldr	r3, [sp, #24]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d1b0      	bne.n	8014f5e <_strtod_l+0x816>
 8014ffc:	e5bf      	b.n	8014b7e <_strtod_l+0x436>
 8014ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8015002:	e7e9      	b.n	8014fd8 <_strtod_l+0x890>
 8015004:	460b      	mov	r3, r1
 8015006:	e7e7      	b.n	8014fd8 <_strtod_l+0x890>
 8015008:	ea53 030a 	orrs.w	r3, r3, sl
 801500c:	d099      	beq.n	8014f42 <_strtod_l+0x7fa>
 801500e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015010:	b1c3      	cbz	r3, 8015044 <_strtod_l+0x8fc>
 8015012:	ea13 0f09 	tst.w	r3, r9
 8015016:	d0ee      	beq.n	8014ff6 <_strtod_l+0x8ae>
 8015018:	9a06      	ldr	r2, [sp, #24]
 801501a:	4650      	mov	r0, sl
 801501c:	4659      	mov	r1, fp
 801501e:	f1b8 0f00 	cmp.w	r8, #0
 8015022:	d013      	beq.n	801504c <_strtod_l+0x904>
 8015024:	f7ff fb73 	bl	801470e <sulp>
 8015028:	ee39 7b00 	vadd.f64	d7, d9, d0
 801502c:	ec5b ab17 	vmov	sl, fp, d7
 8015030:	e7e1      	b.n	8014ff6 <_strtod_l+0x8ae>
 8015032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801503a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801503e:	f04f 3aff 	mov.w	sl, #4294967295
 8015042:	e7d8      	b.n	8014ff6 <_strtod_l+0x8ae>
 8015044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015046:	ea13 0f0a 	tst.w	r3, sl
 801504a:	e7e4      	b.n	8015016 <_strtod_l+0x8ce>
 801504c:	f7ff fb5f 	bl	801470e <sulp>
 8015050:	ee39 0b40 	vsub.f64	d0, d9, d0
 8015054:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801505c:	ec5b ab10 	vmov	sl, fp, d0
 8015060:	d1c9      	bne.n	8014ff6 <_strtod_l+0x8ae>
 8015062:	e615      	b.n	8014c90 <_strtod_l+0x548>
 8015064:	4629      	mov	r1, r5
 8015066:	4620      	mov	r0, r4
 8015068:	f7ff fad6 	bl	8014618 <__ratio>
 801506c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8015070:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015078:	d85d      	bhi.n	8015136 <_strtod_l+0x9ee>
 801507a:	f1b8 0f00 	cmp.w	r8, #0
 801507e:	d164      	bne.n	801514a <_strtod_l+0xa02>
 8015080:	f1ba 0f00 	cmp.w	sl, #0
 8015084:	d14b      	bne.n	801511e <_strtod_l+0x9d6>
 8015086:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801508a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801508e:	2b00      	cmp	r3, #0
 8015090:	d160      	bne.n	8015154 <_strtod_l+0xa0c>
 8015092:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8015096:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801509e:	d401      	bmi.n	80150a4 <_strtod_l+0x95c>
 80150a0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80150a4:	eeb1 ab48 	vneg.f64	d10, d8
 80150a8:	486e      	ldr	r0, [pc, #440]	@ (8015264 <_strtod_l+0xb1c>)
 80150aa:	4970      	ldr	r1, [pc, #448]	@ (801526c <_strtod_l+0xb24>)
 80150ac:	ea09 0700 	and.w	r7, r9, r0
 80150b0:	428f      	cmp	r7, r1
 80150b2:	ec53 2b1a 	vmov	r2, r3, d10
 80150b6:	d17d      	bne.n	80151b4 <_strtod_l+0xa6c>
 80150b8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80150bc:	ec4b ab1c 	vmov	d12, sl, fp
 80150c0:	eeb0 0b4c 	vmov.f64	d0, d12
 80150c4:	f7ff f9e0 	bl	8014488 <__ulp>
 80150c8:	4866      	ldr	r0, [pc, #408]	@ (8015264 <_strtod_l+0xb1c>)
 80150ca:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80150ce:	ee1c 3a90 	vmov	r3, s25
 80150d2:	4a67      	ldr	r2, [pc, #412]	@ (8015270 <_strtod_l+0xb28>)
 80150d4:	ea03 0100 	and.w	r1, r3, r0
 80150d8:	4291      	cmp	r1, r2
 80150da:	ec5b ab1c 	vmov	sl, fp, d12
 80150de:	d93c      	bls.n	801515a <_strtod_l+0xa12>
 80150e0:	ee19 2a90 	vmov	r2, s19
 80150e4:	4b60      	ldr	r3, [pc, #384]	@ (8015268 <_strtod_l+0xb20>)
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d104      	bne.n	80150f4 <_strtod_l+0x9ac>
 80150ea:	ee19 3a10 	vmov	r3, s18
 80150ee:	3301      	adds	r3, #1
 80150f0:	f43f ad3a 	beq.w	8014b68 <_strtod_l+0x420>
 80150f4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8015268 <_strtod_l+0xb20>
 80150f8:	f04f 3aff 	mov.w	sl, #4294967295
 80150fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80150fe:	9805      	ldr	r0, [sp, #20]
 8015100:	f7fe fe8e 	bl	8013e20 <_Bfree>
 8015104:	9805      	ldr	r0, [sp, #20]
 8015106:	4631      	mov	r1, r6
 8015108:	f7fe fe8a 	bl	8013e20 <_Bfree>
 801510c:	9805      	ldr	r0, [sp, #20]
 801510e:	4629      	mov	r1, r5
 8015110:	f7fe fe86 	bl	8013e20 <_Bfree>
 8015114:	9805      	ldr	r0, [sp, #20]
 8015116:	4621      	mov	r1, r4
 8015118:	f7fe fe82 	bl	8013e20 <_Bfree>
 801511c:	e625      	b.n	8014d6a <_strtod_l+0x622>
 801511e:	f1ba 0f01 	cmp.w	sl, #1
 8015122:	d103      	bne.n	801512c <_strtod_l+0x9e4>
 8015124:	f1bb 0f00 	cmp.w	fp, #0
 8015128:	f43f adb2 	beq.w	8014c90 <_strtod_l+0x548>
 801512c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015130:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8015134:	e7b8      	b.n	80150a8 <_strtod_l+0x960>
 8015136:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801513a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801513e:	f1b8 0f00 	cmp.w	r8, #0
 8015142:	d0af      	beq.n	80150a4 <_strtod_l+0x95c>
 8015144:	eeb0 ab48 	vmov.f64	d10, d8
 8015148:	e7ae      	b.n	80150a8 <_strtod_l+0x960>
 801514a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801514e:	eeb0 8b4a 	vmov.f64	d8, d10
 8015152:	e7a9      	b.n	80150a8 <_strtod_l+0x960>
 8015154:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8015158:	e7a6      	b.n	80150a8 <_strtod_l+0x960>
 801515a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801515e:	9b06      	ldr	r3, [sp, #24]
 8015160:	46d9      	mov	r9, fp
 8015162:	2b00      	cmp	r3, #0
 8015164:	d1ca      	bne.n	80150fc <_strtod_l+0x9b4>
 8015166:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801516a:	0d1b      	lsrs	r3, r3, #20
 801516c:	051b      	lsls	r3, r3, #20
 801516e:	429f      	cmp	r7, r3
 8015170:	d1c4      	bne.n	80150fc <_strtod_l+0x9b4>
 8015172:	ec51 0b18 	vmov	r0, r1, d8
 8015176:	f7eb fac7 	bl	8000708 <__aeabi_d2lz>
 801517a:	f7eb fa97 	bl	80006ac <__aeabi_l2d>
 801517e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8015182:	ec41 0b17 	vmov	d7, r0, r1
 8015186:	ea49 090a 	orr.w	r9, r9, sl
 801518a:	ea59 0908 	orrs.w	r9, r9, r8
 801518e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8015192:	d03c      	beq.n	801520e <_strtod_l+0xac6>
 8015194:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015248 <_strtod_l+0xb00>
 8015198:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151a0:	f53f aced 	bmi.w	8014b7e <_strtod_l+0x436>
 80151a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015250 <_strtod_l+0xb08>
 80151a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80151ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151b0:	dda4      	ble.n	80150fc <_strtod_l+0x9b4>
 80151b2:	e4e4      	b.n	8014b7e <_strtod_l+0x436>
 80151b4:	9906      	ldr	r1, [sp, #24]
 80151b6:	b1e1      	cbz	r1, 80151f2 <_strtod_l+0xaaa>
 80151b8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80151bc:	d819      	bhi.n	80151f2 <_strtod_l+0xaaa>
 80151be:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80151c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c6:	d811      	bhi.n	80151ec <_strtod_l+0xaa4>
 80151c8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80151cc:	ee18 3a10 	vmov	r3, s16
 80151d0:	2b01      	cmp	r3, #1
 80151d2:	bf38      	it	cc
 80151d4:	2301      	movcc	r3, #1
 80151d6:	ee08 3a10 	vmov	s16, r3
 80151da:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80151de:	f1b8 0f00 	cmp.w	r8, #0
 80151e2:	d111      	bne.n	8015208 <_strtod_l+0xac0>
 80151e4:	eeb1 7b48 	vneg.f64	d7, d8
 80151e8:	ec53 2b17 	vmov	r2, r3, d7
 80151ec:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80151f0:	1bcb      	subs	r3, r1, r7
 80151f2:	eeb0 0b49 	vmov.f64	d0, d9
 80151f6:	ec43 2b1a 	vmov	d10, r2, r3
 80151fa:	f7ff f945 	bl	8014488 <__ulp>
 80151fe:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8015202:	ec5b ab19 	vmov	sl, fp, d9
 8015206:	e7aa      	b.n	801515e <_strtod_l+0xa16>
 8015208:	eeb0 7b48 	vmov.f64	d7, d8
 801520c:	e7ec      	b.n	80151e8 <_strtod_l+0xaa0>
 801520e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015258 <_strtod_l+0xb10>
 8015212:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521a:	f57f af6f 	bpl.w	80150fc <_strtod_l+0x9b4>
 801521e:	e4ae      	b.n	8014b7e <_strtod_l+0x436>
 8015220:	2300      	movs	r3, #0
 8015222:	9308      	str	r3, [sp, #32]
 8015224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015226:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015228:	6013      	str	r3, [r2, #0]
 801522a:	f7ff bacc 	b.w	80147c6 <_strtod_l+0x7e>
 801522e:	2a65      	cmp	r2, #101	@ 0x65
 8015230:	f43f abbc 	beq.w	80149ac <_strtod_l+0x264>
 8015234:	2a45      	cmp	r2, #69	@ 0x45
 8015236:	f43f abb9 	beq.w	80149ac <_strtod_l+0x264>
 801523a:	2301      	movs	r3, #1
 801523c:	9306      	str	r3, [sp, #24]
 801523e:	f7ff bbf0 	b.w	8014a22 <_strtod_l+0x2da>
 8015242:	bf00      	nop
 8015244:	f3af 8000 	nop.w
 8015248:	94a03595 	.word	0x94a03595
 801524c:	3fdfffff 	.word	0x3fdfffff
 8015250:	35afe535 	.word	0x35afe535
 8015254:	3fe00000 	.word	0x3fe00000
 8015258:	94a03595 	.word	0x94a03595
 801525c:	3fcfffff 	.word	0x3fcfffff
 8015260:	000fffff 	.word	0x000fffff
 8015264:	7ff00000 	.word	0x7ff00000
 8015268:	7fefffff 	.word	0x7fefffff
 801526c:	7fe00000 	.word	0x7fe00000
 8015270:	7c9fffff 	.word	0x7c9fffff

08015274 <_strtod_r>:
 8015274:	4b01      	ldr	r3, [pc, #4]	@ (801527c <_strtod_r+0x8>)
 8015276:	f7ff ba67 	b.w	8014748 <_strtod_l>
 801527a:	bf00      	nop
 801527c:	24000c08 	.word	0x24000c08

08015280 <_strtol_l.constprop.0>:
 8015280:	2b24      	cmp	r3, #36	@ 0x24
 8015282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015286:	4686      	mov	lr, r0
 8015288:	4690      	mov	r8, r2
 801528a:	d801      	bhi.n	8015290 <_strtol_l.constprop.0+0x10>
 801528c:	2b01      	cmp	r3, #1
 801528e:	d106      	bne.n	801529e <_strtol_l.constprop.0+0x1e>
 8015290:	f7fd fefc 	bl	801308c <__errno>
 8015294:	2316      	movs	r3, #22
 8015296:	6003      	str	r3, [r0, #0]
 8015298:	2000      	movs	r0, #0
 801529a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801529e:	4834      	ldr	r0, [pc, #208]	@ (8015370 <_strtol_l.constprop.0+0xf0>)
 80152a0:	460d      	mov	r5, r1
 80152a2:	462a      	mov	r2, r5
 80152a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152a8:	5d06      	ldrb	r6, [r0, r4]
 80152aa:	f016 0608 	ands.w	r6, r6, #8
 80152ae:	d1f8      	bne.n	80152a2 <_strtol_l.constprop.0+0x22>
 80152b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80152b2:	d12d      	bne.n	8015310 <_strtol_l.constprop.0+0x90>
 80152b4:	782c      	ldrb	r4, [r5, #0]
 80152b6:	2601      	movs	r6, #1
 80152b8:	1c95      	adds	r5, r2, #2
 80152ba:	f033 0210 	bics.w	r2, r3, #16
 80152be:	d109      	bne.n	80152d4 <_strtol_l.constprop.0+0x54>
 80152c0:	2c30      	cmp	r4, #48	@ 0x30
 80152c2:	d12a      	bne.n	801531a <_strtol_l.constprop.0+0x9a>
 80152c4:	782a      	ldrb	r2, [r5, #0]
 80152c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80152ca:	2a58      	cmp	r2, #88	@ 0x58
 80152cc:	d125      	bne.n	801531a <_strtol_l.constprop.0+0x9a>
 80152ce:	786c      	ldrb	r4, [r5, #1]
 80152d0:	2310      	movs	r3, #16
 80152d2:	3502      	adds	r5, #2
 80152d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80152d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80152dc:	2200      	movs	r2, #0
 80152de:	fbbc f9f3 	udiv	r9, ip, r3
 80152e2:	4610      	mov	r0, r2
 80152e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80152e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80152ec:	2f09      	cmp	r7, #9
 80152ee:	d81b      	bhi.n	8015328 <_strtol_l.constprop.0+0xa8>
 80152f0:	463c      	mov	r4, r7
 80152f2:	42a3      	cmp	r3, r4
 80152f4:	dd27      	ble.n	8015346 <_strtol_l.constprop.0+0xc6>
 80152f6:	1c57      	adds	r7, r2, #1
 80152f8:	d007      	beq.n	801530a <_strtol_l.constprop.0+0x8a>
 80152fa:	4581      	cmp	r9, r0
 80152fc:	d320      	bcc.n	8015340 <_strtol_l.constprop.0+0xc0>
 80152fe:	d101      	bne.n	8015304 <_strtol_l.constprop.0+0x84>
 8015300:	45a2      	cmp	sl, r4
 8015302:	db1d      	blt.n	8015340 <_strtol_l.constprop.0+0xc0>
 8015304:	fb00 4003 	mla	r0, r0, r3, r4
 8015308:	2201      	movs	r2, #1
 801530a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801530e:	e7eb      	b.n	80152e8 <_strtol_l.constprop.0+0x68>
 8015310:	2c2b      	cmp	r4, #43	@ 0x2b
 8015312:	bf04      	itt	eq
 8015314:	782c      	ldrbeq	r4, [r5, #0]
 8015316:	1c95      	addeq	r5, r2, #2
 8015318:	e7cf      	b.n	80152ba <_strtol_l.constprop.0+0x3a>
 801531a:	2b00      	cmp	r3, #0
 801531c:	d1da      	bne.n	80152d4 <_strtol_l.constprop.0+0x54>
 801531e:	2c30      	cmp	r4, #48	@ 0x30
 8015320:	bf0c      	ite	eq
 8015322:	2308      	moveq	r3, #8
 8015324:	230a      	movne	r3, #10
 8015326:	e7d5      	b.n	80152d4 <_strtol_l.constprop.0+0x54>
 8015328:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801532c:	2f19      	cmp	r7, #25
 801532e:	d801      	bhi.n	8015334 <_strtol_l.constprop.0+0xb4>
 8015330:	3c37      	subs	r4, #55	@ 0x37
 8015332:	e7de      	b.n	80152f2 <_strtol_l.constprop.0+0x72>
 8015334:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015338:	2f19      	cmp	r7, #25
 801533a:	d804      	bhi.n	8015346 <_strtol_l.constprop.0+0xc6>
 801533c:	3c57      	subs	r4, #87	@ 0x57
 801533e:	e7d8      	b.n	80152f2 <_strtol_l.constprop.0+0x72>
 8015340:	f04f 32ff 	mov.w	r2, #4294967295
 8015344:	e7e1      	b.n	801530a <_strtol_l.constprop.0+0x8a>
 8015346:	1c53      	adds	r3, r2, #1
 8015348:	d108      	bne.n	801535c <_strtol_l.constprop.0+0xdc>
 801534a:	2322      	movs	r3, #34	@ 0x22
 801534c:	f8ce 3000 	str.w	r3, [lr]
 8015350:	4660      	mov	r0, ip
 8015352:	f1b8 0f00 	cmp.w	r8, #0
 8015356:	d0a0      	beq.n	801529a <_strtol_l.constprop.0+0x1a>
 8015358:	1e69      	subs	r1, r5, #1
 801535a:	e006      	b.n	801536a <_strtol_l.constprop.0+0xea>
 801535c:	b106      	cbz	r6, 8015360 <_strtol_l.constprop.0+0xe0>
 801535e:	4240      	negs	r0, r0
 8015360:	f1b8 0f00 	cmp.w	r8, #0
 8015364:	d099      	beq.n	801529a <_strtol_l.constprop.0+0x1a>
 8015366:	2a00      	cmp	r2, #0
 8015368:	d1f6      	bne.n	8015358 <_strtol_l.constprop.0+0xd8>
 801536a:	f8c8 1000 	str.w	r1, [r8]
 801536e:	e794      	b.n	801529a <_strtol_l.constprop.0+0x1a>
 8015370:	080184a1 	.word	0x080184a1

08015374 <_strtol_r>:
 8015374:	f7ff bf84 	b.w	8015280 <_strtol_l.constprop.0>

08015378 <__ssputs_r>:
 8015378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801537c:	688e      	ldr	r6, [r1, #8]
 801537e:	461f      	mov	r7, r3
 8015380:	42be      	cmp	r6, r7
 8015382:	680b      	ldr	r3, [r1, #0]
 8015384:	4682      	mov	sl, r0
 8015386:	460c      	mov	r4, r1
 8015388:	4690      	mov	r8, r2
 801538a:	d82d      	bhi.n	80153e8 <__ssputs_r+0x70>
 801538c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015390:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015394:	d026      	beq.n	80153e4 <__ssputs_r+0x6c>
 8015396:	6965      	ldr	r5, [r4, #20]
 8015398:	6909      	ldr	r1, [r1, #16]
 801539a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801539e:	eba3 0901 	sub.w	r9, r3, r1
 80153a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80153a6:	1c7b      	adds	r3, r7, #1
 80153a8:	444b      	add	r3, r9
 80153aa:	106d      	asrs	r5, r5, #1
 80153ac:	429d      	cmp	r5, r3
 80153ae:	bf38      	it	cc
 80153b0:	461d      	movcc	r5, r3
 80153b2:	0553      	lsls	r3, r2, #21
 80153b4:	d527      	bpl.n	8015406 <__ssputs_r+0x8e>
 80153b6:	4629      	mov	r1, r5
 80153b8:	f7fc fc82 	bl	8011cc0 <_malloc_r>
 80153bc:	4606      	mov	r6, r0
 80153be:	b360      	cbz	r0, 801541a <__ssputs_r+0xa2>
 80153c0:	6921      	ldr	r1, [r4, #16]
 80153c2:	464a      	mov	r2, r9
 80153c4:	f7fd fe8f 	bl	80130e6 <memcpy>
 80153c8:	89a3      	ldrh	r3, [r4, #12]
 80153ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80153ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80153d2:	81a3      	strh	r3, [r4, #12]
 80153d4:	6126      	str	r6, [r4, #16]
 80153d6:	6165      	str	r5, [r4, #20]
 80153d8:	444e      	add	r6, r9
 80153da:	eba5 0509 	sub.w	r5, r5, r9
 80153de:	6026      	str	r6, [r4, #0]
 80153e0:	60a5      	str	r5, [r4, #8]
 80153e2:	463e      	mov	r6, r7
 80153e4:	42be      	cmp	r6, r7
 80153e6:	d900      	bls.n	80153ea <__ssputs_r+0x72>
 80153e8:	463e      	mov	r6, r7
 80153ea:	6820      	ldr	r0, [r4, #0]
 80153ec:	4632      	mov	r2, r6
 80153ee:	4641      	mov	r1, r8
 80153f0:	f000 fb7c 	bl	8015aec <memmove>
 80153f4:	68a3      	ldr	r3, [r4, #8]
 80153f6:	1b9b      	subs	r3, r3, r6
 80153f8:	60a3      	str	r3, [r4, #8]
 80153fa:	6823      	ldr	r3, [r4, #0]
 80153fc:	4433      	add	r3, r6
 80153fe:	6023      	str	r3, [r4, #0]
 8015400:	2000      	movs	r0, #0
 8015402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015406:	462a      	mov	r2, r5
 8015408:	f7fc fd14 	bl	8011e34 <_realloc_r>
 801540c:	4606      	mov	r6, r0
 801540e:	2800      	cmp	r0, #0
 8015410:	d1e0      	bne.n	80153d4 <__ssputs_r+0x5c>
 8015412:	6921      	ldr	r1, [r4, #16]
 8015414:	4650      	mov	r0, sl
 8015416:	f7fe fc79 	bl	8013d0c <_free_r>
 801541a:	230c      	movs	r3, #12
 801541c:	f8ca 3000 	str.w	r3, [sl]
 8015420:	89a3      	ldrh	r3, [r4, #12]
 8015422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015426:	81a3      	strh	r3, [r4, #12]
 8015428:	f04f 30ff 	mov.w	r0, #4294967295
 801542c:	e7e9      	b.n	8015402 <__ssputs_r+0x8a>
	...

08015430 <_svfiprintf_r>:
 8015430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015434:	4698      	mov	r8, r3
 8015436:	898b      	ldrh	r3, [r1, #12]
 8015438:	061b      	lsls	r3, r3, #24
 801543a:	b09d      	sub	sp, #116	@ 0x74
 801543c:	4607      	mov	r7, r0
 801543e:	460d      	mov	r5, r1
 8015440:	4614      	mov	r4, r2
 8015442:	d510      	bpl.n	8015466 <_svfiprintf_r+0x36>
 8015444:	690b      	ldr	r3, [r1, #16]
 8015446:	b973      	cbnz	r3, 8015466 <_svfiprintf_r+0x36>
 8015448:	2140      	movs	r1, #64	@ 0x40
 801544a:	f7fc fc39 	bl	8011cc0 <_malloc_r>
 801544e:	6028      	str	r0, [r5, #0]
 8015450:	6128      	str	r0, [r5, #16]
 8015452:	b930      	cbnz	r0, 8015462 <_svfiprintf_r+0x32>
 8015454:	230c      	movs	r3, #12
 8015456:	603b      	str	r3, [r7, #0]
 8015458:	f04f 30ff 	mov.w	r0, #4294967295
 801545c:	b01d      	add	sp, #116	@ 0x74
 801545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015462:	2340      	movs	r3, #64	@ 0x40
 8015464:	616b      	str	r3, [r5, #20]
 8015466:	2300      	movs	r3, #0
 8015468:	9309      	str	r3, [sp, #36]	@ 0x24
 801546a:	2320      	movs	r3, #32
 801546c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015470:	f8cd 800c 	str.w	r8, [sp, #12]
 8015474:	2330      	movs	r3, #48	@ 0x30
 8015476:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015614 <_svfiprintf_r+0x1e4>
 801547a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801547e:	f04f 0901 	mov.w	r9, #1
 8015482:	4623      	mov	r3, r4
 8015484:	469a      	mov	sl, r3
 8015486:	f813 2b01 	ldrb.w	r2, [r3], #1
 801548a:	b10a      	cbz	r2, 8015490 <_svfiprintf_r+0x60>
 801548c:	2a25      	cmp	r2, #37	@ 0x25
 801548e:	d1f9      	bne.n	8015484 <_svfiprintf_r+0x54>
 8015490:	ebba 0b04 	subs.w	fp, sl, r4
 8015494:	d00b      	beq.n	80154ae <_svfiprintf_r+0x7e>
 8015496:	465b      	mov	r3, fp
 8015498:	4622      	mov	r2, r4
 801549a:	4629      	mov	r1, r5
 801549c:	4638      	mov	r0, r7
 801549e:	f7ff ff6b 	bl	8015378 <__ssputs_r>
 80154a2:	3001      	adds	r0, #1
 80154a4:	f000 80a7 	beq.w	80155f6 <_svfiprintf_r+0x1c6>
 80154a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80154aa:	445a      	add	r2, fp
 80154ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80154ae:	f89a 3000 	ldrb.w	r3, [sl]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	f000 809f 	beq.w	80155f6 <_svfiprintf_r+0x1c6>
 80154b8:	2300      	movs	r3, #0
 80154ba:	f04f 32ff 	mov.w	r2, #4294967295
 80154be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154c2:	f10a 0a01 	add.w	sl, sl, #1
 80154c6:	9304      	str	r3, [sp, #16]
 80154c8:	9307      	str	r3, [sp, #28]
 80154ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80154ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80154d0:	4654      	mov	r4, sl
 80154d2:	2205      	movs	r2, #5
 80154d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154d8:	484e      	ldr	r0, [pc, #312]	@ (8015614 <_svfiprintf_r+0x1e4>)
 80154da:	f7ea ff01 	bl	80002e0 <memchr>
 80154de:	9a04      	ldr	r2, [sp, #16]
 80154e0:	b9d8      	cbnz	r0, 801551a <_svfiprintf_r+0xea>
 80154e2:	06d0      	lsls	r0, r2, #27
 80154e4:	bf44      	itt	mi
 80154e6:	2320      	movmi	r3, #32
 80154e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80154ec:	0711      	lsls	r1, r2, #28
 80154ee:	bf44      	itt	mi
 80154f0:	232b      	movmi	r3, #43	@ 0x2b
 80154f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80154f6:	f89a 3000 	ldrb.w	r3, [sl]
 80154fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80154fc:	d015      	beq.n	801552a <_svfiprintf_r+0xfa>
 80154fe:	9a07      	ldr	r2, [sp, #28]
 8015500:	4654      	mov	r4, sl
 8015502:	2000      	movs	r0, #0
 8015504:	f04f 0c0a 	mov.w	ip, #10
 8015508:	4621      	mov	r1, r4
 801550a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801550e:	3b30      	subs	r3, #48	@ 0x30
 8015510:	2b09      	cmp	r3, #9
 8015512:	d94b      	bls.n	80155ac <_svfiprintf_r+0x17c>
 8015514:	b1b0      	cbz	r0, 8015544 <_svfiprintf_r+0x114>
 8015516:	9207      	str	r2, [sp, #28]
 8015518:	e014      	b.n	8015544 <_svfiprintf_r+0x114>
 801551a:	eba0 0308 	sub.w	r3, r0, r8
 801551e:	fa09 f303 	lsl.w	r3, r9, r3
 8015522:	4313      	orrs	r3, r2
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	46a2      	mov	sl, r4
 8015528:	e7d2      	b.n	80154d0 <_svfiprintf_r+0xa0>
 801552a:	9b03      	ldr	r3, [sp, #12]
 801552c:	1d19      	adds	r1, r3, #4
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	9103      	str	r1, [sp, #12]
 8015532:	2b00      	cmp	r3, #0
 8015534:	bfbb      	ittet	lt
 8015536:	425b      	neglt	r3, r3
 8015538:	f042 0202 	orrlt.w	r2, r2, #2
 801553c:	9307      	strge	r3, [sp, #28]
 801553e:	9307      	strlt	r3, [sp, #28]
 8015540:	bfb8      	it	lt
 8015542:	9204      	strlt	r2, [sp, #16]
 8015544:	7823      	ldrb	r3, [r4, #0]
 8015546:	2b2e      	cmp	r3, #46	@ 0x2e
 8015548:	d10a      	bne.n	8015560 <_svfiprintf_r+0x130>
 801554a:	7863      	ldrb	r3, [r4, #1]
 801554c:	2b2a      	cmp	r3, #42	@ 0x2a
 801554e:	d132      	bne.n	80155b6 <_svfiprintf_r+0x186>
 8015550:	9b03      	ldr	r3, [sp, #12]
 8015552:	1d1a      	adds	r2, r3, #4
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	9203      	str	r2, [sp, #12]
 8015558:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801555c:	3402      	adds	r4, #2
 801555e:	9305      	str	r3, [sp, #20]
 8015560:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015624 <_svfiprintf_r+0x1f4>
 8015564:	7821      	ldrb	r1, [r4, #0]
 8015566:	2203      	movs	r2, #3
 8015568:	4650      	mov	r0, sl
 801556a:	f7ea feb9 	bl	80002e0 <memchr>
 801556e:	b138      	cbz	r0, 8015580 <_svfiprintf_r+0x150>
 8015570:	9b04      	ldr	r3, [sp, #16]
 8015572:	eba0 000a 	sub.w	r0, r0, sl
 8015576:	2240      	movs	r2, #64	@ 0x40
 8015578:	4082      	lsls	r2, r0
 801557a:	4313      	orrs	r3, r2
 801557c:	3401      	adds	r4, #1
 801557e:	9304      	str	r3, [sp, #16]
 8015580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015584:	4824      	ldr	r0, [pc, #144]	@ (8015618 <_svfiprintf_r+0x1e8>)
 8015586:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801558a:	2206      	movs	r2, #6
 801558c:	f7ea fea8 	bl	80002e0 <memchr>
 8015590:	2800      	cmp	r0, #0
 8015592:	d036      	beq.n	8015602 <_svfiprintf_r+0x1d2>
 8015594:	4b21      	ldr	r3, [pc, #132]	@ (801561c <_svfiprintf_r+0x1ec>)
 8015596:	bb1b      	cbnz	r3, 80155e0 <_svfiprintf_r+0x1b0>
 8015598:	9b03      	ldr	r3, [sp, #12]
 801559a:	3307      	adds	r3, #7
 801559c:	f023 0307 	bic.w	r3, r3, #7
 80155a0:	3308      	adds	r3, #8
 80155a2:	9303      	str	r3, [sp, #12]
 80155a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155a6:	4433      	add	r3, r6
 80155a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80155aa:	e76a      	b.n	8015482 <_svfiprintf_r+0x52>
 80155ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80155b0:	460c      	mov	r4, r1
 80155b2:	2001      	movs	r0, #1
 80155b4:	e7a8      	b.n	8015508 <_svfiprintf_r+0xd8>
 80155b6:	2300      	movs	r3, #0
 80155b8:	3401      	adds	r4, #1
 80155ba:	9305      	str	r3, [sp, #20]
 80155bc:	4619      	mov	r1, r3
 80155be:	f04f 0c0a 	mov.w	ip, #10
 80155c2:	4620      	mov	r0, r4
 80155c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155c8:	3a30      	subs	r2, #48	@ 0x30
 80155ca:	2a09      	cmp	r2, #9
 80155cc:	d903      	bls.n	80155d6 <_svfiprintf_r+0x1a6>
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d0c6      	beq.n	8015560 <_svfiprintf_r+0x130>
 80155d2:	9105      	str	r1, [sp, #20]
 80155d4:	e7c4      	b.n	8015560 <_svfiprintf_r+0x130>
 80155d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80155da:	4604      	mov	r4, r0
 80155dc:	2301      	movs	r3, #1
 80155de:	e7f0      	b.n	80155c2 <_svfiprintf_r+0x192>
 80155e0:	ab03      	add	r3, sp, #12
 80155e2:	9300      	str	r3, [sp, #0]
 80155e4:	462a      	mov	r2, r5
 80155e6:	4b0e      	ldr	r3, [pc, #56]	@ (8015620 <_svfiprintf_r+0x1f0>)
 80155e8:	a904      	add	r1, sp, #16
 80155ea:	4638      	mov	r0, r7
 80155ec:	f7fc fce0 	bl	8011fb0 <_printf_float>
 80155f0:	1c42      	adds	r2, r0, #1
 80155f2:	4606      	mov	r6, r0
 80155f4:	d1d6      	bne.n	80155a4 <_svfiprintf_r+0x174>
 80155f6:	89ab      	ldrh	r3, [r5, #12]
 80155f8:	065b      	lsls	r3, r3, #25
 80155fa:	f53f af2d 	bmi.w	8015458 <_svfiprintf_r+0x28>
 80155fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015600:	e72c      	b.n	801545c <_svfiprintf_r+0x2c>
 8015602:	ab03      	add	r3, sp, #12
 8015604:	9300      	str	r3, [sp, #0]
 8015606:	462a      	mov	r2, r5
 8015608:	4b05      	ldr	r3, [pc, #20]	@ (8015620 <_svfiprintf_r+0x1f0>)
 801560a:	a904      	add	r1, sp, #16
 801560c:	4638      	mov	r0, r7
 801560e:	f7fc ff57 	bl	80124c0 <_printf_i>
 8015612:	e7ed      	b.n	80155f0 <_svfiprintf_r+0x1c0>
 8015614:	080185a1 	.word	0x080185a1
 8015618:	080185ab 	.word	0x080185ab
 801561c:	08011fb1 	.word	0x08011fb1
 8015620:	08015379 	.word	0x08015379
 8015624:	080185a7 	.word	0x080185a7

08015628 <__sfputc_r>:
 8015628:	6893      	ldr	r3, [r2, #8]
 801562a:	3b01      	subs	r3, #1
 801562c:	2b00      	cmp	r3, #0
 801562e:	b410      	push	{r4}
 8015630:	6093      	str	r3, [r2, #8]
 8015632:	da08      	bge.n	8015646 <__sfputc_r+0x1e>
 8015634:	6994      	ldr	r4, [r2, #24]
 8015636:	42a3      	cmp	r3, r4
 8015638:	db01      	blt.n	801563e <__sfputc_r+0x16>
 801563a:	290a      	cmp	r1, #10
 801563c:	d103      	bne.n	8015646 <__sfputc_r+0x1e>
 801563e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015642:	f7fd bbfe 	b.w	8012e42 <__swbuf_r>
 8015646:	6813      	ldr	r3, [r2, #0]
 8015648:	1c58      	adds	r0, r3, #1
 801564a:	6010      	str	r0, [r2, #0]
 801564c:	7019      	strb	r1, [r3, #0]
 801564e:	4608      	mov	r0, r1
 8015650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015654:	4770      	bx	lr

08015656 <__sfputs_r>:
 8015656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015658:	4606      	mov	r6, r0
 801565a:	460f      	mov	r7, r1
 801565c:	4614      	mov	r4, r2
 801565e:	18d5      	adds	r5, r2, r3
 8015660:	42ac      	cmp	r4, r5
 8015662:	d101      	bne.n	8015668 <__sfputs_r+0x12>
 8015664:	2000      	movs	r0, #0
 8015666:	e007      	b.n	8015678 <__sfputs_r+0x22>
 8015668:	f814 1b01 	ldrb.w	r1, [r4], #1
 801566c:	463a      	mov	r2, r7
 801566e:	4630      	mov	r0, r6
 8015670:	f7ff ffda 	bl	8015628 <__sfputc_r>
 8015674:	1c43      	adds	r3, r0, #1
 8015676:	d1f3      	bne.n	8015660 <__sfputs_r+0xa>
 8015678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801567c <_vfiprintf_r>:
 801567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015680:	460d      	mov	r5, r1
 8015682:	b09d      	sub	sp, #116	@ 0x74
 8015684:	4614      	mov	r4, r2
 8015686:	4698      	mov	r8, r3
 8015688:	4606      	mov	r6, r0
 801568a:	b118      	cbz	r0, 8015694 <_vfiprintf_r+0x18>
 801568c:	6a03      	ldr	r3, [r0, #32]
 801568e:	b90b      	cbnz	r3, 8015694 <_vfiprintf_r+0x18>
 8015690:	f7fd face 	bl	8012c30 <__sinit>
 8015694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015696:	07d9      	lsls	r1, r3, #31
 8015698:	d405      	bmi.n	80156a6 <_vfiprintf_r+0x2a>
 801569a:	89ab      	ldrh	r3, [r5, #12]
 801569c:	059a      	lsls	r2, r3, #22
 801569e:	d402      	bmi.n	80156a6 <_vfiprintf_r+0x2a>
 80156a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156a2:	f7fd fd1e 	bl	80130e2 <__retarget_lock_acquire_recursive>
 80156a6:	89ab      	ldrh	r3, [r5, #12]
 80156a8:	071b      	lsls	r3, r3, #28
 80156aa:	d501      	bpl.n	80156b0 <_vfiprintf_r+0x34>
 80156ac:	692b      	ldr	r3, [r5, #16]
 80156ae:	b99b      	cbnz	r3, 80156d8 <_vfiprintf_r+0x5c>
 80156b0:	4629      	mov	r1, r5
 80156b2:	4630      	mov	r0, r6
 80156b4:	f7fd fc04 	bl	8012ec0 <__swsetup_r>
 80156b8:	b170      	cbz	r0, 80156d8 <_vfiprintf_r+0x5c>
 80156ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156bc:	07dc      	lsls	r4, r3, #31
 80156be:	d504      	bpl.n	80156ca <_vfiprintf_r+0x4e>
 80156c0:	f04f 30ff 	mov.w	r0, #4294967295
 80156c4:	b01d      	add	sp, #116	@ 0x74
 80156c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ca:	89ab      	ldrh	r3, [r5, #12]
 80156cc:	0598      	lsls	r0, r3, #22
 80156ce:	d4f7      	bmi.n	80156c0 <_vfiprintf_r+0x44>
 80156d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156d2:	f7fd fd07 	bl	80130e4 <__retarget_lock_release_recursive>
 80156d6:	e7f3      	b.n	80156c0 <_vfiprintf_r+0x44>
 80156d8:	2300      	movs	r3, #0
 80156da:	9309      	str	r3, [sp, #36]	@ 0x24
 80156dc:	2320      	movs	r3, #32
 80156de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80156e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80156e6:	2330      	movs	r3, #48	@ 0x30
 80156e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015898 <_vfiprintf_r+0x21c>
 80156ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80156f0:	f04f 0901 	mov.w	r9, #1
 80156f4:	4623      	mov	r3, r4
 80156f6:	469a      	mov	sl, r3
 80156f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156fc:	b10a      	cbz	r2, 8015702 <_vfiprintf_r+0x86>
 80156fe:	2a25      	cmp	r2, #37	@ 0x25
 8015700:	d1f9      	bne.n	80156f6 <_vfiprintf_r+0x7a>
 8015702:	ebba 0b04 	subs.w	fp, sl, r4
 8015706:	d00b      	beq.n	8015720 <_vfiprintf_r+0xa4>
 8015708:	465b      	mov	r3, fp
 801570a:	4622      	mov	r2, r4
 801570c:	4629      	mov	r1, r5
 801570e:	4630      	mov	r0, r6
 8015710:	f7ff ffa1 	bl	8015656 <__sfputs_r>
 8015714:	3001      	adds	r0, #1
 8015716:	f000 80a7 	beq.w	8015868 <_vfiprintf_r+0x1ec>
 801571a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801571c:	445a      	add	r2, fp
 801571e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015720:	f89a 3000 	ldrb.w	r3, [sl]
 8015724:	2b00      	cmp	r3, #0
 8015726:	f000 809f 	beq.w	8015868 <_vfiprintf_r+0x1ec>
 801572a:	2300      	movs	r3, #0
 801572c:	f04f 32ff 	mov.w	r2, #4294967295
 8015730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015734:	f10a 0a01 	add.w	sl, sl, #1
 8015738:	9304      	str	r3, [sp, #16]
 801573a:	9307      	str	r3, [sp, #28]
 801573c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015740:	931a      	str	r3, [sp, #104]	@ 0x68
 8015742:	4654      	mov	r4, sl
 8015744:	2205      	movs	r2, #5
 8015746:	f814 1b01 	ldrb.w	r1, [r4], #1
 801574a:	4853      	ldr	r0, [pc, #332]	@ (8015898 <_vfiprintf_r+0x21c>)
 801574c:	f7ea fdc8 	bl	80002e0 <memchr>
 8015750:	9a04      	ldr	r2, [sp, #16]
 8015752:	b9d8      	cbnz	r0, 801578c <_vfiprintf_r+0x110>
 8015754:	06d1      	lsls	r1, r2, #27
 8015756:	bf44      	itt	mi
 8015758:	2320      	movmi	r3, #32
 801575a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801575e:	0713      	lsls	r3, r2, #28
 8015760:	bf44      	itt	mi
 8015762:	232b      	movmi	r3, #43	@ 0x2b
 8015764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015768:	f89a 3000 	ldrb.w	r3, [sl]
 801576c:	2b2a      	cmp	r3, #42	@ 0x2a
 801576e:	d015      	beq.n	801579c <_vfiprintf_r+0x120>
 8015770:	9a07      	ldr	r2, [sp, #28]
 8015772:	4654      	mov	r4, sl
 8015774:	2000      	movs	r0, #0
 8015776:	f04f 0c0a 	mov.w	ip, #10
 801577a:	4621      	mov	r1, r4
 801577c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015780:	3b30      	subs	r3, #48	@ 0x30
 8015782:	2b09      	cmp	r3, #9
 8015784:	d94b      	bls.n	801581e <_vfiprintf_r+0x1a2>
 8015786:	b1b0      	cbz	r0, 80157b6 <_vfiprintf_r+0x13a>
 8015788:	9207      	str	r2, [sp, #28]
 801578a:	e014      	b.n	80157b6 <_vfiprintf_r+0x13a>
 801578c:	eba0 0308 	sub.w	r3, r0, r8
 8015790:	fa09 f303 	lsl.w	r3, r9, r3
 8015794:	4313      	orrs	r3, r2
 8015796:	9304      	str	r3, [sp, #16]
 8015798:	46a2      	mov	sl, r4
 801579a:	e7d2      	b.n	8015742 <_vfiprintf_r+0xc6>
 801579c:	9b03      	ldr	r3, [sp, #12]
 801579e:	1d19      	adds	r1, r3, #4
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	9103      	str	r1, [sp, #12]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	bfbb      	ittet	lt
 80157a8:	425b      	neglt	r3, r3
 80157aa:	f042 0202 	orrlt.w	r2, r2, #2
 80157ae:	9307      	strge	r3, [sp, #28]
 80157b0:	9307      	strlt	r3, [sp, #28]
 80157b2:	bfb8      	it	lt
 80157b4:	9204      	strlt	r2, [sp, #16]
 80157b6:	7823      	ldrb	r3, [r4, #0]
 80157b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80157ba:	d10a      	bne.n	80157d2 <_vfiprintf_r+0x156>
 80157bc:	7863      	ldrb	r3, [r4, #1]
 80157be:	2b2a      	cmp	r3, #42	@ 0x2a
 80157c0:	d132      	bne.n	8015828 <_vfiprintf_r+0x1ac>
 80157c2:	9b03      	ldr	r3, [sp, #12]
 80157c4:	1d1a      	adds	r2, r3, #4
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	9203      	str	r2, [sp, #12]
 80157ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80157ce:	3402      	adds	r4, #2
 80157d0:	9305      	str	r3, [sp, #20]
 80157d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80158a8 <_vfiprintf_r+0x22c>
 80157d6:	7821      	ldrb	r1, [r4, #0]
 80157d8:	2203      	movs	r2, #3
 80157da:	4650      	mov	r0, sl
 80157dc:	f7ea fd80 	bl	80002e0 <memchr>
 80157e0:	b138      	cbz	r0, 80157f2 <_vfiprintf_r+0x176>
 80157e2:	9b04      	ldr	r3, [sp, #16]
 80157e4:	eba0 000a 	sub.w	r0, r0, sl
 80157e8:	2240      	movs	r2, #64	@ 0x40
 80157ea:	4082      	lsls	r2, r0
 80157ec:	4313      	orrs	r3, r2
 80157ee:	3401      	adds	r4, #1
 80157f0:	9304      	str	r3, [sp, #16]
 80157f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157f6:	4829      	ldr	r0, [pc, #164]	@ (801589c <_vfiprintf_r+0x220>)
 80157f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80157fc:	2206      	movs	r2, #6
 80157fe:	f7ea fd6f 	bl	80002e0 <memchr>
 8015802:	2800      	cmp	r0, #0
 8015804:	d03f      	beq.n	8015886 <_vfiprintf_r+0x20a>
 8015806:	4b26      	ldr	r3, [pc, #152]	@ (80158a0 <_vfiprintf_r+0x224>)
 8015808:	bb1b      	cbnz	r3, 8015852 <_vfiprintf_r+0x1d6>
 801580a:	9b03      	ldr	r3, [sp, #12]
 801580c:	3307      	adds	r3, #7
 801580e:	f023 0307 	bic.w	r3, r3, #7
 8015812:	3308      	adds	r3, #8
 8015814:	9303      	str	r3, [sp, #12]
 8015816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015818:	443b      	add	r3, r7
 801581a:	9309      	str	r3, [sp, #36]	@ 0x24
 801581c:	e76a      	b.n	80156f4 <_vfiprintf_r+0x78>
 801581e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015822:	460c      	mov	r4, r1
 8015824:	2001      	movs	r0, #1
 8015826:	e7a8      	b.n	801577a <_vfiprintf_r+0xfe>
 8015828:	2300      	movs	r3, #0
 801582a:	3401      	adds	r4, #1
 801582c:	9305      	str	r3, [sp, #20]
 801582e:	4619      	mov	r1, r3
 8015830:	f04f 0c0a 	mov.w	ip, #10
 8015834:	4620      	mov	r0, r4
 8015836:	f810 2b01 	ldrb.w	r2, [r0], #1
 801583a:	3a30      	subs	r2, #48	@ 0x30
 801583c:	2a09      	cmp	r2, #9
 801583e:	d903      	bls.n	8015848 <_vfiprintf_r+0x1cc>
 8015840:	2b00      	cmp	r3, #0
 8015842:	d0c6      	beq.n	80157d2 <_vfiprintf_r+0x156>
 8015844:	9105      	str	r1, [sp, #20]
 8015846:	e7c4      	b.n	80157d2 <_vfiprintf_r+0x156>
 8015848:	fb0c 2101 	mla	r1, ip, r1, r2
 801584c:	4604      	mov	r4, r0
 801584e:	2301      	movs	r3, #1
 8015850:	e7f0      	b.n	8015834 <_vfiprintf_r+0x1b8>
 8015852:	ab03      	add	r3, sp, #12
 8015854:	9300      	str	r3, [sp, #0]
 8015856:	462a      	mov	r2, r5
 8015858:	4b12      	ldr	r3, [pc, #72]	@ (80158a4 <_vfiprintf_r+0x228>)
 801585a:	a904      	add	r1, sp, #16
 801585c:	4630      	mov	r0, r6
 801585e:	f7fc fba7 	bl	8011fb0 <_printf_float>
 8015862:	4607      	mov	r7, r0
 8015864:	1c78      	adds	r0, r7, #1
 8015866:	d1d6      	bne.n	8015816 <_vfiprintf_r+0x19a>
 8015868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801586a:	07d9      	lsls	r1, r3, #31
 801586c:	d405      	bmi.n	801587a <_vfiprintf_r+0x1fe>
 801586e:	89ab      	ldrh	r3, [r5, #12]
 8015870:	059a      	lsls	r2, r3, #22
 8015872:	d402      	bmi.n	801587a <_vfiprintf_r+0x1fe>
 8015874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015876:	f7fd fc35 	bl	80130e4 <__retarget_lock_release_recursive>
 801587a:	89ab      	ldrh	r3, [r5, #12]
 801587c:	065b      	lsls	r3, r3, #25
 801587e:	f53f af1f 	bmi.w	80156c0 <_vfiprintf_r+0x44>
 8015882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015884:	e71e      	b.n	80156c4 <_vfiprintf_r+0x48>
 8015886:	ab03      	add	r3, sp, #12
 8015888:	9300      	str	r3, [sp, #0]
 801588a:	462a      	mov	r2, r5
 801588c:	4b05      	ldr	r3, [pc, #20]	@ (80158a4 <_vfiprintf_r+0x228>)
 801588e:	a904      	add	r1, sp, #16
 8015890:	4630      	mov	r0, r6
 8015892:	f7fc fe15 	bl	80124c0 <_printf_i>
 8015896:	e7e4      	b.n	8015862 <_vfiprintf_r+0x1e6>
 8015898:	080185a1 	.word	0x080185a1
 801589c:	080185ab 	.word	0x080185ab
 80158a0:	08011fb1 	.word	0x08011fb1
 80158a4:	08015657 	.word	0x08015657
 80158a8:	080185a7 	.word	0x080185a7

080158ac <__sflush_r>:
 80158ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80158b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158b4:	0716      	lsls	r6, r2, #28
 80158b6:	4605      	mov	r5, r0
 80158b8:	460c      	mov	r4, r1
 80158ba:	d454      	bmi.n	8015966 <__sflush_r+0xba>
 80158bc:	684b      	ldr	r3, [r1, #4]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	dc02      	bgt.n	80158c8 <__sflush_r+0x1c>
 80158c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	dd48      	ble.n	801595a <__sflush_r+0xae>
 80158c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80158ca:	2e00      	cmp	r6, #0
 80158cc:	d045      	beq.n	801595a <__sflush_r+0xae>
 80158ce:	2300      	movs	r3, #0
 80158d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80158d4:	682f      	ldr	r7, [r5, #0]
 80158d6:	6a21      	ldr	r1, [r4, #32]
 80158d8:	602b      	str	r3, [r5, #0]
 80158da:	d030      	beq.n	801593e <__sflush_r+0x92>
 80158dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80158de:	89a3      	ldrh	r3, [r4, #12]
 80158e0:	0759      	lsls	r1, r3, #29
 80158e2:	d505      	bpl.n	80158f0 <__sflush_r+0x44>
 80158e4:	6863      	ldr	r3, [r4, #4]
 80158e6:	1ad2      	subs	r2, r2, r3
 80158e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80158ea:	b10b      	cbz	r3, 80158f0 <__sflush_r+0x44>
 80158ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80158ee:	1ad2      	subs	r2, r2, r3
 80158f0:	2300      	movs	r3, #0
 80158f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80158f4:	6a21      	ldr	r1, [r4, #32]
 80158f6:	4628      	mov	r0, r5
 80158f8:	47b0      	blx	r6
 80158fa:	1c43      	adds	r3, r0, #1
 80158fc:	89a3      	ldrh	r3, [r4, #12]
 80158fe:	d106      	bne.n	801590e <__sflush_r+0x62>
 8015900:	6829      	ldr	r1, [r5, #0]
 8015902:	291d      	cmp	r1, #29
 8015904:	d82b      	bhi.n	801595e <__sflush_r+0xb2>
 8015906:	4a2a      	ldr	r2, [pc, #168]	@ (80159b0 <__sflush_r+0x104>)
 8015908:	410a      	asrs	r2, r1
 801590a:	07d6      	lsls	r6, r2, #31
 801590c:	d427      	bmi.n	801595e <__sflush_r+0xb2>
 801590e:	2200      	movs	r2, #0
 8015910:	6062      	str	r2, [r4, #4]
 8015912:	04d9      	lsls	r1, r3, #19
 8015914:	6922      	ldr	r2, [r4, #16]
 8015916:	6022      	str	r2, [r4, #0]
 8015918:	d504      	bpl.n	8015924 <__sflush_r+0x78>
 801591a:	1c42      	adds	r2, r0, #1
 801591c:	d101      	bne.n	8015922 <__sflush_r+0x76>
 801591e:	682b      	ldr	r3, [r5, #0]
 8015920:	b903      	cbnz	r3, 8015924 <__sflush_r+0x78>
 8015922:	6560      	str	r0, [r4, #84]	@ 0x54
 8015924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015926:	602f      	str	r7, [r5, #0]
 8015928:	b1b9      	cbz	r1, 801595a <__sflush_r+0xae>
 801592a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801592e:	4299      	cmp	r1, r3
 8015930:	d002      	beq.n	8015938 <__sflush_r+0x8c>
 8015932:	4628      	mov	r0, r5
 8015934:	f7fe f9ea 	bl	8013d0c <_free_r>
 8015938:	2300      	movs	r3, #0
 801593a:	6363      	str	r3, [r4, #52]	@ 0x34
 801593c:	e00d      	b.n	801595a <__sflush_r+0xae>
 801593e:	2301      	movs	r3, #1
 8015940:	4628      	mov	r0, r5
 8015942:	47b0      	blx	r6
 8015944:	4602      	mov	r2, r0
 8015946:	1c50      	adds	r0, r2, #1
 8015948:	d1c9      	bne.n	80158de <__sflush_r+0x32>
 801594a:	682b      	ldr	r3, [r5, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d0c6      	beq.n	80158de <__sflush_r+0x32>
 8015950:	2b1d      	cmp	r3, #29
 8015952:	d001      	beq.n	8015958 <__sflush_r+0xac>
 8015954:	2b16      	cmp	r3, #22
 8015956:	d11e      	bne.n	8015996 <__sflush_r+0xea>
 8015958:	602f      	str	r7, [r5, #0]
 801595a:	2000      	movs	r0, #0
 801595c:	e022      	b.n	80159a4 <__sflush_r+0xf8>
 801595e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015962:	b21b      	sxth	r3, r3
 8015964:	e01b      	b.n	801599e <__sflush_r+0xf2>
 8015966:	690f      	ldr	r7, [r1, #16]
 8015968:	2f00      	cmp	r7, #0
 801596a:	d0f6      	beq.n	801595a <__sflush_r+0xae>
 801596c:	0793      	lsls	r3, r2, #30
 801596e:	680e      	ldr	r6, [r1, #0]
 8015970:	bf08      	it	eq
 8015972:	694b      	ldreq	r3, [r1, #20]
 8015974:	600f      	str	r7, [r1, #0]
 8015976:	bf18      	it	ne
 8015978:	2300      	movne	r3, #0
 801597a:	eba6 0807 	sub.w	r8, r6, r7
 801597e:	608b      	str	r3, [r1, #8]
 8015980:	f1b8 0f00 	cmp.w	r8, #0
 8015984:	dde9      	ble.n	801595a <__sflush_r+0xae>
 8015986:	6a21      	ldr	r1, [r4, #32]
 8015988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801598a:	4643      	mov	r3, r8
 801598c:	463a      	mov	r2, r7
 801598e:	4628      	mov	r0, r5
 8015990:	47b0      	blx	r6
 8015992:	2800      	cmp	r0, #0
 8015994:	dc08      	bgt.n	80159a8 <__sflush_r+0xfc>
 8015996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801599a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801599e:	81a3      	strh	r3, [r4, #12]
 80159a0:	f04f 30ff 	mov.w	r0, #4294967295
 80159a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a8:	4407      	add	r7, r0
 80159aa:	eba8 0800 	sub.w	r8, r8, r0
 80159ae:	e7e7      	b.n	8015980 <__sflush_r+0xd4>
 80159b0:	dfbffffe 	.word	0xdfbffffe

080159b4 <_fflush_r>:
 80159b4:	b538      	push	{r3, r4, r5, lr}
 80159b6:	690b      	ldr	r3, [r1, #16]
 80159b8:	4605      	mov	r5, r0
 80159ba:	460c      	mov	r4, r1
 80159bc:	b913      	cbnz	r3, 80159c4 <_fflush_r+0x10>
 80159be:	2500      	movs	r5, #0
 80159c0:	4628      	mov	r0, r5
 80159c2:	bd38      	pop	{r3, r4, r5, pc}
 80159c4:	b118      	cbz	r0, 80159ce <_fflush_r+0x1a>
 80159c6:	6a03      	ldr	r3, [r0, #32]
 80159c8:	b90b      	cbnz	r3, 80159ce <_fflush_r+0x1a>
 80159ca:	f7fd f931 	bl	8012c30 <__sinit>
 80159ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d0f3      	beq.n	80159be <_fflush_r+0xa>
 80159d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80159d8:	07d0      	lsls	r0, r2, #31
 80159da:	d404      	bmi.n	80159e6 <_fflush_r+0x32>
 80159dc:	0599      	lsls	r1, r3, #22
 80159de:	d402      	bmi.n	80159e6 <_fflush_r+0x32>
 80159e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159e2:	f7fd fb7e 	bl	80130e2 <__retarget_lock_acquire_recursive>
 80159e6:	4628      	mov	r0, r5
 80159e8:	4621      	mov	r1, r4
 80159ea:	f7ff ff5f 	bl	80158ac <__sflush_r>
 80159ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80159f0:	07da      	lsls	r2, r3, #31
 80159f2:	4605      	mov	r5, r0
 80159f4:	d4e4      	bmi.n	80159c0 <_fflush_r+0xc>
 80159f6:	89a3      	ldrh	r3, [r4, #12]
 80159f8:	059b      	lsls	r3, r3, #22
 80159fa:	d4e1      	bmi.n	80159c0 <_fflush_r+0xc>
 80159fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159fe:	f7fd fb71 	bl	80130e4 <__retarget_lock_release_recursive>
 8015a02:	e7dd      	b.n	80159c0 <_fflush_r+0xc>

08015a04 <fiprintf>:
 8015a04:	b40e      	push	{r1, r2, r3}
 8015a06:	b503      	push	{r0, r1, lr}
 8015a08:	4601      	mov	r1, r0
 8015a0a:	ab03      	add	r3, sp, #12
 8015a0c:	4805      	ldr	r0, [pc, #20]	@ (8015a24 <fiprintf+0x20>)
 8015a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a12:	6800      	ldr	r0, [r0, #0]
 8015a14:	9301      	str	r3, [sp, #4]
 8015a16:	f7ff fe31 	bl	801567c <_vfiprintf_r>
 8015a1a:	b002      	add	sp, #8
 8015a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a20:	b003      	add	sp, #12
 8015a22:	4770      	bx	lr
 8015a24:	24000bb8 	.word	0x24000bb8

08015a28 <__swhatbuf_r>:
 8015a28:	b570      	push	{r4, r5, r6, lr}
 8015a2a:	460c      	mov	r4, r1
 8015a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a30:	2900      	cmp	r1, #0
 8015a32:	b096      	sub	sp, #88	@ 0x58
 8015a34:	4615      	mov	r5, r2
 8015a36:	461e      	mov	r6, r3
 8015a38:	da0d      	bge.n	8015a56 <__swhatbuf_r+0x2e>
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015a40:	f04f 0100 	mov.w	r1, #0
 8015a44:	bf14      	ite	ne
 8015a46:	2340      	movne	r3, #64	@ 0x40
 8015a48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015a4c:	2000      	movs	r0, #0
 8015a4e:	6031      	str	r1, [r6, #0]
 8015a50:	602b      	str	r3, [r5, #0]
 8015a52:	b016      	add	sp, #88	@ 0x58
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
 8015a56:	466a      	mov	r2, sp
 8015a58:	f000 f874 	bl	8015b44 <_fstat_r>
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	dbec      	blt.n	8015a3a <__swhatbuf_r+0x12>
 8015a60:	9901      	ldr	r1, [sp, #4]
 8015a62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015a66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015a6a:	4259      	negs	r1, r3
 8015a6c:	4159      	adcs	r1, r3
 8015a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a72:	e7eb      	b.n	8015a4c <__swhatbuf_r+0x24>

08015a74 <__smakebuf_r>:
 8015a74:	898b      	ldrh	r3, [r1, #12]
 8015a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a78:	079d      	lsls	r5, r3, #30
 8015a7a:	4606      	mov	r6, r0
 8015a7c:	460c      	mov	r4, r1
 8015a7e:	d507      	bpl.n	8015a90 <__smakebuf_r+0x1c>
 8015a80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015a84:	6023      	str	r3, [r4, #0]
 8015a86:	6123      	str	r3, [r4, #16]
 8015a88:	2301      	movs	r3, #1
 8015a8a:	6163      	str	r3, [r4, #20]
 8015a8c:	b003      	add	sp, #12
 8015a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a90:	ab01      	add	r3, sp, #4
 8015a92:	466a      	mov	r2, sp
 8015a94:	f7ff ffc8 	bl	8015a28 <__swhatbuf_r>
 8015a98:	9f00      	ldr	r7, [sp, #0]
 8015a9a:	4605      	mov	r5, r0
 8015a9c:	4639      	mov	r1, r7
 8015a9e:	4630      	mov	r0, r6
 8015aa0:	f7fc f90e 	bl	8011cc0 <_malloc_r>
 8015aa4:	b948      	cbnz	r0, 8015aba <__smakebuf_r+0x46>
 8015aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aaa:	059a      	lsls	r2, r3, #22
 8015aac:	d4ee      	bmi.n	8015a8c <__smakebuf_r+0x18>
 8015aae:	f023 0303 	bic.w	r3, r3, #3
 8015ab2:	f043 0302 	orr.w	r3, r3, #2
 8015ab6:	81a3      	strh	r3, [r4, #12]
 8015ab8:	e7e2      	b.n	8015a80 <__smakebuf_r+0xc>
 8015aba:	89a3      	ldrh	r3, [r4, #12]
 8015abc:	6020      	str	r0, [r4, #0]
 8015abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ac2:	81a3      	strh	r3, [r4, #12]
 8015ac4:	9b01      	ldr	r3, [sp, #4]
 8015ac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015aca:	b15b      	cbz	r3, 8015ae4 <__smakebuf_r+0x70>
 8015acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	f000 f849 	bl	8015b68 <_isatty_r>
 8015ad6:	b128      	cbz	r0, 8015ae4 <__smakebuf_r+0x70>
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	f023 0303 	bic.w	r3, r3, #3
 8015ade:	f043 0301 	orr.w	r3, r3, #1
 8015ae2:	81a3      	strh	r3, [r4, #12]
 8015ae4:	89a3      	ldrh	r3, [r4, #12]
 8015ae6:	431d      	orrs	r5, r3
 8015ae8:	81a5      	strh	r5, [r4, #12]
 8015aea:	e7cf      	b.n	8015a8c <__smakebuf_r+0x18>

08015aec <memmove>:
 8015aec:	4288      	cmp	r0, r1
 8015aee:	b510      	push	{r4, lr}
 8015af0:	eb01 0402 	add.w	r4, r1, r2
 8015af4:	d902      	bls.n	8015afc <memmove+0x10>
 8015af6:	4284      	cmp	r4, r0
 8015af8:	4623      	mov	r3, r4
 8015afa:	d807      	bhi.n	8015b0c <memmove+0x20>
 8015afc:	1e43      	subs	r3, r0, #1
 8015afe:	42a1      	cmp	r1, r4
 8015b00:	d008      	beq.n	8015b14 <memmove+0x28>
 8015b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b0a:	e7f8      	b.n	8015afe <memmove+0x12>
 8015b0c:	4402      	add	r2, r0
 8015b0e:	4601      	mov	r1, r0
 8015b10:	428a      	cmp	r2, r1
 8015b12:	d100      	bne.n	8015b16 <memmove+0x2a>
 8015b14:	bd10      	pop	{r4, pc}
 8015b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b1e:	e7f7      	b.n	8015b10 <memmove+0x24>

08015b20 <strncmp>:
 8015b20:	b510      	push	{r4, lr}
 8015b22:	b16a      	cbz	r2, 8015b40 <strncmp+0x20>
 8015b24:	3901      	subs	r1, #1
 8015b26:	1884      	adds	r4, r0, r2
 8015b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d103      	bne.n	8015b3c <strncmp+0x1c>
 8015b34:	42a0      	cmp	r0, r4
 8015b36:	d001      	beq.n	8015b3c <strncmp+0x1c>
 8015b38:	2a00      	cmp	r2, #0
 8015b3a:	d1f5      	bne.n	8015b28 <strncmp+0x8>
 8015b3c:	1ad0      	subs	r0, r2, r3
 8015b3e:	bd10      	pop	{r4, pc}
 8015b40:	4610      	mov	r0, r2
 8015b42:	e7fc      	b.n	8015b3e <strncmp+0x1e>

08015b44 <_fstat_r>:
 8015b44:	b538      	push	{r3, r4, r5, lr}
 8015b46:	4d07      	ldr	r5, [pc, #28]	@ (8015b64 <_fstat_r+0x20>)
 8015b48:	2300      	movs	r3, #0
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	4608      	mov	r0, r1
 8015b4e:	4611      	mov	r1, r2
 8015b50:	602b      	str	r3, [r5, #0]
 8015b52:	f7eb fd39 	bl	80015c8 <_fstat>
 8015b56:	1c43      	adds	r3, r0, #1
 8015b58:	d102      	bne.n	8015b60 <_fstat_r+0x1c>
 8015b5a:	682b      	ldr	r3, [r5, #0]
 8015b5c:	b103      	cbz	r3, 8015b60 <_fstat_r+0x1c>
 8015b5e:	6023      	str	r3, [r4, #0]
 8015b60:	bd38      	pop	{r3, r4, r5, pc}
 8015b62:	bf00      	nop
 8015b64:	24009f54 	.word	0x24009f54

08015b68 <_isatty_r>:
 8015b68:	b538      	push	{r3, r4, r5, lr}
 8015b6a:	4d06      	ldr	r5, [pc, #24]	@ (8015b84 <_isatty_r+0x1c>)
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	4604      	mov	r4, r0
 8015b70:	4608      	mov	r0, r1
 8015b72:	602b      	str	r3, [r5, #0]
 8015b74:	f7eb fcea 	bl	800154c <_isatty>
 8015b78:	1c43      	adds	r3, r0, #1
 8015b7a:	d102      	bne.n	8015b82 <_isatty_r+0x1a>
 8015b7c:	682b      	ldr	r3, [r5, #0]
 8015b7e:	b103      	cbz	r3, 8015b82 <_isatty_r+0x1a>
 8015b80:	6023      	str	r3, [r4, #0]
 8015b82:	bd38      	pop	{r3, r4, r5, pc}
 8015b84:	24009f54 	.word	0x24009f54

08015b88 <nan>:
 8015b88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015b90 <nan+0x8>
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop
 8015b90:	00000000 	.word	0x00000000
 8015b94:	7ff80000 	.word	0x7ff80000

08015b98 <abort>:
 8015b98:	b508      	push	{r3, lr}
 8015b9a:	2006      	movs	r0, #6
 8015b9c:	f000 fb96 	bl	80162cc <raise>
 8015ba0:	2001      	movs	r0, #1
 8015ba2:	f7ec fc18 	bl	80023d6 <_exit>

08015ba6 <_calloc_r>:
 8015ba6:	b570      	push	{r4, r5, r6, lr}
 8015ba8:	fba1 5402 	umull	r5, r4, r1, r2
 8015bac:	b93c      	cbnz	r4, 8015bbe <_calloc_r+0x18>
 8015bae:	4629      	mov	r1, r5
 8015bb0:	f7fc f886 	bl	8011cc0 <_malloc_r>
 8015bb4:	4606      	mov	r6, r0
 8015bb6:	b928      	cbnz	r0, 8015bc4 <_calloc_r+0x1e>
 8015bb8:	2600      	movs	r6, #0
 8015bba:	4630      	mov	r0, r6
 8015bbc:	bd70      	pop	{r4, r5, r6, pc}
 8015bbe:	220c      	movs	r2, #12
 8015bc0:	6002      	str	r2, [r0, #0]
 8015bc2:	e7f9      	b.n	8015bb8 <_calloc_r+0x12>
 8015bc4:	462a      	mov	r2, r5
 8015bc6:	4621      	mov	r1, r4
 8015bc8:	f7fd f9d0 	bl	8012f6c <memset>
 8015bcc:	e7f5      	b.n	8015bba <_calloc_r+0x14>

08015bce <rshift>:
 8015bce:	6903      	ldr	r3, [r0, #16]
 8015bd0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bd8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015bdc:	f100 0414 	add.w	r4, r0, #20
 8015be0:	dd45      	ble.n	8015c6e <rshift+0xa0>
 8015be2:	f011 011f 	ands.w	r1, r1, #31
 8015be6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015bea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015bee:	d10c      	bne.n	8015c0a <rshift+0x3c>
 8015bf0:	f100 0710 	add.w	r7, r0, #16
 8015bf4:	4629      	mov	r1, r5
 8015bf6:	42b1      	cmp	r1, r6
 8015bf8:	d334      	bcc.n	8015c64 <rshift+0x96>
 8015bfa:	1a9b      	subs	r3, r3, r2
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	1eea      	subs	r2, r5, #3
 8015c00:	4296      	cmp	r6, r2
 8015c02:	bf38      	it	cc
 8015c04:	2300      	movcc	r3, #0
 8015c06:	4423      	add	r3, r4
 8015c08:	e015      	b.n	8015c36 <rshift+0x68>
 8015c0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015c0e:	f1c1 0820 	rsb	r8, r1, #32
 8015c12:	40cf      	lsrs	r7, r1
 8015c14:	f105 0e04 	add.w	lr, r5, #4
 8015c18:	46a1      	mov	r9, r4
 8015c1a:	4576      	cmp	r6, lr
 8015c1c:	46f4      	mov	ip, lr
 8015c1e:	d815      	bhi.n	8015c4c <rshift+0x7e>
 8015c20:	1a9a      	subs	r2, r3, r2
 8015c22:	0092      	lsls	r2, r2, #2
 8015c24:	3a04      	subs	r2, #4
 8015c26:	3501      	adds	r5, #1
 8015c28:	42ae      	cmp	r6, r5
 8015c2a:	bf38      	it	cc
 8015c2c:	2200      	movcc	r2, #0
 8015c2e:	18a3      	adds	r3, r4, r2
 8015c30:	50a7      	str	r7, [r4, r2]
 8015c32:	b107      	cbz	r7, 8015c36 <rshift+0x68>
 8015c34:	3304      	adds	r3, #4
 8015c36:	1b1a      	subs	r2, r3, r4
 8015c38:	42a3      	cmp	r3, r4
 8015c3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015c3e:	bf08      	it	eq
 8015c40:	2300      	moveq	r3, #0
 8015c42:	6102      	str	r2, [r0, #16]
 8015c44:	bf08      	it	eq
 8015c46:	6143      	streq	r3, [r0, #20]
 8015c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c4c:	f8dc c000 	ldr.w	ip, [ip]
 8015c50:	fa0c fc08 	lsl.w	ip, ip, r8
 8015c54:	ea4c 0707 	orr.w	r7, ip, r7
 8015c58:	f849 7b04 	str.w	r7, [r9], #4
 8015c5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015c60:	40cf      	lsrs	r7, r1
 8015c62:	e7da      	b.n	8015c1a <rshift+0x4c>
 8015c64:	f851 cb04 	ldr.w	ip, [r1], #4
 8015c68:	f847 cf04 	str.w	ip, [r7, #4]!
 8015c6c:	e7c3      	b.n	8015bf6 <rshift+0x28>
 8015c6e:	4623      	mov	r3, r4
 8015c70:	e7e1      	b.n	8015c36 <rshift+0x68>

08015c72 <__hexdig_fun>:
 8015c72:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015c76:	2b09      	cmp	r3, #9
 8015c78:	d802      	bhi.n	8015c80 <__hexdig_fun+0xe>
 8015c7a:	3820      	subs	r0, #32
 8015c7c:	b2c0      	uxtb	r0, r0
 8015c7e:	4770      	bx	lr
 8015c80:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015c84:	2b05      	cmp	r3, #5
 8015c86:	d801      	bhi.n	8015c8c <__hexdig_fun+0x1a>
 8015c88:	3847      	subs	r0, #71	@ 0x47
 8015c8a:	e7f7      	b.n	8015c7c <__hexdig_fun+0xa>
 8015c8c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015c90:	2b05      	cmp	r3, #5
 8015c92:	d801      	bhi.n	8015c98 <__hexdig_fun+0x26>
 8015c94:	3827      	subs	r0, #39	@ 0x27
 8015c96:	e7f1      	b.n	8015c7c <__hexdig_fun+0xa>
 8015c98:	2000      	movs	r0, #0
 8015c9a:	4770      	bx	lr

08015c9c <__gethex>:
 8015c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ca0:	b085      	sub	sp, #20
 8015ca2:	468a      	mov	sl, r1
 8015ca4:	9302      	str	r3, [sp, #8]
 8015ca6:	680b      	ldr	r3, [r1, #0]
 8015ca8:	9001      	str	r0, [sp, #4]
 8015caa:	4690      	mov	r8, r2
 8015cac:	1c9c      	adds	r4, r3, #2
 8015cae:	46a1      	mov	r9, r4
 8015cb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015cb4:	2830      	cmp	r0, #48	@ 0x30
 8015cb6:	d0fa      	beq.n	8015cae <__gethex+0x12>
 8015cb8:	eba9 0303 	sub.w	r3, r9, r3
 8015cbc:	f1a3 0b02 	sub.w	fp, r3, #2
 8015cc0:	f7ff ffd7 	bl	8015c72 <__hexdig_fun>
 8015cc4:	4605      	mov	r5, r0
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	d168      	bne.n	8015d9c <__gethex+0x100>
 8015cca:	49a0      	ldr	r1, [pc, #640]	@ (8015f4c <__gethex+0x2b0>)
 8015ccc:	2201      	movs	r2, #1
 8015cce:	4648      	mov	r0, r9
 8015cd0:	f7ff ff26 	bl	8015b20 <strncmp>
 8015cd4:	4607      	mov	r7, r0
 8015cd6:	2800      	cmp	r0, #0
 8015cd8:	d167      	bne.n	8015daa <__gethex+0x10e>
 8015cda:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015cde:	4626      	mov	r6, r4
 8015ce0:	f7ff ffc7 	bl	8015c72 <__hexdig_fun>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	d062      	beq.n	8015dae <__gethex+0x112>
 8015ce8:	4623      	mov	r3, r4
 8015cea:	7818      	ldrb	r0, [r3, #0]
 8015cec:	2830      	cmp	r0, #48	@ 0x30
 8015cee:	4699      	mov	r9, r3
 8015cf0:	f103 0301 	add.w	r3, r3, #1
 8015cf4:	d0f9      	beq.n	8015cea <__gethex+0x4e>
 8015cf6:	f7ff ffbc 	bl	8015c72 <__hexdig_fun>
 8015cfa:	fab0 f580 	clz	r5, r0
 8015cfe:	096d      	lsrs	r5, r5, #5
 8015d00:	f04f 0b01 	mov.w	fp, #1
 8015d04:	464a      	mov	r2, r9
 8015d06:	4616      	mov	r6, r2
 8015d08:	3201      	adds	r2, #1
 8015d0a:	7830      	ldrb	r0, [r6, #0]
 8015d0c:	f7ff ffb1 	bl	8015c72 <__hexdig_fun>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d1f8      	bne.n	8015d06 <__gethex+0x6a>
 8015d14:	498d      	ldr	r1, [pc, #564]	@ (8015f4c <__gethex+0x2b0>)
 8015d16:	2201      	movs	r2, #1
 8015d18:	4630      	mov	r0, r6
 8015d1a:	f7ff ff01 	bl	8015b20 <strncmp>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	d13f      	bne.n	8015da2 <__gethex+0x106>
 8015d22:	b944      	cbnz	r4, 8015d36 <__gethex+0x9a>
 8015d24:	1c74      	adds	r4, r6, #1
 8015d26:	4622      	mov	r2, r4
 8015d28:	4616      	mov	r6, r2
 8015d2a:	3201      	adds	r2, #1
 8015d2c:	7830      	ldrb	r0, [r6, #0]
 8015d2e:	f7ff ffa0 	bl	8015c72 <__hexdig_fun>
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d1f8      	bne.n	8015d28 <__gethex+0x8c>
 8015d36:	1ba4      	subs	r4, r4, r6
 8015d38:	00a7      	lsls	r7, r4, #2
 8015d3a:	7833      	ldrb	r3, [r6, #0]
 8015d3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015d40:	2b50      	cmp	r3, #80	@ 0x50
 8015d42:	d13e      	bne.n	8015dc2 <__gethex+0x126>
 8015d44:	7873      	ldrb	r3, [r6, #1]
 8015d46:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d48:	d033      	beq.n	8015db2 <__gethex+0x116>
 8015d4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8015d4c:	d034      	beq.n	8015db8 <__gethex+0x11c>
 8015d4e:	1c71      	adds	r1, r6, #1
 8015d50:	2400      	movs	r4, #0
 8015d52:	7808      	ldrb	r0, [r1, #0]
 8015d54:	f7ff ff8d 	bl	8015c72 <__hexdig_fun>
 8015d58:	1e43      	subs	r3, r0, #1
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	2b18      	cmp	r3, #24
 8015d5e:	d830      	bhi.n	8015dc2 <__gethex+0x126>
 8015d60:	f1a0 0210 	sub.w	r2, r0, #16
 8015d64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015d68:	f7ff ff83 	bl	8015c72 <__hexdig_fun>
 8015d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015d70:	fa5f fc8c 	uxtb.w	ip, ip
 8015d74:	f1bc 0f18 	cmp.w	ip, #24
 8015d78:	f04f 030a 	mov.w	r3, #10
 8015d7c:	d91e      	bls.n	8015dbc <__gethex+0x120>
 8015d7e:	b104      	cbz	r4, 8015d82 <__gethex+0xe6>
 8015d80:	4252      	negs	r2, r2
 8015d82:	4417      	add	r7, r2
 8015d84:	f8ca 1000 	str.w	r1, [sl]
 8015d88:	b1ed      	cbz	r5, 8015dc6 <__gethex+0x12a>
 8015d8a:	f1bb 0f00 	cmp.w	fp, #0
 8015d8e:	bf0c      	ite	eq
 8015d90:	2506      	moveq	r5, #6
 8015d92:	2500      	movne	r5, #0
 8015d94:	4628      	mov	r0, r5
 8015d96:	b005      	add	sp, #20
 8015d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d9c:	2500      	movs	r5, #0
 8015d9e:	462c      	mov	r4, r5
 8015da0:	e7b0      	b.n	8015d04 <__gethex+0x68>
 8015da2:	2c00      	cmp	r4, #0
 8015da4:	d1c7      	bne.n	8015d36 <__gethex+0x9a>
 8015da6:	4627      	mov	r7, r4
 8015da8:	e7c7      	b.n	8015d3a <__gethex+0x9e>
 8015daa:	464e      	mov	r6, r9
 8015dac:	462f      	mov	r7, r5
 8015dae:	2501      	movs	r5, #1
 8015db0:	e7c3      	b.n	8015d3a <__gethex+0x9e>
 8015db2:	2400      	movs	r4, #0
 8015db4:	1cb1      	adds	r1, r6, #2
 8015db6:	e7cc      	b.n	8015d52 <__gethex+0xb6>
 8015db8:	2401      	movs	r4, #1
 8015dba:	e7fb      	b.n	8015db4 <__gethex+0x118>
 8015dbc:	fb03 0002 	mla	r0, r3, r2, r0
 8015dc0:	e7ce      	b.n	8015d60 <__gethex+0xc4>
 8015dc2:	4631      	mov	r1, r6
 8015dc4:	e7de      	b.n	8015d84 <__gethex+0xe8>
 8015dc6:	eba6 0309 	sub.w	r3, r6, r9
 8015dca:	3b01      	subs	r3, #1
 8015dcc:	4629      	mov	r1, r5
 8015dce:	2b07      	cmp	r3, #7
 8015dd0:	dc0a      	bgt.n	8015de8 <__gethex+0x14c>
 8015dd2:	9801      	ldr	r0, [sp, #4]
 8015dd4:	f7fd ffe4 	bl	8013da0 <_Balloc>
 8015dd8:	4604      	mov	r4, r0
 8015dda:	b940      	cbnz	r0, 8015dee <__gethex+0x152>
 8015ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8015f50 <__gethex+0x2b4>)
 8015dde:	4602      	mov	r2, r0
 8015de0:	21e4      	movs	r1, #228	@ 0xe4
 8015de2:	485c      	ldr	r0, [pc, #368]	@ (8015f54 <__gethex+0x2b8>)
 8015de4:	f7fd f994 	bl	8013110 <__assert_func>
 8015de8:	3101      	adds	r1, #1
 8015dea:	105b      	asrs	r3, r3, #1
 8015dec:	e7ef      	b.n	8015dce <__gethex+0x132>
 8015dee:	f100 0a14 	add.w	sl, r0, #20
 8015df2:	2300      	movs	r3, #0
 8015df4:	4655      	mov	r5, sl
 8015df6:	469b      	mov	fp, r3
 8015df8:	45b1      	cmp	r9, r6
 8015dfa:	d337      	bcc.n	8015e6c <__gethex+0x1d0>
 8015dfc:	f845 bb04 	str.w	fp, [r5], #4
 8015e00:	eba5 050a 	sub.w	r5, r5, sl
 8015e04:	10ad      	asrs	r5, r5, #2
 8015e06:	6125      	str	r5, [r4, #16]
 8015e08:	4658      	mov	r0, fp
 8015e0a:	f7fe f8bb 	bl	8013f84 <__hi0bits>
 8015e0e:	016d      	lsls	r5, r5, #5
 8015e10:	f8d8 6000 	ldr.w	r6, [r8]
 8015e14:	1a2d      	subs	r5, r5, r0
 8015e16:	42b5      	cmp	r5, r6
 8015e18:	dd54      	ble.n	8015ec4 <__gethex+0x228>
 8015e1a:	1bad      	subs	r5, r5, r6
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f7fe fc4c 	bl	80146bc <__any_on>
 8015e24:	4681      	mov	r9, r0
 8015e26:	b178      	cbz	r0, 8015e48 <__gethex+0x1ac>
 8015e28:	1e6b      	subs	r3, r5, #1
 8015e2a:	1159      	asrs	r1, r3, #5
 8015e2c:	f003 021f 	and.w	r2, r3, #31
 8015e30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015e34:	f04f 0901 	mov.w	r9, #1
 8015e38:	fa09 f202 	lsl.w	r2, r9, r2
 8015e3c:	420a      	tst	r2, r1
 8015e3e:	d003      	beq.n	8015e48 <__gethex+0x1ac>
 8015e40:	454b      	cmp	r3, r9
 8015e42:	dc36      	bgt.n	8015eb2 <__gethex+0x216>
 8015e44:	f04f 0902 	mov.w	r9, #2
 8015e48:	4629      	mov	r1, r5
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	f7ff febf 	bl	8015bce <rshift>
 8015e50:	442f      	add	r7, r5
 8015e52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e56:	42bb      	cmp	r3, r7
 8015e58:	da42      	bge.n	8015ee0 <__gethex+0x244>
 8015e5a:	9801      	ldr	r0, [sp, #4]
 8015e5c:	4621      	mov	r1, r4
 8015e5e:	f7fd ffdf 	bl	8013e20 <_Bfree>
 8015e62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e64:	2300      	movs	r3, #0
 8015e66:	6013      	str	r3, [r2, #0]
 8015e68:	25a3      	movs	r5, #163	@ 0xa3
 8015e6a:	e793      	b.n	8015d94 <__gethex+0xf8>
 8015e6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015e70:	2a2e      	cmp	r2, #46	@ 0x2e
 8015e72:	d012      	beq.n	8015e9a <__gethex+0x1fe>
 8015e74:	2b20      	cmp	r3, #32
 8015e76:	d104      	bne.n	8015e82 <__gethex+0x1e6>
 8015e78:	f845 bb04 	str.w	fp, [r5], #4
 8015e7c:	f04f 0b00 	mov.w	fp, #0
 8015e80:	465b      	mov	r3, fp
 8015e82:	7830      	ldrb	r0, [r6, #0]
 8015e84:	9303      	str	r3, [sp, #12]
 8015e86:	f7ff fef4 	bl	8015c72 <__hexdig_fun>
 8015e8a:	9b03      	ldr	r3, [sp, #12]
 8015e8c:	f000 000f 	and.w	r0, r0, #15
 8015e90:	4098      	lsls	r0, r3
 8015e92:	ea4b 0b00 	orr.w	fp, fp, r0
 8015e96:	3304      	adds	r3, #4
 8015e98:	e7ae      	b.n	8015df8 <__gethex+0x15c>
 8015e9a:	45b1      	cmp	r9, r6
 8015e9c:	d8ea      	bhi.n	8015e74 <__gethex+0x1d8>
 8015e9e:	492b      	ldr	r1, [pc, #172]	@ (8015f4c <__gethex+0x2b0>)
 8015ea0:	9303      	str	r3, [sp, #12]
 8015ea2:	2201      	movs	r2, #1
 8015ea4:	4630      	mov	r0, r6
 8015ea6:	f7ff fe3b 	bl	8015b20 <strncmp>
 8015eaa:	9b03      	ldr	r3, [sp, #12]
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d1e1      	bne.n	8015e74 <__gethex+0x1d8>
 8015eb0:	e7a2      	b.n	8015df8 <__gethex+0x15c>
 8015eb2:	1ea9      	subs	r1, r5, #2
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f7fe fc01 	bl	80146bc <__any_on>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d0c2      	beq.n	8015e44 <__gethex+0x1a8>
 8015ebe:	f04f 0903 	mov.w	r9, #3
 8015ec2:	e7c1      	b.n	8015e48 <__gethex+0x1ac>
 8015ec4:	da09      	bge.n	8015eda <__gethex+0x23e>
 8015ec6:	1b75      	subs	r5, r6, r5
 8015ec8:	4621      	mov	r1, r4
 8015eca:	9801      	ldr	r0, [sp, #4]
 8015ecc:	462a      	mov	r2, r5
 8015ece:	f7fe f9bf 	bl	8014250 <__lshift>
 8015ed2:	1b7f      	subs	r7, r7, r5
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	f100 0a14 	add.w	sl, r0, #20
 8015eda:	f04f 0900 	mov.w	r9, #0
 8015ede:	e7b8      	b.n	8015e52 <__gethex+0x1b6>
 8015ee0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015ee4:	42bd      	cmp	r5, r7
 8015ee6:	dd6f      	ble.n	8015fc8 <__gethex+0x32c>
 8015ee8:	1bed      	subs	r5, r5, r7
 8015eea:	42ae      	cmp	r6, r5
 8015eec:	dc34      	bgt.n	8015f58 <__gethex+0x2bc>
 8015eee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ef2:	2b02      	cmp	r3, #2
 8015ef4:	d022      	beq.n	8015f3c <__gethex+0x2a0>
 8015ef6:	2b03      	cmp	r3, #3
 8015ef8:	d024      	beq.n	8015f44 <__gethex+0x2a8>
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d115      	bne.n	8015f2a <__gethex+0x28e>
 8015efe:	42ae      	cmp	r6, r5
 8015f00:	d113      	bne.n	8015f2a <__gethex+0x28e>
 8015f02:	2e01      	cmp	r6, #1
 8015f04:	d10b      	bne.n	8015f1e <__gethex+0x282>
 8015f06:	9a02      	ldr	r2, [sp, #8]
 8015f08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f0c:	6013      	str	r3, [r2, #0]
 8015f0e:	2301      	movs	r3, #1
 8015f10:	6123      	str	r3, [r4, #16]
 8015f12:	f8ca 3000 	str.w	r3, [sl]
 8015f16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f18:	2562      	movs	r5, #98	@ 0x62
 8015f1a:	601c      	str	r4, [r3, #0]
 8015f1c:	e73a      	b.n	8015d94 <__gethex+0xf8>
 8015f1e:	1e71      	subs	r1, r6, #1
 8015f20:	4620      	mov	r0, r4
 8015f22:	f7fe fbcb 	bl	80146bc <__any_on>
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d1ed      	bne.n	8015f06 <__gethex+0x26a>
 8015f2a:	9801      	ldr	r0, [sp, #4]
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	f7fd ff77 	bl	8013e20 <_Bfree>
 8015f32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f34:	2300      	movs	r3, #0
 8015f36:	6013      	str	r3, [r2, #0]
 8015f38:	2550      	movs	r5, #80	@ 0x50
 8015f3a:	e72b      	b.n	8015d94 <__gethex+0xf8>
 8015f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1f3      	bne.n	8015f2a <__gethex+0x28e>
 8015f42:	e7e0      	b.n	8015f06 <__gethex+0x26a>
 8015f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d1dd      	bne.n	8015f06 <__gethex+0x26a>
 8015f4a:	e7ee      	b.n	8015f2a <__gethex+0x28e>
 8015f4c:	08018448 	.word	0x08018448
 8015f50:	080182dd 	.word	0x080182dd
 8015f54:	080185ba 	.word	0x080185ba
 8015f58:	1e6f      	subs	r7, r5, #1
 8015f5a:	f1b9 0f00 	cmp.w	r9, #0
 8015f5e:	d130      	bne.n	8015fc2 <__gethex+0x326>
 8015f60:	b127      	cbz	r7, 8015f6c <__gethex+0x2d0>
 8015f62:	4639      	mov	r1, r7
 8015f64:	4620      	mov	r0, r4
 8015f66:	f7fe fba9 	bl	80146bc <__any_on>
 8015f6a:	4681      	mov	r9, r0
 8015f6c:	117a      	asrs	r2, r7, #5
 8015f6e:	2301      	movs	r3, #1
 8015f70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015f74:	f007 071f 	and.w	r7, r7, #31
 8015f78:	40bb      	lsls	r3, r7
 8015f7a:	4213      	tst	r3, r2
 8015f7c:	4629      	mov	r1, r5
 8015f7e:	4620      	mov	r0, r4
 8015f80:	bf18      	it	ne
 8015f82:	f049 0902 	orrne.w	r9, r9, #2
 8015f86:	f7ff fe22 	bl	8015bce <rshift>
 8015f8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015f8e:	1b76      	subs	r6, r6, r5
 8015f90:	2502      	movs	r5, #2
 8015f92:	f1b9 0f00 	cmp.w	r9, #0
 8015f96:	d047      	beq.n	8016028 <__gethex+0x38c>
 8015f98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f9c:	2b02      	cmp	r3, #2
 8015f9e:	d015      	beq.n	8015fcc <__gethex+0x330>
 8015fa0:	2b03      	cmp	r3, #3
 8015fa2:	d017      	beq.n	8015fd4 <__gethex+0x338>
 8015fa4:	2b01      	cmp	r3, #1
 8015fa6:	d109      	bne.n	8015fbc <__gethex+0x320>
 8015fa8:	f019 0f02 	tst.w	r9, #2
 8015fac:	d006      	beq.n	8015fbc <__gethex+0x320>
 8015fae:	f8da 3000 	ldr.w	r3, [sl]
 8015fb2:	ea49 0903 	orr.w	r9, r9, r3
 8015fb6:	f019 0f01 	tst.w	r9, #1
 8015fba:	d10e      	bne.n	8015fda <__gethex+0x33e>
 8015fbc:	f045 0510 	orr.w	r5, r5, #16
 8015fc0:	e032      	b.n	8016028 <__gethex+0x38c>
 8015fc2:	f04f 0901 	mov.w	r9, #1
 8015fc6:	e7d1      	b.n	8015f6c <__gethex+0x2d0>
 8015fc8:	2501      	movs	r5, #1
 8015fca:	e7e2      	b.n	8015f92 <__gethex+0x2f6>
 8015fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fce:	f1c3 0301 	rsb	r3, r3, #1
 8015fd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d0f0      	beq.n	8015fbc <__gethex+0x320>
 8015fda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015fde:	f104 0314 	add.w	r3, r4, #20
 8015fe2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015fe6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015fea:	f04f 0c00 	mov.w	ip, #0
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ff4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015ff8:	d01b      	beq.n	8016032 <__gethex+0x396>
 8015ffa:	3201      	adds	r2, #1
 8015ffc:	6002      	str	r2, [r0, #0]
 8015ffe:	2d02      	cmp	r5, #2
 8016000:	f104 0314 	add.w	r3, r4, #20
 8016004:	d13c      	bne.n	8016080 <__gethex+0x3e4>
 8016006:	f8d8 2000 	ldr.w	r2, [r8]
 801600a:	3a01      	subs	r2, #1
 801600c:	42b2      	cmp	r2, r6
 801600e:	d109      	bne.n	8016024 <__gethex+0x388>
 8016010:	1171      	asrs	r1, r6, #5
 8016012:	2201      	movs	r2, #1
 8016014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016018:	f006 061f 	and.w	r6, r6, #31
 801601c:	fa02 f606 	lsl.w	r6, r2, r6
 8016020:	421e      	tst	r6, r3
 8016022:	d13a      	bne.n	801609a <__gethex+0x3fe>
 8016024:	f045 0520 	orr.w	r5, r5, #32
 8016028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801602a:	601c      	str	r4, [r3, #0]
 801602c:	9b02      	ldr	r3, [sp, #8]
 801602e:	601f      	str	r7, [r3, #0]
 8016030:	e6b0      	b.n	8015d94 <__gethex+0xf8>
 8016032:	4299      	cmp	r1, r3
 8016034:	f843 cc04 	str.w	ip, [r3, #-4]
 8016038:	d8d9      	bhi.n	8015fee <__gethex+0x352>
 801603a:	68a3      	ldr	r3, [r4, #8]
 801603c:	459b      	cmp	fp, r3
 801603e:	db17      	blt.n	8016070 <__gethex+0x3d4>
 8016040:	6861      	ldr	r1, [r4, #4]
 8016042:	9801      	ldr	r0, [sp, #4]
 8016044:	3101      	adds	r1, #1
 8016046:	f7fd feab 	bl	8013da0 <_Balloc>
 801604a:	4681      	mov	r9, r0
 801604c:	b918      	cbnz	r0, 8016056 <__gethex+0x3ba>
 801604e:	4b1a      	ldr	r3, [pc, #104]	@ (80160b8 <__gethex+0x41c>)
 8016050:	4602      	mov	r2, r0
 8016052:	2184      	movs	r1, #132	@ 0x84
 8016054:	e6c5      	b.n	8015de2 <__gethex+0x146>
 8016056:	6922      	ldr	r2, [r4, #16]
 8016058:	3202      	adds	r2, #2
 801605a:	f104 010c 	add.w	r1, r4, #12
 801605e:	0092      	lsls	r2, r2, #2
 8016060:	300c      	adds	r0, #12
 8016062:	f7fd f840 	bl	80130e6 <memcpy>
 8016066:	4621      	mov	r1, r4
 8016068:	9801      	ldr	r0, [sp, #4]
 801606a:	f7fd fed9 	bl	8013e20 <_Bfree>
 801606e:	464c      	mov	r4, r9
 8016070:	6923      	ldr	r3, [r4, #16]
 8016072:	1c5a      	adds	r2, r3, #1
 8016074:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016078:	6122      	str	r2, [r4, #16]
 801607a:	2201      	movs	r2, #1
 801607c:	615a      	str	r2, [r3, #20]
 801607e:	e7be      	b.n	8015ffe <__gethex+0x362>
 8016080:	6922      	ldr	r2, [r4, #16]
 8016082:	455a      	cmp	r2, fp
 8016084:	dd0b      	ble.n	801609e <__gethex+0x402>
 8016086:	2101      	movs	r1, #1
 8016088:	4620      	mov	r0, r4
 801608a:	f7ff fda0 	bl	8015bce <rshift>
 801608e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016092:	3701      	adds	r7, #1
 8016094:	42bb      	cmp	r3, r7
 8016096:	f6ff aee0 	blt.w	8015e5a <__gethex+0x1be>
 801609a:	2501      	movs	r5, #1
 801609c:	e7c2      	b.n	8016024 <__gethex+0x388>
 801609e:	f016 061f 	ands.w	r6, r6, #31
 80160a2:	d0fa      	beq.n	801609a <__gethex+0x3fe>
 80160a4:	4453      	add	r3, sl
 80160a6:	f1c6 0620 	rsb	r6, r6, #32
 80160aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80160ae:	f7fd ff69 	bl	8013f84 <__hi0bits>
 80160b2:	42b0      	cmp	r0, r6
 80160b4:	dbe7      	blt.n	8016086 <__gethex+0x3ea>
 80160b6:	e7f0      	b.n	801609a <__gethex+0x3fe>
 80160b8:	080182dd 	.word	0x080182dd

080160bc <L_shift>:
 80160bc:	f1c2 0208 	rsb	r2, r2, #8
 80160c0:	0092      	lsls	r2, r2, #2
 80160c2:	b570      	push	{r4, r5, r6, lr}
 80160c4:	f1c2 0620 	rsb	r6, r2, #32
 80160c8:	6843      	ldr	r3, [r0, #4]
 80160ca:	6804      	ldr	r4, [r0, #0]
 80160cc:	fa03 f506 	lsl.w	r5, r3, r6
 80160d0:	432c      	orrs	r4, r5
 80160d2:	40d3      	lsrs	r3, r2
 80160d4:	6004      	str	r4, [r0, #0]
 80160d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80160da:	4288      	cmp	r0, r1
 80160dc:	d3f4      	bcc.n	80160c8 <L_shift+0xc>
 80160de:	bd70      	pop	{r4, r5, r6, pc}

080160e0 <__match>:
 80160e0:	b530      	push	{r4, r5, lr}
 80160e2:	6803      	ldr	r3, [r0, #0]
 80160e4:	3301      	adds	r3, #1
 80160e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160ea:	b914      	cbnz	r4, 80160f2 <__match+0x12>
 80160ec:	6003      	str	r3, [r0, #0]
 80160ee:	2001      	movs	r0, #1
 80160f0:	bd30      	pop	{r4, r5, pc}
 80160f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80160fa:	2d19      	cmp	r5, #25
 80160fc:	bf98      	it	ls
 80160fe:	3220      	addls	r2, #32
 8016100:	42a2      	cmp	r2, r4
 8016102:	d0f0      	beq.n	80160e6 <__match+0x6>
 8016104:	2000      	movs	r0, #0
 8016106:	e7f3      	b.n	80160f0 <__match+0x10>

08016108 <__hexnan>:
 8016108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801610c:	680b      	ldr	r3, [r1, #0]
 801610e:	6801      	ldr	r1, [r0, #0]
 8016110:	115e      	asrs	r6, r3, #5
 8016112:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016116:	f013 031f 	ands.w	r3, r3, #31
 801611a:	b087      	sub	sp, #28
 801611c:	bf18      	it	ne
 801611e:	3604      	addne	r6, #4
 8016120:	2500      	movs	r5, #0
 8016122:	1f37      	subs	r7, r6, #4
 8016124:	4682      	mov	sl, r0
 8016126:	4690      	mov	r8, r2
 8016128:	9301      	str	r3, [sp, #4]
 801612a:	f846 5c04 	str.w	r5, [r6, #-4]
 801612e:	46b9      	mov	r9, r7
 8016130:	463c      	mov	r4, r7
 8016132:	9502      	str	r5, [sp, #8]
 8016134:	46ab      	mov	fp, r5
 8016136:	784a      	ldrb	r2, [r1, #1]
 8016138:	1c4b      	adds	r3, r1, #1
 801613a:	9303      	str	r3, [sp, #12]
 801613c:	b342      	cbz	r2, 8016190 <__hexnan+0x88>
 801613e:	4610      	mov	r0, r2
 8016140:	9105      	str	r1, [sp, #20]
 8016142:	9204      	str	r2, [sp, #16]
 8016144:	f7ff fd95 	bl	8015c72 <__hexdig_fun>
 8016148:	2800      	cmp	r0, #0
 801614a:	d151      	bne.n	80161f0 <__hexnan+0xe8>
 801614c:	9a04      	ldr	r2, [sp, #16]
 801614e:	9905      	ldr	r1, [sp, #20]
 8016150:	2a20      	cmp	r2, #32
 8016152:	d818      	bhi.n	8016186 <__hexnan+0x7e>
 8016154:	9b02      	ldr	r3, [sp, #8]
 8016156:	459b      	cmp	fp, r3
 8016158:	dd13      	ble.n	8016182 <__hexnan+0x7a>
 801615a:	454c      	cmp	r4, r9
 801615c:	d206      	bcs.n	801616c <__hexnan+0x64>
 801615e:	2d07      	cmp	r5, #7
 8016160:	dc04      	bgt.n	801616c <__hexnan+0x64>
 8016162:	462a      	mov	r2, r5
 8016164:	4649      	mov	r1, r9
 8016166:	4620      	mov	r0, r4
 8016168:	f7ff ffa8 	bl	80160bc <L_shift>
 801616c:	4544      	cmp	r4, r8
 801616e:	d952      	bls.n	8016216 <__hexnan+0x10e>
 8016170:	2300      	movs	r3, #0
 8016172:	f1a4 0904 	sub.w	r9, r4, #4
 8016176:	f844 3c04 	str.w	r3, [r4, #-4]
 801617a:	f8cd b008 	str.w	fp, [sp, #8]
 801617e:	464c      	mov	r4, r9
 8016180:	461d      	mov	r5, r3
 8016182:	9903      	ldr	r1, [sp, #12]
 8016184:	e7d7      	b.n	8016136 <__hexnan+0x2e>
 8016186:	2a29      	cmp	r2, #41	@ 0x29
 8016188:	d157      	bne.n	801623a <__hexnan+0x132>
 801618a:	3102      	adds	r1, #2
 801618c:	f8ca 1000 	str.w	r1, [sl]
 8016190:	f1bb 0f00 	cmp.w	fp, #0
 8016194:	d051      	beq.n	801623a <__hexnan+0x132>
 8016196:	454c      	cmp	r4, r9
 8016198:	d206      	bcs.n	80161a8 <__hexnan+0xa0>
 801619a:	2d07      	cmp	r5, #7
 801619c:	dc04      	bgt.n	80161a8 <__hexnan+0xa0>
 801619e:	462a      	mov	r2, r5
 80161a0:	4649      	mov	r1, r9
 80161a2:	4620      	mov	r0, r4
 80161a4:	f7ff ff8a 	bl	80160bc <L_shift>
 80161a8:	4544      	cmp	r4, r8
 80161aa:	d936      	bls.n	801621a <__hexnan+0x112>
 80161ac:	f1a8 0204 	sub.w	r2, r8, #4
 80161b0:	4623      	mov	r3, r4
 80161b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80161b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80161ba:	429f      	cmp	r7, r3
 80161bc:	d2f9      	bcs.n	80161b2 <__hexnan+0xaa>
 80161be:	1b3b      	subs	r3, r7, r4
 80161c0:	f023 0303 	bic.w	r3, r3, #3
 80161c4:	3304      	adds	r3, #4
 80161c6:	3401      	adds	r4, #1
 80161c8:	3e03      	subs	r6, #3
 80161ca:	42b4      	cmp	r4, r6
 80161cc:	bf88      	it	hi
 80161ce:	2304      	movhi	r3, #4
 80161d0:	4443      	add	r3, r8
 80161d2:	2200      	movs	r2, #0
 80161d4:	f843 2b04 	str.w	r2, [r3], #4
 80161d8:	429f      	cmp	r7, r3
 80161da:	d2fb      	bcs.n	80161d4 <__hexnan+0xcc>
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	b91b      	cbnz	r3, 80161e8 <__hexnan+0xe0>
 80161e0:	4547      	cmp	r7, r8
 80161e2:	d128      	bne.n	8016236 <__hexnan+0x12e>
 80161e4:	2301      	movs	r3, #1
 80161e6:	603b      	str	r3, [r7, #0]
 80161e8:	2005      	movs	r0, #5
 80161ea:	b007      	add	sp, #28
 80161ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f0:	3501      	adds	r5, #1
 80161f2:	2d08      	cmp	r5, #8
 80161f4:	f10b 0b01 	add.w	fp, fp, #1
 80161f8:	dd06      	ble.n	8016208 <__hexnan+0x100>
 80161fa:	4544      	cmp	r4, r8
 80161fc:	d9c1      	bls.n	8016182 <__hexnan+0x7a>
 80161fe:	2300      	movs	r3, #0
 8016200:	f844 3c04 	str.w	r3, [r4, #-4]
 8016204:	2501      	movs	r5, #1
 8016206:	3c04      	subs	r4, #4
 8016208:	6822      	ldr	r2, [r4, #0]
 801620a:	f000 000f 	and.w	r0, r0, #15
 801620e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016212:	6020      	str	r0, [r4, #0]
 8016214:	e7b5      	b.n	8016182 <__hexnan+0x7a>
 8016216:	2508      	movs	r5, #8
 8016218:	e7b3      	b.n	8016182 <__hexnan+0x7a>
 801621a:	9b01      	ldr	r3, [sp, #4]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d0dd      	beq.n	80161dc <__hexnan+0xd4>
 8016220:	f1c3 0320 	rsb	r3, r3, #32
 8016224:	f04f 32ff 	mov.w	r2, #4294967295
 8016228:	40da      	lsrs	r2, r3
 801622a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801622e:	4013      	ands	r3, r2
 8016230:	f846 3c04 	str.w	r3, [r6, #-4]
 8016234:	e7d2      	b.n	80161dc <__hexnan+0xd4>
 8016236:	3f04      	subs	r7, #4
 8016238:	e7d0      	b.n	80161dc <__hexnan+0xd4>
 801623a:	2004      	movs	r0, #4
 801623c:	e7d5      	b.n	80161ea <__hexnan+0xe2>

0801623e <__ascii_mbtowc>:
 801623e:	b082      	sub	sp, #8
 8016240:	b901      	cbnz	r1, 8016244 <__ascii_mbtowc+0x6>
 8016242:	a901      	add	r1, sp, #4
 8016244:	b142      	cbz	r2, 8016258 <__ascii_mbtowc+0x1a>
 8016246:	b14b      	cbz	r3, 801625c <__ascii_mbtowc+0x1e>
 8016248:	7813      	ldrb	r3, [r2, #0]
 801624a:	600b      	str	r3, [r1, #0]
 801624c:	7812      	ldrb	r2, [r2, #0]
 801624e:	1e10      	subs	r0, r2, #0
 8016250:	bf18      	it	ne
 8016252:	2001      	movne	r0, #1
 8016254:	b002      	add	sp, #8
 8016256:	4770      	bx	lr
 8016258:	4610      	mov	r0, r2
 801625a:	e7fb      	b.n	8016254 <__ascii_mbtowc+0x16>
 801625c:	f06f 0001 	mvn.w	r0, #1
 8016260:	e7f8      	b.n	8016254 <__ascii_mbtowc+0x16>

08016262 <__ascii_wctomb>:
 8016262:	4603      	mov	r3, r0
 8016264:	4608      	mov	r0, r1
 8016266:	b141      	cbz	r1, 801627a <__ascii_wctomb+0x18>
 8016268:	2aff      	cmp	r2, #255	@ 0xff
 801626a:	d904      	bls.n	8016276 <__ascii_wctomb+0x14>
 801626c:	228a      	movs	r2, #138	@ 0x8a
 801626e:	601a      	str	r2, [r3, #0]
 8016270:	f04f 30ff 	mov.w	r0, #4294967295
 8016274:	4770      	bx	lr
 8016276:	700a      	strb	r2, [r1, #0]
 8016278:	2001      	movs	r0, #1
 801627a:	4770      	bx	lr

0801627c <_raise_r>:
 801627c:	291f      	cmp	r1, #31
 801627e:	b538      	push	{r3, r4, r5, lr}
 8016280:	4605      	mov	r5, r0
 8016282:	460c      	mov	r4, r1
 8016284:	d904      	bls.n	8016290 <_raise_r+0x14>
 8016286:	2316      	movs	r3, #22
 8016288:	6003      	str	r3, [r0, #0]
 801628a:	f04f 30ff 	mov.w	r0, #4294967295
 801628e:	bd38      	pop	{r3, r4, r5, pc}
 8016290:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016292:	b112      	cbz	r2, 801629a <_raise_r+0x1e>
 8016294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016298:	b94b      	cbnz	r3, 80162ae <_raise_r+0x32>
 801629a:	4628      	mov	r0, r5
 801629c:	f000 f830 	bl	8016300 <_getpid_r>
 80162a0:	4622      	mov	r2, r4
 80162a2:	4601      	mov	r1, r0
 80162a4:	4628      	mov	r0, r5
 80162a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80162aa:	f000 b817 	b.w	80162dc <_kill_r>
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	d00a      	beq.n	80162c8 <_raise_r+0x4c>
 80162b2:	1c59      	adds	r1, r3, #1
 80162b4:	d103      	bne.n	80162be <_raise_r+0x42>
 80162b6:	2316      	movs	r3, #22
 80162b8:	6003      	str	r3, [r0, #0]
 80162ba:	2001      	movs	r0, #1
 80162bc:	e7e7      	b.n	801628e <_raise_r+0x12>
 80162be:	2100      	movs	r1, #0
 80162c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80162c4:	4620      	mov	r0, r4
 80162c6:	4798      	blx	r3
 80162c8:	2000      	movs	r0, #0
 80162ca:	e7e0      	b.n	801628e <_raise_r+0x12>

080162cc <raise>:
 80162cc:	4b02      	ldr	r3, [pc, #8]	@ (80162d8 <raise+0xc>)
 80162ce:	4601      	mov	r1, r0
 80162d0:	6818      	ldr	r0, [r3, #0]
 80162d2:	f7ff bfd3 	b.w	801627c <_raise_r>
 80162d6:	bf00      	nop
 80162d8:	24000bb8 	.word	0x24000bb8

080162dc <_kill_r>:
 80162dc:	b538      	push	{r3, r4, r5, lr}
 80162de:	4d07      	ldr	r5, [pc, #28]	@ (80162fc <_kill_r+0x20>)
 80162e0:	2300      	movs	r3, #0
 80162e2:	4604      	mov	r4, r0
 80162e4:	4608      	mov	r0, r1
 80162e6:	4611      	mov	r1, r2
 80162e8:	602b      	str	r3, [r5, #0]
 80162ea:	f7ec f864 	bl	80023b6 <_kill>
 80162ee:	1c43      	adds	r3, r0, #1
 80162f0:	d102      	bne.n	80162f8 <_kill_r+0x1c>
 80162f2:	682b      	ldr	r3, [r5, #0]
 80162f4:	b103      	cbz	r3, 80162f8 <_kill_r+0x1c>
 80162f6:	6023      	str	r3, [r4, #0]
 80162f8:	bd38      	pop	{r3, r4, r5, pc}
 80162fa:	bf00      	nop
 80162fc:	24009f54 	.word	0x24009f54

08016300 <_getpid_r>:
 8016300:	f7ec b851 	b.w	80023a6 <_getpid>

08016304 <expf>:
 8016304:	ee10 2a10 	vmov	r2, s0
 8016308:	f240 412a 	movw	r1, #1066	@ 0x42a
 801630c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8016310:	428b      	cmp	r3, r1
 8016312:	b430      	push	{r4, r5}
 8016314:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016318:	d92a      	bls.n	8016370 <expf+0x6c>
 801631a:	f512 0f00 	cmn.w	r2, #8388608	@ 0x800000
 801631e:	d058      	beq.n	80163d2 <expf+0xce>
 8016320:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8016324:	d303      	bcc.n	801632e <expf+0x2a>
 8016326:	ee30 0a00 	vadd.f32	s0, s0, s0
 801632a:	bc30      	pop	{r4, r5}
 801632c:	4770      	bx	lr
 801632e:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80163d8 <expf+0xd4>
 8016332:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801633a:	dd03      	ble.n	8016344 <expf+0x40>
 801633c:	bc30      	pop	{r4, r5}
 801633e:	2000      	movs	r0, #0
 8016340:	f000 b87a 	b.w	8016438 <__math_oflowf>
 8016344:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80163dc <expf+0xd8>
 8016348:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016350:	d503      	bpl.n	801635a <expf+0x56>
 8016352:	bc30      	pop	{r4, r5}
 8016354:	2000      	movs	r0, #0
 8016356:	f000 b863 	b.w	8016420 <__math_uflowf>
 801635a:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80163e0 <expf+0xdc>
 801635e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016366:	d503      	bpl.n	8016370 <expf+0x6c>
 8016368:	bc30      	pop	{r4, r5}
 801636a:	2000      	movs	r0, #0
 801636c:	f000 b85e 	b.w	801642c <__math_may_uflowf>
 8016370:	4b1c      	ldr	r3, [pc, #112]	@ (80163e4 <expf+0xe0>)
 8016372:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016376:	ed93 5b4a 	vldr	d5, [r3, #296]	@ 0x128
 801637a:	ed93 4b48 	vldr	d4, [r3, #288]	@ 0x120
 801637e:	eeb0 7b44 	vmov.f64	d7, d4
 8016382:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016386:	ee17 0a10 	vmov	r0, s14
 801638a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801638e:	f000 021f 	and.w	r2, r0, #31
 8016392:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8016396:	ed93 5b4c 	vldr	d5, [r3, #304]	@ 0x130
 801639a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801639e:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
 80163a2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80163a6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80163aa:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80163ae:	684d      	ldr	r5, [r1, #4]
 80163b0:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
 80163b4:	2100      	movs	r1, #0
 80163b6:	190a      	adds	r2, r1, r4
 80163b8:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80163bc:	eea5 0b07 	vfma.f64	d0, d5, d7
 80163c0:	ec43 2b17 	vmov	d7, r2, r3
 80163c4:	eea6 0b04 	vfma.f64	d0, d6, d4
 80163c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80163cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80163d0:	e7ab      	b.n	801632a <expf+0x26>
 80163d2:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80163e8 <expf+0xe4>
 80163d6:	e7a8      	b.n	801632a <expf+0x26>
 80163d8:	42b17217 	.word	0x42b17217
 80163dc:	c2cff1b4 	.word	0xc2cff1b4
 80163e0:	c2ce8ecf 	.word	0xc2ce8ecf
 80163e4:	08018620 	.word	0x08018620
 80163e8:	00000000 	.word	0x00000000

080163ec <with_errnof>:
 80163ec:	b510      	push	{r4, lr}
 80163ee:	ed2d 8b02 	vpush	{d8}
 80163f2:	eeb0 8a40 	vmov.f32	s16, s0
 80163f6:	4604      	mov	r4, r0
 80163f8:	f7fc fe48 	bl	801308c <__errno>
 80163fc:	eeb0 0a48 	vmov.f32	s0, s16
 8016400:	ecbd 8b02 	vpop	{d8}
 8016404:	6004      	str	r4, [r0, #0]
 8016406:	bd10      	pop	{r4, pc}

08016408 <xflowf>:
 8016408:	b130      	cbz	r0, 8016418 <xflowf+0x10>
 801640a:	eef1 7a40 	vneg.f32	s15, s0
 801640e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016412:	2022      	movs	r0, #34	@ 0x22
 8016414:	f7ff bfea 	b.w	80163ec <with_errnof>
 8016418:	eef0 7a40 	vmov.f32	s15, s0
 801641c:	e7f7      	b.n	801640e <xflowf+0x6>
	...

08016420 <__math_uflowf>:
 8016420:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016428 <__math_uflowf+0x8>
 8016424:	f7ff bff0 	b.w	8016408 <xflowf>
 8016428:	10000000 	.word	0x10000000

0801642c <__math_may_uflowf>:
 801642c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016434 <__math_may_uflowf+0x8>
 8016430:	f7ff bfea 	b.w	8016408 <xflowf>
 8016434:	1a200000 	.word	0x1a200000

08016438 <__math_oflowf>:
 8016438:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8016440 <__math_oflowf+0x8>
 801643c:	f7ff bfe4 	b.w	8016408 <xflowf>
 8016440:	70000000 	.word	0x70000000

08016444 <_gettimeofday>:
 8016444:	4b02      	ldr	r3, [pc, #8]	@ (8016450 <_gettimeofday+0xc>)
 8016446:	2258      	movs	r2, #88	@ 0x58
 8016448:	601a      	str	r2, [r3, #0]
 801644a:	f04f 30ff 	mov.w	r0, #4294967295
 801644e:	4770      	bx	lr
 8016450:	24009f54 	.word	0x24009f54

08016454 <_init>:
 8016454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016456:	bf00      	nop
 8016458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801645a:	bc08      	pop	{r3}
 801645c:	469e      	mov	lr, r3
 801645e:	4770      	bx	lr

08016460 <_fini>:
 8016460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016462:	bf00      	nop
 8016464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016466:	bc08      	pop	{r3}
 8016468:	469e      	mov	lr, r3
 801646a:	4770      	bx	lr
