
DisplayTutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016414  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002370  080166b8  080166b8  000266b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08018a28  08018a28  00028a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08018a2c  08018a2c  00028a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000d80  24000000  08018a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000090a0  24000d80  080197b0  00030d80  2**5
                  ALLOC
  7 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030d80  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003b637  00000000  00000000  00030dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006897  00000000  00000000  0006c3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000029c8  00000000  00000000  00072c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002750  00000000  00000000  00075648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000d034  00000000  00000000  00077d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003cf98  00000000  00000000  00084dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001b8127  00000000  00000000  000c1d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000093  00000000  00000000  00279e8b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000c77c  00000000  00000000  00279f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         00000024  00000000  00000000  0028669c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000004e  00000000  00000000  002866c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000d80 	.word	0x24000d80
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801669c 	.word	0x0801669c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000d84 	.word	0x24000d84
 80002dc:	0801669c 	.word	0x0801669c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	f5ad 6d51 	sub.w	sp, sp, #3344	; 0xd10
 800077e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	
		//MX_USART3_UART_Init();

	  /* MPU Configuration--------------------------------------------------------*/
          MPU_Config();
 8000780:	f000 feae 	bl	80014e0 <MPU_Config>

	  /* Enable the CPU Cache */
	  CPU_CACHE_Enable();
 8000784:	f000 fdbe 	bl	8001304 <CPU_CACHE_Enable>
	  /* STM32H7xx HAL library initialization:
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 4
	       - Low Level Initialization
	     */
	  HAL_Init();
 8000788:	f005 fa4e 	bl	8005c28 <HAL_Init>

	  /* Configure the system clock to 400 MHz */
	  SystemClock_Config();
 800078c:	f000 fd24 	bl	80011d8 <SystemClock_Config>

	  /* Configure LED1 */
	  BSP_LED_Init(LED1);
 8000790:	2000      	movs	r0, #0
 8000792:	f002 fe07 	bl	80033a4 <BSP_LED_Init>

	  /* Configure User button */
	  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f002 fe7f 	bl	800349c <BSP_PB_Init>

	  /*##-1- LCD Initialization #################################################*/
	  /* Initialize the LCD */
	  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800079e:	2101      	movs	r1, #1
 80007a0:	2000      	movs	r0, #0
 80007a2:	f003 fb9f 	bl	8003ee4 <BSP_LCD_Init>
	  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80007a6:	48cb      	ldr	r0, [pc, #812]	; (8000ad4 <main+0x35c>)
 80007a8:	f000 ff7c 	bl	80016a4 <UTIL_LCD_SetFuncDriver>

	  /* Set Foreground Layer */
	  UTIL_LCD_SetLayer(0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 ffcf 	bl	8001750 <UTIL_LCD_SetLayer>

	  /* Clear the LCD Background layer */
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	f001 f8e1 	bl	800197c <UTIL_LCD_Clear>
	  uint32_t x_size, y_size;

	  BSP_LCD_GetXSize(0, &x_size);
 80007ba:	f607 43bc 	addw	r3, r7, #3260	; 0xcbc
 80007be:	4619      	mov	r1, r3
 80007c0:	2000      	movs	r0, #0
 80007c2:	f003 fd6b 	bl	800429c <BSP_LCD_GetXSize>
	  BSP_LCD_GetYSize(0, &y_size);
 80007c6:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80007ca:	4619      	mov	r1, r3
 80007cc:	2000      	movs	r0, #0
 80007ce:	f003 fd83 	bl	80042d8 <BSP_LCD_GetYSize>
	  hTSs->Width = x_size;
 80007d2:	4bc1      	ldr	r3, [pc, #772]	; (8000ad8 <main+0x360>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f8d7 2cbc 	ldr.w	r2, [r7, #3260]	; 0xcbc
 80007da:	601a      	str	r2, [r3, #0]
	  hTSs->Height = y_size;
 80007dc:	4bbe      	ldr	r3, [pc, #760]	; (8000ad8 <main+0x360>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8d7 2cb8 	ldr.w	r2, [r7, #3256]	; 0xcb8
 80007e4:	605a      	str	r2, [r3, #4]
	  hTSs->Orientation = TS_SWAP_XY;
 80007e6:	4bbc      	ldr	r3, [pc, #752]	; (8000ad8 <main+0x360>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2208      	movs	r2, #8
 80007ec:	609a      	str	r2, [r3, #8]
	  hTSs->Accuracy = 5;
 80007ee:	4bba      	ldr	r3, [pc, #744]	; (8000ad8 <main+0x360>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2205      	movs	r2, #5
 80007f4:	60da      	str	r2, [r3, #12]
	  /* Touchscreen initialization */
	  BSP_TS_Init(0, hTSs);
 80007f6:	4bb8      	ldr	r3, [pc, #736]	; (8000ad8 <main+0x360>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2000      	movs	r0, #0
 80007fe:	f004 fff5 	bl	80057ec <BSP_TS_Init>

	  srand(time(NULL));   // Initialization, should only be called once.
 8000802:	2000      	movs	r0, #0
 8000804:	f013 f8e4 	bl	80139d0 <time>
 8000808:	4602      	mov	r2, r0
 800080a:	460b      	mov	r3, r1
 800080c:	4610      	mov	r0, r2
 800080e:	4619      	mov	r1, r3
 8000810:	f012 fa20 	bl	8012c54 <srand>
	  HAL_IncTick();
 8000814:	f005 fa7a 	bl	8005d0c <HAL_IncTick>

	  UTIL_LCD_DisplayStringAt(x_size/2-50, y_size/2, (uint8_t *)"Press Me Onec", LEFT_MODE);
	  */

	  //DISPLAY MAIN LCD SCREEN
	  control_panel_set();
 8000818:	f000 fe0e 	bl	8001438 <control_panel_set>
	  //uint8_t num_press=0;

	  //uint8_t touch=0;

	  // X-CUBE-AI
	  MX_X_CUBE_AI_Init();	  
 800081c:	f00e f884 	bl	800e928 <MX_X_CUBE_AI_Init>

	  ai_float nn_input_data[NN_INPUT_IMAGE_HEIGHT][NN_INPUT_IMAGE_WIDTH];
	  ai_float nn_output_data[NUM_CLASSES];

	  pred_probType _1st_pred, _2nd_pred;
	  _1st_pred.prob = _2nd_pred.prob = 0.0;
 8000820:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000824:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8000828:	f04f 0200 	mov.w	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000832:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800083c:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8000840:	601a      	str	r2, [r3, #0]
	  char _1st_pred_str[10];
	  //char _2nd_pred_str[10];
	  char all_pred_str[50];

	  // Emtpy out nn input data and output prediction
	  mnist_game_reset(&nn_input_data, &_1st_pred, &_2nd_pred);
 8000842:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000846:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800084a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fdc6 	bl	80013e0 <mnist_game_reset>


	  /* Infinite loop */
	  while (1)
	  {
		  BSP_TS_GetState(0, &TS_State);
 8000854:	49a1      	ldr	r1, [pc, #644]	; (8000adc <main+0x364>)
 8000856:	2000      	movs	r0, #0
 8000858:	f005 f86e 	bl	8005938 <BSP_TS_GetState>
		  }
		  if(TS_State.TouchDetected==0){
			  touch=0;
		  }
		  */
		  if (TS_State.TouchDetected) {
 800085c:	4b9f      	ldr	r3, [pc, #636]	; (8000adc <main+0x364>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 834c 	beq.w	8000efe <main+0x786>
			  if (TS_State.TouchX > DRAW_IMG_X1 && TS_State.TouchX < DRAW_IMG_X2 && TS_State.TouchY > DRAW_IMG_Y1 && TS_State.TouchY < DRAW_IMG_Y2) {
 8000866:	4b9d      	ldr	r3, [pc, #628]	; (8000adc <main+0x364>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	f240 832b 	bls.w	8000ec6 <main+0x74e>
 8000870:	4b9a      	ldr	r3, [pc, #616]	; (8000adc <main+0x364>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2be5      	cmp	r3, #229	; 0xe5
 8000876:	f200 8326 	bhi.w	8000ec6 <main+0x74e>
 800087a:	4b98      	ldr	r3, [pc, #608]	; (8000adc <main+0x364>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	2b0a      	cmp	r3, #10
 8000880:	f240 8321 	bls.w	8000ec6 <main+0x74e>
 8000884:	4b95      	ldr	r3, [pc, #596]	; (8000adc <main+0x364>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	2be5      	cmp	r3, #229	; 0xe5
 800088a:	f200 831c 	bhi.w	8000ec6 <main+0x74e>
				  UTIL_LCD_FillCircle(TS_State.TouchX, TS_State.TouchY, 6, UTIL_LCD_COLOR_BLACK);
 800088e:	4b93      	ldr	r3, [pc, #588]	; (8000adc <main+0x364>)
 8000890:	6858      	ldr	r0, [r3, #4]
 8000892:	4b92      	ldr	r3, [pc, #584]	; (8000adc <main+0x364>)
 8000894:	6899      	ldr	r1, [r3, #8]
 8000896:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800089a:	2206      	movs	r2, #6
 800089c:	f001 fad6 	bl	8001e4c <UTIL_LCD_FillCircle>

				  // Smaller 28x28 image for NN
				  int x = TS_State.TouchX * ((float) NN_INPUT_IMAGE_WIDTH/LCD_INPUT_IMAGE_WIDTH);
 80008a0:	4b8e      	ldr	r3, [pc, #568]	; (8000adc <main+0x364>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ac:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8000ae0 <main+0x368>
 80008b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008b8:	ee17 3a90 	vmov	r3, s15
 80008bc:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
				  int y = TS_State.TouchY * ((float) NN_INPUT_IMAGE_HEIGHT/LCD_INPUT_IMAGE_HEIGHT);
 80008c0:	4b86      	ldr	r3, [pc, #536]	; (8000adc <main+0x364>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008cc:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8000ae0 <main+0x368>
 80008d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d8:	ee17 3a90 	vmov	r3, s15
 80008dc:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4

				  // Draw smaller representation of image (each dot is represented as 3x3 pixels)
				  UTIL_LCD_SetPixel(x + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y + 1, UTIL_LCD_COLOR_BLACK);
 80008e0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80008ea:	b298      	uxth	r0, r3
 80008ec:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3306      	adds	r3, #6
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80008fa:	4619      	mov	r1, r3
 80008fc:	f001 f80a 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y - 1, UTIL_LCD_COLOR_BLACK);
 8000900:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000904:	b29b      	uxth	r3, r3
 8000906:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800090a:	b298      	uxth	r0, r3
 800090c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000910:	b29b      	uxth	r3, r3
 8000912:	3304      	adds	r3, #4
 8000914:	b29b      	uxth	r3, r3
 8000916:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800091a:	4619      	mov	r1, r3
 800091c:	f000 fffa 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y, UTIL_LCD_COLOR_BLACK);
 8000920:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000924:	b29b      	uxth	r3, r3
 8000926:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800092a:	b298      	uxth	r0, r3
 800092c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000930:	b29b      	uxth	r3, r3
 8000932:	3305      	adds	r3, #5
 8000934:	b29b      	uxth	r3, r3
 8000936:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800093a:	4619      	mov	r1, r3
 800093c:	f000 ffea 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y, UTIL_LCD_COLOR_BLACK);
 8000940:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000944:	b29b      	uxth	r3, r3
 8000946:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800094a:	b298      	uxth	r0, r3
 800094c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000950:	b29b      	uxth	r3, r3
 8000952:	3305      	adds	r3, #5
 8000954:	b29b      	uxth	r3, r3
 8000956:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800095a:	4619      	mov	r1, r3
 800095c:	f000 ffda 	bl	8001914 <UTIL_LCD_SetPixel>

				  UTIL_LCD_SetPixel(x + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y, UTIL_LCD_COLOR_BLACK);
 8000960:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000964:	b29b      	uxth	r3, r3
 8000966:	f203 13bf 	addw	r3, r3, #447	; 0x1bf
 800096a:	b298      	uxth	r0, r3
 800096c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000970:	b29b      	uxth	r3, r3
 8000972:	3305      	adds	r3, #5
 8000974:	b29b      	uxth	r3, r3
 8000976:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800097a:	4619      	mov	r1, r3
 800097c:	f000 ffca 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y + 1, UTIL_LCD_COLOR_BLACK);
 8000980:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000984:	b29b      	uxth	r3, r3
 8000986:	f203 13bf 	addw	r3, r3, #447	; 0x1bf
 800098a:	b298      	uxth	r0, r3
 800098c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000990:	b29b      	uxth	r3, r3
 8000992:	3306      	adds	r3, #6
 8000994:	b29b      	uxth	r3, r3
 8000996:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800099a:	4619      	mov	r1, r3
 800099c:	f000 ffba 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y - 1, UTIL_LCD_COLOR_BLACK);
 80009a0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	f203 13bf 	addw	r3, r3, #447	; 0x1bf
 80009aa:	b298      	uxth	r0, r3
 80009ac:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3304      	adds	r3, #4
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ba:	4619      	mov	r1, r3
 80009bc:	f000 ffaa 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y - 1, UTIL_LCD_COLOR_BLACK);
 80009c0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80009ca:	b298      	uxth	r0, r3
 80009cc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	3304      	adds	r3, #4
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009da:	4619      	mov	r1, r3
 80009dc:	f000 ff9a 	bl	8001914 <UTIL_LCD_SetPixel>
				  UTIL_LCD_SetPixel(x - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + y + 1, UTIL_LCD_COLOR_BLACK);
 80009e0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80009ea:	b298      	uxth	r0, r3
 80009ec:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	3306      	adds	r3, #6
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009fa:	4619      	mov	r1, r3
 80009fc:	f000 ff8a 	bl	8001914 <UTIL_LCD_SetPixel>
				  nn_input_data[y-1][x+1] = PXL_SET; // /2;
				  nn_input_data[y][x]     = PXL_SET;
				  */

				  // Use smaller representation of image as input to NN
				  ai_float sidePx = 0.99; //0.9
 8000a00:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <main+0x36c>)
 8000a02:	f507 624f 	add.w	r2, r7, #3312	; 0xcf0
 8000a06:	6013      	str	r3, [r2, #0]
				  ai_float sidePxCorner = 0.99;//0.6;
 8000a08:	4b36      	ldr	r3, [pc, #216]	; (8000ae4 <main+0x36c>)
 8000a0a:	f607 42ec 	addw	r2, r7, #3308	; 0xcec
 8000a0e:	6013      	str	r3, [r2, #0]
				  ai_float extraSidePx = 0.3;
 8000a10:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <main+0x370>)
 8000a12:	f607 42e8 	addw	r2, r7, #3304	; 0xce8
 8000a16:	6013      	str	r3, [r2, #0]
				  //ai_float extraSidePxBetween = 0.5;
				  //ai_float extraSidePxCorner = 0.4;
				  int maxX= (27 >= x+2) ? x+2 : 27;
 8000a18:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000a1c:	2b19      	cmp	r3, #25
 8000a1e:	bfa8      	it	ge
 8000a20:	2319      	movge	r3, #25
 8000a22:	3302      	adds	r3, #2
 8000a24:	f8c7 3ce4 	str.w	r3, [r7, #3300]	; 0xce4
				  int upX= (27 >= x+1) ? x+1 : 27;
 8000a28:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000a2c:	2b1a      	cmp	r3, #26
 8000a2e:	bfa8      	it	ge
 8000a30:	231a      	movge	r3, #26
 8000a32:	3301      	adds	r3, #1
 8000a34:	f8c7 3ce0 	str.w	r3, [r7, #3296]	; 0xce0
				  int minX= (0 <= x-2) ? x-2 : 0;
 8000a38:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	bfb8      	it	lt
 8000a40:	2302      	movlt	r3, #2
 8000a42:	3b02      	subs	r3, #2
 8000a44:	f8c7 3cdc 	str.w	r3, [r7, #3292]	; 0xcdc
				  int downX= (0 <= x-1) ? x-1 : 0;
 8000a48:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	bfb8      	it	lt
 8000a50:	2301      	movlt	r3, #1
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f8c7 3cd8 	str.w	r3, [r7, #3288]	; 0xcd8

				  int maxY= (27 >= y+2) ? y+2 : 27;
 8000a58:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000a5c:	2b19      	cmp	r3, #25
 8000a5e:	bfa8      	it	ge
 8000a60:	2319      	movge	r3, #25
 8000a62:	3302      	adds	r3, #2
 8000a64:	f8c7 3cd4 	str.w	r3, [r7, #3284]	; 0xcd4
				  int upY= (27 >= y+1) ? y+1 : 27;
 8000a68:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000a6c:	2b1a      	cmp	r3, #26
 8000a6e:	bfa8      	it	ge
 8000a70:	231a      	movge	r3, #26
 8000a72:	3301      	adds	r3, #1
 8000a74:	f8c7 3cd0 	str.w	r3, [r7, #3280]	; 0xcd0
				  int minY= (0 <= y-2) ? y-2 : 0;
 8000a78:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	bfb8      	it	lt
 8000a80:	2302      	movlt	r3, #2
 8000a82:	3b02      	subs	r3, #2
 8000a84:	f8c7 3ccc 	str.w	r3, [r7, #3276]	; 0xccc
				  int downY= (0 <= y-1) ? y-1 : 0;
 8000a88:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	bfb8      	it	lt
 8000a90:	2301      	movlt	r3, #1
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f8c7 3cc8 	str.w	r3, [r7, #3272]	; 0xcc8

				  nn_input_data[upY][upX] = (sidePxCorner > nn_input_data[upY][upX]) ? sidePxCorner : nn_input_data[upY][upX];//PXL_SET; // /2;
 8000a98:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000a9c:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000aa0:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	; 0xcd0
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	; 0xce0
 8000ab0:	4413      	add	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	edd3 7a00 	vldr	s15, [r3]
 8000aba:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000abe:	ed93 7a00 	vldr	s14, [r3]
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	dd0f      	ble.n	8000aec <main+0x374>
 8000acc:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	e01b      	b.n	8000b0c <main+0x394>
 8000ad4:	08018368 	.word	0x08018368
 8000ad8:	24000e80 	.word	0x24000e80
 8000adc:	24000e84 	.word	0x24000e84
 8000ae0:	3deeeeef 	.word	0x3deeeeef
 8000ae4:	3f7d70a4 	.word	0x3f7d70a4
 8000ae8:	3e99999a 	.word	0x3e99999a
 8000aec:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000af0:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000af4:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	; 0xcd0
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	; 0xce0
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000b10:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000b14:	f8d7 1cd0 	ldr.w	r1, [r7, #3280]	; 0xcd0
 8000b18:	460b      	mov	r3, r1
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	f8d7 1ce0 	ldr.w	r1, [r7, #3296]	; 0xce0
 8000b24:	440b      	add	r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4403      	add	r3, r0
 8000b2a:	601a      	str	r2, [r3, #0]
				  nn_input_data[downY][downX] = (sidePxCorner > nn_input_data[downY][downX]) ? sidePxCorner : nn_input_data[downY][downX];//PXL_SET; // /2;
 8000b2c:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000b30:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000b34:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8000b38:	4613      	mov	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	; 0xcd8
 8000b44:	4413      	add	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	edd3 7a00 	vldr	s15, [r3]
 8000b4e:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000b52:	ed93 7a00 	vldr	s14, [r3]
 8000b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5e:	dd03      	ble.n	8000b68 <main+0x3f0>
 8000b60:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	e00f      	b.n	8000b88 <main+0x410>
 8000b68:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000b6c:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000b70:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8000b74:	4613      	mov	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	; 0xcd8
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000b8c:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000b90:	f8d7 1cc8 	ldr.w	r1, [r7, #3272]	; 0xcc8
 8000b94:	460b      	mov	r3, r1
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	f8d7 1cd8 	ldr.w	r1, [r7, #3288]	; 0xcd8
 8000ba0:	440b      	add	r3, r1
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4403      	add	r3, r0
 8000ba6:	601a      	str	r2, [r3, #0]
				  nn_input_data[upY][x]   = (sidePx > nn_input_data[upY][x]) ? sidePx : nn_input_data[upY][x];//PXL_SET; // /2;
 8000ba8:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000bac:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000bb0:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	; 0xcd0
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	; 0xcf8
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	edd3 7a00 	vldr	s15, [r3]
 8000bca:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000bce:	ed93 7a00 	vldr	s14, [r3]
 8000bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bda:	dd03      	ble.n	8000be4 <main+0x46c>
 8000bdc:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	e00f      	b.n	8000c04 <main+0x48c>
 8000be4:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000be8:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000bec:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	; 0xcd0
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	; 0xcf8
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	440b      	add	r3, r1
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000c08:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000c0c:	f8d7 1cd0 	ldr.w	r1, [r7, #3280]	; 0xcd0
 8000c10:	460b      	mov	r3, r1
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	f8d7 1cf8 	ldr.w	r1, [r7, #3320]	; 0xcf8
 8000c1c:	440b      	add	r3, r1
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4403      	add	r3, r0
 8000c22:	601a      	str	r2, [r3, #0]
				  nn_input_data[downY][x]   = (sidePx > nn_input_data[downY][x]) ? sidePx : nn_input_data[downY][x];//PXL_SET; // /2;
 8000c24:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000c28:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000c2c:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	; 0xcf8
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000c4a:	ed93 7a00 	vldr	s14, [r3]
 8000c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	dd03      	ble.n	8000c60 <main+0x4e8>
 8000c58:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	e00f      	b.n	8000c80 <main+0x508>
 8000c60:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000c64:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000c68:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	; 0xcf8
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000c84:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000c88:	f8d7 1cc8 	ldr.w	r1, [r7, #3272]	; 0xcc8
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f8d7 1cf8 	ldr.w	r1, [r7, #3320]	; 0xcf8
 8000c98:	440b      	add	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4403      	add	r3, r0
 8000c9e:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][upX]   = (sidePx > nn_input_data[y][upX]) ? sidePx : nn_input_data[y][upX];//PXL_SET; // /2;
 8000ca0:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000ca4:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000ca8:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	; 0xce0
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000cc6:	ed93 7a00 	vldr	s14, [r3]
 8000cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	dd03      	ble.n	8000cdc <main+0x564>
 8000cd4:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	e00f      	b.n	8000cfc <main+0x584>
 8000cdc:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000ce0:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000ce4:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000ce8:	4613      	mov	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	; 0xce0
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000d00:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000d04:	f8d7 1cf4 	ldr.w	r1, [r7, #3316]	; 0xcf4
 8000d08:	460b      	mov	r3, r1
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	f8d7 1ce0 	ldr.w	r1, [r7, #3296]	; 0xce0
 8000d14:	440b      	add	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][downX]   = (sidePx > nn_input_data[y][downX]) ? sidePx : nn_input_data[y][downX];//PXL_SET; // /2;
 8000d1c:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000d20:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000d24:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000d28:	4613      	mov	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	; 0xcd8
 8000d34:	4413      	add	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	440b      	add	r3, r1
 8000d3a:	edd3 7a00 	vldr	s15, [r3]
 8000d3e:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000d42:	ed93 7a00 	vldr	s14, [r3]
 8000d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	dd03      	ble.n	8000d58 <main+0x5e0>
 8000d50:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	e00f      	b.n	8000d78 <main+0x600>
 8000d58:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000d5c:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000d60:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000d64:	4613      	mov	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	; 0xcd8
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000d7c:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000d80:	f8d7 1cf4 	ldr.w	r1, [r7, #3316]	; 0xcf4
 8000d84:	460b      	mov	r3, r1
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	f8d7 1cd8 	ldr.w	r1, [r7, #3288]	; 0xcd8
 8000d90:	440b      	add	r3, r1
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4403      	add	r3, r0
 8000d96:	601a      	str	r2, [r3, #0]
				  nn_input_data[upY][downX] = (sidePxCorner > nn_input_data[upY][downX]) ? sidePxCorner : nn_input_data[upY][downX];//PXL_SET; // /2;
 8000d98:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000d9c:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000da0:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	; 0xcd0
 8000da4:	4613      	mov	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	; 0xcd8
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000dbe:	ed93 7a00 	vldr	s14, [r3]
 8000dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	dd03      	ble.n	8000dd4 <main+0x65c>
 8000dcc:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	e00f      	b.n	8000df4 <main+0x67c>
 8000dd4:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000dd8:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000ddc:	f8d7 2cd0 	ldr.w	r2, [r7, #3280]	; 0xcd0
 8000de0:	4613      	mov	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	f8d7 2cd8 	ldr.w	r2, [r7, #3288]	; 0xcd8
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000df8:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000dfc:	f8d7 1cd0 	ldr.w	r1, [r7, #3280]	; 0xcd0
 8000e00:	460b      	mov	r3, r1
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	f8d7 1cd8 	ldr.w	r1, [r7, #3288]	; 0xcd8
 8000e0c:	440b      	add	r3, r1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4403      	add	r3, r0
 8000e12:	601a      	str	r2, [r3, #0]
				  nn_input_data[downY][upX] = (sidePxCorner > nn_input_data[downY][upX]) ? sidePxCorner : nn_input_data[downY][upX];//PXL_SET; // /2;
 8000e14:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000e18:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000e1c:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8000e20:	4613      	mov	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	; 0xce0
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000e3a:	ed93 7a00 	vldr	s14, [r3]
 8000e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e46:	dd03      	ble.n	8000e50 <main+0x6d8>
 8000e48:	f607 43ec 	addw	r3, r7, #3308	; 0xcec
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	e00f      	b.n	8000e70 <main+0x6f8>
 8000e50:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000e54:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000e58:	f8d7 2cc8 	ldr.w	r2, [r7, #3272]	; 0xcc8
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	f8d7 2ce0 	ldr.w	r2, [r7, #3296]	; 0xce0
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000e74:	f5a3 6049 	sub.w	r0, r3, #3216	; 0xc90
 8000e78:	f8d7 1cc8 	ldr.w	r1, [r7, #3272]	; 0xcc8
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	f8d7 1ce0 	ldr.w	r1, [r7, #3296]	; 0xce0
 8000e88:	440b      	add	r3, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][x]     = PXL_SET;
 8000e90:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000e94:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000e98:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f8d7 2cf8 	ldr.w	r2, [r7, #3320]	; 0xcf8
 8000ea8:	4413      	add	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000eb2:	601a      	str	r2, [r3, #0]
				  nn_input_data[y][maxX]   = (extraSidePx > nn_input_data[y][x+2]) ? extraSidePx : nn_input_data[y][x+2];//PXL_SET; // /2;
				  nn_input_data[y][minX]   = (extraSidePx > nn_input_data[y][x-2]) ? extraSidePx : nn_input_data[y][x-2];//PXL_SET; // /2;
				  */


				  printf("X = %d, Y = %d\r\n", TS_State.TouchX, TS_State.TouchY);
 8000eb4:	4bb4      	ldr	r3, [pc, #720]	; (8001188 <main+0xa10>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4ab3      	ldr	r2, [pc, #716]	; (8001188 <main+0xa10>)
 8000eba:	6892      	ldr	r2, [r2, #8]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	48b3      	ldr	r0, [pc, #716]	; (800118c <main+0xa14>)
 8000ec0:	f011 fe3a 	bl	8012b38 <iprintf>
			  if (TS_State.TouchX > DRAW_IMG_X1 && TS_State.TouchX < DRAW_IMG_X2 && TS_State.TouchY > DRAW_IMG_Y1 && TS_State.TouchY < DRAW_IMG_Y2) {
 8000ec4:	e01b      	b.n	8000efe <main+0x786>

			  }
			  else if (TS_State.TouchX > ERASE_BUTTON_X1 && TS_State.TouchX < ERASE_BUTTON_X2 && TS_State.TouchY > ERASE_BUTTON_Y1 && TS_State.TouchY < ERASE_BUTTON_Y2) {
 8000ec6:	4bb0      	ldr	r3, [pc, #704]	; (8001188 <main+0xa10>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2bf5      	cmp	r3, #245	; 0xf5
 8000ecc:	d917      	bls.n	8000efe <main+0x786>
 8000ece:	4bae      	ldr	r3, [pc, #696]	; (8001188 <main+0xa10>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8000ed6:	d812      	bhi.n	8000efe <main+0x786>
 8000ed8:	4bab      	ldr	r3, [pc, #684]	; (8001188 <main+0xa10>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b28      	cmp	r3, #40	; 0x28
 8000ede:	d90e      	bls.n	8000efe <main+0x786>
 8000ee0:	4ba9      	ldr	r3, [pc, #676]	; (8001188 <main+0xa10>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b45      	cmp	r3, #69	; 0x45
 8000ee6:	d80a      	bhi.n	8000efe <main+0x786>

				  // Reset user interface
				  control_panel_set();
 8000ee8:	f000 faa6 	bl	8001438 <control_panel_set>

				  // Emtpy out nn input data and output prediction
				  mnist_game_reset(&nn_input_data, &_1st_pred, &_2nd_pred);
 8000eec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ef0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ef4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fa71 	bl	80013e0 <mnist_game_reset>
			  }
		  }

		  HAL_Delay(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f004 ff24 	bl	8005d4c <HAL_Delay>

		  if(BSP_PB_GetState(BUTTON_USER)) {
 8000f04:	2000      	movs	r0, #0
 8000f06:	f002 fb3b 	bl	8003580 <BSP_PB_GetState>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f43f aca1 	beq.w	8000854 <main+0xdc>
			  /*
			  ai_float squashedInput[28*28];
			  int squashedCounter = 0;
			  */

			  int startX = 420;//350;
 8000f12:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8000f16:	f8c7 3cc4 	str.w	r3, [r7, #3268]	; 0xcc4
			  int startY = 5; //70;//136;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	f8c7 3cc0 	str.w	r3, [r7, #3264]	; 0xcc0
			  for (int i = 0; i < 28; i++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8000f26:	e03b      	b.n	8000fa0 <main+0x828>
				  for (int j = 0; j < 28; j++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8000f2e:	e02e      	b.n	8000f8e <main+0x816>
					  if (nn_input_data[i][j]) {
 8000f30:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000f34:	f5a3 6149 	sub.w	r1, r3, #3216	; 0xc90
 8000f38:	f8d7 2d04 	ldr.w	r2, [r7, #3332]	; 0xd04
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d013      	beq.n	8000f84 <main+0x80c>
						  UTIL_LCD_SetPixel(startX + j, startY + i, UTIL_LCD_COLOR_BLUE);
 8000f5c:	f8d7 3cc4 	ldr.w	r3, [r7, #3268]	; 0xcc4
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	f8d7 3cc0 	ldr.w	r3, [r7, #3264]	; 0xcc0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4a84      	ldr	r2, [pc, #528]	; (8001190 <main+0xa18>)
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f000 fcc8 	bl	8001914 <UTIL_LCD_SetPixel>
				  for (int j = 0; j < 28; j++) {
 8000f84:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8000f8e:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8000f92:	2b1b      	cmp	r3, #27
 8000f94:	ddcc      	ble.n	8000f30 <main+0x7b8>
			  for (int i = 0; i < 28; i++) {
 8000f96:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8000fa0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8000fa4:	2b1b      	cmp	r3, #27
 8000fa6:	ddbf      	ble.n	8000f28 <main+0x7b0>
			  }

			  MX_X_CUBE_AI_Process(nn_input_dataTEST, nn_output_dataTEST);
			  */

			  MX_X_CUBE_AI_Process(nn_input_data, nn_output_data);
 8000fa8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00d fcd8 	bl	800e968 <MX_X_CUBE_AI_Process>

			  // Get highest 2 predictions for drawn image/number

			  for(int i = 0; i < NUM_CLASSES; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8000fbe:	e098      	b.n	80010f2 <main+0x97a>
				  if(_1st_pred.prob < nn_output_data[i]) {
 8000fc0:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000fc4:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000fd0:	f6a3 42b8 	subw	r2, r3, #3256	; 0xcb8
 8000fd4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	d52a      	bpl.n	8001040 <main+0x8c8>
					  _2nd_pred.label = _1st_pred.label;
 8000fea:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000fee:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8000ff2:	791a      	ldrb	r2, [r3, #4]
 8000ff4:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8000ff8:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8000ffc:	711a      	strb	r2, [r3, #4]
					  _2nd_pred.prob = _1st_pred.prob;
 8000ffe:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001002:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800100c:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8001010:	601a      	str	r2, [r3, #0]

					  _1st_pred.prob = nn_output_data[i];
 8001012:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001016:	f6a3 42b8 	subw	r2, r3, #3256	; 0xcb8
 800101a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001028:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 800102c:	601a      	str	r2, [r3, #0]
					  _1st_pred.label = i;
 800102e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001032:	b2da      	uxtb	r2, r3
 8001034:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001038:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e02a      	b.n	8001096 <main+0x91e>

				  }
				  else if (_2nd_pred.prob < nn_output_data[i]) {
 8001040:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001044:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001050:	f6a3 42b8 	subw	r2, r3, #3256	; 0xcb8
 8001054:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d515      	bpl.n	8001096 <main+0x91e>
					  _2nd_pred.label = i;
 800106a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800106e:	b2da      	uxtb	r2, r3
 8001070:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001074:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8001078:	711a      	strb	r2, [r3, #4]
					  _2nd_pred.prob = nn_output_data[i];
 800107a:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800107e:	f6a3 42b8 	subw	r2, r3, #3256	; 0xcb8
 8001082:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001090:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8001094:	601a      	str	r2, [r3, #0]
				  }

				  sprintf(all_pred_str, "Napoved-%d : %f", i, nn_output_data[i]);
 8001096:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800109a:	f6a3 42b8 	subw	r2, r3, #3256	; 0xcb8
 800109e:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ae:	463b      	mov	r3, r7
 80010b0:	ed8d 7b00 	vstr	d7, [sp]
 80010b4:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
 80010b8:	4936      	ldr	r1, [pc, #216]	; (8001194 <main+0xa1c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f011 fe0e 	bl	8012cdc <siprintf>

				  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80010c0:	4833      	ldr	r0, [pc, #204]	; (8001190 <main+0xa18>)
 80010c2:	f000 fb63 	bl	800178c <UTIL_LCD_SetTextColor>
				  UTIL_LCD_SetFont(&Font16);
 80010c6:	4834      	ldr	r0, [pc, #208]	; (8001198 <main+0xa20>)
 80010c8:	f000 fb88 	bl	80017dc <UTIL_LCD_SetFont>
				  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fb70 	bl	80017b4 <UTIL_LCD_SetBackColor>
				  UTIL_LCD_DisplayStringAt(242, 80 + 16 * i, (uint8_t *) all_pred_str, LEFT_MODE);
 80010d4:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80010d8:	3305      	adds	r3, #5
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	463a      	mov	r2, r7
 80010e0:	2303      	movs	r3, #3
 80010e2:	20f2      	movs	r0, #242	; 0xf2
 80010e4:	f000 fc96 	bl	8001a14 <UTIL_LCD_DisplayStringAt>
			  for(int i = 0; i < NUM_CLASSES; i++) {
 80010e8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80010ec:	3301      	adds	r3, #1
 80010ee:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80010f2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	f77f af62 	ble.w	8000fc0 <main+0x848>
			  }
			  */


			  // Show results/predictions
			  printf("AI prva napoved: %f %d", _1st_pred.label, _1st_pred.prob);
 80010fc:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001100:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	4619      	mov	r1, r3
 8001108:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800110c:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001118:	ec53 2b17 	vmov	r2, r3, d7
 800111c:	481f      	ldr	r0, [pc, #124]	; (800119c <main+0xa24>)
 800111e:	f011 fd0b 	bl	8012b38 <iprintf>
			  printf("AI druga napoved: %f %d", _2nd_pred.label, _2nd_pred.prob);
 8001122:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001126:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 800112a:	791b      	ldrb	r3, [r3, #4]
 800112c:	4619      	mov	r1, r3
 800112e:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 8001132:	f6a3 43c8 	subw	r3, r3, #3272	; 0xcc8
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113e:	ec53 2b17 	vmov	r2, r3, d7
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <main+0xa28>)
 8001144:	f011 fcf8 	bl	8012b38 <iprintf>

			  sprintf(_1st_pred_str, "%d", _1st_pred.label);
 8001148:	f607 5308 	addw	r3, r7, #3336	; 0xd08
 800114c:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	461a      	mov	r2, r3
 8001154:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001158:	4912      	ldr	r1, [pc, #72]	; (80011a4 <main+0xa2c>)
 800115a:	4618      	mov	r0, r3
 800115c:	f011 fdbe 	bl	8012cdc <siprintf>

			  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <main+0xa30>)
 8001162:	f000 fb13 	bl	800178c <UTIL_LCD_SetTextColor>
			  UTIL_LCD_SetFont(&Font20);
 8001166:	4811      	ldr	r0, [pc, #68]	; (80011ac <main+0xa34>)
 8001168:	f000 fb38 	bl	80017dc <UTIL_LCD_SetFont>
			  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 fb20 	bl	80017b4 <UTIL_LCD_SetBackColor>
			  UTIL_LCD_DisplayStringAt(330, 8, (uint8_t *) _1st_pred_str, LEFT_MODE);
 8001174:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001178:	2303      	movs	r3, #3
 800117a:	2108      	movs	r1, #8
 800117c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001180:	f000 fc48 	bl	8001a14 <UTIL_LCD_DisplayStringAt>
		  BSP_TS_GetState(0, &TS_State);
 8001184:	f7ff bb66 	b.w	8000854 <main+0xdc>
 8001188:	24000e84 	.word	0x24000e84
 800118c:	080166c4 	.word	0x080166c4
 8001190:	ff0000ff 	.word	0xff0000ff
 8001194:	080166d8 	.word	0x080166d8
 8001198:	24000008 	.word	0x24000008
 800119c:	080166e8 	.word	0x080166e8
 80011a0:	08016700 	.word	0x08016700
 80011a4:	08016718 	.word	0x08016718
 80011a8:	ffff0000 	.word	0xffff0000
 80011ac:	24000000 	.word	0x24000000

080011b0 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <BSP_PB_Callback+0x24>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	24000d9c 	.word	0x24000d9c

080011d8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09e      	sub	sp, #120	; 0x78
 80011dc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011e4:	2002      	movs	r0, #2
 80011e6:	f008 fddf 	bl	8009da8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <SystemClock_Config+0x120>)
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	4a41      	ldr	r2, [pc, #260]	; (80012f8 <SystemClock_Config+0x120>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <SystemClock_Config+0x120>)
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <SystemClock_Config+0x124>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <SystemClock_Config+0x124>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <SystemClock_Config+0x124>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800121c:	bf00      	nop
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <SystemClock_Config+0x124>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800122a:	d1f8      	bne.n	800121e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	2302      	movs	r3, #2
 8001244:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8001246:	2305      	movs	r3, #5
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800124a:	23a0      	movs	r3, #160	; 0xa0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001252:	2302      	movs	r3, #2
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800125e:	2300      	movs	r3, #0
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001262:	2308      	movs	r3, #8
 8001264:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f009 fa86 	bl	800a77c <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001276:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800127e:	f000 f95c 	bl	800153a <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001282:	233f      	movs	r3, #63	; 0x3f
 8001284:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2303      	movs	r3, #3
 8001288:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800128e:	2308      	movs	r3, #8
 8001290:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001292:	2340      	movs	r3, #64	; 0x40
 8001294:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012a0:	2340      	movs	r3, #64	; 0x40
 80012a2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80012a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a8:	2104      	movs	r1, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f009 fec0 	bl	800b030 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80012b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80012be:	f000 f93c 	bl	800153a <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <SystemClock_Config+0x128>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <SystemClock_Config+0x128>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <SystemClock_Config+0x128>)
 80012d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SystemClock_Config+0x128>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <SystemClock_Config+0x128>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80012ec:	f004 fd5e 	bl	8005dac <HAL_EnableCompensationCell>
}
 80012f0:	bf00      	nop
 80012f2:	3778      	adds	r7, #120	; 0x78
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	58000400 	.word	0x58000400
 80012fc:	58024800 	.word	0x58024800
 8001300:	58024400 	.word	0x58024400

08001304 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d11b      	bne.n	800134e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001316:	f3bf 8f4f 	dsb	sy
}
 800131a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131c:	f3bf 8f6f 	isb	sy
}
 8001320:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 8001324:	2200      	movs	r2, #0
 8001326:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800132a:	f3bf 8f4f 	dsb	sy
}
 800132e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001330:	f3bf 8f6f 	isb	sy
}
 8001334:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a28      	ldr	r2, [pc, #160]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001342:	f3bf 8f4f 	dsb	sy
}
 8001346:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001348:	f3bf 8f6f 	isb	sy
}
 800134c:	e000      	b.n	8001350 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800134e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d138      	bne.n	80013ce <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001364:	f3bf 8f4f 	dsb	sy
}
 8001368:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 800136c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001370:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	0b5b      	lsrs	r3, r3, #13
 8001376:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800137a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	08db      	lsrs	r3, r3, #3
 8001380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001384:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800138e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001394:	4911      	ldr	r1, [pc, #68]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 8001396:	4313      	orrs	r3, r2
 8001398:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1ef      	bne.n	8001386 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e5      	bne.n	800137c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80013b0:	f3bf 8f4f 	dsb	sy
}
 80013b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <CPU_CACHE_Enable+0xd8>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013c2:	f3bf 8f4f 	dsb	sy
}
 80013c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c8:	f3bf 8f6f 	isb	sy
}
 80013cc:	e000      	b.n	80013d0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80013ce:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <mnist_game_reset>:

}

/* USER CODE BEGIN 4 */

void mnist_game_reset(ai_float** in_data, pred_probType * _1st_pred, pred_probType *_2nd_pred) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]

	memset(in_data, 0.0, sizeof(in_data[0][0]) * NN_INPUT_IMAGE_WIDTH * NN_INPUT_IMAGE_HEIGHT);
 80013ec:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 80013f0:	2100      	movs	r1, #0
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f010 fc70 	bl	8011cd8 <memset>

	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob = 0.0;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2200      	movs	r2, #0
 8001404:	711a      	strb	r2, [r3, #4]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	edc3 7a00 	vstr	s15, [r3]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001422:	edc7 7a00 	vstr	s15, [r7]
 8001426:	783b      	ldrb	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	711a      	strb	r2, [r3, #4]
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <control_panel_set>:
	BSP_LCD_DrawRect(2,2,237,237);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
}
*/

void control_panel_set() { // x = 480, y = 272
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af02      	add	r7, sp, #8
	UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f000 fa9b 	bl	800197c <UTIL_LCD_Clear>

	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8001446:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800144a:	f000 f99f 	bl	800178c <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetFont(&Font16);
 800144e:	4820      	ldr	r0, [pc, #128]	; (80014d0 <control_panel_set+0x98>)
 8001450:	f000 f9c4 	bl	80017dc <UTIL_LCD_SetFont>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f9ac 	bl	80017b4 <UTIL_LCD_SetBackColor>
	//UTIL_LCD_DisplayStringAt(5, 255, (uint8_t *) "Napoved:", LEFT_MODE);
	UTIL_LCD_DisplayStringAt(245, 10, (uint8_t *) "Napoved:", LEFT_MODE); // 245, 5
 800145c:	2303      	movs	r3, #3
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <control_panel_set+0x9c>)
 8001460:	210a      	movs	r1, #10
 8001462:	20f5      	movs	r0, #245	; 0xf5
 8001464:	f000 fad6 	bl	8001a14 <UTIL_LCD_DisplayStringAt>

	//UTIL_LCD_DrawRect(200, 250, 28, 28, UTIL_LCD_COLOR_BLACK);
	UTIL_LCD_DrawRect(447, 5, 28, 28, UTIL_LCD_COLOR_BLACK);
 8001468:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	231c      	movs	r3, #28
 8001470:	221c      	movs	r2, #28
 8001472:	2105      	movs	r1, #5
 8001474:	f240 10bf 	movw	r0, #447	; 0x1bf
 8001478:	f000 fb7a 	bl	8001b70 <UTIL_LCD_DrawRect>
	//UTIL_LCD_FillRect(5, 285, 230, 30, UTIL_LCD_COLOR_BLUE);
	UTIL_LCD_FillRect(245, 40, 230, 30, UTIL_LCD_COLOR_BLUE);
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <control_panel_set+0xa0>)
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	231e      	movs	r3, #30
 8001482:	22e6      	movs	r2, #230	; 0xe6
 8001484:	2128      	movs	r1, #40	; 0x28
 8001486:	20f5      	movs	r0, #245	; 0xf5
 8001488:	f000 fca6 	bl	8001dd8 <UTIL_LCD_FillRect>

	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f97c 	bl	800178c <UTIL_LCD_SetTextColor>
	UTIL_LCD_SetFont(&Font16);
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <control_panel_set+0x98>)
 8001496:	f000 f9a1 	bl	80017dc <UTIL_LCD_SetFont>
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <control_panel_set+0xa0>)
 800149c:	f000 f98a 	bl	80017b4 <UTIL_LCD_SetBackColor>
	//UTIL_LCD_DisplayStringAt(330, 291, (uint8_t*) "Brisi", LEFT_MODE);
	UTIL_LCD_DisplayStringAt(330, 50, (uint8_t*) "Brisi", LEFT_MODE);
 80014a0:	2303      	movs	r3, #3
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <control_panel_set+0xa4>)
 80014a4:	2132      	movs	r1, #50	; 0x32
 80014a6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80014aa:	f000 fab3 	bl	8001a14 <UTIL_LCD_DisplayStringAt>

	UTIL_LCD_DrawRect(2, 2, 237, 237, UTIL_LCD_COLOR_BLACK);
 80014ae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	23ed      	movs	r3, #237	; 0xed
 80014b6:	22ed      	movs	r2, #237	; 0xed
 80014b8:	2102      	movs	r1, #2
 80014ba:	2002      	movs	r0, #2
 80014bc:	f000 fb58 	bl	8001b70 <UTIL_LCD_DrawRect>
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 80014c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80014c4:	f000 f962 	bl	800178c <UTIL_LCD_SetTextColor>
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	24000008 	.word	0x24000008
 80014d4:	0801671c 	.word	0x0801671c
 80014d8:	ff0000ff 	.word	0xff0000ff
 80014dc:	08016728 	.word	0x08016728

080014e0 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014f2:	f004 fd7b 	bl	8005fec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80014fe:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001502:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8001504:	231a      	movs	r3, #26
 8001506:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001508:	2300      	movs	r3, #0
 800150a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800150c:	2300      	movs	r3, #0
 800150e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001510:	2303      	movs	r3, #3
 8001512:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800151c:	2301      	movs	r3, #1
 800151e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001524:	463b      	mov	r3, r7
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fd98 	bl	800605c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800152c:	2004      	movs	r0, #4
 800152e:	f004 fd75 	bl	800601c <HAL_MPU_Enable>

}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800153e:	b672      	cpsid	i
}
 8001540:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8001542:	2001      	movs	r0, #1
 8001544:	f001 ff8c 	bl	8003460 <BSP_LED_On>
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0xe>

0800154a <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db04      	blt.n	8001562 <_isatty+0x18>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	dc01      	bgt.n	8001562 <_isatty+0x18>
    return 1;
 800155e:	2301      	movs	r3, #1
 8001560:	e005      	b.n	800156e <_isatty+0x24>

  errno = EBADF;
 8001562:	f010 fb79 	bl	8011c58 <__errno>
 8001566:	4603      	mov	r3, r0
 8001568:	2209      	movs	r2, #9
 800156a:	601a      	str	r2, [r3, #0]
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_close>:

int _close(int fd) {
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db04      	blt.n	800158e <_close+0x18>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	dc01      	bgt.n	800158e <_close+0x18>
    return 0;
 800158a:	2300      	movs	r3, #0
 800158c:	e006      	b.n	800159c <_close+0x26>

  errno = EBADF;
 800158e:	f010 fb63 	bl	8011c58 <__errno>
 8001592:	4603      	mov	r3, r0
 8001594:	2209      	movs	r2, #9
 8001596:	601a      	str	r2, [r3, #0]
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80015b0:	f010 fb52 	bl	8011c58 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2209      	movs	r2, #9
 80015b8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_fstat>:



int _fstat(int fd, struct stat* st) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db08      	blt.n	80015e8 <_fstat+0x22>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	dc05      	bgt.n	80015e8 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e2:	605a      	str	r2, [r3, #4]
    return 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e005      	b.n	80015f4 <_fstat+0x2e>
  }

  errno = EBADF;
 80015e8:	f010 fb36 	bl	8011c58 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2209      	movs	r2, #9
 80015f0:	601a      	str	r2, [r3, #0]
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_read>:


int _read(int fd, char* ptr, int len) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d110      	bne.n	8001630 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <_read+0x4c>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	2201      	movs	r2, #1
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	f00b ffef 	bl	800d5fc <HAL_UART_Receive>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <_read+0x30>
      return 1;
 8001628:	2301      	movs	r3, #1
 800162a:	e008      	b.n	800163e <_read+0x42>
    else
      return EIO;
 800162c:	2305      	movs	r3, #5
 800162e:	e006      	b.n	800163e <_read+0x42>
  }
  errno = EBADF;
 8001630:	f010 fb12 	bl	8011c58 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	2209      	movs	r2, #9
 8001638:	601a      	str	r2, [r3, #0]
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	24000e90 	.word	0x24000e90

0800164c <_write>:

int _write(int fd, char* ptr, int len) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d002      	beq.n	8001664 <_write+0x18>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d111      	bne.n	8001688 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <_write+0x54>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b29a      	uxth	r2, r3
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	f00b ff35 	bl	800d4e0 <HAL_UART_Transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <_write+0x38>
      return len;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	e008      	b.n	8001696 <_write+0x4a>
    else
      return EIO;
 8001684:	2305      	movs	r3, #5
 8001686:	e006      	b.n	8001696 <_write+0x4a>
  }
  errno = EBADF;
 8001688:	f010 fae6 	bl	8011c58 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	2209      	movs	r2, #9
 8001690:	601a      	str	r2, [r3, #0]
  return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	24000e90 	.word	0x24000e90

080016a4 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016b2:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a20      	ldr	r2, [pc, #128]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016ba:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016c2:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4a1c      	ldr	r2, [pc, #112]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016ca:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016d2:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016da:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a16      	ldr	r2, [pc, #88]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016e2:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016ea:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016f2:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	4a10      	ldr	r2, [pc, #64]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 80016fa:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 8001702:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8001704:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <UTIL_LCD_SetFuncDriver+0x9c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <UTIL_LCD_SetFuncDriver+0x9c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <UTIL_LCD_SetFuncDriver+0xa0>)
 8001716:	4611      	mov	r1, r2
 8001718:	2000      	movs	r0, #0
 800171a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a09      	ldr	r2, [pc, #36]	; (8001748 <UTIL_LCD_SetFuncDriver+0xa4>)
 8001722:	4611      	mov	r1, r2
 8001724:	2000      	movs	r0, #0
 8001726:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <UTIL_LCD_SetFuncDriver+0x98>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <UTIL_LCD_SetFuncDriver+0xa8>)
 800172e:	4611      	mov	r1, r2
 8001730:	2000      	movs	r0, #0
 8001732:	4798      	blx	r3
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	24000ed4 	.word	0x24000ed4
 8001740:	24000e94 	.word	0x24000e94
 8001744:	24000ea8 	.word	0x24000ea8
 8001748:	24000eac 	.word	0x24000eac
 800174c:	24000eb0 	.word	0x24000eb0

08001750 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <UTIL_LCD_SetLayer+0x34>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00c      	beq.n	800177a <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <UTIL_LCD_SetLayer+0x34>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	4a08      	ldr	r2, [pc, #32]	; (8001788 <UTIL_LCD_SetLayer+0x38>)
 8001766:	6912      	ldr	r2, [r2, #16]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4610      	mov	r0, r2
 800176c:	4798      	blx	r3
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <UTIL_LCD_SetLayer+0x38>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60d3      	str	r3, [r2, #12]
    }
  }
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	24000ed4 	.word	0x24000ed4
 8001788:	24000e94 	.word	0x24000e94

0800178c <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <UTIL_LCD_SetTextColor+0x24>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <UTIL_LCD_SetTextColor+0x24>)
 800179a:	015b      	lsls	r3, r3, #5
 800179c:	4413      	add	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	24000e94 	.word	0x24000e94

080017b4 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <UTIL_LCD_SetBackColor+0x24>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <UTIL_LCD_SetBackColor+0x24>)
 80017c2:	015b      	lsls	r3, r3, #5
 80017c4:	4413      	add	r3, r2
 80017c6:	3304      	adds	r3, #4
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	24000e94 	.word	0x24000e94

080017dc <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <UTIL_LCD_SetFont+0x24>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <UTIL_LCD_SetFont+0x24>)
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	4413      	add	r3, r2
 80017ee:	3308      	adds	r3, #8
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	24000e94 	.word	0x24000e94

08001804 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <UTIL_LCD_FillRGBRect+0x30>)
 8001814:	685c      	ldr	r4, [r3, #4]
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <UTIL_LCD_FillRGBRect+0x34>)
 8001818:	6918      	ldr	r0, [r3, #16]
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	68f9      	ldr	r1, [r7, #12]
 8001828:	47a0      	blx	r4
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	24000ed4 	.word	0x24000ed4
 8001838:	24000e94 	.word	0x24000e94

0800183c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b087      	sub	sp, #28
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <UTIL_LCD_DrawHLine+0x64>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d118      	bne.n	8001884 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <UTIL_LCD_DrawHLine+0x68>)
 8001854:	689c      	ldr	r4, [r3, #8]
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <UTIL_LCD_DrawHLine+0x64>)
 8001858:	6918      	ldr	r0, [r3, #16]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	f003 021f 	and.w	r2, r3, #31
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	0a9b      	lsrs	r3, r3, #10
 8001866:	015b      	lsls	r3, r3, #5
 8001868:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800186c:	431a      	orrs	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	0cdb      	lsrs	r3, r3, #19
 8001872:	02db      	lsls	r3, r3, #11
 8001874:	b29b      	uxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001882:	e009      	b.n	8001898 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <UTIL_LCD_DrawHLine+0x68>)
 8001886:	689c      	ldr	r4, [r3, #8]
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <UTIL_LCD_DrawHLine+0x64>)
 800188a:	6918      	ldr	r0, [r3, #16]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	47a0      	blx	r4
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	24000e94 	.word	0x24000e94
 80018a4:	24000ed4 	.word	0x24000ed4

080018a8 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <UTIL_LCD_DrawVLine+0x64>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d118      	bne.n	80018f0 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <UTIL_LCD_DrawVLine+0x68>)
 80018c0:	68dc      	ldr	r4, [r3, #12]
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <UTIL_LCD_DrawVLine+0x64>)
 80018c4:	6918      	ldr	r0, [r3, #16]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	f003 021f 	and.w	r2, r3, #31
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	0a9b      	lsrs	r3, r3, #10
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80018d8:	431a      	orrs	r2, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	0cdb      	lsrs	r3, r3, #19
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	68f9      	ldr	r1, [r7, #12]
 80018ec:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80018ee:	e009      	b.n	8001904 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <UTIL_LCD_DrawVLine+0x68>)
 80018f2:	68dc      	ldr	r4, [r3, #12]
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <UTIL_LCD_DrawVLine+0x64>)
 80018f6:	6918      	ldr	r0, [r3, #16]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	47a0      	blx	r4
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bd90      	pop	{r4, r7, pc}
 800190c:	24000e94 	.word	0x24000e94
 8001910:	24000ed4 	.word	0x24000ed4

08001914 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001914:	b5b0      	push	{r4, r5, r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	603a      	str	r2, [r7, #0]
 800191e:	80fb      	strh	r3, [r7, #6]
 8001920:	460b      	mov	r3, r1
 8001922:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <UTIL_LCD_SetPixel+0x60>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d117      	bne.n	800195c <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <UTIL_LCD_SetPixel+0x64>)
 800192e:	699c      	ldr	r4, [r3, #24]
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <UTIL_LCD_SetPixel+0x60>)
 8001932:	6918      	ldr	r0, [r3, #16]
 8001934:	88f9      	ldrh	r1, [r7, #6]
 8001936:	88bd      	ldrh	r5, [r7, #4]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	0a9b      	lsrs	r3, r3, #10
 8001944:	015b      	lsls	r3, r3, #5
 8001946:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800194a:	431a      	orrs	r2, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	0cdb      	lsrs	r3, r3, #19
 8001950:	02db      	lsls	r3, r3, #11
 8001952:	b29b      	uxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	462a      	mov	r2, r5
 8001958:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800195a:	e007      	b.n	800196c <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <UTIL_LCD_SetPixel+0x64>)
 800195e:	699c      	ldr	r4, [r3, #24]
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <UTIL_LCD_SetPixel+0x60>)
 8001962:	6918      	ldr	r0, [r3, #16]
 8001964:	88f9      	ldrh	r1, [r7, #6]
 8001966:	88ba      	ldrh	r2, [r7, #4]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	47a0      	blx	r4
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bdb0      	pop	{r4, r5, r7, pc}
 8001974:	24000e94 	.word	0x24000e94
 8001978:	24000ed4 	.word	0x24000ed4

0800197c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af02      	add	r7, sp, #8
 8001982:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <UTIL_LCD_Clear+0x28>)
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <UTIL_LCD_Clear+0x28>)
 800198a:	6999      	ldr	r1, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	460b      	mov	r3, r1
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f000 fa1f 	bl	8001dd8 <UTIL_LCD_FillRect>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	24000e94 	.word	0x24000e94

080019a8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	4613      	mov	r3, r2
 80019b4:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <UTIL_LCD_DisplayChar+0x68>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <UTIL_LCD_DisplayChar+0x68>)
 80019bc:	015b      	lsls	r3, r3, #5
 80019be:	4413      	add	r3, r2
 80019c0:	3308      	adds	r3, #8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80019ca:	4911      	ldr	r1, [pc, #68]	; (8001a10 <UTIL_LCD_DisplayChar+0x68>)
 80019cc:	68c9      	ldr	r1, [r1, #12]
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <UTIL_LCD_DisplayChar+0x68>)
 80019d0:	0149      	lsls	r1, r1, #5
 80019d2:	4401      	add	r1, r0
 80019d4:	3108      	adds	r1, #8
 80019d6:	6809      	ldr	r1, [r1, #0]
 80019d8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80019da:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <UTIL_LCD_DisplayChar+0x68>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	480b      	ldr	r0, [pc, #44]	; (8001a10 <UTIL_LCD_DisplayChar+0x68>)
 80019e4:	015b      	lsls	r3, r3, #5
 80019e6:	4403      	add	r3, r0
 80019e8:	3308      	adds	r3, #8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	3307      	adds	r3, #7
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da00      	bge.n	80019f6 <UTIL_LCD_DisplayChar+0x4e>
 80019f4:	3307      	adds	r3, #7
 80019f6:	10db      	asrs	r3, r3, #3
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80019fc:	4413      	add	r3, r2
 80019fe:	461a      	mov	r2, r3
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 face 	bl	8001fa4 <DrawChar>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000e94 	.word	0x24000e94

08001a14 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001a36:	e002      	b.n	8001a3e <UTIL_LCD_DisplayStringAt+0x2a>
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	61ba      	str	r2, [r7, #24]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f6      	bne.n	8001a38 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001a50:	68d2      	ldr	r2, [r2, #12]
 8001a52:	4946      	ldr	r1, [pc, #280]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001a54:	0152      	lsls	r2, r2, #5
 8001a56:	440a      	add	r2, r1
 8001a58:	3208      	adds	r2, #8
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	8892      	ldrh	r2, [r2, #4]
 8001a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d018      	beq.n	8001a9c <UTIL_LCD_DisplayStringAt+0x88>
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	dc2a      	bgt.n	8001ac4 <UTIL_LCD_DisplayStringAt+0xb0>
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d002      	beq.n	8001a78 <UTIL_LCD_DisplayStringAt+0x64>
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d015      	beq.n	8001aa2 <UTIL_LCD_DisplayStringAt+0x8e>
 8001a76:	e025      	b.n	8001ac4 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001a80:	68d2      	ldr	r2, [r2, #12]
 8001a82:	493a      	ldr	r1, [pc, #232]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001a84:	0152      	lsls	r2, r2, #5
 8001a86:	440a      	add	r2, r1
 8001a88:	3208      	adds	r2, #8
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	8892      	ldrh	r2, [r2, #4]
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001a9a:	e016      	b.n	8001aca <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001aa0:	e013      	b.n	8001aca <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	4a30      	ldr	r2, [pc, #192]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001aaa:	68d2      	ldr	r2, [r2, #12]
 8001aac:	492f      	ldr	r1, [pc, #188]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001aae:	0152      	lsls	r2, r2, #5
 8001ab0:	440a      	add	r2, r1
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	8892      	ldrh	r2, [r2, #4]
 8001ab8:	fb03 f202 	mul.w	r2, r3, r2
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ac2:	e002      	b.n	8001aca <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ac8:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <UTIL_LCD_DisplayStringAt+0xc4>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad6:	d31b      	bcc.n	8001b10 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001adc:	e018      	b.n	8001b10 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ae8:	f7ff ff5e 	bl	80019a8 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001af2:	015b      	lsls	r3, r3, #5
 8001af4:	4413      	add	r3, r2
 8001af6:	3308      	adds	r3, #8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	889b      	ldrh	r3, [r3, #4]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	4413      	add	r3, r2
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
    i++;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001b20:	6959      	ldr	r1, [r3, #20]
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001b28:	015b      	lsls	r3, r3, #5
 8001b2a:	4403      	add	r3, r0
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	889b      	ldrh	r3, [r3, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	fb00 f303 	mul.w	r3, r0, r3
 8001b3a:	1acb      	subs	r3, r1, r3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001b40:	68c9      	ldr	r1, [r1, #12]
 8001b42:	480a      	ldr	r0, [pc, #40]	; (8001b6c <UTIL_LCD_DisplayStringAt+0x158>)
 8001b44:	0149      	lsls	r1, r1, #5
 8001b46:	4401      	add	r1, r0
 8001b48:	3108      	adds	r1, #8
 8001b4a:	6809      	ldr	r1, [r1, #0]
 8001b4c:	8889      	ldrh	r1, [r1, #4]
 8001b4e:	428b      	cmp	r3, r1
 8001b50:	bf2c      	ite	cs
 8001b52:	2301      	movcs	r3, #1
 8001b54:	2300      	movcc	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1be      	bne.n	8001ade <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	24000e94 	.word	0x24000e94

08001b70 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff fe59 	bl	800183c <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	1e59      	subs	r1, r3, #1
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fe50 	bl	800183c <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fe80 	bl	80018a8 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	f7ff fe77 	bl	80018a8 <UTIL_LCD_DrawVLine>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	f1c3 0303 	rsb	r3, r3, #3
 8001bda:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001be4:	e0eb      	b.n	8001dbe <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d22d      	bcs.n	8001c50 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	4b76      	ldr	r3, [pc, #472]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d20f      	bcs.n	8001c22 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7ff fe79 	bl	8001914 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad2      	subs	r2, r2, r3
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d20f      	bcs.n	8001c50 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	b298      	uxth	r0, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7ff fe62 	bl	8001914 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad2      	subs	r2, r2, r3
 8001c56:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d22d      	bcs.n	8001cba <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	441a      	add	r2, r3
 8001c64:	4b5b      	ldr	r3, [pc, #364]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d20f      	bcs.n	8001c8c <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b298      	uxth	r0, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7ff fe44 	bl	8001914 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	1ad2      	subs	r2, r2, r3
 8001c92:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d20f      	bcs.n	8001cba <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	b298      	uxth	r0, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff fe2d 	bl	8001914 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d22d      	bcs.n	8001d24 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	441a      	add	r2, r3
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20f      	bcs.n	8001cf6 <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	b298      	uxth	r0, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7ff fe0f 	bl	8001914 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	4b35      	ldr	r3, [pc, #212]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d20f      	bcs.n	8001d24 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7ff fdf8 	bl	8001914 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	441a      	add	r2, r3
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d22d      	bcs.n	8001d8e <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	441a      	add	r2, r3
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d20f      	bcs.n	8001d60 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	b298      	uxth	r0, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7ff fdda 	bl	8001914 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <UTIL_LCD_DrawCircle+0x210>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d20f      	bcs.n	8001d8e <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b298      	uxth	r0, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7ff fdc3 	bl	8001914 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da06      	bge.n	8001da2 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	009a      	lsls	r2, r3, #2
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3306      	adds	r3, #6
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e00a      	b.n	8001db8 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	009a      	lsls	r2, r3, #2
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4413      	add	r3, r2
 8001dae:	330a      	adds	r3, #10
 8001db0:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	f67f af0f 	bls.w	8001be6 <UTIL_LCD_DrawCircle+0x22>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	24000e94 	.word	0x24000e94

08001dd8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <UTIL_LCD_FillRect+0x6c>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d11a      	bne.n	8001e24 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <UTIL_LCD_FillRect+0x70>)
 8001df0:	691c      	ldr	r4, [r3, #16]
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <UTIL_LCD_FillRect+0x6c>)
 8001df4:	6918      	ldr	r0, [r3, #16]
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	f003 021f 	and.w	r2, r3, #31
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	0a9b      	lsrs	r3, r3, #10
 8001e02:	015b      	lsls	r3, r3, #5
 8001e04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	0cdb      	lsrs	r3, r3, #19
 8001e0e:	02db      	lsls	r3, r3, #11
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4313      	orrs	r3, r2
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	68f9      	ldr	r1, [r7, #12]
 8001e20:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001e22:	e00b      	b.n	8001e3c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <UTIL_LCD_FillRect+0x70>)
 8001e26:	691c      	ldr	r4, [r3, #16]
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <UTIL_LCD_FillRect+0x6c>)
 8001e2a:	6918      	ldr	r0, [r3, #16]
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	68f9      	ldr	r1, [r7, #12]
 8001e3a:	47a0      	blx	r4
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	24000e94 	.word	0x24000e94
 8001e48:	24000ed4 	.word	0x24000ed4

08001e4c <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	f1c3 0303 	rsb	r3, r3, #3
 8001e62:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001e6c:	e08b      	b.n	8001f86 <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d036      	beq.n	8001ee2 <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d31c      	bcc.n	8001eb6 <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	18d0      	adds	r0, r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005a      	lsls	r2, r3, #1
 8001e86:	68f9      	ldr	r1, [r7, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1acb      	subs	r3, r1, r3
 8001e8c:	441a      	add	r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	4601      	mov	r1, r0
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fcd2 	bl	800183c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad0      	subs	r0, r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005a      	lsls	r2, r3, #1
 8001ea2:	68f9      	ldr	r1, [r7, #12]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1acb      	subs	r3, r1, r3
 8001ea8:	441a      	add	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	4601      	mov	r1, r0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fcc4 	bl	800183c <UTIL_LCD_DrawHLine>
 8001eb4:	e015      	b.n	8001ee2 <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1ad0      	subs	r0, r2, r3
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	18d1      	adds	r1, r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005a      	lsls	r2, r3, #1
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f7ff fcb8 	bl	800183c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	1ad0      	subs	r0, r2, r3
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad1      	subs	r1, r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005a      	lsls	r2, r3, #1
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f7ff fcad 	bl	800183c <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d036      	beq.n	8001f56 <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d31c      	bcc.n	8001f2a <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad0      	subs	r0, r2, r3
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	005a      	lsls	r2, r3, #1
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	1acb      	subs	r3, r1, r3
 8001f00:	441a      	add	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	4601      	mov	r1, r0
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fc98 	bl	800183c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	18d0      	adds	r0, r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	005a      	lsls	r2, r3, #1
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	441a      	add	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4601      	mov	r1, r0
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fc8a 	bl	800183c <UTIL_LCD_DrawHLine>
 8001f28:	e015      	b.n	8001f56 <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	1ad0      	subs	r0, r2, r3
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad1      	subs	r1, r2, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	005a      	lsls	r2, r3, #1
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f7ff fc7e 	bl	800183c <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad0      	subs	r0, r2, r3
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	18d1      	adds	r1, r2, r3
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	005a      	lsls	r2, r3, #1
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f7ff fc73 	bl	800183c <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da06      	bge.n	8001f6a <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	009a      	lsls	r2, r3, #2
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4413      	add	r3, r2
 8001f64:	3306      	adds	r3, #6
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	e00a      	b.n	8001f80 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	009a      	lsls	r2, r3, #2
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	4413      	add	r3, r2
 8001f76:	330a      	adds	r3, #10
 8001f78:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	3301      	adds	r3, #1
 8001f84:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	f67f af6f 	bls.w	8001e6e <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7ff fe14 	bl	8001bc4 <UTIL_LCD_DrawCircle>
}
 8001f9c:	bf00      	nop
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0b2      	sub	sp, #200	; 0xc8
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001fbc:	4ba5      	ldr	r3, [pc, #660]	; (8002254 <DrawChar+0x2b0>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4aa4      	ldr	r2, [pc, #656]	; (8002254 <DrawChar+0x2b0>)
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	88db      	ldrh	r3, [r3, #6]
 8001fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <DrawChar+0x2b0>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a9f      	ldr	r2, [pc, #636]	; (8002254 <DrawChar+0x2b0>)
 8001fd6:	015b      	lsls	r3, r3, #5
 8001fd8:	4413      	add	r3, r2
 8001fda:	3308      	adds	r3, #8
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	889b      	ldrh	r3, [r3, #4]
 8001fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8001fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fe8:	3307      	adds	r3, #7
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001ffe:	e11c      	b.n	800223a <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8002000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002004:	3307      	adds	r3, #7
 8002006:	08db      	lsrs	r3, r3, #3
 8002008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8002018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800201c:	3307      	adds	r3, #7
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <DrawChar+0x86>
 8002024:	2b02      	cmp	r3, #2
 8002026:	d006      	beq.n	8002036 <DrawChar+0x92>
 8002028:	e011      	b.n	800204e <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800202a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8002034:	e01d      	b.n	8002072 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002042:	3201      	adds	r2, #1
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800204c:	e011      	b.n	8002072 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800204e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800205a:	3301      	adds	r3, #1
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4313      	orrs	r3, r2
 8002062:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002066:	3202      	adds	r2, #2
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8002070:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002072:	4b78      	ldr	r3, [pc, #480]	; (8002254 <DrawChar+0x2b0>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4a77      	ldr	r2, [pc, #476]	; (8002254 <DrawChar+0x2b0>)
 8002078:	015b      	lsls	r3, r3, #5
 800207a:	4413      	add	r3, r2
 800207c:	331c      	adds	r3, #28
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b02      	cmp	r3, #2
 8002082:	f040 808c 	bne.w	800219e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800208c:	e074      	b.n	8002178 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800208e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002092:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800209c:	4413      	add	r3, r2
 800209e:	3b01      	subs	r3, #1
 80020a0:	2201      	movs	r2, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d02d      	beq.n	800210e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80020b2:	4b68      	ldr	r3, [pc, #416]	; (8002254 <DrawChar+0x2b0>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4a67      	ldr	r2, [pc, #412]	; (8002254 <DrawChar+0x2b0>)
 80020b8:	015b      	lsls	r3, r3, #5
 80020ba:	4413      	add	r3, r2
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <DrawChar+0x2b0>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4961      	ldr	r1, [pc, #388]	; (8002254 <DrawChar+0x2b0>)
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	440b      	add	r3, r1
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0a9b      	lsrs	r3, r3, #10
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	015b      	lsls	r3, r3, #5
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <DrawChar+0x2b0>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	495a      	ldr	r1, [pc, #360]	; (8002254 <DrawChar+0x2b0>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	440b      	add	r3, r1
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0cdb      	lsrs	r3, r3, #19
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	02db      	lsls	r3, r3, #11
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	33c0      	adds	r3, #192	; 0xc0
 8002106:	443b      	add	r3, r7
 8002108:	f823 2c4c 	strh.w	r2, [r3, #-76]
 800210c:	e02f      	b.n	800216e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 800210e:	4b51      	ldr	r3, [pc, #324]	; (8002254 <DrawChar+0x2b0>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4a50      	ldr	r2, [pc, #320]	; (8002254 <DrawChar+0x2b0>)
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	b29b      	uxth	r3, r3
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	b29a      	uxth	r2, r3
 8002126:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <DrawChar+0x2b0>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	494a      	ldr	r1, [pc, #296]	; (8002254 <DrawChar+0x2b0>)
 800212c:	015b      	lsls	r3, r3, #5
 800212e:	440b      	add	r3, r1
 8002130:	3304      	adds	r3, #4
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0a9b      	lsrs	r3, r3, #10
 8002136:	b29b      	uxth	r3, r3
 8002138:	015b      	lsls	r3, r3, #5
 800213a:	b29b      	uxth	r3, r3
 800213c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002140:	b29b      	uxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <DrawChar+0x2b0>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4942      	ldr	r1, [pc, #264]	; (8002254 <DrawChar+0x2b0>)
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	440b      	add	r3, r1
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0cdb      	lsrs	r3, r3, #19
 8002156:	b29b      	uxth	r3, r3
 8002158:	02db      	lsls	r3, r3, #11
 800215a:	b29b      	uxth	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b29a      	uxth	r2, r3
 8002160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	33c0      	adds	r3, #192	; 0xc0
 8002168:	443b      	add	r3, r7
 800216a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800216e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002172:	3301      	adds	r3, #1
 8002174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002178:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800217c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002180:	429a      	cmp	r2, r3
 8002182:	d384      	bcc.n	800208e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	1c4b      	adds	r3, r1, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800218e:	2301      	movs	r3, #1
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff fb34 	bl	8001804 <UTIL_LCD_FillRGBRect>
 800219c:	e048      	b.n	8002230 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021a4:	e032      	b.n	800220c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 80021a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ae:	1ad2      	subs	r2, r2, r3
 80021b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021b4:	4413      	add	r3, r2
 80021b6:	3b01      	subs	r3, #1
 80021b8:	2201      	movs	r2, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80021ca:	4b22      	ldr	r3, [pc, #136]	; (8002254 <DrawChar+0x2b0>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	4a21      	ldr	r2, [pc, #132]	; (8002254 <DrawChar+0x2b0>)
 80021d0:	015b      	lsls	r3, r3, #5
 80021d2:	4413      	add	r3, r2
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	33c0      	adds	r3, #192	; 0xc0
 80021de:	443b      	add	r3, r7
 80021e0:	f843 2cac 	str.w	r2, [r3, #-172]
 80021e4:	e00d      	b.n	8002202 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <DrawChar+0x2b0>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <DrawChar+0x2b0>)
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	33c0      	adds	r3, #192	; 0xc0
 80021fc:	443b      	add	r3, r7
 80021fe:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8002202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002206:	3301      	adds	r3, #1
 8002208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800220c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002214:	429a      	cmp	r2, r3
 8002216:	d3c6      	bcc.n	80021a6 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	1c4b      	adds	r3, r1, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	f107 0214 	add.w	r2, r7, #20
 8002222:	2301      	movs	r3, #1
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff faea 	bl	8001804 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8002230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002234:	3301      	adds	r3, #1
 8002236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800223a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002242:	429a      	cmp	r2, r3
 8002244:	f4ff aedc 	bcc.w	8002000 <DrawChar+0x5c>
    }
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	37c0      	adds	r7, #192	; 0xc0
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	24000e94 	.word	0x24000e94

08002258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_MspInit+0x74>)
 8002260:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_MspInit+0x74>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_MspInit+0x74>)
 8002270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	210f      	movs	r1, #15
 8002280:	f06f 0001 	mvn.w	r0, #1
 8002284:	f003 fe7d 	bl	8005f82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_MspInit+0x74>)
 800228a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228e:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <HAL_MspInit+0x74>)
 8002290:	f043 0310 	orr.w	r3, r3, #16
 8002294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_MspInit+0x74>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022a6:	2308      	movs	r3, #8
 80022a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	4619      	mov	r1, r3
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <HAL_MspInit+0x78>)
 80022be:	f005 fed9 	bl	8008074 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	58024400 	.word	0x58024400
 80022d0:	58021000 	.word	0x58021000

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <NMI_Handler+0x4>

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <MemManage_Handler+0x4>

080022e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002304:	f003 fd02 	bl	8005d0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002308:	f00c f9d0 	bl	800e6ac <xTaskGetSchedulerState>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d001      	beq.n	8002316 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002312:	f00c fa39 	bl	800e788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}

0800231a <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 800231e:	2000      	movs	r0, #0
 8002320:	f001 f944 	bl	80035ac <BSP_PB_IRQHandler>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <TIM3_IRQHandler+0x10>)
 800232e:	f00a fecd 	bl	800d0cc <HAL_TIM_IRQHandler>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	24000e34 	.word	0x24000e34

0800233c <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <USART3_IRQHandler+0x10>)
 8002342:	f00b fa23 	bl	800d78c <HAL_UART_IRQHandler>
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000da0 	.word	0x24000da0

08002350 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8002354:	2000      	movs	r0, #0
 8002356:	f001 f943 	bl	80035e0 <BSP_AUDIO_OUT_IRQHandler>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <DMA2_Stream4_IRQHandler+0x14>)
 8002366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fc1e 	bl	8006bac <HAL_DMA_IRQHandler>
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	24000fb4 	.word	0x24000fb4

08002378 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 800237c:	2130      	movs	r1, #48	; 0x30
 800237e:	2001      	movs	r0, #1
 8002380:	f001 f942 	bl	8003608 <BSP_AUDIO_IN_IRQHandler>

}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 800238c:	2000      	movs	r0, #0
 800238e:	f003 f919 	bl	80055c4 <BSP_SDRAM_IRQHandler>

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}

08002396 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  return 1;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <_kill>:

int _kill(int pid, int sig)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b0:	f00f fc52 	bl	8011c58 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2216      	movs	r2, #22
 80023b8:	601a      	str	r2, [r3, #0]
  return -1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_exit>:

void _exit (int status)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023ce:	f04f 31ff 	mov.w	r1, #4294967295
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffe7 	bl	80023a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d8:	e7fe      	b.n	80023d8 <_exit+0x12>
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f00f fc24 	bl	8011c58 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	24080000 	.word	0x24080000
 800243c:	00000800 	.word	0x00000800
 8002440:	24000f00 	.word	0x24000f00
 8002444:	20000000 	.word	0x20000000

08002448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <SystemInit+0xe4>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	4a36      	ldr	r2, [pc, #216]	; (800252c <SystemInit+0xe4>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <SystemInit+0xe8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	2b06      	cmp	r3, #6
 8002466:	d807      	bhi.n	8002478 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <SystemInit+0xe8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 030f 	bic.w	r3, r3, #15
 8002470:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <SystemInit+0xe8>)
 8002472:	f043 0307 	orr.w	r3, r3, #7
 8002476:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <SystemInit+0xec>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <SystemInit+0xec>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <SystemInit+0xec>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <SystemInit+0xec>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4929      	ldr	r1, [pc, #164]	; (8002534 <SystemInit+0xec>)
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <SystemInit+0xf0>)
 8002492:	4013      	ands	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <SystemInit+0xe8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <SystemInit+0xe8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 030f 	bic.w	r3, r3, #15
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <SystemInit+0xe8>)
 80024ac:	f043 0307 	orr.w	r3, r3, #7
 80024b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <SystemInit+0xec>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <SystemInit+0xec>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <SystemInit+0xec>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <SystemInit+0xec>)
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <SystemInit+0xf4>)
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <SystemInit+0xec>)
 80024cc:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <SystemInit+0xf8>)
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <SystemInit+0xec>)
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <SystemInit+0xfc>)
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <SystemInit+0xec>)
 80024d8:	2200      	movs	r2, #0
 80024da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <SystemInit+0xec>)
 80024de:	4a19      	ldr	r2, [pc, #100]	; (8002544 <SystemInit+0xfc>)
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <SystemInit+0xec>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <SystemInit+0xec>)
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <SystemInit+0xfc>)
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <SystemInit+0xec>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <SystemInit+0xec>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <SystemInit+0xec>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <SystemInit+0xec>)
 8002502:	2200      	movs	r2, #0
 8002504:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <SystemInit+0x100>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <SystemInit+0x104>)
 800250c:	4013      	ands	r3, r2
 800250e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002512:	d202      	bcs.n	800251a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <SystemInit+0x108>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <SystemInit+0x10c>)
 800251c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002520:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000ed00 	.word	0xe000ed00
 8002530:	52002000 	.word	0x52002000
 8002534:	58024400 	.word	0x58024400
 8002538:	eaf6ed7f 	.word	0xeaf6ed7f
 800253c:	02020200 	.word	0x02020200
 8002540:	01ff0000 	.word	0x01ff0000
 8002544:	01010280 	.word	0x01010280
 8002548:	5c001000 	.word	0x5c001000
 800254c:	ffff0000 	.word	0xffff0000
 8002550:	51008108 	.word	0x51008108
 8002554:	52004000 	.word	0x52004000

08002558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002590 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800255c:	f7ff ff74 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002562:	490d      	ldr	r1, [pc, #52]	; (8002598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002568:	e002      	b.n	8002570 <LoopCopyDataInit>

0800256a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800256c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256e:	3304      	adds	r3, #4

08002570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002574:	d3f9      	bcc.n	800256a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002578:	4c0a      	ldr	r4, [pc, #40]	; (80025a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800257c:	e001      	b.n	8002582 <LoopFillZerobss>

0800257e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002580:	3204      	adds	r2, #4

08002582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002584:	d3fb      	bcc.n	800257e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002586:	f00f fb6d 	bl	8011c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258a:	f7fe f8f5 	bl	8000778 <main>
  bx  lr
 800258e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002590:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002594:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002598:	24000d80 	.word	0x24000d80
  ldr r2, =_sidata
 800259c:	08018a30 	.word	0x08018a30
  ldr r2, =_sbss
 80025a0:	24000d80 	.word	0x24000d80
  ldr r4, =_ebss
 80025a4:	24009e20 	.word	0x24009e20

080025a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a8:	e7fe      	b.n	80025a8 <ADC3_IRQHandler>
	...

080025ac <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e02c      	b.n	800261e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	891a      	ldrh	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <FT5336_RegisterBusIO+0x7c>)
 80025f8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	; (800262c <FT5336_RegisterBusIO+0x80>)
 80025fe:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4798      	blx	r3
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	e002      	b.n	800261e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8002618:	f04f 33ff 	mov.w	r3, #4294967295
 800261c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	08002a25 	.word	0x08002a25
 800262c:	08002a59 	.word	0x08002a59

08002630 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2205      	movs	r2, #5
 800264a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002652:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f44f 7288 	mov.w	r2, #272	; 0x110
 800265a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f987 	bl	800299a <FT5336_DisableIT>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d103      	bne.n	80026d0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80026d0:	68fb      	ldr	r3, [r7, #12]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f103 0218 	add.w	r2, r3, #24
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 fa25 	bl	8002b46 <ft5336_radian_value>
 80026fc:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f103 0218 	add.w	r2, r3, #24
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fa2b 	bl	8002b68 <ft5336_offset_left_right>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f103 0218 	add.w	r2, r3, #24
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f000 fa2e 	bl	8002b8a <ft5336_offset_up_down>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f103 0218 	add.w	r2, r3, #24
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 fa31 	bl	8002bac <ft5336_disatnce_left_right>
 800274a:	4602      	mov	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f103 0218 	add.w	r2, r3, #24
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	4610      	mov	r0, r2
 8002762:	f000 fa34 	bl	8002bce <ft5336_distance_up_down>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 0218 	add.w	r2, r3, #24
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f000 fa37 	bl	8002bf0 <ft5336_distance_zoom>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3318      	adds	r3, #24
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fa3f 	bl	8002c34 <ft5336_chip_id>
 80027b6:	4603      	mov	r3, r0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f908 	bl	80029e4 <FT5336_DetectTouch>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461a      	mov	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0018 	add.w	r0, r3, #24
 80027e2:	f107 0208 	add.w	r2, r7, #8
 80027e6:	2304      	movs	r3, #4
 80027e8:	2103      	movs	r1, #3
 80027ea:	f000 f94f 	bl	8002a8c <ft5336_read_reg>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e00f      	b.n	800281c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80027fc:	7a3b      	ldrb	r3, [r7, #8]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002804:	7a7a      	ldrb	r2, [r7, #9]
 8002806:	431a      	orrs	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800280c:	7abb      	ldrb	r3, [r7, #10]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002814:	7afa      	ldrb	r2, [r7, #11]
 8002816:	431a      	orrs	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800281c:	68fb      	ldr	r3, [r7, #12]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08c      	sub	sp, #48	; 0x30
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8d5 	bl	80029e4 <FT5336_DetectTouch>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0018 	add.w	r0, r3, #24
 8002848:	f107 0208 	add.w	r2, r7, #8
 800284c:	231e      	movs	r3, #30
 800284e:	2103      	movs	r1, #3
 8002850:	f000 f91c 	bl	8002a8c <ft5336_read_reg>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002860:	e077      	b.n	8002952 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
 8002866:	e071      	b.n	800294c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	3330      	adds	r3, #48	; 0x30
 8002874:	443b      	add	r3, r7
 8002876:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8002880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	3301      	adds	r3, #1
 800288c:	3330      	adds	r3, #48	; 0x30
 800288e:	443b      	add	r3, r7
 8002890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002894:	ea41 0203 	orr.w	r2, r1, r3
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80028a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	3302      	adds	r3, #2
 80028ae:	3330      	adds	r3, #48	; 0x30
 80028b0:	443b      	add	r3, r7
 80028b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80028bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	3303      	adds	r3, #3
 80028c8:	3330      	adds	r3, #48	; 0x30
 80028ca:	443b      	add	r3, r7
 80028cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028d0:	4319      	orrs	r1, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d6:	3206      	adds	r2, #6
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80028dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	3330      	adds	r3, #48	; 0x30
 80028e8:	443b      	add	r3, r7
 80028ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f8:	3210      	adds	r2, #16
 80028fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80028fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	3304      	adds	r3, #4
 800290a:	3330      	adds	r3, #48	; 0x30
 800290c:	443b      	add	r3, r7
 800290e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002912:	4619      	mov	r1, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	330a      	adds	r3, #10
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8002920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	3305      	adds	r3, #5
 800292c:	3330      	adds	r3, #48	; 0x30
 800292e:	443b      	add	r3, r7
 8002930:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4619      	mov	r1, r3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	3314      	adds	r3, #20
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	3301      	adds	r3, #1
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2b04      	cmp	r3, #4
 8002950:	d98a      	bls.n	8002868 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002954:	4618      	mov	r0, r3
 8002956:	3730      	adds	r7, #48	; 0x30
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3318      	adds	r3, #24
 800296a:	6839      	ldr	r1, [r7, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f8bb 	bl	8002ae8 <ft5336_gest_id>
 8002972:	4603      	mov	r3, r0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3318      	adds	r3, #24
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f941 	bl	8002c12 <ft5336_g_mode>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3318      	adds	r3, #24
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f932 	bl	8002c12 <ft5336_g_mode>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3318      	adds	r3, #24
 80029f0:	f107 020b 	add.w	r2, r7, #11
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f886 	bl	8002b08 <ft5336_td_status>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e007      	b.n	8002a1a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d902      	bls.n	8002a16 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e001      	b.n	8002a1a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	460b      	mov	r3, r1
 8002a32:	72fb      	strb	r3, [r7, #11]
 8002a34:	4613      	mov	r3, r2
 8002a36:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	691c      	ldr	r4, [r3, #16]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	8918      	ldrh	r0, [r3, #8]
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	b299      	uxth	r1, r3
 8002a48:	893b      	ldrh	r3, [r7, #8]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	47a0      	blx	r4
 8002a4e:	4603      	mov	r3, r0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd90      	pop	{r4, r7, pc}

08002a58 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	460b      	mov	r3, r1
 8002a66:	72fb      	strb	r3, [r7, #11]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	68dc      	ldr	r4, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	8918      	ldrh	r0, [r3, #8]
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	893b      	ldrh	r3, [r7, #8]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	47a0      	blx	r4
 8002a82:	4603      	mov	r3, r0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	460b      	mov	r3, r1
 8002a9a:	72fb      	strb	r3, [r7, #11]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685c      	ldr	r4, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6898      	ldr	r0, [r3, #8]
 8002aa8:	893b      	ldrh	r3, [r7, #8]
 8002aaa:	7af9      	ldrb	r1, [r7, #11]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	47a0      	blx	r4
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}

08002aba <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	72fb      	strb	r3, [r7, #11]
 8002aca:	4613      	mov	r3, r2
 8002acc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681c      	ldr	r4, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6898      	ldr	r0, [r3, #8]
 8002ad6:	893b      	ldrh	r3, [r7, #8]
 8002ad8:	7af9      	ldrb	r1, [r7, #11]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	47a0      	blx	r4
 8002ade:	4603      	mov	r3, r0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8002af2:	2301      	movs	r3, #1
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ffc7 	bl	8002a8c <ft5336_read_reg>
 8002afe:	4603      	mov	r3, r0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8002b12:	2301      	movs	r3, #1
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	2102      	movs	r1, #2
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffb7 	bl	8002a8c <ft5336_read_reg>
 8002b1e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8002b52:	1cfa      	adds	r2, r7, #3
 8002b54:	2301      	movs	r3, #1
 8002b56:	2191      	movs	r1, #145	; 0x91
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ffae 	bl	8002aba <ft5336_write_reg>
 8002b5e:	4603      	mov	r3, r0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8002b74:	1cfa      	adds	r2, r7, #3
 8002b76:	2301      	movs	r3, #1
 8002b78:	2192      	movs	r1, #146	; 0x92
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff9d 	bl	8002aba <ft5336_write_reg>
 8002b80:	4603      	mov	r3, r0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8002b96:	1cfa      	adds	r2, r7, #3
 8002b98:	2301      	movs	r3, #1
 8002b9a:	2193      	movs	r1, #147	; 0x93
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff8c 	bl	8002aba <ft5336_write_reg>
 8002ba2:	4603      	mov	r3, r0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8002bb8:	1cfa      	adds	r2, r7, #3
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2194      	movs	r1, #148	; 0x94
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ff7b 	bl	8002aba <ft5336_write_reg>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8002bda:	1cfa      	adds	r2, r7, #3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2195      	movs	r1, #149	; 0x95
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff6a 	bl	8002aba <ft5336_write_reg>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8002bfc:	1cfa      	adds	r2, r7, #3
 8002bfe:	2301      	movs	r3, #1
 8002c00:	2196      	movs	r1, #150	; 0x96
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ff59 	bl	8002aba <ft5336_write_reg>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8002c1e:	1cfa      	adds	r2, r7, #3
 8002c20:	2301      	movs	r3, #1
 8002c22:	21a4      	movs	r1, #164	; 0xa4
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff48 	bl	8002aba <ft5336_write_reg>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8002c3e:	2301      	movs	r3, #1
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	21a8      	movs	r1, #168	; 0xa8
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff21 	bl	8002a8c <ft5336_read_reg>
 8002c4a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c7a:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c82:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8a:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b090      	sub	sp, #64	; 0x40
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d102      	bne.n	8002cd2 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8002ccc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cd0:	e001      	b.n	8002cd6 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8002cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd6:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8002cd8:	23b7      	movs	r3, #183	; 0xb7
 8002cda:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f860 	bl	8002dc2 <MT25TL01G_WriteEnable>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002d08:	f06f 0301 	mvn.w	r3, #1
 8002d0c:	e019      	b.n	8002d42 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f007 f8fd 	bl	8009f18 <HAL_QSPI_Command>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002d24:	f06f 0301 	mvn.w	r3, #1
 8002d28:	e00b      	b.n	8002d42 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f80b 	bl	8002d4a <MT25TL01G_AutoPollingMemReady>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002d3a:	f06f 0301 	mvn.w	r3, #1
 8002d3e:	e000      	b.n	8002d42 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3740      	adds	r7, #64	; 0x40
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b096      	sub	sp, #88	; 0x58
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002d56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8002d5c:	2305      	movs	r3, #5
 8002d5e:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d68:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d76:	2300      	movs	r3, #0
 8002d78:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8002d86:	2310      	movs	r3, #16
 8002d88:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d8e:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8002d90:	f240 1301 	movw	r3, #257	; 0x101
 8002d94:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d9a:	f107 0208 	add.w	r2, r7, #8
 8002d9e:	f107 0120 	add.w	r1, r7, #32
 8002da2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f007 fa43 	bl	800a232 <HAL_QSPI_AutoPolling>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002db2:	f06f 0304 	mvn.w	r3, #4
 8002db6:	e000      	b.n	8002dba <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8002db8:	2300      	movs	r3, #0

}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3758      	adds	r7, #88	; 0x58
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b096      	sub	sp, #88	; 0x58
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d102      	bne.n	8002dda <MT25TL01G_WriteEnable+0x18>
 8002dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dd8:	e001      	b.n	8002dde <MT25TL01G_WriteEnable+0x1c>
 8002dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8002de0:	2306      	movs	r3, #6
 8002de2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f007 f884 	bl	8009f18 <HAL_QSPI_Command>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002e16:	f06f 0301 	mvn.w	r3, #1
 8002e1a:	e029      	b.n	8002e70 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002e1c:	f240 2302 	movw	r3, #514	; 0x202
 8002e20:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8002e22:	f240 2302 	movw	r3, #514	; 0x202
 8002e26:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002e30:	2310      	movs	r3, #16
 8002e32:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e38:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d102      	bne.n	8002e4a <MT25TL01G_WriteEnable+0x88>
 8002e44:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002e48:	e001      	b.n	8002e4e <MT25TL01G_WriteEnable+0x8c>
 8002e4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4e:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e50:	f107 0208 	add.w	r2, r7, #8
 8002e54:	f107 0120 	add.w	r1, r7, #32
 8002e58:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f007 f9e8 	bl	800a232 <HAL_QSPI_AutoPolling>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8002e68:	f06f 0304 	mvn.w	r3, #4
 8002e6c:	e000      	b.n	8002e70 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3758      	adds	r7, #88	; 0x58
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b090      	sub	sp, #64	; 0x40
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e84:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8002e86:	2335      	movs	r3, #53	; 0x35
 8002e88:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f007 f831 	bl	8009f18 <HAL_QSPI_Command>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002ebc:	f06f 0301 	mvn.w	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3740      	adds	r7, #64	; 0x40
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b090      	sub	sp, #64	; 0x40
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8002eda:	23f5      	movs	r3, #245	; 0xf5
 8002edc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f007 f807 	bl	8009f18 <HAL_QSPI_Command>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8002f10:	f06f 0301 	mvn.w	r3, #1
 8002f14:	e000      	b.n	8002f18 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3740      	adds	r7, #64	; 0x40
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b092      	sub	sp, #72	; 0x48
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d83a      	bhi.n	8002fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f79 	.word	0x08002f79
 8002f44:	08002f91 	.word	0x08002f91
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8002f4e:	230e      	movs	r3, #14
 8002f50:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f5e:	e023      	b.n	8002fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8002f66:	233d      	movs	r3, #61	; 0x3d
 8002f68:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8002f70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f76:	e017      	b.n	8002fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8002f7e:	23ee      	movs	r3, #238	; 0xee
 8002f80:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002f88:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002f8e:	e00b      	b.n	8002fa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8002f96:	23ed      	movs	r3, #237	; 0xed
 8002f98:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8002fa0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8002fa6:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002fa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002fac:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8002fb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8002fbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fc0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002fce:	f107 0208 	add.w	r2, r7, #8
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f007 f9a1 	bl	800a320 <HAL_QSPI_MemoryMapped>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8002fe4:	f06f 0305 	mvn.w	r3, #5
 8002fe8:	e000      	b.n	8002fec <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3748      	adds	r7, #72	; 0x48
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b092      	sub	sp, #72	; 0x48
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d83a      	bhi.n	800307c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	0800301d 	.word	0x0800301d
 8003010:	08003035 	.word	0x08003035
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003065 	.word	0x08003065
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800301c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8003022:	230c      	movs	r3, #12
 8003024:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8003026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800302c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003030:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 8003032:	e023      	b.n	800307c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800303a:	23bc      	movs	r3, #188	; 0xbc
 800303c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800303e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8003044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003048:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800304a:	e017      	b.n	800307c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800304c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8003052:	23ec      	movs	r3, #236	; 0xec
 8003054:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8003056:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800305c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003060:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 8003062:	e00b      	b.n	800307c <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800306a:	23eb      	movs	r3, #235	; 0xeb
 800306c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800306e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8003074:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003078:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800307a:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800307c:	2308      	movs	r3, #8
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8003080:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003084:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800308e:	2300      	movs	r3, #0
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003092:	2300      	movs	r3, #0
 8003094:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800309e:	f107 0208 	add.w	r2, r7, #8
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f007 f939 	bl	800a320 <HAL_QSPI_MemoryMapped>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80030b4:	f06f 0305 	mvn.w	r3, #5
 80030b8:	e000      	b.n	80030bc <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3748      	adds	r7, #72	; 0x48
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b090      	sub	sp, #64	; 0x40
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d102      	bne.n	80030dc <MT25TL01G_ResetEnable+0x18>
 80030d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030da:	e001      	b.n	80030e0 <MT25TL01G_ResetEnable+0x1c>
 80030dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80030e2:	2366      	movs	r3, #102	; 0x66
 80030e4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80030fa:	2300      	movs	r3, #0
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80030fe:	2300      	movs	r3, #0
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f006 ff03 	bl	8009f18 <HAL_QSPI_Command>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8003118:	f06f 0301 	mvn.w	r3, #1
 800311c:	e000      	b.n	8003120 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3740      	adds	r7, #64	; 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b090      	sub	sp, #64	; 0x40
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d102      	bne.n	8003140 <MT25TL01G_ResetMemory+0x18>
 800313a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800313e:	e001      	b.n	8003144 <MT25TL01G_ResetMemory+0x1c>
 8003140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003144:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8003146:	2399      	movs	r3, #153	; 0x99
 8003148:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800314e:	2300      	movs	r3, #0
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003152:	2300      	movs	r3, #0
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800315e:	2300      	movs	r3, #0
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003162:	2300      	movs	r3, #0
 8003164:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003166:	f107 0308 	add.w	r3, r7, #8
 800316a:	f241 3288 	movw	r2, #5000	; 0x1388
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f006 fed1 	bl	8009f18 <HAL_QSPI_Command>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800317c:	f06f 0301 	mvn.w	r3, #1
 8003180:	e000      	b.n	8003184 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3740      	adds	r7, #64	; 0x40
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f832 	bl	800320c <MT48LC4M32B2_ClockEnable>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d128      	bne.n	8003200 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f000 f8e2 	bl	8003378 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f84a 	bl	8003254 <MT48LC4M32B2_Precharge>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d11c      	bne.n	8003200 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f897 	bl	8003304 <MT48LC4M32B2_RefreshMode>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f85c 	bl	800329c <MT48LC4M32B2_ModeRegConfig>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8ad 	bl	8003350 <MT48LC4M32B2_RefreshRate>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8003200:	68fb      	ldr	r3, [r7, #12]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MT48LC4M32B2_ClockEnable+0x44>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800321c:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <MT48LC4M32B2_ClockEnable+0x44>)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <MT48LC4M32B2_ClockEnable+0x44>)
 8003224:	2201      	movs	r2, #1
 8003226:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MT48LC4M32B2_ClockEnable+0x44>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800322e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003232:	4907      	ldr	r1, [pc, #28]	; (8003250 <MT48LC4M32B2_ClockEnable+0x44>)
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f009 fe25 	bl	800ce84 <HAL_SDRAM_SendCommand>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	e000      	b.n	8003248 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003246:	2300      	movs	r3, #0
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	24000f04 	.word	0x24000f04

08003254 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MT48LC4M32B2_Precharge+0x44>)
 8003260:	2202      	movs	r2, #2
 8003262:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8003264:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <MT48LC4M32B2_Precharge+0x44>)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <MT48LC4M32B2_Precharge+0x44>)
 800326c:	2201      	movs	r2, #1
 800326e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <MT48LC4M32B2_Precharge+0x44>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327a:	4907      	ldr	r1, [pc, #28]	; (8003298 <MT48LC4M32B2_Precharge+0x44>)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f009 fe01 	bl	800ce84 <HAL_SDRAM_SendCommand>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	e000      	b.n	8003290 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800328e:	2300      	movs	r3, #0
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	24000f04 	.word	0x24000f04

0800329c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80032ae:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80032b4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80032ba:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032c6:	2204      	movs	r2, #4
 80032c8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032d0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80032d8:	4a09      	ldr	r2, [pc, #36]	; (8003300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80032de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e2:	4907      	ldr	r1, [pc, #28]	; (8003300 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f009 fdcd 	bl	800ce84 <HAL_SDRAM_SendCommand>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	e000      	b.n	80032f8 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80032f6:	2300      	movs	r3, #0
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	24000f04 	.word	0x24000f04

08003304 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8003310:	4a0e      	ldr	r2, [pc, #56]	; (800334c <MT48LC4M32B2_RefreshMode+0x48>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8003316:	4a0d      	ldr	r2, [pc, #52]	; (800334c <MT48LC4M32B2_RefreshMode+0x48>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <MT48LC4M32B2_RefreshMode+0x48>)
 800331e:	2208      	movs	r2, #8
 8003320:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <MT48LC4M32B2_RefreshMode+0x48>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8003328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332c:	4907      	ldr	r1, [pc, #28]	; (800334c <MT48LC4M32B2_RefreshMode+0x48>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f009 fda8 	bl	800ce84 <HAL_SDRAM_SendCommand>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
 800333e:	e000      	b.n	8003342 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8003340:	2300      	movs	r3, #0
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	24000f04 	.word	0x24000f04

08003350 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800335a:	6839      	ldr	r1, [r7, #0]
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f009 fdc6 	bl	800ceee <HAL_SDRAM_ProgramRefreshRate>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	e000      	b.n	8003370 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800336e:	2300      	movs	r3, #0
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8003380:	f002 fcd8 	bl	8005d34 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8003386:	bf00      	nop
 8003388:	f002 fcd4 	bl	8005d34 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	d8f7      	bhi.n	8003388 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10f      	bne.n	80033d8 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <BSP_LED_Init+0xb0>)
 80033ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <BSP_LED_Init+0xb0>)
 80033c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <BSP_LED_Init+0xb0>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	e015      	b.n	8003404 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10f      	bne.n	80033fe <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <BSP_LED_Init+0xb0>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	4a1b      	ldr	r2, [pc, #108]	; (8003454 <BSP_LED_Init+0xb0>)
 80033e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <BSP_LED_Init+0xb0>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	e002      	b.n	8003404 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033fe:	f06f 0301 	mvn.w	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4a14      	ldr	r2, [pc, #80]	; (8003458 <BSP_LED_Init+0xb4>)
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	4a0f      	ldr	r2, [pc, #60]	; (800345c <BSP_LED_Init+0xb8>)
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	f107 0210 	add.w	r2, r7, #16
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f004 fe23 	bl	8008074 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <BSP_LED_Init+0xb8>)
 8003432:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <BSP_LED_Init+0xb4>)
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	b29b      	uxth	r3, r3
 8003440:	2201      	movs	r2, #1
 8003442:	4619      	mov	r1, r3
 8003444:	f005 f8e8 	bl	8008618 <HAL_GPIO_WritePin>
  return ret;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 800344a:	4618      	mov	r0, r3
 800344c:	3728      	adds	r7, #40	; 0x28
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	58024400 	.word	0x58024400
 8003458:	080182d8 	.word	0x080182d8
 800345c:	24000048 	.word	0x24000048

08003460 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <BSP_LED_On+0x34>)
 8003472:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	4a07      	ldr	r2, [pc, #28]	; (8003498 <BSP_LED_On+0x38>)
 800347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347e:	b29b      	uxth	r3, r3
 8003480:	2200      	movs	r2, #0
 8003482:	4619      	mov	r1, r3
 8003484:	f005 f8c8 	bl	8008618 <HAL_GPIO_WritePin>
  return ret;
 8003488:	68fb      	ldr	r3, [r7, #12]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	24000048 	.word	0x24000048
 8003498:	080182d8 	.word	0x080182d8

0800349c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	460a      	mov	r2, r1
 80034a6:	71fb      	strb	r3, [r7, #7]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 80034ac:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <BSP_PB_Init+0xcc>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <BSP_PB_Init+0xcc>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <BSP_PB_Init+0xcc>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80034ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80034d0:	2302      	movs	r3, #2
 80034d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80034d8:	79bb      	ldrb	r3, [r7, #6]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	4a21      	ldr	r2, [pc, #132]	; (800356c <BSP_PB_Init+0xd0>)
 80034e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ea:	f107 020c 	add.w	r2, r7, #12
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f004 fdbf 	bl	8008074 <HAL_GPIO_Init>
 80034f6:	e031      	b.n	800355c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80034f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034fc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	4a1a      	ldr	r2, [pc, #104]	; (800356c <BSP_PB_Init+0xd0>)
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	f107 020c 	add.w	r2, r7, #12
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f004 fdb1 	bl	8008074 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4a16      	ldr	r2, [pc, #88]	; (8003570 <BSP_PB_Init+0xd4>)
 8003518:	441a      	add	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	4915      	ldr	r1, [pc, #84]	; (8003574 <BSP_PB_Init+0xd8>)
 800351e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f004 fd60 	bl	8007fea <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4a10      	ldr	r2, [pc, #64]	; (8003570 <BSP_PB_Init+0xd4>)
 8003530:	1898      	adds	r0, r3, r2
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4a10      	ldr	r2, [pc, #64]	; (8003578 <BSP_PB_Init+0xdc>)
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	461a      	mov	r2, r3
 800353c:	2100      	movs	r1, #0
 800353e:	f004 fd35 	bl	8007fac <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003542:	2028      	movs	r0, #40	; 0x28
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	4a0d      	ldr	r2, [pc, #52]	; (800357c <BSP_PB_Init+0xe0>)
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	2200      	movs	r2, #0
 800354e:	4619      	mov	r1, r3
 8003550:	f002 fd17 	bl	8005f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003554:	2328      	movs	r3, #40	; 0x28
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fd2d 	bl	8005fb6 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	24000050 	.word	0x24000050
 8003570:	24000f14 	.word	0x24000f14
 8003574:	080182e0 	.word	0x080182e0
 8003578:	24000054 	.word	0x24000054
 800357c:	24000058 	.word	0x24000058

08003580 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <BSP_PB_GetState+0x28>)
 800358e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003592:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f005 f825 	bl	80085e8 <HAL_GPIO_ReadPin>
 800359e:	4603      	mov	r3, r0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	24000050 	.word	0x24000050

080035ac <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4a04      	ldr	r2, [pc, #16]	; (80035cc <BSP_PB_IRQHandler+0x20>)
 80035bc:	4413      	add	r3, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fd28 	bl	8008014 <HAL_EXTI_IRQHandler>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	24000f14 	.word	0x24000f14

080035d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd fdeb 	bl	80011b0 <BSP_PB_Callback>
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 80035f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fad9 	bl	8006bac <HAL_DMA_IRQHandler>
  }
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	24000f1c 	.word	0x24000f1c

08003608 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b30      	cmp	r3, #48	; 0x30
 8003616:	d002      	beq.n	800361e <BSP_AUDIO_IN_IRQHandler+0x16>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003624:	4618      	mov	r0, r3
 8003626:	f003 fac1 	bl	8006bac <HAL_DMA_IRQHandler>
  }

}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	24000fb4 	.word	0x24000fb4

08003638 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <BSP_I2C4_Init+0x64>)
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <BSP_I2C4_Init+0x68>)
 8003646:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <BSP_I2C4_Init+0x6c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11f      	bne.n	8003690 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <BSP_I2C4_Init+0x6c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <BSP_I2C4_Init+0x6c>)
 8003658:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800365a:	4810      	ldr	r0, [pc, #64]	; (800369c <BSP_I2C4_Init+0x64>)
 800365c:	f005 faf8 	bl	8008c50 <HAL_I2C_GetState>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d114      	bne.n	8003690 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8003666:	480d      	ldr	r0, [pc, #52]	; (800369c <BSP_I2C4_Init+0x64>)
 8003668:	f000 fb60 	bl	8003d2c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800366c:	f008 f840 	bl	800b6f0 <HAL_RCC_GetPCLK2Freq>
 8003670:	4603      	mov	r3, r0
 8003672:	490d      	ldr	r1, [pc, #52]	; (80036a8 <BSP_I2C4_Init+0x70>)
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f8e3 	bl	8003840 <I2C_GetTiming>
 800367a:	4603      	mov	r3, r0
 800367c:	4619      	mov	r1, r3
 800367e:	4807      	ldr	r0, [pc, #28]	; (800369c <BSP_I2C4_Init+0x64>)
 8003680:	f000 f838 	bl	80036f4 <MX_I2C4_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800368a:	f06f 0307 	mvn.w	r3, #7
 800368e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003690:	687b      	ldr	r3, [r7, #4]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	24001a54 	.word	0x24001a54
 80036a0:	58001c00 	.word	0x58001c00
 80036a4:	2400104c 	.word	0x2400104c
 80036a8:	000186a0 	.word	0x000186a0

080036ac <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <BSP_I2C4_DeInit+0x40>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <BSP_I2C4_DeInit+0x40>)
 80036be:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <BSP_I2C4_DeInit+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80036c8:	4809      	ldr	r0, [pc, #36]	; (80036f0 <BSP_I2C4_DeInit+0x44>)
 80036ca:	f000 fb9b 	bl	8003e04 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80036ce:	4808      	ldr	r0, [pc, #32]	; (80036f0 <BSP_I2C4_DeInit+0x44>)
 80036d0:	f005 f84c 	bl	800876c <HAL_I2C_DeInit>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80036da:	f06f 0307 	mvn.w	r3, #7
 80036de:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80036e0:	687b      	ldr	r3, [r7, #4]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2400104c 	.word	0x2400104c
 80036f0:	24001a54 	.word	0x24001a54

080036f4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f004 ff8a 	bl	800864c <HAL_I2C_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	e014      	b.n	800376e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f005 fd52 	bl	80091f4 <HAL_I2CEx_ConfigAnalogFilter>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	e008      	b.n	800376e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800375c:	2100      	movs	r1, #0
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f005 fd93 	bl	800928a <HAL_I2CEx_ConfigDigitalFilter>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af02      	add	r7, sp, #8
 800377e:	60ba      	str	r2, [r7, #8]
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	81fb      	strh	r3, [r7, #14]
 8003786:	460b      	mov	r3, r1
 8003788:	81bb      	strh	r3, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800378e:	89b9      	ldrh	r1, [r7, #12]
 8003790:	89f8      	ldrh	r0, [r7, #14]
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2201      	movs	r2, #1
 800379a:	f000 fb57 	bl	8003e4c <I2C4_WriteReg>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e00c      	b.n	80037c4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80037aa:	4809      	ldr	r0, [pc, #36]	; (80037d0 <BSP_I2C4_WriteReg+0x58>)
 80037ac:	f005 fa5e 	bl	8008c6c <HAL_I2C_GetError>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d103      	bne.n	80037be <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80037b6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e002      	b.n	80037c4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80037be:	f06f 0303 	mvn.w	r3, #3
 80037c2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80037c4:	697b      	ldr	r3, [r7, #20]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	24001a54 	.word	0x24001a54

080037d4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60ba      	str	r2, [r7, #8]
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	81fb      	strh	r3, [r7, #14]
 80037e2:	460b      	mov	r3, r1
 80037e4:	81bb      	strh	r3, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80037ea:	89b9      	ldrh	r1, [r7, #12]
 80037ec:	89f8      	ldrh	r0, [r7, #14]
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f000 fb4f 	bl	8003e98 <I2C4_ReadReg>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e00c      	b.n	8003820 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003806:	4809      	ldr	r0, [pc, #36]	; (800382c <BSP_I2C4_ReadReg+0x58>)
 8003808:	f005 fa30 	bl	8008c6c <HAL_I2C_GetError>
 800380c:	4603      	mov	r3, r0
 800380e:	2b04      	cmp	r3, #4
 8003810:	d103      	bne.n	800381a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003812:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e002      	b.n	8003820 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800381a:	f06f 0303 	mvn.w	r3, #3
 800381e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003820:	697b      	ldr	r3, [r7, #20]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	24001a54 	.word	0x24001a54

08003830 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003834:	f002 fa7e 	bl	8005d34 <HAL_GetTick>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d06b      	beq.n	800392c <I2C_GetTiming+0xec>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d068      	beq.n	800392c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e060      	b.n	8003922 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003860:	4a35      	ldr	r2, [pc, #212]	; (8003938 <I2C_GetTiming+0xf8>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d352      	bcc.n	800391c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003876:	4a30      	ldr	r2, [pc, #192]	; (8003938 <I2C_GetTiming+0xf8>)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3308      	adds	r3, #8
 8003884:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d847      	bhi.n	800391c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800388c:	6939      	ldr	r1, [r7, #16]
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f856 	bl	8003940 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003894:	6939      	ldr	r1, [r7, #16]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f940 	bl	8003b1c <I2C_Compute_SCLL_SCLH>
 800389c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b7f      	cmp	r3, #127	; 0x7f
 80038a2:	d842      	bhi.n	800392a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038a4:	4925      	ldr	r1, [pc, #148]	; (800393c <I2C_GetTiming+0xfc>)
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80038b6:	4821      	ldr	r0, [pc, #132]	; (800393c <I2C_GetTiming+0xfc>)
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4403      	add	r3, r0
 80038c4:	3304      	adds	r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	051b      	lsls	r3, r3, #20
 80038ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80038ce:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80038d0:	481a      	ldr	r0, [pc, #104]	; (800393c <I2C_GetTiming+0xfc>)
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4403      	add	r3, r0
 80038de:	3308      	adds	r3, #8
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80038e8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80038ea:	4814      	ldr	r0, [pc, #80]	; (800393c <I2C_GetTiming+0xfc>)
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4403      	add	r3, r0
 80038f8:	330c      	adds	r3, #12
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003900:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003902:	480e      	ldr	r0, [pc, #56]	; (800393c <I2C_GetTiming+0xfc>)
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4403      	add	r3, r0
 8003910:	3310      	adds	r3, #16
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003916:	430b      	orrs	r3, r1
 8003918:	617b      	str	r3, [r7, #20]
        }
        break;
 800391a:	e006      	b.n	800392a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	3301      	adds	r3, #1
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d99b      	bls.n	8003860 <I2C_GetTiming+0x20>
 8003928:	e000      	b.n	800392c <I2C_GetTiming+0xec>
        break;
 800392a:	bf00      	nop
      }
    }
  }

  return ret;
 800392c:	697b      	ldr	r3, [r7, #20]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	080182e4 	.word	0x080182e4
 800393c:	24001050 	.word	0x24001050

08003940 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003940:	b480      	push	{r7}
 8003942:	b08f      	sub	sp, #60	; 0x3c
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800394a:	2310      	movs	r3, #16
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	085a      	lsrs	r2, r3, #1
 8003952:	4b6e      	ldr	r3, [pc, #440]	; (8003b0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003954:	4413      	add	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	fbb3 f3f2 	udiv	r3, r3, r2
 800395c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800395e:	2332      	movs	r3, #50	; 0x32
 8003960:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003962:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003966:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003968:	4a69      	ldr	r2, [pc, #420]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3324      	adds	r3, #36	; 0x24
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	4a65      	ldr	r2, [pc, #404]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	330c      	adds	r3, #12
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800398c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800398e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003990:	495f      	ldr	r1, [pc, #380]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	202c      	movs	r0, #44	; 0x2c
 8003996:	fb00 f303 	mul.w	r3, r0, r3
 800399a:	440b      	add	r3, r1
 800399c:	3328      	adds	r3, #40	; 0x28
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3303      	adds	r3, #3
 80039a2:	69f9      	ldr	r1, [r7, #28]
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039ac:	4a58      	ldr	r2, [pc, #352]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3310      	adds	r3, #16
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	4a54      	ldr	r2, [pc, #336]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3320      	adds	r3, #32
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80039d0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039d2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80039d4:	494e      	ldr	r1, [pc, #312]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	202c      	movs	r0, #44	; 0x2c
 80039da:	fb00 f303 	mul.w	r3, r0, r3
 80039de:	440b      	add	r3, r1
 80039e0:	3328      	adds	r3, #40	; 0x28
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3304      	adds	r3, #4
 80039e6:	69f9      	ldr	r1, [r7, #28]
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80039f0:	4a47      	ldr	r2, [pc, #284]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3320      	adds	r3, #32
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	4a43      	ldr	r2, [pc, #268]	; (8003b10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3314      	adds	r3, #20
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4403      	add	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	dc01      	bgt.n	8003a20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dc01      	bgt.n	8003a2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2e:	e062      	b.n	8003af6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	e059      	b.n	8003aea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	3301      	adds	r3, #1
 8003a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a3c:	3201      	adds	r2, #1
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	fb02 f303 	mul.w	r3, r2, r3
 8003a48:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d348      	bcc.n	8003ae4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	e042      	b.n	8003ade <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	fb03 f202 	mul.w	r2, r3, r2
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d332      	bcc.n	8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d82e      	bhi.n	8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d02a      	beq.n	8003ad8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4924      	ldr	r1, [pc, #144]	; (8003b18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a94:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	491f      	ldr	r1, [pc, #124]	; (8003b18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4919      	ldr	r1, [pc, #100]	; (8003b18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3308      	adds	r3, #8
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ace:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ad6:	d812      	bhi.n	8003afe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	3301      	adds	r3, #1
 8003adc:	623b      	str	r3, [r7, #32]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	2b0f      	cmp	r3, #15
 8003ae2:	d9b9      	bls.n	8003a58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d9a2      	bls.n	8003a36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	3301      	adds	r3, #1
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	2b0f      	cmp	r3, #15
 8003afa:	d999      	bls.n	8003a30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003afc:	e000      	b.n	8003b00 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003afe:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003b00:	373c      	adds	r7, #60	; 0x3c
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	3b9aca00 	.word	0x3b9aca00
 8003b10:	080182e4 	.word	0x080182e4
 8003b14:	24001a50 	.word	0x24001a50
 8003b18:	24001050 	.word	0x24001050

08003b1c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b093      	sub	sp, #76	; 0x4c
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	085a      	lsrs	r2, r3, #1
 8003b30:	4b7a      	ldr	r3, [pc, #488]	; (8003d1c <I2C_Compute_SCLL_SCLH+0x200>)
 8003b32:	4413      	add	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003b3c:	4a78      	ldr	r2, [pc, #480]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	085a      	lsrs	r2, r3, #1
 8003b4c:	4b73      	ldr	r3, [pc, #460]	; (8003d1c <I2C_Compute_SCLL_SCLH+0x200>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	4973      	ldr	r1, [pc, #460]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	202c      	movs	r0, #44	; 0x2c
 8003b56:	fb00 f202 	mul.w	r2, r0, r2
 8003b5a:	440a      	add	r2, r1
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003b64:	2332      	movs	r3, #50	; 0x32
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003b68:	4a6d      	ldr	r2, [pc, #436]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3328      	adds	r3, #40	; 0x28
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003b80:	4a67      	ldr	r2, [pc, #412]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a62      	ldr	r2, [pc, #392]	; (8003d1c <I2C_Compute_SCLL_SCLH+0x200>)
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003b98:	4a61      	ldr	r2, [pc, #388]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5c      	ldr	r2, [pc, #368]	; (8003d1c <I2C_Compute_SCLL_SCLH+0x200>)
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	e0a3      	b.n	8003d02 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003bba:	495a      	ldr	r1, [pc, #360]	; (8003d24 <I2C_Compute_SCLL_SCLH+0x208>)
 8003bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd8:	e08c      	b.n	8003cf4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	441a      	add	r2, r3
 8003be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be2:	3301      	adds	r3, #1
 8003be4:	6979      	ldr	r1, [r7, #20]
 8003be6:	fb03 f101 	mul.w	r1, r3, r1
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	440b      	add	r3, r1
 8003bf0:	4413      	add	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3318      	adds	r3, #24
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d971      	bls.n	8003cee <I2C_Compute_SCLL_SCLH+0x1d2>
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	1ad2      	subs	r2, r2, r3
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d268      	bcs.n	8003cee <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c20:	e062      	b.n	8003ce8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	441a      	add	r2, r3
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6979      	ldr	r1, [r7, #20]
 8003c2e:	fb03 f101 	mul.w	r1, r3, r1
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	4413      	add	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	441a      	add	r2, r3
 8003c42:	4937      	ldr	r1, [pc, #220]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	202c      	movs	r0, #44	; 0x2c
 8003c48:	fb00 f303 	mul.w	r3, r0, r3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3320      	adds	r3, #32
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	441a      	add	r2, r3
 8003c54:	4932      	ldr	r1, [pc, #200]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	202c      	movs	r0, #44	; 0x2c
 8003c5a:	fb00 f303 	mul.w	r3, r0, r3
 8003c5e:	440b      	add	r3, r1
 8003c60:	3324      	adds	r3, #36	; 0x24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d338      	bcc.n	8003ce2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d834      	bhi.n	8003ce2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <I2C_Compute_SCLL_SCLH+0x204>)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	331c      	adds	r3, #28
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d329      	bcc.n	8003ce2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d225      	bcs.n	8003ce2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da02      	bge.n	8003caa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	425b      	negs	r3, r3
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d917      	bls.n	8003ce2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003cb6:	491b      	ldr	r1, [pc, #108]	; (8003d24 <I2C_Compute_SCLL_SCLH+0x208>)
 8003cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3310      	adds	r3, #16
 8003cc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cc8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003cca:	4916      	ldr	r1, [pc, #88]	; (8003d24 <I2C_Compute_SCLL_SCLH+0x208>)
 8003ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	330c      	adds	r3, #12
 8003cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cdc:	601a      	str	r2, [r3, #0]
              ret = count;
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d999      	bls.n	8003c22 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf6:	2bff      	cmp	r3, #255	; 0xff
 8003cf8:	f67f af6f 	bls.w	8003bda <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	3301      	adds	r3, #1
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f4ff af56 	bcc.w	8003bba <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	374c      	adds	r7, #76	; 0x4c
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	3b9aca00 	.word	0x3b9aca00
 8003d20:	080182e4 	.word	0x080182e4
 8003d24:	24001050 	.word	0x24001050
 8003d28:	24001a50 	.word	0x24001a50

08003d2c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d3a:	4a30      	ldr	r2, [pc, #192]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003d52:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d58:	4a28      	ldr	r2, [pc, #160]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003d5a:	f043 0308 	orr.w	r3, r3, #8
 8003d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d76:	2312      	movs	r3, #18
 8003d78:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003d82:	2304      	movs	r3, #4
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	481c      	ldr	r0, [pc, #112]	; (8003e00 <I2C4_MspInit+0xd4>)
 8003d8e:	f004 f971 	bl	8008074 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003d98:	2312      	movs	r3, #18
 8003d9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003da0:	2302      	movs	r3, #2
 8003da2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003da4:	2304      	movs	r3, #4
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003da8:	f107 0314 	add.w	r3, r7, #20
 8003dac:	4619      	mov	r1, r3
 8003dae:	4814      	ldr	r0, [pc, #80]	; (8003e00 <I2C4_MspInit+0xd4>)
 8003db0:	f004 f960 	bl	8008074 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003dc4:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd8:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003de8:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <I2C4_MspInit+0xd0>)
 8003dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003df2:	bf00      	nop
 8003df4:	3728      	adds	r7, #40	; 0x28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58020c00 	.word	0x58020c00

08003e04 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4619      	mov	r1, r3
 8003e16:	480b      	ldr	r0, [pc, #44]	; (8003e44 <I2C4_MspDeInit+0x40>)
 8003e18:	f004 fadc 	bl	80083d4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e20:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4619      	mov	r1, r3
 8003e26:	4807      	ldr	r0, [pc, #28]	; (8003e44 <I2C4_MspDeInit+0x40>)
 8003e28:	f004 fad4 	bl	80083d4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <I2C4_MspDeInit+0x44>)
 8003e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e32:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <I2C4_MspDeInit+0x44>)
 8003e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8003e3c:	bf00      	nop
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58020c00 	.word	0x58020c00
 8003e48:	58024400 	.word	0x58024400

08003e4c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	4603      	mov	r3, r0
 8003e56:	81fb      	strh	r3, [r7, #14]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	81bb      	strh	r3, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003e60:	8978      	ldrh	r0, [r7, #10]
 8003e62:	89ba      	ldrh	r2, [r7, #12]
 8003e64:	89f9      	ldrh	r1, [r7, #14]
 8003e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e6a:	9302      	str	r3, [sp, #8]
 8003e6c:	8b3b      	ldrh	r3, [r7, #24]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	4807      	ldr	r0, [pc, #28]	; (8003e94 <I2C4_WriteReg+0x48>)
 8003e78:	f004 fcbc 	bl	80087f4 <HAL_I2C_Mem_Write>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e001      	b.n	8003e8a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003e86:	f06f 0307 	mvn.w	r3, #7
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	24001a54 	.word	0x24001a54

08003e98 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	81fb      	strh	r3, [r7, #14]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	81bb      	strh	r3, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003eac:	8978      	ldrh	r0, [r7, #10]
 8003eae:	89ba      	ldrh	r2, [r7, #12]
 8003eb0:	89f9      	ldrh	r1, [r7, #14]
 8003eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb6:	9302      	str	r3, [sp, #8]
 8003eb8:	8b3b      	ldrh	r3, [r7, #24]
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <I2C4_ReadReg+0x48>)
 8003ec4:	f004 fdaa 	bl	8008a1c <HAL_I2C_Mem_Read>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e001      	b.n	8003ed6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003ed2:	f06f 0307 	mvn.w	r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	24001a54 	.word	0x24001a54

08003ee4 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8003eee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003ef8:	2200      	movs	r2, #0
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f805 	bl	8003f0c <BSP_LCD_InitEx>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b09e      	sub	sp, #120	; 0x78
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d808      	bhi.n	8003f3a <BSP_LCD_InitEx+0x2e>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <BSP_LCD_InitEx+0x2e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d006      	beq.n	8003f42 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f3a:	f06f 0301 	mvn.w	r3, #1
 8003f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f40:	e0a8      	b.n	8004094 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d109      	bne.n	8003f5c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8003f4c:	4a54      	ldr	r2, [pc, #336]	; (80040a0 <BSP_LCD_InitEx+0x194>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015b      	lsls	r3, r3, #5
 8003f52:	4413      	add	r3, r2
 8003f54:	3310      	adds	r3, #16
 8003f56:	2202      	movs	r2, #2
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e008      	b.n	8003f6e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8003f60:	4a4f      	ldr	r2, [pc, #316]	; (80040a0 <BSP_LCD_InitEx+0x194>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	015b      	lsls	r3, r3, #5
 8003f66:	4413      	add	r3, r2
 8003f68:	3310      	adds	r3, #16
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8003f6e:	4a4c      	ldr	r2, [pc, #304]	; (80040a0 <BSP_LCD_InitEx+0x194>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	015b      	lsls	r3, r3, #5
 8003f74:	4413      	add	r3, r2
 8003f76:	330c      	adds	r3, #12
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8003f7c:	4a48      	ldr	r2, [pc, #288]	; (80040a0 <BSP_LCD_InitEx+0x194>)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	015b      	lsls	r3, r3, #5
 8003f82:	4413      	add	r3, r2
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8003f88:	4a45      	ldr	r2, [pc, #276]	; (80040a0 <BSP_LCD_InitEx+0x194>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	015b      	lsls	r3, r3, #5
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f96:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <BSP_LCD_InitEx+0x198>)
 8003f9a:	4a43      	ldr	r2, [pc, #268]	; (80040a8 <BSP_LCD_InitEx+0x19c>)
 8003f9c:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8003f9e:	4b43      	ldr	r3, [pc, #268]	; (80040ac <BSP_LCD_InitEx+0x1a0>)
 8003fa0:	4a43      	ldr	r2, [pc, #268]	; (80040b0 <BSP_LCD_InitEx+0x1a4>)
 8003fa2:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8003fa4:	483f      	ldr	r0, [pc, #252]	; (80040a4 <BSP_LCD_InitEx+0x198>)
 8003fa6:	f000 fd1b 	bl	80049e0 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8003faa:	4840      	ldr	r0, [pc, #256]	; (80040ac <BSP_LCD_InitEx+0x1a0>)
 8003fac:	f000 fde4 	bl	8004b78 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8003fb0:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <BSP_LCD_InitEx+0x1a8>)
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8003fb4:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <BSP_LCD_InitEx+0x1ac>)
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8003fb8:	2370      	movs	r3, #112	; 0x70
 8003fba:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8003fbc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe faf0 	bl	80025ac <FT5336_RegisterBusIO>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da03      	bge.n	8003fda <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003fd2:	f06f 0304 	mvn.w	r3, #4
 8003fd6:	677b      	str	r3, [r7, #116]	; 0x74
 8003fd8:	e02b      	b.n	8004032 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8003fda:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe fbdb 	bl	80027a0 <FT5336_ReadID>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da03      	bge.n	8003ff8 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ff0:	f06f 0304 	mvn.w	r3, #4
 8003ff4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ff6:	e01c      	b.n	8004032 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	2b51      	cmp	r3, #81	; 0x51
 8003ffc:	d003      	beq.n	8004006 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003ffe:	f06f 0306 	mvn.w	r3, #6
 8004002:	677b      	str	r3, [r7, #116]	; 0x74
 8004004:	e015      	b.n	8004032 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8004006:	4827      	ldr	r0, [pc, #156]	; (80040a4 <BSP_LCD_InitEx+0x198>)
 8004008:	f000 f8e8 	bl	80041dc <MX_LTDC_ClockConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004012:	f06f 0303 	mvn.w	r3, #3
 8004016:	677b      	str	r3, [r7, #116]	; 0x74
 8004018:	e00b      	b.n	8004032 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800401a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800401e:	6839      	ldr	r1, [r7, #0]
 8004020:	4820      	ldr	r0, [pc, #128]	; (80040a4 <BSP_LCD_InitEx+0x198>)
 8004022:	f000 f84d 	bl	80040c0 <MX_LTDC_Init>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800402c:	f06f 0303 	mvn.w	r3, #3
 8004030:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8004032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004034:	2b00      	cmp	r3, #0
 8004036:	d12d      	bne.n	8004094 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8004038:	2000      	movs	r0, #0
 800403a:	f001 fa1b 	bl	8005474 <BSP_SDRAM_Init>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8004044:	f06f 0303 	mvn.w	r3, #3
 8004048:	e025      	b.n	8004096 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8004056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800405a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 800405c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8004060:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	461a      	mov	r2, r3
 800406c:	2100      	movs	r1, #0
 800406e:	480d      	ldr	r0, [pc, #52]	; (80040a4 <BSP_LCD_InitEx+0x198>)
 8004070:	f000 f872 	bl	8004158 <MX_LTDC_ConfigLayer>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800407a:	f06f 0303 	mvn.w	r3, #3
 800407e:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8004080:	480e      	ldr	r0, [pc, #56]	; (80040bc <BSP_LCD_InitEx+0x1b0>)
 8004082:	f000 fde1 	bl	8004c48 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8004086:	4a06      	ldr	r2, [pc, #24]	; (80040a0 <BSP_LCD_InitEx+0x194>)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015b      	lsls	r3, r3, #5
 800408c:	4413      	add	r3, r2
 800408e:	3318      	adds	r3, #24
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8004094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8004096:	4618      	mov	r0, r3
 8004098:	3778      	adds	r7, #120	; 0x78
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	24001c04 	.word	0x24001c04
 80040a4:	24001b5c 	.word	0x24001b5c
 80040a8:	50001000 	.word	0x50001000
 80040ac:	24001af4 	.word	0x24001af4
 80040b0:	52001000 	.word	0x52001000
 80040b4:	08003639 	.word	0x08003639
 80040b8:	080037d5 	.word	0x080037d5
 80040bc:	24001aa8 	.word	0x24001aa8

080040c0 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a21      	ldr	r2, [pc, #132]	; (8004154 <MX_LTDC_Init+0x94>)
 80040d0:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2228      	movs	r2, #40	; 0x28
 80040ee:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	222a      	movs	r2, #42	; 0x2a
 80040f4:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f103 0235 	add.w	r2, r3, #53	; 0x35
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2209      	movs	r2, #9
 800410e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	220b      	movs	r2, #11
 8004114:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 020b 	add.w	r2, r3, #11
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 020d 	add.w	r2, r3, #13
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	22ff      	movs	r2, #255	; 0xff
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f005 f8ee 	bl	8009324 <HAL_LTDC_Init>
 8004148:	4603      	mov	r3, r0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	50001000 	.word	0x50001000

08004158 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b092      	sub	sp, #72	; 0x48
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8004182:	23ff      	movs	r3, #255	; 0xff
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800418a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004190:	2307      	movs	r3, #7
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4619      	mov	r1, r3
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f005 f983 	bl	80094d8 <HAL_LTDC_ConfigLayer>
 80041d2:	4603      	mov	r3, r0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3748      	adds	r7, #72	; 0x48
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b0b2      	sub	sp, #200	; 0xc8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80041e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 80041f0:	2305      	movs	r3, #5
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 80041f4:	23a0      	movs	r3, #160	; 0xa0
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80041f8:	2302      	movs	r3, #2
 80041fa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80041fc:	2302      	movs	r3, #2
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8004200:	2353      	movs	r3, #83	; 0x53
 8004202:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	4618      	mov	r0, r3
 8004212:	f007 fa83 	bl	800b71c <HAL_RCCEx_PeriphCLKConfig>
 8004216:	4603      	mov	r3, r0
}
 8004218:	4618      	mov	r0, r3
 800421a:	37c8      	adds	r7, #200	; 0xc8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004234:	f06f 0301 	mvn.w	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e007      	b.n	800424c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <BSP_LCD_GetPixelFormat+0x3c>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	015b      	lsls	r3, r3, #5
 8004242:	4413      	add	r3, r2
 8004244:	330c      	adds	r3, #12
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800424c:	68fb      	ldr	r3, [r7, #12]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	24001c04 	.word	0x24001c04

08004260 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004274:	f06f 0301 	mvn.w	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e006      	b.n	800428a <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800427c:	4a06      	ldr	r2, [pc, #24]	; (8004298 <BSP_LCD_SetActiveLayer+0x38>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	015b      	lsls	r3, r3, #5
 8004282:	4413      	add	r3, r2
 8004284:	3308      	adds	r3, #8
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	24001c04 	.word	0x24001c04

0800429c <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042b0:	f06f 0301 	mvn.w	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e006      	b.n	80042c6 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80042b8:	4a06      	ldr	r2, [pc, #24]	; (80042d4 <BSP_LCD_GetXSize+0x38>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	015b      	lsls	r3, r3, #5
 80042be:	4413      	add	r3, r2
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	24001c04 	.word	0x24001c04

080042d8 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042ec:	f06f 0301 	mvn.w	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e007      	b.n	8004304 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80042f4:	4a07      	ldr	r2, [pc, #28]	; (8004314 <BSP_LCD_GetYSize+0x3c>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	015b      	lsls	r3, r3, #5
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8004304:	68fb      	ldr	r3, [r7, #12]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	24001c04 	.word	0x24001c04

08004318 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08e      	sub	sp, #56	; 0x38
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	330a      	adds	r3, #10
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	330b      	adds	r3, #11
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	441a      	add	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	441a      	add	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	330d      	adds	r3, #13
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	4413      	add	r3, r2
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3312      	adds	r3, #18
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	3313      	adds	r3, #19
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	441a      	add	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	3314      	adds	r3, #20
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	441a      	add	r2, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	3315      	adds	r3, #21
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	4413      	add	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	3316      	adds	r3, #22
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3317      	adds	r3, #23
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	441a      	add	r2, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3318      	adds	r3, #24
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	441a      	add	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	3319      	adds	r3, #25
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	4413      	add	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	331c      	adds	r3, #28
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	331d      	adds	r3, #29
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	4413      	add	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80043b6:	4a37      	ldr	r2, [pc, #220]	; (8004494 <BSP_LCD_DrawBitmap+0x17c>)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	015b      	lsls	r3, r3, #5
 80043bc:	4413      	add	r3, r2
 80043be:	3308      	adds	r3, #8
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a35      	ldr	r2, [pc, #212]	; (8004498 <BSP_LCD_DrawBitmap+0x180>)
 80043c4:	2134      	movs	r1, #52	; 0x34
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	335c      	adds	r3, #92	; 0x5c
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4930      	ldr	r1, [pc, #192]	; (8004494 <BSP_LCD_DrawBitmap+0x17c>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	015b      	lsls	r3, r3, #5
 80043d6:	440b      	add	r3, r1
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	fb03 f101 	mul.w	r1, r3, r1
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	440b      	add	r3, r1
 80043e4:	482b      	ldr	r0, [pc, #172]	; (8004494 <BSP_LCD_DrawBitmap+0x17c>)
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	0149      	lsls	r1, r1, #5
 80043ea:	4401      	add	r1, r0
 80043ec:	3110      	adds	r1, #16
 80043ee:	6809      	ldr	r1, [r1, #0]
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	3b20      	subs	r3, #32
 80043fc:	2b07      	cmp	r3, #7
 80043fe:	d802      	bhi.n	8004406 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	e008      	b.n	8004418 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3b10      	subs	r3, #16
 800440a:	2b07      	cmp	r3, #7
 800440c:	d802      	bhi.n	8004414 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800440e:	2302      	movs	r3, #2
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	e001      	b.n	8004418 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8004414:	2301      	movs	r3, #1
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3b01      	subs	r3, #1
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	08d2      	lsrs	r2, r2, #3
 8004426:	fb03 f202 	mul.w	r2, r3, r2
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	4413      	add	r3, r2
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	4413      	add	r3, r2
 8004432:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8004434:	2300      	movs	r3, #0
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004438:	e023      	b.n	8004482 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 800443a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6a39      	ldr	r1, [r7, #32]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fa77 	bl	8004938 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <BSP_LCD_DrawBitmap+0x17c>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	4413      	add	r3, r2
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	490f      	ldr	r1, [pc, #60]	; (8004494 <BSP_LCD_DrawBitmap+0x17c>)
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	0152      	lsls	r2, r2, #5
 800445a:	440a      	add	r2, r1
 800445c:	3210      	adds	r2, #16
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004466:	4413      	add	r3, r2
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	08db      	lsrs	r3, r3, #3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	425b      	negs	r3, r3
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	4413      	add	r3, r2
 800447a:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	3301      	adds	r3, #1
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	429a      	cmp	r2, r3
 8004488:	d3d7      	bcc.n	800443a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 800448a:	69fb      	ldr	r3, [r7, #28]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	; 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	24001c04 	.word	0x24001c04
 8004498:	24001b5c 	.word	0x24001b5c

0800449c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e032      	b.n	800451a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e028      	b.n	800450c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	3301      	adds	r3, #1
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	431a      	orrs	r2, r3
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3302      	adds	r3, #2
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	3303      	adds	r3, #3
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	061b      	lsls	r3, r3, #24
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	18d1      	adds	r1, r2, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	441a      	add	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f95e 	bl	80047b0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 80044f4:	4a0d      	ldr	r2, [pc, #52]	; (800452c <BSP_LCD_FillRGBRect+0x90>)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	015b      	lsls	r3, r3, #5
 80044fa:	4413      	add	r3, r2
 80044fc:	3310      	adds	r3, #16
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3301      	adds	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	429a      	cmp	r2, r3
 8004512:	d3d2      	bcc.n	80044ba <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3301      	adds	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	429a      	cmp	r2, r3
 8004520:	d3c8      	bcc.n	80044b4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	24001c04 	.word	0x24001c04

08004530 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800453e:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <BSP_LCD_DrawHLine+0x94>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	4413      	add	r3, r2
 8004546:	3308      	adds	r3, #8
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <BSP_LCD_DrawHLine+0x98>)
 800454c:	2134      	movs	r1, #52	; 0x34
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	335c      	adds	r3, #92	; 0x5c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	491a      	ldr	r1, [pc, #104]	; (80045c4 <BSP_LCD_DrawHLine+0x94>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	015b      	lsls	r3, r3, #5
 800455e:	440b      	add	r3, r1
 8004560:	3310      	adds	r3, #16
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4817      	ldr	r0, [pc, #92]	; (80045c4 <BSP_LCD_DrawHLine+0x94>)
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	0149      	lsls	r1, r1, #5
 800456a:	4401      	add	r1, r0
 800456c:	6809      	ldr	r1, [r1, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	fb01 f000 	mul.w	r0, r1, r0
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	4401      	add	r1, r0
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	441a      	add	r2, r3
 8004586:	490f      	ldr	r1, [pc, #60]	; (80045c4 <BSP_LCD_DrawHLine+0x94>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	015b      	lsls	r3, r3, #5
 800458c:	440b      	add	r3, r1
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d907      	bls.n	80045a4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8004594:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <BSP_LCD_DrawHLine+0x94>)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	015b      	lsls	r3, r3, #5
 800459a:	4413      	add	r3, r2
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80045a4:	6979      	ldr	r1, [r7, #20]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	2300      	movs	r3, #0
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	2301      	movs	r3, #1
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f956 	bl	8004864 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24001c04 	.word	0x24001c04
 80045c8:	24001b5c 	.word	0x24001b5c

080045cc <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80045da:	4a24      	ldr	r2, [pc, #144]	; (800466c <BSP_LCD_DrawVLine+0xa0>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	015b      	lsls	r3, r3, #5
 80045e0:	4413      	add	r3, r2
 80045e2:	3308      	adds	r3, #8
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a22      	ldr	r2, [pc, #136]	; (8004670 <BSP_LCD_DrawVLine+0xa4>)
 80045e8:	2134      	movs	r1, #52	; 0x34
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	335c      	adds	r3, #92	; 0x5c
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	491d      	ldr	r1, [pc, #116]	; (800466c <BSP_LCD_DrawVLine+0xa0>)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	015b      	lsls	r3, r3, #5
 80045fa:	440b      	add	r3, r1
 80045fc:	3310      	adds	r3, #16
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	481a      	ldr	r0, [pc, #104]	; (800466c <BSP_LCD_DrawVLine+0xa0>)
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	0149      	lsls	r1, r1, #5
 8004606:	4401      	add	r1, r0
 8004608:	6809      	ldr	r1, [r1, #0]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	fb01 f000 	mul.w	r0, r1, r0
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	4401      	add	r1, r0
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	441a      	add	r2, r3
 8004622:	4912      	ldr	r1, [pc, #72]	; (800466c <BSP_LCD_DrawVLine+0xa0>)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	015b      	lsls	r3, r3, #5
 8004628:	440b      	add	r3, r1
 800462a:	3304      	adds	r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d908      	bls.n	8004644 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8004632:	4a0e      	ldr	r2, [pc, #56]	; (800466c <BSP_LCD_DrawVLine+0xa0>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	015b      	lsls	r3, r3, #5
 8004638:	4413      	add	r3, r2
 800463a:	3304      	adds	r3, #4
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <BSP_LCD_DrawVLine+0xa0>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	015b      	lsls	r3, r3, #5
 800464c:	4413      	add	r3, r2
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3b01      	subs	r3, #1
 8004652:	6a3a      	ldr	r2, [r7, #32]
 8004654:	9201      	str	r2, [sp, #4]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2201      	movs	r2, #1
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f901 	bl	8004864 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	24001c04 	.word	0x24001c04
 8004670:	24001b5c 	.word	0x24001b5c

08004674 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <BSP_LCD_FillRect+0x7c>)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	015b      	lsls	r3, r3, #5
 8004688:	4413      	add	r3, r2
 800468a:	3308      	adds	r3, #8
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <BSP_LCD_FillRect+0x80>)
 8004690:	2134      	movs	r1, #52	; 0x34
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	335c      	adds	r3, #92	; 0x5c
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4914      	ldr	r1, [pc, #80]	; (80046f0 <BSP_LCD_FillRect+0x7c>)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	015b      	lsls	r3, r3, #5
 80046a2:	440b      	add	r3, r1
 80046a4:	3310      	adds	r3, #16
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4811      	ldr	r0, [pc, #68]	; (80046f0 <BSP_LCD_FillRect+0x7c>)
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	0149      	lsls	r1, r1, #5
 80046ae:	4401      	add	r1, r0
 80046b0:	6809      	ldr	r1, [r1, #0]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	fb01 f000 	mul.w	r0, r1, r0
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4401      	add	r1, r0
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80046c4:	6979      	ldr	r1, [r7, #20]
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <BSP_LCD_FillRect+0x7c>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	015b      	lsls	r3, r3, #5
 80046cc:	4413      	add	r3, r2
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	9201      	str	r2, [sp, #4]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8c0 	bl	8004864 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	24001c04 	.word	0x24001c04
 80046f4:	24001b5c 	.word	0x24001b5c

080046f8 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004706:	4a28      	ldr	r2, [pc, #160]	; (80047a8 <BSP_LCD_ReadPixel+0xb0>)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	015b      	lsls	r3, r3, #5
 800470c:	4413      	add	r3, r2
 800470e:	3308      	adds	r3, #8
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <BSP_LCD_ReadPixel+0xb4>)
 8004714:	2134      	movs	r1, #52	; 0x34
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3348      	adds	r3, #72	; 0x48
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11c      	bne.n	800475e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8004724:	4a20      	ldr	r2, [pc, #128]	; (80047a8 <BSP_LCD_ReadPixel+0xb0>)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	015b      	lsls	r3, r3, #5
 800472a:	4413      	add	r3, r2
 800472c:	3308      	adds	r3, #8
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <BSP_LCD_ReadPixel+0xb4>)
 8004732:	2134      	movs	r1, #52	; 0x34
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	335c      	adds	r3, #92	; 0x5c
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	491a      	ldr	r1, [pc, #104]	; (80047a8 <BSP_LCD_ReadPixel+0xb0>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	440b      	add	r3, r1
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	fb03 f101 	mul.w	r1, r3, r1
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	440b      	add	r3, r1
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e01d      	b.n	800479a <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800475e:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <BSP_LCD_ReadPixel+0xb0>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	015b      	lsls	r3, r3, #5
 8004764:	4413      	add	r3, r2
 8004766:	3308      	adds	r3, #8
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a10      	ldr	r2, [pc, #64]	; (80047ac <BSP_LCD_ReadPixel+0xb4>)
 800476c:	2134      	movs	r1, #52	; 0x34
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	335c      	adds	r3, #92	; 0x5c
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	490b      	ldr	r1, [pc, #44]	; (80047a8 <BSP_LCD_ReadPixel+0xb0>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	015b      	lsls	r3, r3, #5
 800477e:	440b      	add	r3, r1
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	fb03 f101 	mul.w	r1, r3, r1
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	440b      	add	r3, r1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	24001c04 	.word	0x24001c04
 80047ac:	24001b5c 	.word	0x24001b5c

080047b0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80047be:	4a27      	ldr	r2, [pc, #156]	; (800485c <BSP_LCD_WritePixel+0xac>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	015b      	lsls	r3, r3, #5
 80047c4:	4413      	add	r3, r2
 80047c6:	3308      	adds	r3, #8
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a25      	ldr	r2, [pc, #148]	; (8004860 <BSP_LCD_WritePixel+0xb0>)
 80047cc:	2134      	movs	r1, #52	; 0x34
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3348      	adds	r3, #72	; 0x48
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11c      	bne.n	8004816 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 80047dc:	4a1f      	ldr	r2, [pc, #124]	; (800485c <BSP_LCD_WritePixel+0xac>)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	015b      	lsls	r3, r3, #5
 80047e2:	4413      	add	r3, r2
 80047e4:	3308      	adds	r3, #8
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <BSP_LCD_WritePixel+0xb0>)
 80047ea:	2134      	movs	r1, #52	; 0x34
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	335c      	adds	r3, #92	; 0x5c
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4919      	ldr	r1, [pc, #100]	; (800485c <BSP_LCD_WritePixel+0xac>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	015b      	lsls	r3, r3, #5
 80047fc:	440b      	add	r3, r1
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	fb03 f101 	mul.w	r1, r3, r1
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	440b      	add	r3, r1
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	461a      	mov	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e01b      	b.n	800484e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8004816:	4a11      	ldr	r2, [pc, #68]	; (800485c <BSP_LCD_WritePixel+0xac>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	4413      	add	r3, r2
 800481e:	3308      	adds	r3, #8
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <BSP_LCD_WritePixel+0xb0>)
 8004824:	2134      	movs	r1, #52	; 0x34
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	335c      	adds	r3, #92	; 0x5c
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	490a      	ldr	r1, [pc, #40]	; (800485c <BSP_LCD_WritePixel+0xac>)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	015b      	lsls	r3, r3, #5
 8004836:	440b      	add	r3, r1
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	fb03 f101 	mul.w	r1, r3, r1
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	440b      	add	r3, r1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4413      	add	r3, r2
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b292      	uxth	r2, r2
 800484c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	24001c04 	.word	0x24001c04
 8004860:	24001b5c 	.word	0x24001b5c

08004864 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8004876:	4a2d      	ldr	r2, [pc, #180]	; (800492c <LL_FillBuffer+0xc8>)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	015b      	lsls	r3, r3, #5
 800487c:	4413      	add	r3, r2
 800487e:	330c      	adds	r3, #12
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d129      	bne.n	80048da <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004886:	2302      	movs	r3, #2
 8004888:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	0adb      	lsrs	r3, r3, #11
 800488e:	f003 021f 	and.w	r2, r3, #31
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	4413      	add	r3, r2
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	3317      	adds	r3, #23
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	0419      	lsls	r1, r3, #16
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048aa:	4613      	mov	r3, r2
 80048ac:	01db      	lsls	r3, r3, #7
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4413      	add	r3, r2
 80048b4:	3321      	adds	r3, #33	; 0x21
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	4319      	orrs	r1, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f003 021f 	and.w	r2, r3, #31
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	4413      	add	r3, r2
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	3317      	adds	r3, #23
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	430b      	orrs	r3, r1
 80048d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d6:	613b      	str	r3, [r7, #16]
    break;
 80048d8:	e002      	b.n	80048e0 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
    break;
 80048de:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <LL_FillBuffer+0xcc>)
 80048e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80048e6:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <LL_FillBuffer+0xcc>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <LL_FillBuffer+0xcc>)
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <LL_FillBuffer+0xcc>)
 80048f6:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <LL_FillBuffer+0xd0>)
 80048f8:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80048fa:	480d      	ldr	r0, [pc, #52]	; (8004930 <LL_FillBuffer+0xcc>)
 80048fc:	f003 f880 	bl	8007a00 <HAL_DMA2D_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10e      	bne.n	8004924 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6939      	ldr	r1, [r7, #16]
 8004910:	4807      	ldr	r0, [pc, #28]	; (8004930 <LL_FillBuffer+0xcc>)
 8004912:	f003 f8e3 	bl	8007adc <HAL_DMA2D_Start>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800491c:	2132      	movs	r1, #50	; 0x32
 800491e:	4804      	ldr	r0, [pc, #16]	; (8004930 <LL_FillBuffer+0xcc>)
 8004920:	f003 f907 	bl	8007b32 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	24001c04 	.word	0x24001c04
 8004930:	24001af4 	.word	0x24001af4
 8004934:	52001000 	.word	0x52001000

08004938 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8004946:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <LL_ConvertLineToRGB+0x9c>)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	015b      	lsls	r3, r3, #5
 800494c:	4413      	add	r3, r2
 800494e:	330c      	adds	r3, #12
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d102      	bne.n	800495c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8004956:	2302      	movs	r3, #2
 8004958:	617b      	str	r3, [r7, #20]
    break;
 800495a:	e002      	b.n	8004962 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
    break;
 8004960:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 8004964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004968:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800496a:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 8004978:	2200      	movs	r2, #0
 800497a:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800497c:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 800497e:	22ff      	movs	r2, #255	; 0xff
 8004980:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8004982:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004988:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 800498a:	2200      	movs	r2, #0
 800498c:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 8004990:	4a12      	ldr	r2, [pc, #72]	; (80049dc <LL_ConvertLineToRGB+0xa4>)
 8004992:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004994:	4810      	ldr	r0, [pc, #64]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 8004996:	f003 f833 	bl	8007a00 <HAL_DMA2D_Init>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d115      	bne.n	80049cc <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80049a0:	2101      	movs	r1, #1
 80049a2:	480d      	ldr	r0, [pc, #52]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 80049a4:	f003 f9ae 	bl	8007d04 <HAL_DMA2D_ConfigLayer>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10e      	bne.n	80049cc <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	2301      	movs	r3, #1
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	4807      	ldr	r0, [pc, #28]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 80049ba:	f003 f88f 	bl	8007adc <HAL_DMA2D_Start>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80049c4:	2132      	movs	r1, #50	; 0x32
 80049c6:	4804      	ldr	r0, [pc, #16]	; (80049d8 <LL_ConvertLineToRGB+0xa0>)
 80049c8:	f003 f8b3 	bl	8007b32 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	24001c04 	.word	0x24001c04
 80049d8:	24001af4 	.word	0x24001af4
 80049dc:	52001000 	.word	0x52001000

080049e0 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5b      	ldr	r2, [pc, #364]	; (8004b5c <LTDC_MspInit+0x17c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 80b0 	bne.w	8004b54 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80049f4:	4b5a      	ldr	r3, [pc, #360]	; (8004b60 <LTDC_MspInit+0x180>)
 80049f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049fa:	4a59      	ldr	r2, [pc, #356]	; (8004b60 <LTDC_MspInit+0x180>)
 80049fc:	f043 0308 	orr.w	r3, r3, #8
 8004a00:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a04:	4b56      	ldr	r3, [pc, #344]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	623b      	str	r3, [r7, #32]
 8004a10:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004a12:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a18:	4a51      	ldr	r2, [pc, #324]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a22:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004a30:	4b4b      	ldr	r3, [pc, #300]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a36:	4a4a      	ldr	r2, [pc, #296]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a40:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004a4e:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a54:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a5e:	4b40      	ldr	r3, [pc, #256]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a6c:	4b3c      	ldr	r3, [pc, #240]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a72:	4a3b      	ldr	r2, [pc, #236]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a7c:	4b38      	ldr	r3, [pc, #224]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a8a:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a90:	4a33      	ldr	r2, [pc, #204]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a92:	f043 0308 	orr.w	r3, r3, #8
 8004a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a9a:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <LTDC_MspInit+0x180>)
 8004a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8004aa8:	f24d 2303 	movw	r3, #53763	; 0xd203
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004aba:	230e      	movs	r3, #14
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4827      	ldr	r0, [pc, #156]	; (8004b64 <LTDC_MspInit+0x184>)
 8004ac6:	f003 fad5 	bl	8008074 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8004aca:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004ad0:	230e      	movs	r3, #14
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8004ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4823      	ldr	r0, [pc, #140]	; (8004b68 <LTDC_MspInit+0x188>)
 8004adc:	f003 faca 	bl	8008074 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004ae0:	23ff      	movs	r3, #255	; 0xff
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004ae4:	230e      	movs	r3, #14
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aec:	4619      	mov	r1, r3
 8004aee:	481f      	ldr	r0, [pc, #124]	; (8004b6c <LTDC_MspInit+0x18c>)
 8004af0:	f003 fac0 	bl	8008074 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8004af4:	f240 2302 	movw	r3, #514	; 0x202
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004afa:	2302      	movs	r3, #2
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004b02:	2302      	movs	r3, #2
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004b06:	230e      	movs	r3, #14
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8004b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4817      	ldr	r0, [pc, #92]	; (8004b70 <LTDC_MspInit+0x190>)
 8004b12:	f003 faaf 	bl	8008074 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b22:	4619      	mov	r1, r3
 8004b24:	4813      	ldr	r0, [pc, #76]	; (8004b74 <LTDC_MspInit+0x194>)
 8004b26:	f003 faa5 	bl	8008074 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	4811      	ldr	r0, [pc, #68]	; (8004b74 <LTDC_MspInit+0x194>)
 8004b30:	f003 fd72 	bl	8008618 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <LTDC_MspInit+0x180>)
 8004b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <LTDC_MspInit+0x180>)
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <LTDC_MspInit+0x180>)
 8004b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4a:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <LTDC_MspInit+0x180>)
 8004b4c:	f023 0308 	bic.w	r3, r3, #8
 8004b50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8004b54:	bf00      	nop
 8004b56:	3738      	adds	r7, #56	; 0x38
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	50001000 	.word	0x50001000
 8004b60:	58024400 	.word	0x58024400
 8004b64:	58022000 	.word	0x58022000
 8004b68:	58022400 	.word	0x58022400
 8004b6c:	58022800 	.word	0x58022800
 8004b70:	58021c00 	.word	0x58021c00
 8004b74:	58020c00 	.word	0x58020c00

08004b78 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <DMA2D_MspInit+0x54>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d11a      	bne.n	8004bc0 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004b8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004b90:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004b92:	f043 0310 	orr.w	r3, r3, #16
 8004b96:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004b9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004bae:	f043 0310 	orr.w	r3, r3, #16
 8004bb2:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb8:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <DMA2D_MspInit+0x58>)
 8004bba:	f023 0310 	bic.w	r3, r3, #16
 8004bbe:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	52001000 	.word	0x52001000
 8004bd0:	58024400 	.word	0x58024400

08004bd4 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <TIMx_PWM_MspInit+0x6c>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <TIMx_PWM_MspInit+0x6c>)
 8004be4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <TIMx_PWM_MspInit+0x6c>)
 8004bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <TIMx_PWM_MspInit+0x6c>)
 8004bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <TIMx_PWM_MspInit+0x6c>)
 8004c02:	f043 0302 	orr.w	r3, r3, #2
 8004c06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <TIMx_PWM_MspInit+0x6c>)
 8004c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004c20:	2301      	movs	r3, #1
 8004c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8004c24:	2303      	movs	r3, #3
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8004c28:	2301      	movs	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	4619      	mov	r1, r3
 8004c32:	4804      	ldr	r0, [pc, #16]	; (8004c44 <TIMx_PWM_MspInit+0x70>)
 8004c34:	f003 fa1e 	bl	8008074 <HAL_GPIO_Init>
}
 8004c38:	bf00      	nop
 8004c3a:	3728      	adds	r7, #40	; 0x28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	58024400 	.word	0x58024400
 8004c44:	58022800 	.word	0x58022800

08004c48 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a11      	ldr	r2, [pc, #68]	; (8004c98 <TIMx_PWM_Init+0x50>)
 8004c54:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f008 f9c8 	bl	800cfec <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ffb9 	bl	8004bd4 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004c6e:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f008 f958 	bl	800cf3e <HAL_TIM_PWM_Init>
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40010400 	.word	0x40010400

08004c9c <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b090      	sub	sp, #64	; 0x40
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004cb0:	f06f 0301 	mvn.w	r3, #1
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb6:	e090      	b.n	8004dda <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8004cb8:	494a      	ldr	r1, [pc, #296]	; (8004de4 <BSP_QSPI_Init+0x148>)
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f040 8086 	bne.w	8004dda <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 8004cce:	4846      	ldr	r0, [pc, #280]	; (8004de8 <BSP_QSPI_Init+0x14c>)
 8004cd0:	f000 f99c 	bl	800500c <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 8004cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d17f      	bne.n	8004dda <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8004cda:	f107 031c 	add.w	r3, r7, #28
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd ffc4 	bl	8002c6c <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b40      	ldr	r3, [pc, #256]	; (8004dec <BSP_QSPI_Init+0x150>)
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8004cf2:	2340      	movs	r3, #64	; 0x40
 8004cf4:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e003      	b.n	8004d18 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	fab3 f383 	clz	r3, r3
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <BSP_QSPI_Init+0x8c>
 8004d24:	2310      	movs	r3, #16
 8004d26:	e000      	b.n	8004d2a <BSP_QSPI_Init+0x8e>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8004d2c:	f107 030c 	add.w	r3, r7, #12
 8004d30:	4619      	mov	r1, r3
 8004d32:	482d      	ldr	r0, [pc, #180]	; (8004de8 <BSP_QSPI_Init+0x14c>)
 8004d34:	f000 f85c 	bl	8004df0 <MX_QSPI_Init>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8004d3e:	f06f 0303 	mvn.w	r3, #3
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d44:	e049      	b.n	8004dda <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 faa8 	bl	800529c <QSPI_ResetMemory>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d52:	f06f 0304 	mvn.w	r3, #4
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	e03f      	b.n	8004dda <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004d5a:	4922      	ldr	r1, [pc, #136]	; (8004de4 <BSP_QSPI_Init+0x148>)
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	3301      	adds	r3, #1
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	481e      	ldr	r0, [pc, #120]	; (8004de8 <BSP_QSPI_Init+0x14c>)
 8004d70:	f7fd ffeb 	bl	8002d4a <MT25TL01G_AutoPollingMemReady>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d7a:	f06f 0304 	mvn.w	r3, #4
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d80:	e02b      	b.n	8004dda <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004d82:	4918      	ldr	r1, [pc, #96]	; (8004de4 <BSP_QSPI_Init+0x148>)
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3301      	adds	r3, #1
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	4814      	ldr	r0, [pc, #80]	; (8004de8 <BSP_QSPI_Init+0x14c>)
 8004d98:	f7fd ff8f 	bl	8002cba <MT25TL01G_Enter4BytesAddressMode>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004da2:	f06f 0304 	mvn.w	r3, #4
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	e017      	b.n	8004dda <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fae2 	bl	8005374 <QSPI_DummyCyclesCfg>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8004db6:	f06f 0304 	mvn.w	r3, #4
 8004dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dbc:	e00d      	b.n	8004dda <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	7819      	ldrb	r1, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f89d 	bl	8004f08 <BSP_QSPI_ConfigFlash>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8004dd4:	f06f 0304 	mvn.w	r3, #4
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3740      	adds	r7, #64	; 0x40
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	24001c70 	.word	0x24001c70
 8004de8:	24001c24 	.word	0x24001c24
 8004dec:	08018394 	.word	0x08018394

08004df0 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <MX_QSPI_Init+0x5c>)
 8004dfe:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004e24:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f004 ffee 	bl	8009e1c <HAL_QSPI_Init>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	52005000 	.word	0x52005000

08004e50 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004e62:	f06f 0301 	mvn.w	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e045      	b.n	8004ef6 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8004e6a:	4925      	ldr	r1, [pc, #148]	; (8004f00 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3302      	adds	r3, #2
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11d      	bne.n	8004ebc <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004e80:	491f      	ldr	r1, [pc, #124]	; (8004f00 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	3301      	adds	r3, #1
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	481b      	ldr	r0, [pc, #108]	; (8004f04 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8004e96:	f7fe f8ad 	bl	8002ff4 <MT25TL01G_EnableMemoryMappedModeSTR>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ea0:	f06f 0304 	mvn.w	r3, #4
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e026      	b.n	8004ef6 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8004ea8:	4915      	ldr	r1, [pc, #84]	; (8004f00 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e01c      	b.n	8004ef6 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8004ebc:	4910      	ldr	r1, [pc, #64]	; (8004f00 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3301      	adds	r3, #1
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	480c      	ldr	r0, [pc, #48]	; (8004f04 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8004ed2:	f7fe f825 	bl	8002f20 <MT25TL01G_EnableMemoryMappedModeDTR>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004edc:	f06f 0304 	mvn.w	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e008      	b.n	8004ef6 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8004ee4:	4906      	ldr	r1, [pc, #24]	; (8004f00 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	24001c70 	.word	0x24001c70
 8004f04:	24001c24 	.word	0x24001c24

08004f08 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
 8004f14:	4613      	mov	r3, r2
 8004f16:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f22:	f06f 0301 	mvn.w	r3, #1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e067      	b.n	8004ffa <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8004f2a:	4936      	ldr	r1, [pc, #216]	; (8005004 <BSP_QSPI_ConfigFlash+0xfc>)
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d103      	bne.n	8004f46 <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8004f3e:	f06f 0319 	mvn.w	r3, #25
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e059      	b.n	8004ffa <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8004f46:	78bb      	ldrb	r3, [r7, #2]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <BSP_QSPI_ConfigFlash+0x48>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	e000      	b.n	8004f52 <BSP_QSPI_ConfigFlash+0x4a>
 8004f50:	2300      	movs	r3, #0
 8004f52:	4a2d      	ldr	r2, [pc, #180]	; (8005008 <BSP_QSPI_ConfigFlash+0x100>)
 8004f54:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8004f56:	482c      	ldr	r0, [pc, #176]	; (8005008 <BSP_QSPI_ConfigFlash+0x100>)
 8004f58:	f004 ff60 	bl	8009e1c <HAL_QSPI_Init>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004f62:	f06f 0303 	mvn.w	r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e047      	b.n	8004ffa <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8004f6a:	4926      	ldr	r1, [pc, #152]	; (8005004 <BSP_QSPI_ConfigFlash+0xfc>)
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	3301      	adds	r3, #1
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d10c      	bne.n	8004f9a <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d016      	beq.n	8004fb4 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8004f86:	4820      	ldr	r0, [pc, #128]	; (8005008 <BSP_QSPI_ConfigFlash+0x100>)
 8004f88:	f7fd ffa0 	bl	8002ecc <MT25TL01G_ExitQPIMode>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8004f92:	f06f 0304 	mvn.w	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8004f98:	e00c      	b.n	8004fb4 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d10b      	bne.n	8004fb8 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8004fa0:	4819      	ldr	r0, [pc, #100]	; (8005008 <BSP_QSPI_ConfigFlash+0x100>)
 8004fa2:	f7fd ff69 	bl	8002e78 <MT25TL01G_EnterQPIMode>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fac:	f06f 0304 	mvn.w	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8004fb2:	e001      	b.n	8004fb8 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8004fb4:	bf00      	nop
 8004fb6:	e000      	b.n	8004fba <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8004fb8:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11c      	bne.n	8004ffa <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8004fc0:	4910      	ldr	r1, [pc, #64]	; (8005004 <BSP_QSPI_ConfigFlash+0xfc>)
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8004fd2:	490c      	ldr	r1, [pc, #48]	; (8005004 <BSP_QSPI_ConfigFlash+0xfc>)
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8004fe6:	4907      	ldr	r1, [pc, #28]	; (8005004 <BSP_QSPI_ConfigFlash+0xfc>)
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	78ba      	ldrb	r2, [r7, #2]
 8004ff8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	24001c70 	.word	0x24001c70
 8005008:	24001c24 	.word	0x24001c24

0800500c <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b094      	sub	sp, #80	; 0x50
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005014:	4b9c      	ldr	r3, [pc, #624]	; (8005288 <QSPI_MspInit+0x27c>)
 8005016:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800501a:	4a9b      	ldr	r2, [pc, #620]	; (8005288 <QSPI_MspInit+0x27c>)
 800501c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005020:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005024:	4b98      	ldr	r3, [pc, #608]	; (8005288 <QSPI_MspInit+0x27c>)
 8005026:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800502a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8005032:	4b95      	ldr	r3, [pc, #596]	; (8005288 <QSPI_MspInit+0x27c>)
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	4a94      	ldr	r2, [pc, #592]	; (8005288 <QSPI_MspInit+0x27c>)
 8005038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503c:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800503e:	4b92      	ldr	r3, [pc, #584]	; (8005288 <QSPI_MspInit+0x27c>)
 8005040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005042:	4a91      	ldr	r2, [pc, #580]	; (8005288 <QSPI_MspInit+0x27c>)
 8005044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005048:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800504a:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <QSPI_MspInit+0x27c>)
 800504c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005050:	4a8d      	ldr	r2, [pc, #564]	; (8005288 <QSPI_MspInit+0x27c>)
 8005052:	f043 0320 	orr.w	r3, r3, #32
 8005056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800505a:	4b8b      	ldr	r3, [pc, #556]	; (8005288 <QSPI_MspInit+0x27c>)
 800505c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005068:	4b87      	ldr	r3, [pc, #540]	; (8005288 <QSPI_MspInit+0x27c>)
 800506a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800506e:	4a86      	ldr	r2, [pc, #536]	; (8005288 <QSPI_MspInit+0x27c>)
 8005070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005078:	4b83      	ldr	r3, [pc, #524]	; (8005288 <QSPI_MspInit+0x27c>)
 800507a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	633b      	str	r3, [r7, #48]	; 0x30
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005086:	4b80      	ldr	r3, [pc, #512]	; (8005288 <QSPI_MspInit+0x27c>)
 8005088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800508c:	4a7e      	ldr	r2, [pc, #504]	; (8005288 <QSPI_MspInit+0x27c>)
 800508e:	f043 0308 	orr.w	r3, r3, #8
 8005092:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005096:	4b7c      	ldr	r3, [pc, #496]	; (8005288 <QSPI_MspInit+0x27c>)
 8005098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80050a4:	4b78      	ldr	r3, [pc, #480]	; (8005288 <QSPI_MspInit+0x27c>)
 80050a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050aa:	4a77      	ldr	r2, [pc, #476]	; (8005288 <QSPI_MspInit+0x27c>)
 80050ac:	f043 0320 	orr.w	r3, r3, #32
 80050b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050b4:	4b74      	ldr	r3, [pc, #464]	; (8005288 <QSPI_MspInit+0x27c>)
 80050b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80050c2:	4b71      	ldr	r3, [pc, #452]	; (8005288 <QSPI_MspInit+0x27c>)
 80050c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050c8:	4a6f      	ldr	r2, [pc, #444]	; (8005288 <QSPI_MspInit+0x27c>)
 80050ca:	f043 0320 	orr.w	r3, r3, #32
 80050ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050d2:	4b6d      	ldr	r3, [pc, #436]	; (8005288 <QSPI_MspInit+0x27c>)
 80050d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80050e0:	4b69      	ldr	r3, [pc, #420]	; (8005288 <QSPI_MspInit+0x27c>)
 80050e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e6:	4a68      	ldr	r2, [pc, #416]	; (8005288 <QSPI_MspInit+0x27c>)
 80050e8:	f043 0320 	orr.w	r3, r3, #32
 80050ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050f0:	4b65      	ldr	r3, [pc, #404]	; (8005288 <QSPI_MspInit+0x27c>)
 80050f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80050fe:	4b62      	ldr	r3, [pc, #392]	; (8005288 <QSPI_MspInit+0x27c>)
 8005100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005104:	4a60      	ldr	r2, [pc, #384]	; (8005288 <QSPI_MspInit+0x27c>)
 8005106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800510e:	4b5e      	ldr	r3, [pc, #376]	; (8005288 <QSPI_MspInit+0x27c>)
 8005110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800511c:	4b5a      	ldr	r3, [pc, #360]	; (8005288 <QSPI_MspInit+0x27c>)
 800511e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005122:	4a59      	ldr	r2, [pc, #356]	; (8005288 <QSPI_MspInit+0x27c>)
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800512c:	4b56      	ldr	r3, [pc, #344]	; (8005288 <QSPI_MspInit+0x27c>)
 800512e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800513a:	4b53      	ldr	r3, [pc, #332]	; (8005288 <QSPI_MspInit+0x27c>)
 800513c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005140:	4a51      	ldr	r2, [pc, #324]	; (8005288 <QSPI_MspInit+0x27c>)
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800514a:	4b4f      	ldr	r3, [pc, #316]	; (8005288 <QSPI_MspInit+0x27c>)
 800514c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005158:	4b4b      	ldr	r3, [pc, #300]	; (8005288 <QSPI_MspInit+0x27c>)
 800515a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800515e:	4a4a      	ldr	r2, [pc, #296]	; (8005288 <QSPI_MspInit+0x27c>)
 8005160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005168:	4b47      	ldr	r3, [pc, #284]	; (8005288 <QSPI_MspInit+0x27c>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005176:	4b44      	ldr	r3, [pc, #272]	; (8005288 <QSPI_MspInit+0x27c>)
 8005178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517c:	4a42      	ldr	r2, [pc, #264]	; (8005288 <QSPI_MspInit+0x27c>)
 800517e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005186:	4b40      	ldr	r3, [pc, #256]	; (8005288 <QSPI_MspInit+0x27c>)
 8005188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8005194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800519a:	2302      	movs	r3, #2
 800519c:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80051a6:	2309      	movs	r3, #9
 80051a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80051aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051ae:	4619      	mov	r1, r3
 80051b0:	4836      	ldr	r0, [pc, #216]	; (800528c <QSPI_MspInit+0x280>)
 80051b2:	f002 ff5f 	bl	8008074 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80051b6:	2340      	movs	r3, #64	; 0x40
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80051ba:	2301      	movs	r3, #1
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80051be:	230a      	movs	r3, #10
 80051c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80051c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051c6:	4619      	mov	r1, r3
 80051c8:	4831      	ldr	r0, [pc, #196]	; (8005290 <QSPI_MspInit+0x284>)
 80051ca:	f002 ff53 	bl	8008074 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80051ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80051d8:	2309      	movs	r3, #9
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80051dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051e0:	4619      	mov	r1, r3
 80051e2:	482c      	ldr	r0, [pc, #176]	; (8005294 <QSPI_MspInit+0x288>)
 80051e4:	f002 ff46 	bl	8008074 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80051e8:	2304      	movs	r3, #4
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80051ec:	2309      	movs	r3, #9
 80051ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80051f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051f4:	4619      	mov	r1, r3
 80051f6:	4828      	ldr	r0, [pc, #160]	; (8005298 <QSPI_MspInit+0x28c>)
 80051f8:	f002 ff3c 	bl	8008074 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80051fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005202:	230a      	movs	r3, #10
 8005204:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005206:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800520a:	4619      	mov	r1, r3
 800520c:	481f      	ldr	r0, [pc, #124]	; (800528c <QSPI_MspInit+0x280>)
 800520e:	f002 ff31 	bl	8008074 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005212:	2308      	movs	r3, #8
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005216:	2309      	movs	r3, #9
 8005218:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800521a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800521e:	4619      	mov	r1, r3
 8005220:	481d      	ldr	r0, [pc, #116]	; (8005298 <QSPI_MspInit+0x28c>)
 8005222:	f002 ff27 	bl	8008074 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800522a:	2309      	movs	r3, #9
 800522c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800522e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005232:	4619      	mov	r1, r3
 8005234:	4815      	ldr	r0, [pc, #84]	; (800528c <QSPI_MspInit+0x280>)
 8005236:	f002 ff1d 	bl	8008074 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800523a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005244:	4619      	mov	r1, r3
 8005246:	4812      	ldr	r0, [pc, #72]	; (8005290 <QSPI_MspInit+0x284>)
 8005248:	f002 ff14 	bl	8008074 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005250:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005254:	4619      	mov	r1, r3
 8005256:	480d      	ldr	r0, [pc, #52]	; (800528c <QSPI_MspInit+0x280>)
 8005258:	f002 ff0c 	bl	8008074 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800525c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005266:	4619      	mov	r1, r3
 8005268:	4809      	ldr	r0, [pc, #36]	; (8005290 <QSPI_MspInit+0x284>)
 800526a:	f002 ff03 	bl	8008074 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800526e:	2200      	movs	r2, #0
 8005270:	210f      	movs	r1, #15
 8005272:	205c      	movs	r0, #92	; 0x5c
 8005274:	f000 fe85 	bl	8005f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005278:	205c      	movs	r0, #92	; 0x5c
 800527a:	f000 fe9c 	bl	8005fb6 <HAL_NVIC_EnableIRQ>
}
 800527e:	bf00      	nop
 8005280:	3750      	adds	r7, #80	; 0x50
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	58024400 	.word	0x58024400
 800528c:	58021400 	.word	0x58021400
 8005290:	58021800 	.word	0x58021800
 8005294:	58020c00 	.word	0x58020c00
 8005298:	58021c00 	.word	0x58021c00

0800529c <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80052a8:	2103      	movs	r1, #3
 80052aa:	4830      	ldr	r0, [pc, #192]	; (800536c <QSPI_ResetMemory+0xd0>)
 80052ac:	f7fd ff0a 	bl	80030c4 <MT25TL01G_ResetEnable>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 80052b6:	f06f 0304 	mvn.w	r3, #4
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e051      	b.n	8005362 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80052be:	2103      	movs	r1, #3
 80052c0:	482a      	ldr	r0, [pc, #168]	; (800536c <QSPI_ResetMemory+0xd0>)
 80052c2:	f7fd ff31 	bl	8003128 <MT25TL01G_ResetMemory>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80052cc:	f06f 0304 	mvn.w	r3, #4
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e046      	b.n	8005362 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80052d4:	4926      	ldr	r1, [pc, #152]	; (8005370 <QSPI_ResetMemory+0xd4>)
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3301      	adds	r3, #1
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	4820      	ldr	r0, [pc, #128]	; (800536c <QSPI_ResetMemory+0xd0>)
 80052ea:	f7fd fd2e 	bl	8002d4a <MT25TL01G_AutoPollingMemReady>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80052f4:	f06f 0304 	mvn.w	r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e032      	b.n	8005362 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80052fc:	2100      	movs	r1, #0
 80052fe:	481b      	ldr	r0, [pc, #108]	; (800536c <QSPI_ResetMemory+0xd0>)
 8005300:	f7fd fee0 	bl	80030c4 <MT25TL01G_ResetEnable>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800530a:	f06f 0304 	mvn.w	r3, #4
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e027      	b.n	8005362 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005312:	2100      	movs	r1, #0
 8005314:	4815      	ldr	r0, [pc, #84]	; (800536c <QSPI_ResetMemory+0xd0>)
 8005316:	f7fd ff07 	bl	8003128 <MT25TL01G_ResetMemory>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005320:	f06f 0304 	mvn.w	r3, #4
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e01c      	b.n	8005362 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005328:	4911      	ldr	r1, [pc, #68]	; (8005370 <QSPI_ResetMemory+0xd4>)
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	2201      	movs	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800533a:	490d      	ldr	r1, [pc, #52]	; (8005370 <QSPI_ResetMemory+0xd4>)
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3301      	adds	r3, #1
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800534e:	4908      	ldr	r1, [pc, #32]	; (8005370 <QSPI_ResetMemory+0xd4>)
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3302      	adds	r3, #2
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	24001c24 	.word	0x24001c24
 8005370:	24001c70 	.word	0x24001c70

08005374 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b092      	sub	sp, #72	; 0x48
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800537c:	2300      	movs	r3, #0
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8005380:	2300      	movs	r3, #0
 8005382:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005384:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800538a:	2385      	movs	r3, #133	; 0x85
 800538c:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005392:	2300      	movs	r3, #0
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005396:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 80053a0:	2302      	movs	r3, #2
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053a8:	2300      	movs	r3, #0
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053ac:	2300      	movs	r3, #0
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	4619      	mov	r1, r3
 80053ba:	482b      	ldr	r0, [pc, #172]	; (8005468 <QSPI_DummyCyclesCfg+0xf4>)
 80053bc:	f004 fdac 	bl	8009f18 <HAL_QSPI_Command>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80053c6:	f06f 0304 	mvn.w	r3, #4
 80053ca:	e048      	b.n	800545e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053cc:	f107 030a 	add.w	r3, r7, #10
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4619      	mov	r1, r3
 80053d6:	4824      	ldr	r0, [pc, #144]	; (8005468 <QSPI_DummyCyclesCfg+0xf4>)
 80053d8:	f004 fe8e 	bl	800a0f8 <HAL_QSPI_Receive>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80053e2:	f06f 0304 	mvn.w	r3, #4
 80053e6:	e03a      	b.n	800545e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80053e8:	4920      	ldr	r1, [pc, #128]	; (800546c <QSPI_DummyCyclesCfg+0xf8>)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3301      	adds	r3, #1
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	4619      	mov	r1, r3
 80053fc:	481a      	ldr	r0, [pc, #104]	; (8005468 <QSPI_DummyCyclesCfg+0xf4>)
 80053fe:	f7fd fce0 	bl	8002dc2 <MT25TL01G_WriteEnable>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8005408:	f06f 0304 	mvn.w	r3, #4
 800540c:	e027      	b.n	800545e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800540e:	2381      	movs	r3, #129	; 0x81
 8005410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005412:	897a      	ldrh	r2, [r7, #10]
 8005414:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005418:	4013      	ands	r3, r2
 800541a:	b29a      	uxth	r2, r3
 800541c:	4b14      	ldr	r3, [pc, #80]	; (8005470 <QSPI_DummyCyclesCfg+0xfc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	4619      	mov	r1, r3
 800542e:	480e      	ldr	r0, [pc, #56]	; (8005468 <QSPI_DummyCyclesCfg+0xf4>)
 8005430:	f004 fd72 	bl	8009f18 <HAL_QSPI_Command>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800543a:	f06f 0304 	mvn.w	r3, #4
 800543e:	e00e      	b.n	800545e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005440:	f107 030a 	add.w	r3, r7, #10
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4619      	mov	r1, r3
 800544a:	4807      	ldr	r0, [pc, #28]	; (8005468 <QSPI_DummyCyclesCfg+0xf4>)
 800544c:	f004 fdc2 	bl	8009fd4 <HAL_QSPI_Transmit>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8005456:	f06f 0304 	mvn.w	r3, #4
 800545a:	e000      	b.n	800545e <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800545c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800545e:	4618      	mov	r0, r3
 8005460:	3748      	adds	r7, #72	; 0x48
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	24001c24 	.word	0x24001c24
 800546c:	24001c70 	.word	0x24001c70
 8005470:	ffff8080 	.word	0xffff8080

08005474 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8005486:	f06f 0301 	mvn.w	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e044      	b.n	8005518 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2234      	movs	r2, #52	; 0x34
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	4a23      	ldr	r2, [pc, #140]	; (8005524 <BSP_SDRAM_Init+0xb0>)
 8005498:	4413      	add	r3, r2
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f8a8 	bl	80055f0 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2234      	movs	r2, #52	; 0x34
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <BSP_SDRAM_Init+0xb0>)
 80054aa:	4413      	add	r3, r2
 80054ac:	2210      	movs	r2, #16
 80054ae:	2104      	movs	r1, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f83b 	bl	800552c <MX_SDRAM_BANK2_Init>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e029      	b.n	8005518 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80054c4:	4b18      	ldr	r3, [pc, #96]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054c6:	2208      	movs	r2, #8
 80054c8:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054cc:	2203      	movs	r2, #3
 80054ce:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80054d0:	4b15      	ldr	r3, [pc, #84]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054d2:	f240 6203 	movw	r2, #1539	; 0x603
 80054d6:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054da:	2200      	movs	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80054de:	4b12      	ldr	r3, [pc, #72]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80054e4:	4b10      	ldr	r3, [pc, #64]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054e6:	2230      	movs	r2, #48	; 0x30
 80054e8:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80054f0:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 80054f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f6:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2234      	movs	r2, #52	; 0x34
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	4a08      	ldr	r2, [pc, #32]	; (8005524 <BSP_SDRAM_Init+0xb0>)
 8005502:	4413      	add	r3, r2
 8005504:	4908      	ldr	r1, [pc, #32]	; (8005528 <BSP_SDRAM_Init+0xb4>)
 8005506:	4618      	mov	r0, r3
 8005508:	f7fd fe40 	bl	800318c <MT48LC4M32B2_Init>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005512:	f06f 0304 	mvn.w	r3, #4
 8005516:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8005518:	68fb      	ldr	r3, [r7, #12]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	24001c7c 	.word	0x24001c7c
 8005528:	24001cb0 	.word	0x24001cb0

0800552c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	; 0x30
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8005538:	4b20      	ldr	r3, [pc, #128]	; (80055bc <MX_SDRAM_BANK2_Init+0x90>)
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <MX_SDRAM_BANK2_Init+0x94>)
 800553c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005556:	4b19      	ldr	r3, [pc, #100]	; (80055bc <MX_SDRAM_BANK2_Init+0x90>)
 8005558:	2240      	movs	r2, #64	; 0x40
 800555a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005562:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005570:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8005580:	2302      	movs	r3, #2
 8005582:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005584:	2307      	movs	r3, #7
 8005586:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8005588:	2304      	movs	r3, #4
 800558a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800558c:	2307      	movs	r3, #7
 800558e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8005590:	2302      	movs	r3, #2
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8005594:	2302      	movs	r3, #2
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8005598:	2302      	movs	r3, #2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	4619      	mov	r1, r3
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f007 fc28 	bl	800cdf8 <HAL_SDRAM_Init>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3730      	adds	r7, #48	; 0x30
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	24001c7c 	.word	0x24001c7c
 80055c0:	52004140 	.word	0x52004140

080055c4 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 80055cc:	4a07      	ldr	r2, [pc, #28]	; (80055ec <BSP_SDRAM_IRQHandler+0x28>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2134      	movs	r1, #52	; 0x34
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	3330      	adds	r3, #48	; 0x30
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f004 f9f7 	bl	80099d0 <HAL_MDMA_IRQHandler>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	24001c7c 	.word	0x24001c7c

080055f0 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	; 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80055f8:	4b73      	ldr	r3, [pc, #460]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 80055fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80055fe:	4a72      	ldr	r2, [pc, #456]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005604:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005608:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 800560a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800560e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005612:	623b      	str	r3, [r7, #32]
 8005614:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8005616:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005618:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800561c:	4a6a      	ldr	r2, [pc, #424]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8005626:	4b68      	ldr	r3, [pc, #416]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005628:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005634:	4b64      	ldr	r3, [pc, #400]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800563a:	4a63      	ldr	r2, [pc, #396]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 800563c:	f043 0308 	orr.w	r3, r3, #8
 8005640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005644:	4b60      	ldr	r3, [pc, #384]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005652:	4b5d      	ldr	r3, [pc, #372]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005658:	4a5b      	ldr	r2, [pc, #364]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 800565a:	f043 0310 	orr.w	r3, r3, #16
 800565e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005662:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005670:	4b55      	ldr	r3, [pc, #340]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005676:	4a54      	ldr	r2, [pc, #336]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005678:	f043 0320 	orr.w	r3, r3, #32
 800567c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005680:	4b51      	ldr	r3, [pc, #324]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800568e:	4b4e      	ldr	r3, [pc, #312]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005694:	4a4c      	ldr	r2, [pc, #304]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 8005696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800569a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800569e:	4b4a      	ldr	r3, [pc, #296]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 80056a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056ac:	4b46      	ldr	r3, [pc, #280]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 80056ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056b2:	4a45      	ldr	r2, [pc, #276]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056bc:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <SDRAM_MspInit+0x1d8>)
 80056be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056ca:	2302      	movs	r3, #2
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056ce:	2301      	movs	r3, #1
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d2:	2303      	movs	r3, #3
 80056d4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056d6:	230c      	movs	r3, #12
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80056da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e4:	4619      	mov	r1, r3
 80056e6:	4839      	ldr	r0, [pc, #228]	; (80057cc <SDRAM_MspInit+0x1dc>)
 80056e8:	f002 fcc4 	bl	8008074 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80056ec:	f64f 7383 	movw	r3, #65411	; 0xff83
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80056f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f6:	4619      	mov	r1, r3
 80056f8:	4835      	ldr	r0, [pc, #212]	; (80057d0 <SDRAM_MspInit+0x1e0>)
 80056fa:	f002 fcbb 	bl	8008074 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80056fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005708:	4619      	mov	r1, r3
 800570a:	4832      	ldr	r0, [pc, #200]	; (80057d4 <SDRAM_MspInit+0x1e4>)
 800570c:	f002 fcb2 	bl	8008074 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8005710:	f248 1333 	movw	r3, #33075	; 0x8133
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800571a:	4619      	mov	r1, r3
 800571c:	482e      	ldr	r0, [pc, #184]	; (80057d8 <SDRAM_MspInit+0x1e8>)
 800571e:	f002 fca9 	bl	8008074 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8005722:	23e0      	movs	r3, #224	; 0xe0
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800572a:	4619      	mov	r1, r3
 800572c:	482b      	ldr	r0, [pc, #172]	; (80057dc <SDRAM_MspInit+0x1ec>)
 800572e:	f002 fca1 	bl	8008074 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005738:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800573a:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800573c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005740:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8005742:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005744:	2280      	movs	r2, #128	; 0x80
 8005746:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005750:	f240 2202 	movw	r2, #514	; 0x202
 8005754:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8005756:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005758:	f640 0208 	movw	r2, #2056	; 0x808
 800575c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005760:	2220      	movs	r2, #32
 8005762:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800576a:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800576c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005770:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005774:	2200      	movs	r2, #0
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8005778:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800577e:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005780:	2280      	movs	r2, #128	; 0x80
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005786:	2200      	movs	r2, #0
 8005788:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800578a:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800578c:	2200      	movs	r2, #0
 800578e:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005790:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 8005792:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <SDRAM_MspInit+0x1f4>)
 8005794:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <SDRAM_MspInit+0x1f8>)
 8005798:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <SDRAM_MspInit+0x1f8>)
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80057a2:	480f      	ldr	r0, [pc, #60]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 80057a4:	f004 f8bc 	bl	8009920 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80057a8:	480d      	ldr	r0, [pc, #52]	; (80057e0 <SDRAM_MspInit+0x1f0>)
 80057aa:	f004 f86d 	bl	8009888 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	210f      	movs	r1, #15
 80057b2:	207a      	movs	r0, #122	; 0x7a
 80057b4:	f000 fbe5 	bl	8005f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80057b8:	207a      	movs	r0, #122	; 0x7a
 80057ba:	f000 fbfc 	bl	8005fb6 <HAL_NVIC_EnableIRQ>
}
 80057be:	bf00      	nop
 80057c0:	3738      	adds	r7, #56	; 0x38
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	58024400 	.word	0x58024400
 80057cc:	58020c00 	.word	0x58020c00
 80057d0:	58021000 	.word	0x58021000
 80057d4:	58021400 	.word	0x58021400
 80057d8:	58021800 	.word	0x58021800
 80057dc:	58021c00 	.word	0x58021c00
 80057e0:	24001cd0 	.word	0x24001cd0
 80057e4:	52000040 	.word	0x52000040
 80057e8:	24001c7c 	.word	0x24001c7c

080057ec <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11c      	bne.n	800583a <BSP_TS_Init+0x4e>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d018      	beq.n	800583a <BSP_TS_Init+0x4e>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005810:	d813      	bhi.n	800583a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00f      	beq.n	800583a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8005822:	d80a      	bhi.n	800583a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	428b      	cmp	r3, r1
 8005832:	bf28      	it	cs
 8005834:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005836:	429a      	cmp	r2, r3
 8005838:	d903      	bls.n	8005842 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800583a:	f06f 0301 	mvn.w	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	e06e      	b.n	8005920 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f98c 	bl	8005b60 <FT5336_Probe>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e064      	b.n	8005920 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4934      	ldr	r1, [pc, #208]	; (800592c <BSP_TS_Init+0x140>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	440b      	add	r3, r1
 8005862:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	4930      	ldr	r1, [pc, #192]	; (800592c <BSP_TS_Init+0x140>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	019b      	lsls	r3, r3, #6
 800586e:	440b      	add	r3, r1
 8005870:	3304      	adds	r3, #4
 8005872:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	492c      	ldr	r1, [pc, #176]	; (800592c <BSP_TS_Init+0x140>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	440b      	add	r3, r1
 8005880:	3308      	adds	r3, #8
 8005882:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	4928      	ldr	r1, [pc, #160]	; (800592c <BSP_TS_Init+0x140>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	440b      	add	r3, r1
 8005890:	330c      	adds	r3, #12
 8005892:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005894:	4b26      	ldr	r3, [pc, #152]	; (8005930 <BSP_TS_Init+0x144>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	4926      	ldr	r1, [pc, #152]	; (8005934 <BSP_TS_Init+0x148>)
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058a2:	f107 010c 	add.w	r1, r7, #12
 80058a6:	4610      	mov	r0, r2
 80058a8:	4798      	blx	r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da03      	bge.n	80058b8 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058b0:	f06f 0304 	mvn.w	r3, #4
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e033      	b.n	8005920 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	491c      	ldr	r1, [pc, #112]	; (800592c <BSP_TS_Init+0x140>)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	019b      	lsls	r3, r3, #6
 80058c0:	440b      	add	r3, r1
 80058c2:	3310      	adds	r3, #16
 80058c4:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4918      	ldr	r1, [pc, #96]	; (800592c <BSP_TS_Init+0x140>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	440b      	add	r3, r1
 80058d0:	3314      	adds	r3, #20
 80058d2:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e01f      	b.n	800591a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	4811      	ldr	r0, [pc, #68]	; (800592c <BSP_TS_Init+0x140>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0119      	lsls	r1, r3, #4
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	440b      	add	r3, r1
 80058f0:	3306      	adds	r3, #6
 80058f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	480a      	ldr	r0, [pc, #40]	; (800592c <BSP_TS_Init+0x140>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0119      	lsls	r1, r3, #4
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	440b      	add	r3, r1
 800590c:	330a      	adds	r3, #10
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4403      	add	r3, r0
 8005912:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	3301      	adds	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d9dc      	bls.n	80058da <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8005920:	69fb      	ldr	r3, [r7, #28]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	24001d44 	.word	0x24001d44
 8005930:	24001d3c 	.word	0x24001d3c
 8005934:	24001d40 	.word	0x24001d40

08005938 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	; 0x28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800594c:	f06f 0301 	mvn.w	r3, #1
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	e0f9      	b.n	8005b48 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005954:	4b7f      	ldr	r3, [pc, #508]	; (8005b54 <BSP_TS_GetState+0x21c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	497f      	ldr	r1, [pc, #508]	; (8005b58 <BSP_TS_GetState+0x220>)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005962:	f107 0108 	add.w	r1, r7, #8
 8005966:	4610      	mov	r0, r2
 8005968:	4798      	blx	r3
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	da03      	bge.n	8005978 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005970:	f06f 0304 	mvn.w	r3, #4
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
 8005976:	e0e7      	b.n	8005b48 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80d1 	beq.w	8005b22 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005988:	4a74      	ldr	r2, [pc, #464]	; (8005b5c <BSP_TS_GetState+0x224>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	4413      	add	r3, r2
 8005990:	3308      	adds	r3, #8
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80059a4:	4a6d      	ldr	r2, [pc, #436]	; (8005b5c <BSP_TS_GetState+0x224>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	4413      	add	r3, r2
 80059ac:	3308      	adds	r3, #8
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80059b8:	4a68      	ldr	r2, [pc, #416]	; (8005b5c <BSP_TS_GetState+0x224>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	4413      	add	r3, r2
 80059c0:	3310      	adds	r3, #16
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80059cc:	4a63      	ldr	r2, [pc, #396]	; (8005b5c <BSP_TS_GetState+0x224>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	4413      	add	r3, r2
 80059d4:	3308      	adds	r3, #8
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80059e0:	4a5e      	ldr	r2, [pc, #376]	; (8005b5c <BSP_TS_GetState+0x224>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	4413      	add	r3, r2
 80059e8:	3314      	adds	r3, #20
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80059f2:	4a5a      	ldr	r2, [pc, #360]	; (8005b5c <BSP_TS_GetState+0x224>)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	019b      	lsls	r3, r3, #6
 80059f8:	4413      	add	r3, r2
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	fb03 f202 	mul.w	r2, r3, r2
 8005a02:	4956      	ldr	r1, [pc, #344]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	019b      	lsls	r3, r3, #6
 8005a08:	440b      	add	r3, r1
 8005a0a:	3310      	adds	r3, #16
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005a16:	4a51      	ldr	r2, [pc, #324]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	019b      	lsls	r3, r3, #6
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3304      	adds	r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69fa      	ldr	r2, [r7, #28]
 8005a24:	fb03 f202 	mul.w	r2, r3, r2
 8005a28:	494c      	ldr	r1, [pc, #304]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	019b      	lsls	r3, r3, #6
 8005a2e:	440b      	add	r3, r1
 8005a30:	3314      	adds	r3, #20
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	4945      	ldr	r1, [pc, #276]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	019b      	lsls	r3, r3, #6
 8005a4c:	440b      	add	r3, r1
 8005a4e:	3318      	adds	r3, #24
 8005a50:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d909      	bls.n	8005a6a <BSP_TS_GetState+0x132>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	4940      	ldr	r1, [pc, #256]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	019b      	lsls	r3, r3, #6
 8005a60:	440b      	add	r3, r1
 8005a62:	3318      	adds	r3, #24
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	e008      	b.n	8005a7c <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8005a6a:	4a3c      	ldr	r2, [pc, #240]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	019b      	lsls	r3, r3, #6
 8005a70:	4413      	add	r3, r2
 8005a72:	3318      	adds	r3, #24
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005a7a:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005a7c:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	4936      	ldr	r1, [pc, #216]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	019b      	lsls	r3, r3, #6
 8005a88:	440b      	add	r3, r1
 8005a8a:	332c      	adds	r3, #44	; 0x2c
 8005a8c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d909      	bls.n	8005aa6 <BSP_TS_GetState+0x16e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	4931      	ldr	r1, [pc, #196]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	019b      	lsls	r3, r3, #6
 8005a9c:	440b      	add	r3, r1
 8005a9e:	332c      	adds	r3, #44	; 0x2c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	e008      	b.n	8005ab8 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8005aa6:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	019b      	lsls	r3, r3, #6
 8005aac:	4413      	add	r3, r2
 8005aae:	332c      	adds	r3, #44	; 0x2c
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005ab6:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005ab8:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005aba:	4a28      	ldr	r2, [pc, #160]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	019b      	lsls	r3, r3, #6
 8005ac0:	4413      	add	r3, r2
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d808      	bhi.n	8005ade <BSP_TS_GetState+0x1a6>
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	019b      	lsls	r3, r3, #6
 8005ad2:	4413      	add	r3, r2
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d910      	bls.n	8005b00 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	491e      	ldr	r1, [pc, #120]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	019b      	lsls	r3, r3, #6
 8005ae8:	440b      	add	r3, r1
 8005aea:	3318      	adds	r3, #24
 8005aec:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	491a      	ldr	r1, [pc, #104]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	019b      	lsls	r3, r3, #6
 8005af8:	440b      	add	r3, r1
 8005afa:	332c      	adds	r3, #44	; 0x2c
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e023      	b.n	8005b48 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8005b00:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	4413      	add	r3, r2
 8005b08:	3318      	adds	r3, #24
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005b10:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	4413      	add	r3, r2
 8005b18:	332c      	adds	r3, #44	; 0x2c
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	609a      	str	r2, [r3, #8]
 8005b20:	e012      	b.n	8005b48 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8005b28:	4a0c      	ldr	r2, [pc, #48]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	4413      	add	r3, r2
 8005b30:	3318      	adds	r3, #24
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005b38:	4a08      	ldr	r2, [pc, #32]	; (8005b5c <BSP_TS_GetState+0x224>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	019b      	lsls	r3, r3, #6
 8005b3e:	4413      	add	r3, r2
 8005b40:	332c      	adds	r3, #44	; 0x2c
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	24001d3c 	.word	0x24001d3c
 8005b58:	24001d40 	.word	0x24001d40
 8005b5c:	24001d44 	.word	0x24001d44

08005b60 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8005b70:	2370      	movs	r3, #112	; 0x70
 8005b72:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8005b74:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <FT5336_Probe+0xa4>)
 8005b76:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <FT5336_Probe+0xa8>)
 8005b7a:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <FT5336_Probe+0xac>)
 8005b7e:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005b80:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <FT5336_Probe+0xb0>)
 8005b82:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8005b84:	4b23      	ldr	r3, [pc, #140]	; (8005c14 <FT5336_Probe+0xb4>)
 8005b86:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8005b88:	f107 030c 	add.w	r3, r7, #12
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4822      	ldr	r0, [pc, #136]	; (8005c18 <FT5336_Probe+0xb8>)
 8005b90:	f7fc fd0c 	bl	80025ac <FT5336_RegisterBusIO>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8005b9a:	f06f 0307 	mvn.w	r3, #7
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba0:	e02a      	b.n	8005bf8 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	481b      	ldr	r0, [pc, #108]	; (8005c18 <FT5336_Probe+0xb8>)
 8005baa:	f7fc fdf9 	bl	80027a0 <FT5336_ReadID>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bb4:	f06f 0304 	mvn.w	r3, #4
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bba:	e01d      	b.n	8005bf8 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b51      	cmp	r3, #81	; 0x51
 8005bc0:	d003      	beq.n	8005bca <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005bc2:	f06f 0306 	mvn.w	r3, #6
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	e016      	b.n	8005bf8 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8005bca:	4a14      	ldr	r2, [pc, #80]	; (8005c1c <FT5336_Probe+0xbc>)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4912      	ldr	r1, [pc, #72]	; (8005c18 <FT5336_Probe+0xb8>)
 8005bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8005bd4:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <FT5336_Probe+0xc0>)
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <FT5336_Probe+0xc4>)
 8005bd8:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <FT5336_Probe+0xc0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	490e      	ldr	r1, [pc, #56]	; (8005c1c <FT5336_Probe+0xbc>)
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bf2:	f06f 0304 	mvn.w	r3, #4
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3728      	adds	r7, #40	; 0x28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	08003639 	.word	0x08003639
 8005c08:	080036ad 	.word	0x080036ad
 8005c0c:	080037d5 	.word	0x080037d5
 8005c10:	08003779 	.word	0x08003779
 8005c14:	08003831 	.word	0x08003831
 8005c18:	24001d84 	.word	0x24001d84
 8005c1c:	24001d40 	.word	0x24001d40
 8005c20:	24001d3c 	.word	0x24001d3c
 8005c24:	24000018 	.word	0x24000018

08005c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c2e:	2003      	movs	r0, #3
 8005c30:	f000 f99c 	bl	8005f6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c34:	f005 fbb2 	bl	800b39c <HAL_RCC_GetSysClockFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <HAL_Init+0x68>)
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	0a1b      	lsrs	r3, r3, #8
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	4913      	ldr	r1, [pc, #76]	; (8005c94 <HAL_Init+0x6c>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <HAL_Init+0x68>)
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	4a0e      	ldr	r2, [pc, #56]	; (8005c94 <HAL_Init+0x6c>)
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
 8005c68:	4a0b      	ldr	r2, [pc, #44]	; (8005c98 <HAL_Init+0x70>)
 8005c6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <HAL_Init+0x74>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c72:	200f      	movs	r0, #15
 8005c74:	f000 f814 	bl	8005ca0 <HAL_InitTick>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e002      	b.n	8005c88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c82:	f7fc fae9 	bl	8002258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	58024400 	.word	0x58024400
 8005c94:	080182c8 	.word	0x080182c8
 8005c98:	24000014 	.word	0x24000014
 8005c9c:	24000010 	.word	0x24000010

08005ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <HAL_InitTick+0x60>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e021      	b.n	8005cf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <HAL_InitTick+0x64>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <HAL_InitTick+0x60>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f981 	bl	8005fd2 <HAL_SYSTICK_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e00e      	b.n	8005cf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b0f      	cmp	r3, #15
 8005cde:	d80a      	bhi.n	8005cf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	f000 f94b 	bl	8005f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005cec:	4a06      	ldr	r2, [pc, #24]	; (8005d08 <HAL_InitTick+0x68>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e000      	b.n	8005cf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	24000060 	.word	0x24000060
 8005d04:	24000010 	.word	0x24000010
 8005d08:	2400005c 	.word	0x2400005c

08005d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_IncTick+0x20>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_IncTick+0x24>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <HAL_IncTick+0x24>)
 8005d1e:	6013      	str	r3, [r2, #0]
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	24000060 	.word	0x24000060
 8005d30:	24001dac 	.word	0x24001dac

08005d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  return uwTick;
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <HAL_GetTick+0x14>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	24001dac 	.word	0x24001dac

08005d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d54:	f7ff ffee 	bl	8005d34 <HAL_GetTick>
 8005d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d005      	beq.n	8005d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <HAL_Delay+0x44>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d72:	bf00      	nop
 8005d74:	f7ff ffde 	bl	8005d34 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d8f7      	bhi.n	8005d74 <HAL_Delay+0x28>
  {
  }
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	24000060 	.word	0x24000060

08005d94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005d98:	4b03      	ldr	r3, [pc, #12]	; (8005da8 <HAL_GetREVID+0x14>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	5c001000 	.word	0x5c001000

08005dac <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_EnableCompensationCell+0x1c>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a04      	ldr	r2, [pc, #16]	; (8005dc8 <HAL_EnableCompensationCell+0x1c>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6213      	str	r3, [r2, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	58000400 	.word	0x58000400

08005dcc <__NVIC_SetPriorityGrouping>:
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <__NVIC_SetPriorityGrouping+0x40>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005de8:	4013      	ands	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <__NVIC_SetPriorityGrouping+0x44>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dfa:	4a04      	ldr	r2, [pc, #16]	; (8005e0c <__NVIC_SetPriorityGrouping+0x40>)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	60d3      	str	r3, [r2, #12]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	e000ed00 	.word	0xe000ed00
 8005e10:	05fa0000 	.word	0x05fa0000

08005e14 <__NVIC_GetPriorityGrouping>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <__NVIC_GetPriorityGrouping+0x18>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 0307 	and.w	r3, r3, #7
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_EnableIRQ>:
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	db0b      	blt.n	8005e5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	f003 021f 	and.w	r2, r3, #31
 8005e48:	4907      	ldr	r1, [pc, #28]	; (8005e68 <__NVIC_EnableIRQ+0x38>)
 8005e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2001      	movs	r0, #1
 8005e52:	fa00 f202 	lsl.w	r2, r0, r2
 8005e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	e000e100 	.word	0xe000e100

08005e6c <__NVIC_SetPriority>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	6039      	str	r1, [r7, #0]
 8005e76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	db0a      	blt.n	8005e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	490c      	ldr	r1, [pc, #48]	; (8005eb8 <__NVIC_SetPriority+0x4c>)
 8005e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	440b      	add	r3, r1
 8005e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e94:	e00a      	b.n	8005eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4908      	ldr	r1, [pc, #32]	; (8005ebc <__NVIC_SetPriority+0x50>)
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	0112      	lsls	r2, r2, #4
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	761a      	strb	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	e000e100 	.word	0xe000e100
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <NVIC_EncodePriority>:
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f1c3 0307 	rsb	r3, r3, #7
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	bf28      	it	cs
 8005ede:	2304      	movcs	r3, #4
 8005ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d902      	bls.n	8005ef0 <NVIC_EncodePriority+0x30>
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3b03      	subs	r3, #3
 8005eee:	e000      	b.n	8005ef2 <NVIC_EncodePriority+0x32>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43da      	mvns	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	401a      	ands	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f08:	f04f 31ff 	mov.w	r1, #4294967295
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f12:	43d9      	mvns	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f18:	4313      	orrs	r3, r2
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3724      	adds	r7, #36	; 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f38:	d301      	bcc.n	8005f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e00f      	b.n	8005f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <SysTick_Config+0x40>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f46:	210f      	movs	r1, #15
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	f7ff ff8e 	bl	8005e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <SysTick_Config+0x40>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f56:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <SysTick_Config+0x40>)
 8005f58:	2207      	movs	r2, #7
 8005f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000e010 	.word	0xe000e010

08005f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff29 	bl	8005dcc <__NVIC_SetPriorityGrouping>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	4603      	mov	r3, r0
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f90:	f7ff ff40 	bl	8005e14 <__NVIC_GetPriorityGrouping>
 8005f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	6978      	ldr	r0, [r7, #20]
 8005f9c:	f7ff ff90 	bl	8005ec0 <NVIC_EncodePriority>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff ff5f 	bl	8005e6c <__NVIC_SetPriority>
}
 8005fae:	bf00      	nop
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ff33 	bl	8005e30 <__NVIC_EnableIRQ>
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff ffa4 	bl	8005f28 <SysTick_Config>
 8005fe0:	4603      	mov	r3, r0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005ff0:	f3bf 8f5f 	dmb	sy
}
 8005ff4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <HAL_MPU_Disable+0x28>)
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	4a06      	ldr	r2, [pc, #24]	; (8006014 <HAL_MPU_Disable+0x28>)
 8005ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006000:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_MPU_Disable+0x2c>)
 8006004:	2200      	movs	r2, #0
 8006006:	605a      	str	r2, [r3, #4]
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	e000ed00 	.word	0xe000ed00
 8006018:	e000ed90 	.word	0xe000ed90

0800601c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006024:	4a0b      	ldr	r2, [pc, #44]	; (8006054 <HAL_MPU_Enable+0x38>)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <HAL_MPU_Enable+0x3c>)
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	4a09      	ldr	r2, [pc, #36]	; (8006058 <HAL_MPU_Enable+0x3c>)
 8006034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006038:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800603a:	f3bf 8f4f 	dsb	sy
}
 800603e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006040:	f3bf 8f6f 	isb	sy
}
 8006044:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	e000ed90 	.word	0xe000ed90
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	785a      	ldrb	r2, [r3, #1]
 8006068:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <HAL_MPU_ConfigRegion+0x84>)
 800606a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d029      	beq.n	80060c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006074:	4a1a      	ldr	r2, [pc, #104]	; (80060e0 <HAL_MPU_ConfigRegion+0x84>)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7b1b      	ldrb	r3, [r3, #12]
 8006080:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7adb      	ldrb	r3, [r3, #11]
 8006086:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006088:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7a9b      	ldrb	r3, [r3, #10]
 800608e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006090:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7b5b      	ldrb	r3, [r3, #13]
 8006096:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006098:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7b9b      	ldrb	r3, [r3, #14]
 800609e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7bdb      	ldrb	r3, [r3, #15]
 80060a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7a5b      	ldrb	r3, [r3, #9]
 80060ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7a1b      	ldrb	r3, [r3, #8]
 80060b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060c0:	4a07      	ldr	r2, [pc, #28]	; (80060e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80060c6:	e005      	b.n	80060d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_MPU_ConfigRegion+0x84>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <HAL_MPU_ConfigRegion+0x84>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	611a      	str	r2, [r3, #16]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	e000ed90 	.word	0xe000ed90

080060e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80060ec:	f7ff fe22 	bl	8005d34 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e2dc      	b.n	80066b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d008      	beq.n	800611a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e2cd      	b.n	80066b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a76      	ldr	r2, [pc, #472]	; (80062f8 <HAL_DMA_Abort+0x214>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d04a      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a74      	ldr	r2, [pc, #464]	; (80062fc <HAL_DMA_Abort+0x218>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d045      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a73      	ldr	r2, [pc, #460]	; (8006300 <HAL_DMA_Abort+0x21c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d040      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a71      	ldr	r2, [pc, #452]	; (8006304 <HAL_DMA_Abort+0x220>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d03b      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a70      	ldr	r2, [pc, #448]	; (8006308 <HAL_DMA_Abort+0x224>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d036      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a6e      	ldr	r2, [pc, #440]	; (800630c <HAL_DMA_Abort+0x228>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d031      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a6d      	ldr	r2, [pc, #436]	; (8006310 <HAL_DMA_Abort+0x22c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d02c      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6b      	ldr	r2, [pc, #428]	; (8006314 <HAL_DMA_Abort+0x230>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d027      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6a      	ldr	r2, [pc, #424]	; (8006318 <HAL_DMA_Abort+0x234>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a68      	ldr	r2, [pc, #416]	; (800631c <HAL_DMA_Abort+0x238>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01d      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a67      	ldr	r2, [pc, #412]	; (8006320 <HAL_DMA_Abort+0x23c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a65      	ldr	r2, [pc, #404]	; (8006324 <HAL_DMA_Abort+0x240>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a64      	ldr	r2, [pc, #400]	; (8006328 <HAL_DMA_Abort+0x244>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a62      	ldr	r2, [pc, #392]	; (800632c <HAL_DMA_Abort+0x248>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a61      	ldr	r2, [pc, #388]	; (8006330 <HAL_DMA_Abort+0x24c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_DMA_Abort+0xd6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a5f      	ldr	r2, [pc, #380]	; (8006334 <HAL_DMA_Abort+0x250>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d101      	bne.n	80061be <HAL_DMA_Abort+0xda>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <HAL_DMA_Abort+0xdc>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d013      	beq.n	80061ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 021e 	bic.w	r2, r2, #30
 80061d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	e00a      	b.n	8006202 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 020e 	bic.w	r2, r2, #14
 80061fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_DMA_Abort+0x214>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d072      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <HAL_DMA_Abort+0x218>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d06d      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a39      	ldr	r2, [pc, #228]	; (8006300 <HAL_DMA_Abort+0x21c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d068      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a37      	ldr	r2, [pc, #220]	; (8006304 <HAL_DMA_Abort+0x220>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d063      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a36      	ldr	r2, [pc, #216]	; (8006308 <HAL_DMA_Abort+0x224>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d05e      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a34      	ldr	r2, [pc, #208]	; (800630c <HAL_DMA_Abort+0x228>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d059      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a33      	ldr	r2, [pc, #204]	; (8006310 <HAL_DMA_Abort+0x22c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d054      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a31      	ldr	r2, [pc, #196]	; (8006314 <HAL_DMA_Abort+0x230>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d04f      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a30      	ldr	r2, [pc, #192]	; (8006318 <HAL_DMA_Abort+0x234>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d04a      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2e      	ldr	r2, [pc, #184]	; (800631c <HAL_DMA_Abort+0x238>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d045      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <HAL_DMA_Abort+0x23c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d040      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2b      	ldr	r2, [pc, #172]	; (8006324 <HAL_DMA_Abort+0x240>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d03b      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2a      	ldr	r2, [pc, #168]	; (8006328 <HAL_DMA_Abort+0x244>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d036      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <HAL_DMA_Abort+0x248>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d031      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a27      	ldr	r2, [pc, #156]	; (8006330 <HAL_DMA_Abort+0x24c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d02c      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <HAL_DMA_Abort+0x250>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d027      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_DMA_Abort+0x254>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <HAL_DMA_Abort+0x258>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01d      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_DMA_Abort+0x25c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_DMA_Abort+0x260>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <HAL_DMA_Abort+0x264>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	; (800634c <HAL_DMA_Abort+0x268>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <HAL_DMA_Abort+0x26c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_DMA_Abort+0x20e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_DMA_Abort+0x270>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d132      	bne.n	8006358 <HAL_DMA_Abort+0x274>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e031      	b.n	800635a <HAL_DMA_Abort+0x276>
 80062f6:	bf00      	nop
 80062f8:	40020010 	.word	0x40020010
 80062fc:	40020028 	.word	0x40020028
 8006300:	40020040 	.word	0x40020040
 8006304:	40020058 	.word	0x40020058
 8006308:	40020070 	.word	0x40020070
 800630c:	40020088 	.word	0x40020088
 8006310:	400200a0 	.word	0x400200a0
 8006314:	400200b8 	.word	0x400200b8
 8006318:	40020410 	.word	0x40020410
 800631c:	40020428 	.word	0x40020428
 8006320:	40020440 	.word	0x40020440
 8006324:	40020458 	.word	0x40020458
 8006328:	40020470 	.word	0x40020470
 800632c:	40020488 	.word	0x40020488
 8006330:	400204a0 	.word	0x400204a0
 8006334:	400204b8 	.word	0x400204b8
 8006338:	58025408 	.word	0x58025408
 800633c:	5802541c 	.word	0x5802541c
 8006340:	58025430 	.word	0x58025430
 8006344:	58025444 	.word	0x58025444
 8006348:	58025458 	.word	0x58025458
 800634c:	5802546c 	.word	0x5802546c
 8006350:	58025480 	.word	0x58025480
 8006354:	58025494 	.word	0x58025494
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a6d      	ldr	r2, [pc, #436]	; (8006528 <HAL_DMA_Abort+0x444>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d04a      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6b      	ldr	r2, [pc, #428]	; (800652c <HAL_DMA_Abort+0x448>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d045      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a6a      	ldr	r2, [pc, #424]	; (8006530 <HAL_DMA_Abort+0x44c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d040      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a68      	ldr	r2, [pc, #416]	; (8006534 <HAL_DMA_Abort+0x450>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d03b      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a67      	ldr	r2, [pc, #412]	; (8006538 <HAL_DMA_Abort+0x454>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d036      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a65      	ldr	r2, [pc, #404]	; (800653c <HAL_DMA_Abort+0x458>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d031      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a64      	ldr	r2, [pc, #400]	; (8006540 <HAL_DMA_Abort+0x45c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d02c      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a62      	ldr	r2, [pc, #392]	; (8006544 <HAL_DMA_Abort+0x460>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d027      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a61      	ldr	r2, [pc, #388]	; (8006548 <HAL_DMA_Abort+0x464>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d022      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5f      	ldr	r2, [pc, #380]	; (800654c <HAL_DMA_Abort+0x468>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01d      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5e      	ldr	r2, [pc, #376]	; (8006550 <HAL_DMA_Abort+0x46c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d018      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5c      	ldr	r2, [pc, #368]	; (8006554 <HAL_DMA_Abort+0x470>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5b      	ldr	r2, [pc, #364]	; (8006558 <HAL_DMA_Abort+0x474>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a59      	ldr	r2, [pc, #356]	; (800655c <HAL_DMA_Abort+0x478>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a58      	ldr	r2, [pc, #352]	; (8006560 <HAL_DMA_Abort+0x47c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_DMA_Abort+0x32a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a56      	ldr	r2, [pc, #344]	; (8006564 <HAL_DMA_Abort+0x480>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d108      	bne.n	8006420 <HAL_DMA_Abort+0x33c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0201 	bic.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e007      	b.n	8006430 <HAL_DMA_Abort+0x34c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0201 	bic.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006430:	e013      	b.n	800645a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006432:	f7ff fc7f 	bl	8005d34 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b05      	cmp	r3, #5
 800643e:	d90c      	bls.n	800645a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2203      	movs	r2, #3
 800644a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e12d      	b.n	80066b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e5      	bne.n	8006432 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <HAL_DMA_Abort+0x444>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d04a      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2d      	ldr	r2, [pc, #180]	; (800652c <HAL_DMA_Abort+0x448>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d045      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2c      	ldr	r2, [pc, #176]	; (8006530 <HAL_DMA_Abort+0x44c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d040      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2a      	ldr	r2, [pc, #168]	; (8006534 <HAL_DMA_Abort+0x450>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d03b      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a29      	ldr	r2, [pc, #164]	; (8006538 <HAL_DMA_Abort+0x454>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d036      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a27      	ldr	r2, [pc, #156]	; (800653c <HAL_DMA_Abort+0x458>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d031      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a26      	ldr	r2, [pc, #152]	; (8006540 <HAL_DMA_Abort+0x45c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d02c      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a24      	ldr	r2, [pc, #144]	; (8006544 <HAL_DMA_Abort+0x460>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d027      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a23      	ldr	r2, [pc, #140]	; (8006548 <HAL_DMA_Abort+0x464>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d022      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <HAL_DMA_Abort+0x468>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01d      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a20      	ldr	r2, [pc, #128]	; (8006550 <HAL_DMA_Abort+0x46c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d018      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <HAL_DMA_Abort+0x470>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1d      	ldr	r2, [pc, #116]	; (8006558 <HAL_DMA_Abort+0x474>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00e      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1b      	ldr	r2, [pc, #108]	; (800655c <HAL_DMA_Abort+0x478>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_DMA_Abort+0x47c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_DMA_Abort+0x422>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_DMA_Abort+0x480>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d101      	bne.n	800650a <HAL_DMA_Abort+0x426>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <HAL_DMA_Abort+0x428>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d02b      	beq.n	8006568 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	223f      	movs	r2, #63	; 0x3f
 8006520:	409a      	lsls	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	e02a      	b.n	800657e <HAL_DMA_Abort+0x49a>
 8006528:	40020010 	.word	0x40020010
 800652c:	40020028 	.word	0x40020028
 8006530:	40020040 	.word	0x40020040
 8006534:	40020058 	.word	0x40020058
 8006538:	40020070 	.word	0x40020070
 800653c:	40020088 	.word	0x40020088
 8006540:	400200a0 	.word	0x400200a0
 8006544:	400200b8 	.word	0x400200b8
 8006548:	40020410 	.word	0x40020410
 800654c:	40020428 	.word	0x40020428
 8006550:	40020440 	.word	0x40020440
 8006554:	40020458 	.word	0x40020458
 8006558:	40020470 	.word	0x40020470
 800655c:	40020488 	.word	0x40020488
 8006560:	400204a0 	.word	0x400204a0
 8006564:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2201      	movs	r2, #1
 8006578:	409a      	lsls	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a4f      	ldr	r2, [pc, #316]	; (80066c0 <HAL_DMA_Abort+0x5dc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d072      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a4d      	ldr	r2, [pc, #308]	; (80066c4 <HAL_DMA_Abort+0x5e0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d06d      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a4c      	ldr	r2, [pc, #304]	; (80066c8 <HAL_DMA_Abort+0x5e4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d068      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a4a      	ldr	r2, [pc, #296]	; (80066cc <HAL_DMA_Abort+0x5e8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d063      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a49      	ldr	r2, [pc, #292]	; (80066d0 <HAL_DMA_Abort+0x5ec>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d05e      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a47      	ldr	r2, [pc, #284]	; (80066d4 <HAL_DMA_Abort+0x5f0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d059      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a46      	ldr	r2, [pc, #280]	; (80066d8 <HAL_DMA_Abort+0x5f4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d054      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a44      	ldr	r2, [pc, #272]	; (80066dc <HAL_DMA_Abort+0x5f8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d04f      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a43      	ldr	r2, [pc, #268]	; (80066e0 <HAL_DMA_Abort+0x5fc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d04a      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a41      	ldr	r2, [pc, #260]	; (80066e4 <HAL_DMA_Abort+0x600>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d045      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a40      	ldr	r2, [pc, #256]	; (80066e8 <HAL_DMA_Abort+0x604>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d040      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a3e      	ldr	r2, [pc, #248]	; (80066ec <HAL_DMA_Abort+0x608>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d03b      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3d      	ldr	r2, [pc, #244]	; (80066f0 <HAL_DMA_Abort+0x60c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d036      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a3b      	ldr	r2, [pc, #236]	; (80066f4 <HAL_DMA_Abort+0x610>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d031      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3a      	ldr	r2, [pc, #232]	; (80066f8 <HAL_DMA_Abort+0x614>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d02c      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a38      	ldr	r2, [pc, #224]	; (80066fc <HAL_DMA_Abort+0x618>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d027      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a37      	ldr	r2, [pc, #220]	; (8006700 <HAL_DMA_Abort+0x61c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d022      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a35      	ldr	r2, [pc, #212]	; (8006704 <HAL_DMA_Abort+0x620>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d01d      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a34      	ldr	r2, [pc, #208]	; (8006708 <HAL_DMA_Abort+0x624>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d018      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a32      	ldr	r2, [pc, #200]	; (800670c <HAL_DMA_Abort+0x628>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d013      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a31      	ldr	r2, [pc, #196]	; (8006710 <HAL_DMA_Abort+0x62c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00e      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2f      	ldr	r2, [pc, #188]	; (8006714 <HAL_DMA_Abort+0x630>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d009      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2e      	ldr	r2, [pc, #184]	; (8006718 <HAL_DMA_Abort+0x634>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d004      	beq.n	800666e <HAL_DMA_Abort+0x58a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2c      	ldr	r2, [pc, #176]	; (800671c <HAL_DMA_Abort+0x638>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_DMA_Abort+0x58e>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <HAL_DMA_Abort+0x590>
 8006672:	2300      	movs	r3, #0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d015      	beq.n	80066a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006680:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006698:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40020010 	.word	0x40020010
 80066c4:	40020028 	.word	0x40020028
 80066c8:	40020040 	.word	0x40020040
 80066cc:	40020058 	.word	0x40020058
 80066d0:	40020070 	.word	0x40020070
 80066d4:	40020088 	.word	0x40020088
 80066d8:	400200a0 	.word	0x400200a0
 80066dc:	400200b8 	.word	0x400200b8
 80066e0:	40020410 	.word	0x40020410
 80066e4:	40020428 	.word	0x40020428
 80066e8:	40020440 	.word	0x40020440
 80066ec:	40020458 	.word	0x40020458
 80066f0:	40020470 	.word	0x40020470
 80066f4:	40020488 	.word	0x40020488
 80066f8:	400204a0 	.word	0x400204a0
 80066fc:	400204b8 	.word	0x400204b8
 8006700:	58025408 	.word	0x58025408
 8006704:	5802541c 	.word	0x5802541c
 8006708:	58025430 	.word	0x58025430
 800670c:	58025444 	.word	0x58025444
 8006710:	58025458 	.word	0x58025458
 8006714:	5802546c 	.word	0x5802546c
 8006718:	58025480 	.word	0x58025480
 800671c:	58025494 	.word	0x58025494

08006720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e237      	b.n	8006ba2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d004      	beq.n	8006748 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e22c      	b.n	8006ba2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5c      	ldr	r2, [pc, #368]	; (80068c0 <HAL_DMA_Abort_IT+0x1a0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d04a      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a5b      	ldr	r2, [pc, #364]	; (80068c4 <HAL_DMA_Abort_IT+0x1a4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d045      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a59      	ldr	r2, [pc, #356]	; (80068c8 <HAL_DMA_Abort_IT+0x1a8>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d040      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a58      	ldr	r2, [pc, #352]	; (80068cc <HAL_DMA_Abort_IT+0x1ac>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d03b      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <HAL_DMA_Abort_IT+0x1b0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d036      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a55      	ldr	r2, [pc, #340]	; (80068d4 <HAL_DMA_Abort_IT+0x1b4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d031      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a53      	ldr	r2, [pc, #332]	; (80068d8 <HAL_DMA_Abort_IT+0x1b8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d02c      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a52      	ldr	r2, [pc, #328]	; (80068dc <HAL_DMA_Abort_IT+0x1bc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d027      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a50      	ldr	r2, [pc, #320]	; (80068e0 <HAL_DMA_Abort_IT+0x1c0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d022      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a4f      	ldr	r2, [pc, #316]	; (80068e4 <HAL_DMA_Abort_IT+0x1c4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d01d      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a4d      	ldr	r2, [pc, #308]	; (80068e8 <HAL_DMA_Abort_IT+0x1c8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d018      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4c      	ldr	r2, [pc, #304]	; (80068ec <HAL_DMA_Abort_IT+0x1cc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a4a      	ldr	r2, [pc, #296]	; (80068f0 <HAL_DMA_Abort_IT+0x1d0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00e      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a49      	ldr	r2, [pc, #292]	; (80068f4 <HAL_DMA_Abort_IT+0x1d4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a47      	ldr	r2, [pc, #284]	; (80068f8 <HAL_DMA_Abort_IT+0x1d8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_DMA_Abort_IT+0xc8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a46      	ldr	r2, [pc, #280]	; (80068fc <HAL_DMA_Abort_IT+0x1dc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d101      	bne.n	80067ec <HAL_DMA_Abort_IT+0xcc>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <HAL_DMA_Abort_IT+0xce>
 80067ec:	2300      	movs	r3, #0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8086 	beq.w	8006900 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2204      	movs	r2, #4
 80067f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a2f      	ldr	r2, [pc, #188]	; (80068c0 <HAL_DMA_Abort_IT+0x1a0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d04a      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2e      	ldr	r2, [pc, #184]	; (80068c4 <HAL_DMA_Abort_IT+0x1a4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d045      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2c      	ldr	r2, [pc, #176]	; (80068c8 <HAL_DMA_Abort_IT+0x1a8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d040      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a2b      	ldr	r2, [pc, #172]	; (80068cc <HAL_DMA_Abort_IT+0x1ac>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d03b      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a29      	ldr	r2, [pc, #164]	; (80068d0 <HAL_DMA_Abort_IT+0x1b0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d036      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a28      	ldr	r2, [pc, #160]	; (80068d4 <HAL_DMA_Abort_IT+0x1b4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d031      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a26      	ldr	r2, [pc, #152]	; (80068d8 <HAL_DMA_Abort_IT+0x1b8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d02c      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a25      	ldr	r2, [pc, #148]	; (80068dc <HAL_DMA_Abort_IT+0x1bc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d027      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a23      	ldr	r2, [pc, #140]	; (80068e0 <HAL_DMA_Abort_IT+0x1c0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d022      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a22      	ldr	r2, [pc, #136]	; (80068e4 <HAL_DMA_Abort_IT+0x1c4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d01d      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <HAL_DMA_Abort_IT+0x1c8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d018      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <HAL_DMA_Abort_IT+0x1cc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <HAL_DMA_Abort_IT+0x1d0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00e      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <HAL_DMA_Abort_IT+0x1d4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1a      	ldr	r2, [pc, #104]	; (80068f8 <HAL_DMA_Abort_IT+0x1d8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a19      	ldr	r2, [pc, #100]	; (80068fc <HAL_DMA_Abort_IT+0x1dc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d108      	bne.n	80068ae <HAL_DMA_Abort_IT+0x18e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e178      	b.n	8006ba0 <HAL_DMA_Abort_IT+0x480>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e16f      	b.n	8006ba0 <HAL_DMA_Abort_IT+0x480>
 80068c0:	40020010 	.word	0x40020010
 80068c4:	40020028 	.word	0x40020028
 80068c8:	40020040 	.word	0x40020040
 80068cc:	40020058 	.word	0x40020058
 80068d0:	40020070 	.word	0x40020070
 80068d4:	40020088 	.word	0x40020088
 80068d8:	400200a0 	.word	0x400200a0
 80068dc:	400200b8 	.word	0x400200b8
 80068e0:	40020410 	.word	0x40020410
 80068e4:	40020428 	.word	0x40020428
 80068e8:	40020440 	.word	0x40020440
 80068ec:	40020458 	.word	0x40020458
 80068f0:	40020470 	.word	0x40020470
 80068f4:	40020488 	.word	0x40020488
 80068f8:	400204a0 	.word	0x400204a0
 80068fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 020e 	bic.w	r2, r2, #14
 800690e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6c      	ldr	r2, [pc, #432]	; (8006ac8 <HAL_DMA_Abort_IT+0x3a8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d04a      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a6b      	ldr	r2, [pc, #428]	; (8006acc <HAL_DMA_Abort_IT+0x3ac>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d045      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a69      	ldr	r2, [pc, #420]	; (8006ad0 <HAL_DMA_Abort_IT+0x3b0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d040      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a68      	ldr	r2, [pc, #416]	; (8006ad4 <HAL_DMA_Abort_IT+0x3b4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d03b      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a66      	ldr	r2, [pc, #408]	; (8006ad8 <HAL_DMA_Abort_IT+0x3b8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d036      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_DMA_Abort_IT+0x3bc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d031      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a63      	ldr	r2, [pc, #396]	; (8006ae0 <HAL_DMA_Abort_IT+0x3c0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d02c      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <HAL_DMA_Abort_IT+0x3c4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d027      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a60      	ldr	r2, [pc, #384]	; (8006ae8 <HAL_DMA_Abort_IT+0x3c8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d022      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a5f      	ldr	r2, [pc, #380]	; (8006aec <HAL_DMA_Abort_IT+0x3cc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d01d      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a5d      	ldr	r2, [pc, #372]	; (8006af0 <HAL_DMA_Abort_IT+0x3d0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d018      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a5c      	ldr	r2, [pc, #368]	; (8006af4 <HAL_DMA_Abort_IT+0x3d4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d013      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a5a      	ldr	r2, [pc, #360]	; (8006af8 <HAL_DMA_Abort_IT+0x3d8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00e      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a59      	ldr	r2, [pc, #356]	; (8006afc <HAL_DMA_Abort_IT+0x3dc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a57      	ldr	r2, [pc, #348]	; (8006b00 <HAL_DMA_Abort_IT+0x3e0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_DMA_Abort_IT+0x290>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a56      	ldr	r2, [pc, #344]	; (8006b04 <HAL_DMA_Abort_IT+0x3e4>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d108      	bne.n	80069c2 <HAL_DMA_Abort_IT+0x2a2>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e007      	b.n	80069d2 <HAL_DMA_Abort_IT+0x2b2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a3c      	ldr	r2, [pc, #240]	; (8006ac8 <HAL_DMA_Abort_IT+0x3a8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d072      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a3a      	ldr	r2, [pc, #232]	; (8006acc <HAL_DMA_Abort_IT+0x3ac>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d06d      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a39      	ldr	r2, [pc, #228]	; (8006ad0 <HAL_DMA_Abort_IT+0x3b0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d068      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a37      	ldr	r2, [pc, #220]	; (8006ad4 <HAL_DMA_Abort_IT+0x3b4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d063      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a36      	ldr	r2, [pc, #216]	; (8006ad8 <HAL_DMA_Abort_IT+0x3b8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d05e      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a34      	ldr	r2, [pc, #208]	; (8006adc <HAL_DMA_Abort_IT+0x3bc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d059      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a33      	ldr	r2, [pc, #204]	; (8006ae0 <HAL_DMA_Abort_IT+0x3c0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d054      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a31      	ldr	r2, [pc, #196]	; (8006ae4 <HAL_DMA_Abort_IT+0x3c4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d04f      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a30      	ldr	r2, [pc, #192]	; (8006ae8 <HAL_DMA_Abort_IT+0x3c8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d04a      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a2e      	ldr	r2, [pc, #184]	; (8006aec <HAL_DMA_Abort_IT+0x3cc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d045      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <HAL_DMA_Abort_IT+0x3d0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d040      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a2b      	ldr	r2, [pc, #172]	; (8006af4 <HAL_DMA_Abort_IT+0x3d4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d03b      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <HAL_DMA_Abort_IT+0x3d8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d036      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a28      	ldr	r2, [pc, #160]	; (8006afc <HAL_DMA_Abort_IT+0x3dc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d031      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <HAL_DMA_Abort_IT+0x3e0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d02c      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a25      	ldr	r2, [pc, #148]	; (8006b04 <HAL_DMA_Abort_IT+0x3e4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d027      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a24      	ldr	r2, [pc, #144]	; (8006b08 <HAL_DMA_Abort_IT+0x3e8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d022      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <HAL_DMA_Abort_IT+0x3ec>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d01d      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <HAL_DMA_Abort_IT+0x3f0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d018      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1f      	ldr	r2, [pc, #124]	; (8006b14 <HAL_DMA_Abort_IT+0x3f4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_DMA_Abort_IT+0x3f8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_DMA_Abort_IT+0x3fc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d009      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <HAL_DMA_Abort_IT+0x400>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x3a2>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <HAL_DMA_Abort_IT+0x404>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d132      	bne.n	8006b28 <HAL_DMA_Abort_IT+0x408>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e031      	b.n	8006b2a <HAL_DMA_Abort_IT+0x40a>
 8006ac6:	bf00      	nop
 8006ac8:	40020010 	.word	0x40020010
 8006acc:	40020028 	.word	0x40020028
 8006ad0:	40020040 	.word	0x40020040
 8006ad4:	40020058 	.word	0x40020058
 8006ad8:	40020070 	.word	0x40020070
 8006adc:	40020088 	.word	0x40020088
 8006ae0:	400200a0 	.word	0x400200a0
 8006ae4:	400200b8 	.word	0x400200b8
 8006ae8:	40020410 	.word	0x40020410
 8006aec:	40020428 	.word	0x40020428
 8006af0:	40020440 	.word	0x40020440
 8006af4:	40020458 	.word	0x40020458
 8006af8:	40020470 	.word	0x40020470
 8006afc:	40020488 	.word	0x40020488
 8006b00:	400204a0 	.word	0x400204a0
 8006b04:	400204b8 	.word	0x400204b8
 8006b08:	58025408 	.word	0x58025408
 8006b0c:	5802541c 	.word	0x5802541c
 8006b10:	58025430 	.word	0x58025430
 8006b14:	58025444 	.word	0x58025444
 8006b18:	58025458 	.word	0x58025458
 8006b1c:	5802546c 	.word	0x5802546c
 8006b20:	58025480 	.word	0x58025480
 8006b24:	58025494 	.word	0x58025494
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d028      	beq.n	8006b80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	409a      	lsls	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00c      	beq.n	8006b80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop

08006bac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bb8:	4b67      	ldr	r3, [pc, #412]	; (8006d58 <HAL_DMA_IRQHandler+0x1ac>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a67      	ldr	r2, [pc, #412]	; (8006d5c <HAL_DMA_IRQHandler+0x1b0>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	0a9b      	lsrs	r3, r3, #10
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a5f      	ldr	r2, [pc, #380]	; (8006d60 <HAL_DMA_IRQHandler+0x1b4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d04a      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a5d      	ldr	r2, [pc, #372]	; (8006d64 <HAL_DMA_IRQHandler+0x1b8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d045      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a5c      	ldr	r2, [pc, #368]	; (8006d68 <HAL_DMA_IRQHandler+0x1bc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d040      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a5a      	ldr	r2, [pc, #360]	; (8006d6c <HAL_DMA_IRQHandler+0x1c0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d03b      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a59      	ldr	r2, [pc, #356]	; (8006d70 <HAL_DMA_IRQHandler+0x1c4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d036      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a57      	ldr	r2, [pc, #348]	; (8006d74 <HAL_DMA_IRQHandler+0x1c8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d031      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a56      	ldr	r2, [pc, #344]	; (8006d78 <HAL_DMA_IRQHandler+0x1cc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d02c      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a54      	ldr	r2, [pc, #336]	; (8006d7c <HAL_DMA_IRQHandler+0x1d0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d027      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a53      	ldr	r2, [pc, #332]	; (8006d80 <HAL_DMA_IRQHandler+0x1d4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d022      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a51      	ldr	r2, [pc, #324]	; (8006d84 <HAL_DMA_IRQHandler+0x1d8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01d      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a50      	ldr	r2, [pc, #320]	; (8006d88 <HAL_DMA_IRQHandler+0x1dc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d018      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a4e      	ldr	r2, [pc, #312]	; (8006d8c <HAL_DMA_IRQHandler+0x1e0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a4d      	ldr	r2, [pc, #308]	; (8006d90 <HAL_DMA_IRQHandler+0x1e4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00e      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a4b      	ldr	r2, [pc, #300]	; (8006d94 <HAL_DMA_IRQHandler+0x1e8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d009      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a4a      	ldr	r2, [pc, #296]	; (8006d98 <HAL_DMA_IRQHandler+0x1ec>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <HAL_DMA_IRQHandler+0xd2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a48      	ldr	r2, [pc, #288]	; (8006d9c <HAL_DMA_IRQHandler+0x1f0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d101      	bne.n	8006c82 <HAL_DMA_IRQHandler+0xd6>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <HAL_DMA_IRQHandler+0xd8>
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 842b 	beq.w	80074e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2208      	movs	r2, #8
 8006c94:	409a      	lsls	r2, r3
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80a2 	beq.w	8006de4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a2e      	ldr	r2, [pc, #184]	; (8006d60 <HAL_DMA_IRQHandler+0x1b4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d04a      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <HAL_DMA_IRQHandler+0x1b8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d045      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a2b      	ldr	r2, [pc, #172]	; (8006d68 <HAL_DMA_IRQHandler+0x1bc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d040      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <HAL_DMA_IRQHandler+0x1c0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d03b      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a28      	ldr	r2, [pc, #160]	; (8006d70 <HAL_DMA_IRQHandler+0x1c4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d036      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <HAL_DMA_IRQHandler+0x1c8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d031      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a25      	ldr	r2, [pc, #148]	; (8006d78 <HAL_DMA_IRQHandler+0x1cc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d02c      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <HAL_DMA_IRQHandler+0x1d0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d027      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <HAL_DMA_IRQHandler+0x1d4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <HAL_DMA_IRQHandler+0x1d8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d01d      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a1f      	ldr	r2, [pc, #124]	; (8006d88 <HAL_DMA_IRQHandler+0x1dc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a1e      	ldr	r2, [pc, #120]	; (8006d8c <HAL_DMA_IRQHandler+0x1e0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <HAL_DMA_IRQHandler+0x1e4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <HAL_DMA_IRQHandler+0x1e8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a19      	ldr	r2, [pc, #100]	; (8006d98 <HAL_DMA_IRQHandler+0x1ec>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x194>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a18      	ldr	r2, [pc, #96]	; (8006d9c <HAL_DMA_IRQHandler+0x1f0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d12f      	bne.n	8006da0 <HAL_DMA_IRQHandler+0x1f4>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bf14      	ite	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	2300      	moveq	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	e02e      	b.n	8006db4 <HAL_DMA_IRQHandler+0x208>
 8006d56:	bf00      	nop
 8006d58:	24000010 	.word	0x24000010
 8006d5c:	1b4e81b5 	.word	0x1b4e81b5
 8006d60:	40020010 	.word	0x40020010
 8006d64:	40020028 	.word	0x40020028
 8006d68:	40020040 	.word	0x40020040
 8006d6c:	40020058 	.word	0x40020058
 8006d70:	40020070 	.word	0x40020070
 8006d74:	40020088 	.word	0x40020088
 8006d78:	400200a0 	.word	0x400200a0
 8006d7c:	400200b8 	.word	0x400200b8
 8006d80:	40020410 	.word	0x40020410
 8006d84:	40020428 	.word	0x40020428
 8006d88:	40020440 	.word	0x40020440
 8006d8c:	40020458 	.word	0x40020458
 8006d90:	40020470 	.word	0x40020470
 8006d94:	40020488 	.word	0x40020488
 8006d98:	400204a0 	.word	0x400204a0
 8006d9c:	400204b8 	.word	0x400204b8
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bf14      	ite	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	2300      	moveq	r3, #0
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d015      	beq.n	8006de4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0204 	bic.w	r2, r2, #4
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ddc:	f043 0201 	orr.w	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d06e      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a69      	ldr	r2, [pc, #420]	; (8006fa4 <HAL_DMA_IRQHandler+0x3f8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d04a      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a67      	ldr	r2, [pc, #412]	; (8006fa8 <HAL_DMA_IRQHandler+0x3fc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d045      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a66      	ldr	r2, [pc, #408]	; (8006fac <HAL_DMA_IRQHandler+0x400>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d040      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a64      	ldr	r2, [pc, #400]	; (8006fb0 <HAL_DMA_IRQHandler+0x404>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d03b      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a63      	ldr	r2, [pc, #396]	; (8006fb4 <HAL_DMA_IRQHandler+0x408>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d036      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a61      	ldr	r2, [pc, #388]	; (8006fb8 <HAL_DMA_IRQHandler+0x40c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d031      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a60      	ldr	r2, [pc, #384]	; (8006fbc <HAL_DMA_IRQHandler+0x410>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02c      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a5e      	ldr	r2, [pc, #376]	; (8006fc0 <HAL_DMA_IRQHandler+0x414>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d027      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5d      	ldr	r2, [pc, #372]	; (8006fc4 <HAL_DMA_IRQHandler+0x418>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5b      	ldr	r2, [pc, #364]	; (8006fc8 <HAL_DMA_IRQHandler+0x41c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01d      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a5a      	ldr	r2, [pc, #360]	; (8006fcc <HAL_DMA_IRQHandler+0x420>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a58      	ldr	r2, [pc, #352]	; (8006fd0 <HAL_DMA_IRQHandler+0x424>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a57      	ldr	r2, [pc, #348]	; (8006fd4 <HAL_DMA_IRQHandler+0x428>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a55      	ldr	r2, [pc, #340]	; (8006fd8 <HAL_DMA_IRQHandler+0x42c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a54      	ldr	r2, [pc, #336]	; (8006fdc <HAL_DMA_IRQHandler+0x430>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2ee>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a52      	ldr	r2, [pc, #328]	; (8006fe0 <HAL_DMA_IRQHandler+0x434>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d10a      	bne.n	8006eb0 <HAL_DMA_IRQHandler+0x304>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	e003      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x30c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00d      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed0:	f043 0202 	orr.w	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 808f 	beq.w	800700c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <HAL_DMA_IRQHandler+0x3f8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d04a      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <HAL_DMA_IRQHandler+0x3fc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d045      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a29      	ldr	r2, [pc, #164]	; (8006fac <HAL_DMA_IRQHandler+0x400>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d040      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <HAL_DMA_IRQHandler+0x404>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d03b      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_DMA_IRQHandler+0x408>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d036      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <HAL_DMA_IRQHandler+0x40c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d031      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a23      	ldr	r2, [pc, #140]	; (8006fbc <HAL_DMA_IRQHandler+0x410>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d02c      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a21      	ldr	r2, [pc, #132]	; (8006fc0 <HAL_DMA_IRQHandler+0x414>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d027      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a20      	ldr	r2, [pc, #128]	; (8006fc4 <HAL_DMA_IRQHandler+0x418>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d022      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <HAL_DMA_IRQHandler+0x41c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01d      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <HAL_DMA_IRQHandler+0x420>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d018      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <HAL_DMA_IRQHandler+0x424>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <HAL_DMA_IRQHandler+0x428>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00e      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_DMA_IRQHandler+0x42c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d009      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <HAL_DMA_IRQHandler+0x430>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d004      	beq.n	8006f8e <HAL_DMA_IRQHandler+0x3e2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <HAL_DMA_IRQHandler+0x434>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d12a      	bne.n	8006fe4 <HAL_DMA_IRQHandler+0x438>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e023      	b.n	8006fec <HAL_DMA_IRQHandler+0x440>
 8006fa4:	40020010 	.word	0x40020010
 8006fa8:	40020028 	.word	0x40020028
 8006fac:	40020040 	.word	0x40020040
 8006fb0:	40020058 	.word	0x40020058
 8006fb4:	40020070 	.word	0x40020070
 8006fb8:	40020088 	.word	0x40020088
 8006fbc:	400200a0 	.word	0x400200a0
 8006fc0:	400200b8 	.word	0x400200b8
 8006fc4:	40020410 	.word	0x40020410
 8006fc8:	40020428 	.word	0x40020428
 8006fcc:	40020440 	.word	0x40020440
 8006fd0:	40020458 	.word	0x40020458
 8006fd4:	40020470 	.word	0x40020470
 8006fd8:	40020488 	.word	0x40020488
 8006fdc:	400204a0 	.word	0x400204a0
 8006fe0:	400204b8 	.word	0x400204b8
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2300      	movs	r3, #0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00d      	beq.n	800700c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff4:	f003 031f 	and.w	r3, r3, #31
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007004:	f043 0204 	orr.w	r2, r3, #4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	2210      	movs	r2, #16
 8007016:	409a      	lsls	r2, r3
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a6 	beq.w	800716e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a85      	ldr	r2, [pc, #532]	; (800723c <HAL_DMA_IRQHandler+0x690>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d04a      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a83      	ldr	r2, [pc, #524]	; (8007240 <HAL_DMA_IRQHandler+0x694>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d045      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a82      	ldr	r2, [pc, #520]	; (8007244 <HAL_DMA_IRQHandler+0x698>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d040      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a80      	ldr	r2, [pc, #512]	; (8007248 <HAL_DMA_IRQHandler+0x69c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d03b      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a7f      	ldr	r2, [pc, #508]	; (800724c <HAL_DMA_IRQHandler+0x6a0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d036      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a7d      	ldr	r2, [pc, #500]	; (8007250 <HAL_DMA_IRQHandler+0x6a4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d031      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a7c      	ldr	r2, [pc, #496]	; (8007254 <HAL_DMA_IRQHandler+0x6a8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d02c      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a7a      	ldr	r2, [pc, #488]	; (8007258 <HAL_DMA_IRQHandler+0x6ac>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d027      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a79      	ldr	r2, [pc, #484]	; (800725c <HAL_DMA_IRQHandler+0x6b0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d022      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a77      	ldr	r2, [pc, #476]	; (8007260 <HAL_DMA_IRQHandler+0x6b4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01d      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a76      	ldr	r2, [pc, #472]	; (8007264 <HAL_DMA_IRQHandler+0x6b8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d018      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a74      	ldr	r2, [pc, #464]	; (8007268 <HAL_DMA_IRQHandler+0x6bc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a73      	ldr	r2, [pc, #460]	; (800726c <HAL_DMA_IRQHandler+0x6c0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a71      	ldr	r2, [pc, #452]	; (8007270 <HAL_DMA_IRQHandler+0x6c4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a70      	ldr	r2, [pc, #448]	; (8007274 <HAL_DMA_IRQHandler+0x6c8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x516>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a6e      	ldr	r2, [pc, #440]	; (8007278 <HAL_DMA_IRQHandler+0x6cc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d10a      	bne.n	80070d8 <HAL_DMA_IRQHandler+0x52c>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bf14      	ite	ne
 80070d0:	2301      	movne	r3, #1
 80070d2:	2300      	moveq	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	e009      	b.n	80070ec <HAL_DMA_IRQHandler+0x540>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bf14      	ite	ne
 80070e6:	2301      	movne	r3, #1
 80070e8:	2300      	moveq	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d03e      	beq.n	800716e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	2210      	movs	r2, #16
 80070fa:	409a      	lsls	r2, r3
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d018      	beq.n	8007140 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d024      	beq.n	800716e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
 800712c:	e01f      	b.n	800716e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01b      	beq.n	800716e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	e016      	b.n	800716e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d107      	bne.n	800715e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0208 	bic.w	r2, r2, #8
 800715c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	2220      	movs	r2, #32
 8007178:	409a      	lsls	r2, r3
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8110 	beq.w	80073a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2c      	ldr	r2, [pc, #176]	; (800723c <HAL_DMA_IRQHandler+0x690>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d04a      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2b      	ldr	r2, [pc, #172]	; (8007240 <HAL_DMA_IRQHandler+0x694>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d045      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a29      	ldr	r2, [pc, #164]	; (8007244 <HAL_DMA_IRQHandler+0x698>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d040      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a28      	ldr	r2, [pc, #160]	; (8007248 <HAL_DMA_IRQHandler+0x69c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d03b      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a26      	ldr	r2, [pc, #152]	; (800724c <HAL_DMA_IRQHandler+0x6a0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d036      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a25      	ldr	r2, [pc, #148]	; (8007250 <HAL_DMA_IRQHandler+0x6a4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d031      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a23      	ldr	r2, [pc, #140]	; (8007254 <HAL_DMA_IRQHandler+0x6a8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d02c      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a22      	ldr	r2, [pc, #136]	; (8007258 <HAL_DMA_IRQHandler+0x6ac>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d027      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a20      	ldr	r2, [pc, #128]	; (800725c <HAL_DMA_IRQHandler+0x6b0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d022      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <HAL_DMA_IRQHandler+0x6b4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d01d      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <HAL_DMA_IRQHandler+0x6b8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d018      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1c      	ldr	r2, [pc, #112]	; (8007268 <HAL_DMA_IRQHandler+0x6bc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1a      	ldr	r2, [pc, #104]	; (800726c <HAL_DMA_IRQHandler+0x6c0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00e      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a19      	ldr	r2, [pc, #100]	; (8007270 <HAL_DMA_IRQHandler+0x6c4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d009      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a17      	ldr	r2, [pc, #92]	; (8007274 <HAL_DMA_IRQHandler+0x6c8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_DMA_IRQHandler+0x678>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a16      	ldr	r2, [pc, #88]	; (8007278 <HAL_DMA_IRQHandler+0x6cc>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d12b      	bne.n	800727c <HAL_DMA_IRQHandler+0x6d0>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	e02a      	b.n	8007290 <HAL_DMA_IRQHandler+0x6e4>
 800723a:	bf00      	nop
 800723c:	40020010 	.word	0x40020010
 8007240:	40020028 	.word	0x40020028
 8007244:	40020040 	.word	0x40020040
 8007248:	40020058 	.word	0x40020058
 800724c:	40020070 	.word	0x40020070
 8007250:	40020088 	.word	0x40020088
 8007254:	400200a0 	.word	0x400200a0
 8007258:	400200b8 	.word	0x400200b8
 800725c:	40020410 	.word	0x40020410
 8007260:	40020428 	.word	0x40020428
 8007264:	40020440 	.word	0x40020440
 8007268:	40020458 	.word	0x40020458
 800726c:	40020470 	.word	0x40020470
 8007270:	40020488 	.word	0x40020488
 8007274:	400204a0 	.word	0x400204a0
 8007278:	400204b8 	.word	0x400204b8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8087 	beq.w	80073a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729a:	f003 031f 	and.w	r3, r3, #31
 800729e:	2220      	movs	r2, #32
 80072a0:	409a      	lsls	r2, r3
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d139      	bne.n	8007326 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0216 	bic.w	r2, r2, #22
 80072c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	695a      	ldr	r2, [r3, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <HAL_DMA_IRQHandler+0x736>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0208 	bic.w	r2, r2, #8
 80072f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	223f      	movs	r2, #63	; 0x3f
 80072fc:	409a      	lsls	r2, r3
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 834a 	beq.w	80079b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
          }
          return;
 8007324:	e344      	b.n	80079b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d018      	beq.n	8007366 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d108      	bne.n	8007354 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02c      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
 8007352:	e027      	b.n	80073a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d023      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	e01e      	b.n	80073a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10f      	bne.n	8007394 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0210 	bic.w	r2, r2, #16
 8007382:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8306 	beq.w	80079ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 8088 	beq.w	80074cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2204      	movs	r2, #4
 80073c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a7a      	ldr	r2, [pc, #488]	; (80075b4 <HAL_DMA_IRQHandler+0xa08>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d04a      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a79      	ldr	r2, [pc, #484]	; (80075b8 <HAL_DMA_IRQHandler+0xa0c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d045      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a77      	ldr	r2, [pc, #476]	; (80075bc <HAL_DMA_IRQHandler+0xa10>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d040      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a76      	ldr	r2, [pc, #472]	; (80075c0 <HAL_DMA_IRQHandler+0xa14>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d03b      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a74      	ldr	r2, [pc, #464]	; (80075c4 <HAL_DMA_IRQHandler+0xa18>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d036      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a73      	ldr	r2, [pc, #460]	; (80075c8 <HAL_DMA_IRQHandler+0xa1c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d031      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a71      	ldr	r2, [pc, #452]	; (80075cc <HAL_DMA_IRQHandler+0xa20>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d02c      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a70      	ldr	r2, [pc, #448]	; (80075d0 <HAL_DMA_IRQHandler+0xa24>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d027      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a6e      	ldr	r2, [pc, #440]	; (80075d4 <HAL_DMA_IRQHandler+0xa28>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d022      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a6d      	ldr	r2, [pc, #436]	; (80075d8 <HAL_DMA_IRQHandler+0xa2c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01d      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a6b      	ldr	r2, [pc, #428]	; (80075dc <HAL_DMA_IRQHandler+0xa30>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a6a      	ldr	r2, [pc, #424]	; (80075e0 <HAL_DMA_IRQHandler+0xa34>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a68      	ldr	r2, [pc, #416]	; (80075e4 <HAL_DMA_IRQHandler+0xa38>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a67      	ldr	r2, [pc, #412]	; (80075e8 <HAL_DMA_IRQHandler+0xa3c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a65      	ldr	r2, [pc, #404]	; (80075ec <HAL_DMA_IRQHandler+0xa40>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_DMA_IRQHandler+0x8b8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a64      	ldr	r2, [pc, #400]	; (80075f0 <HAL_DMA_IRQHandler+0xa44>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d108      	bne.n	8007476 <HAL_DMA_IRQHandler+0x8ca>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e007      	b.n	8007486 <HAL_DMA_IRQHandler+0x8da>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3301      	adds	r3, #1
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748e:	429a      	cmp	r2, r3
 8007490:	d307      	bcc.n	80074a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f2      	bne.n	8007486 <HAL_DMA_IRQHandler+0x8da>
 80074a0:	e000      	b.n	80074a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80074a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2203      	movs	r2, #3
 80074b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80074ba:	e003      	b.n	80074c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 8272 	beq.w	80079ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	e26c      	b.n	80079ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a43      	ldr	r2, [pc, #268]	; (80075f4 <HAL_DMA_IRQHandler+0xa48>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d022      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a42      	ldr	r2, [pc, #264]	; (80075f8 <HAL_DMA_IRQHandler+0xa4c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d01d      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a40      	ldr	r2, [pc, #256]	; (80075fc <HAL_DMA_IRQHandler+0xa50>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d018      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a3f      	ldr	r2, [pc, #252]	; (8007600 <HAL_DMA_IRQHandler+0xa54>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d013      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a3d      	ldr	r2, [pc, #244]	; (8007604 <HAL_DMA_IRQHandler+0xa58>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00e      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a3c      	ldr	r2, [pc, #240]	; (8007608 <HAL_DMA_IRQHandler+0xa5c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a3a      	ldr	r2, [pc, #232]	; (800760c <HAL_DMA_IRQHandler+0xa60>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <HAL_DMA_IRQHandler+0x984>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a39      	ldr	r2, [pc, #228]	; (8007610 <HAL_DMA_IRQHandler+0xa64>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <HAL_DMA_IRQHandler+0x988>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <HAL_DMA_IRQHandler+0x98a>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 823f 	beq.w	80079ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2204      	movs	r2, #4
 800754e:	409a      	lsls	r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	4013      	ands	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80cd 	beq.w	80076f4 <HAL_DMA_IRQHandler+0xb48>
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80c7 	beq.w	80076f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756a:	f003 031f 	and.w	r3, r3, #31
 800756e:	2204      	movs	r2, #4
 8007570:	409a      	lsls	r2, r3
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d049      	beq.n	8007614 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8210 	beq.w	80079b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800759c:	e20a      	b.n	80079b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8206 	beq.w	80079b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075b0:	e200      	b.n	80079b4 <HAL_DMA_IRQHandler+0xe08>
 80075b2:	bf00      	nop
 80075b4:	40020010 	.word	0x40020010
 80075b8:	40020028 	.word	0x40020028
 80075bc:	40020040 	.word	0x40020040
 80075c0:	40020058 	.word	0x40020058
 80075c4:	40020070 	.word	0x40020070
 80075c8:	40020088 	.word	0x40020088
 80075cc:	400200a0 	.word	0x400200a0
 80075d0:	400200b8 	.word	0x400200b8
 80075d4:	40020410 	.word	0x40020410
 80075d8:	40020428 	.word	0x40020428
 80075dc:	40020440 	.word	0x40020440
 80075e0:	40020458 	.word	0x40020458
 80075e4:	40020470 	.word	0x40020470
 80075e8:	40020488 	.word	0x40020488
 80075ec:	400204a0 	.word	0x400204a0
 80075f0:	400204b8 	.word	0x400204b8
 80075f4:	58025408 	.word	0x58025408
 80075f8:	5802541c 	.word	0x5802541c
 80075fc:	58025430 	.word	0x58025430
 8007600:	58025444 	.word	0x58025444
 8007604:	58025458 	.word	0x58025458
 8007608:	5802546c 	.word	0x5802546c
 800760c:	58025480 	.word	0x58025480
 8007610:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d160      	bne.n	80076e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a7f      	ldr	r2, [pc, #508]	; (8007820 <HAL_DMA_IRQHandler+0xc74>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04a      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a7d      	ldr	r2, [pc, #500]	; (8007824 <HAL_DMA_IRQHandler+0xc78>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d045      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a7c      	ldr	r2, [pc, #496]	; (8007828 <HAL_DMA_IRQHandler+0xc7c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d040      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a7a      	ldr	r2, [pc, #488]	; (800782c <HAL_DMA_IRQHandler+0xc80>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d03b      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a79      	ldr	r2, [pc, #484]	; (8007830 <HAL_DMA_IRQHandler+0xc84>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d036      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a77      	ldr	r2, [pc, #476]	; (8007834 <HAL_DMA_IRQHandler+0xc88>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d031      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a76      	ldr	r2, [pc, #472]	; (8007838 <HAL_DMA_IRQHandler+0xc8c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d02c      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a74      	ldr	r2, [pc, #464]	; (800783c <HAL_DMA_IRQHandler+0xc90>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d027      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a73      	ldr	r2, [pc, #460]	; (8007840 <HAL_DMA_IRQHandler+0xc94>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d022      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a71      	ldr	r2, [pc, #452]	; (8007844 <HAL_DMA_IRQHandler+0xc98>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01d      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a70      	ldr	r2, [pc, #448]	; (8007848 <HAL_DMA_IRQHandler+0xc9c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a6e      	ldr	r2, [pc, #440]	; (800784c <HAL_DMA_IRQHandler+0xca0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a6d      	ldr	r2, [pc, #436]	; (8007850 <HAL_DMA_IRQHandler+0xca4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a6b      	ldr	r2, [pc, #428]	; (8007854 <HAL_DMA_IRQHandler+0xca8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d009      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a6a      	ldr	r2, [pc, #424]	; (8007858 <HAL_DMA_IRQHandler+0xcac>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_DMA_IRQHandler+0xb12>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a68      	ldr	r2, [pc, #416]	; (800785c <HAL_DMA_IRQHandler+0xcb0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d108      	bne.n	80076d0 <HAL_DMA_IRQHandler+0xb24>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0208 	bic.w	r2, r2, #8
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	e007      	b.n	80076e0 <HAL_DMA_IRQHandler+0xb34>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0204 	bic.w	r2, r2, #4
 80076de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8165 	beq.w	80079b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076f2:	e15f      	b.n	80079b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	2202      	movs	r2, #2
 80076fe:	409a      	lsls	r2, r3
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	4013      	ands	r3, r2
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80c5 	beq.w	8007894 <HAL_DMA_IRQHandler+0xce8>
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 80bf 	beq.w	8007894 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	2202      	movs	r2, #2
 8007720:	409a      	lsls	r2, r3
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d018      	beq.n	8007762 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773e:	2b00      	cmp	r3, #0
 8007740:	f000 813a 	beq.w	80079b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800774c:	e134      	b.n	80079b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 8130 	beq.w	80079b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007760:	e12a      	b.n	80079b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	f003 0320 	and.w	r3, r3, #32
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 8089 	bne.w	8007880 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a2b      	ldr	r2, [pc, #172]	; (8007820 <HAL_DMA_IRQHandler+0xc74>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d04a      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a29      	ldr	r2, [pc, #164]	; (8007824 <HAL_DMA_IRQHandler+0xc78>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d045      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a28      	ldr	r2, [pc, #160]	; (8007828 <HAL_DMA_IRQHandler+0xc7c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d040      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a26      	ldr	r2, [pc, #152]	; (800782c <HAL_DMA_IRQHandler+0xc80>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d03b      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a25      	ldr	r2, [pc, #148]	; (8007830 <HAL_DMA_IRQHandler+0xc84>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d036      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a23      	ldr	r2, [pc, #140]	; (8007834 <HAL_DMA_IRQHandler+0xc88>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d031      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a22      	ldr	r2, [pc, #136]	; (8007838 <HAL_DMA_IRQHandler+0xc8c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d02c      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a20      	ldr	r2, [pc, #128]	; (800783c <HAL_DMA_IRQHandler+0xc90>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d027      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1f      	ldr	r2, [pc, #124]	; (8007840 <HAL_DMA_IRQHandler+0xc94>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d022      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a1d      	ldr	r2, [pc, #116]	; (8007844 <HAL_DMA_IRQHandler+0xc98>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d01d      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <HAL_DMA_IRQHandler+0xc9c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d018      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1a      	ldr	r2, [pc, #104]	; (800784c <HAL_DMA_IRQHandler+0xca0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d013      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a19      	ldr	r2, [pc, #100]	; (8007850 <HAL_DMA_IRQHandler+0xca4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00e      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a17      	ldr	r2, [pc, #92]	; (8007854 <HAL_DMA_IRQHandler+0xca8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d009      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a16      	ldr	r2, [pc, #88]	; (8007858 <HAL_DMA_IRQHandler+0xcac>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d004      	beq.n	800780e <HAL_DMA_IRQHandler+0xc62>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a14      	ldr	r2, [pc, #80]	; (800785c <HAL_DMA_IRQHandler+0xcb0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d128      	bne.n	8007860 <HAL_DMA_IRQHandler+0xcb4>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0214 	bic.w	r2, r2, #20
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e027      	b.n	8007870 <HAL_DMA_IRQHandler+0xcc4>
 8007820:	40020010 	.word	0x40020010
 8007824:	40020028 	.word	0x40020028
 8007828:	40020040 	.word	0x40020040
 800782c:	40020058 	.word	0x40020058
 8007830:	40020070 	.word	0x40020070
 8007834:	40020088 	.word	0x40020088
 8007838:	400200a0 	.word	0x400200a0
 800783c:	400200b8 	.word	0x400200b8
 8007840:	40020410 	.word	0x40020410
 8007844:	40020428 	.word	0x40020428
 8007848:	40020440 	.word	0x40020440
 800784c:	40020458 	.word	0x40020458
 8007850:	40020470 	.word	0x40020470
 8007854:	40020488 	.word	0x40020488
 8007858:	400204a0 	.word	0x400204a0
 800785c:	400204b8 	.word	0x400204b8
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 020a 	bic.w	r2, r2, #10
 800786e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8097 	beq.w	80079b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007892:	e091      	b.n	80079b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007898:	f003 031f 	and.w	r3, r3, #31
 800789c:	2208      	movs	r2, #8
 800789e:	409a      	lsls	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8088 	beq.w	80079ba <HAL_DMA_IRQHandler+0xe0e>
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 8082 	beq.w	80079ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a41      	ldr	r2, [pc, #260]	; (80079c0 <HAL_DMA_IRQHandler+0xe14>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d04a      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a3f      	ldr	r2, [pc, #252]	; (80079c4 <HAL_DMA_IRQHandler+0xe18>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d045      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a3e      	ldr	r2, [pc, #248]	; (80079c8 <HAL_DMA_IRQHandler+0xe1c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d040      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a3c      	ldr	r2, [pc, #240]	; (80079cc <HAL_DMA_IRQHandler+0xe20>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d03b      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a3b      	ldr	r2, [pc, #236]	; (80079d0 <HAL_DMA_IRQHandler+0xe24>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d036      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a39      	ldr	r2, [pc, #228]	; (80079d4 <HAL_DMA_IRQHandler+0xe28>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d031      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a38      	ldr	r2, [pc, #224]	; (80079d8 <HAL_DMA_IRQHandler+0xe2c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d02c      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a36      	ldr	r2, [pc, #216]	; (80079dc <HAL_DMA_IRQHandler+0xe30>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d027      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a35      	ldr	r2, [pc, #212]	; (80079e0 <HAL_DMA_IRQHandler+0xe34>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d022      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a33      	ldr	r2, [pc, #204]	; (80079e4 <HAL_DMA_IRQHandler+0xe38>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01d      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a32      	ldr	r2, [pc, #200]	; (80079e8 <HAL_DMA_IRQHandler+0xe3c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d018      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a30      	ldr	r2, [pc, #192]	; (80079ec <HAL_DMA_IRQHandler+0xe40>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a2f      	ldr	r2, [pc, #188]	; (80079f0 <HAL_DMA_IRQHandler+0xe44>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00e      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2d      	ldr	r2, [pc, #180]	; (80079f4 <HAL_DMA_IRQHandler+0xe48>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d009      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2c      	ldr	r2, [pc, #176]	; (80079f8 <HAL_DMA_IRQHandler+0xe4c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <HAL_DMA_IRQHandler+0xdaa>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2a      	ldr	r2, [pc, #168]	; (80079fc <HAL_DMA_IRQHandler+0xe50>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d108      	bne.n	8007968 <HAL_DMA_IRQHandler+0xdbc>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 021c 	bic.w	r2, r2, #28
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e007      	b.n	8007978 <HAL_DMA_IRQHandler+0xdcc>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 020e 	bic.w	r2, r2, #14
 8007976:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4798      	blx	r3
 80079ae:	e004      	b.n	80079ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 80079b0:	bf00      	nop
 80079b2:	e002      	b.n	80079ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b4:	bf00      	nop
 80079b6:	e000      	b.n	80079ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079ba:	3728      	adds	r7, #40	; 0x28
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40020010 	.word	0x40020010
 80079c4:	40020028 	.word	0x40020028
 80079c8:	40020040 	.word	0x40020040
 80079cc:	40020058 	.word	0x40020058
 80079d0:	40020070 	.word	0x40020070
 80079d4:	40020088 	.word	0x40020088
 80079d8:	400200a0 	.word	0x400200a0
 80079dc:	400200b8 	.word	0x400200b8
 80079e0:	40020410 	.word	0x40020410
 80079e4:	40020428 	.word	0x40020428
 80079e8:	40020440 	.word	0x40020440
 80079ec:	40020458 	.word	0x40020458
 80079f0:	40020470 	.word	0x40020470
 80079f4:	40020488 	.word	0x40020488
 80079f8:	400204a0 	.word	0x400204a0
 80079fc:	400204b8 	.word	0x400204b8

08007a00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e04f      	b.n	8007ab2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d106      	bne.n	8007a2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f84e 	bl	8007ac8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	4b20      	ldr	r3, [pc, #128]	; (8007abc <HAL_DMA2D_Init+0xbc>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6851      	ldr	r1, [r2, #4]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	69d2      	ldr	r2, [r2, #28]
 8007a46:	4311      	orrs	r1, r2
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a56:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <HAL_DMA2D_Init+0xc0>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6891      	ldr	r1, [r2, #8]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6992      	ldr	r2, [r2, #24]
 8007a62:	4311      	orrs	r1, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a72:	4b14      	ldr	r3, [pc, #80]	; (8007ac4 <HAL_DMA2D_Init+0xc4>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68d1      	ldr	r1, [r2, #12]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	051a      	lsls	r2, r3, #20
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	055b      	lsls	r3, r3, #21
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	fff8ffbf 	.word	0xfff8ffbf
 8007ac0:	fffffef8 	.word	0xfffffef8
 8007ac4:	ffff0000 	.word	0xffff0000

08007ac8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_DMA2D_Start+0x1c>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e018      	b.n	8007b2a <HAL_DMA2D_Start+0x4e>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f9a4 	bl	8007e60 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d056      	beq.n	8007bfc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b4e:	f7fe f8f1 	bl	8005d34 <HAL_GetTick>
 8007b52:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b54:	e04b      	b.n	8007bee <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d023      	beq.n	8007bb0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b76:	f043 0202 	orr.w	r2, r3, #2
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2221      	movs	r2, #33	; 0x21
 8007b9a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0a5      	b.n	8007cfc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d01a      	beq.n	8007bee <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007bb8:	f7fe f8bc 	bl	8005d34 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d302      	bcc.n	8007bce <HAL_DMA2D_PollForTransfer+0x9c>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10f      	bne.n	8007bee <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd2:	f043 0220 	orr.w	r2, r3, #32
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e086      	b.n	8007cfc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0ac      	beq.n	8007b56 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d061      	beq.n	8007ce2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c1e:	f7fe f889 	bl	8005d34 <HAL_GetTick>
 8007c22:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c24:	e056      	b.n	8007cd4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d02e      	beq.n	8007c96 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c46:	f043 0204 	orr.w	r2, r3, #4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5c:	f043 0202 	orr.w	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c72:	f043 0201 	orr.w	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2229      	movs	r2, #41	; 0x29
 8007c80:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2204      	movs	r2, #4
 8007c86:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e032      	b.n	8007cfc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d01a      	beq.n	8007cd4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c9e:	f7fe f849 	bl	8005d34 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d302      	bcc.n	8007cb4 <HAL_DMA2D_PollForTransfer+0x182>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10f      	bne.n	8007cd4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	f043 0220 	orr.w	r2, r3, #32
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e013      	b.n	8007cfc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0a1      	beq.n	8007c26 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2212      	movs	r2, #18
 8007ce8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_DMA2D_ConfigLayer+0x24>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e092      	b.n	8007e4e <HAL_DMA2D_ConfigLayer+0x14a>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	3328      	adds	r3, #40	; 0x28
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	4413      	add	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d5c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007d68:	4b3c      	ldr	r3, [pc, #240]	; (8007e5c <HAL_DMA2D_ConfigLayer+0x158>)
 8007d6a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b0a      	cmp	r3, #10
 8007d72:	d003      	beq.n	8007d7c <HAL_DMA2D_ConfigLayer+0x78>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b09      	cmp	r3, #9
 8007d7a:	d107      	bne.n	8007d8c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	e005      	b.n	8007d98 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	061b      	lsls	r3, r3, #24
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d120      	bne.n	8007de0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	43db      	mvns	r3, r3
 8007da8:	ea02 0103 	and.w	r1, r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b0a      	cmp	r3, #10
 8007dc6:	d003      	beq.n	8007dd0 <HAL_DMA2D_ConfigLayer+0xcc>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d135      	bne.n	8007e3c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8007dde:	e02d      	b.n	8007e3c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b0b      	cmp	r3, #11
 8007de6:	d109      	bne.n	8007dfc <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	049b      	lsls	r3, r3, #18
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007dfa:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69da      	ldr	r2, [r3, #28]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	43db      	mvns	r3, r3
 8007e06:	ea02 0103 	and.w	r1, r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b0a      	cmp	r3, #10
 8007e24:	d003      	beq.n	8007e2e <HAL_DMA2D_ConfigLayer+0x12a>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b09      	cmp	r3, #9
 8007e2c:	d106      	bne.n	8007e3c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68da      	ldr	r2, [r3, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007e3a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	ff33000f 	.word	0xff33000f

08007e60 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b08b      	sub	sp, #44	; 0x2c
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e74:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	041a      	lsls	r2, r3, #16
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e98:	d174      	bne.n	8007f84 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ea0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ea8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007eb0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d108      	bne.n	8007ed2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed0:	e053      	b.n	8007f7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d106      	bne.n	8007ee8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee6:	e048      	b.n	8007f7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d111      	bne.n	8007f14 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	0cdb      	lsrs	r3, r3, #19
 8007ef4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	0a9b      	lsrs	r3, r3, #10
 8007efa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	02db      	lsls	r3, r3, #11
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
 8007f12:	e032      	b.n	8007f7a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d117      	bne.n	8007f4c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	0fdb      	lsrs	r3, r3, #31
 8007f20:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	0cdb      	lsrs	r3, r3, #19
 8007f26:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	0adb      	lsrs	r3, r3, #11
 8007f2c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	08db      	lsrs	r3, r3, #3
 8007f32:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	029b      	lsls	r3, r3, #10
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	03db      	lsls	r3, r3, #15
 8007f42:	4313      	orrs	r3, r2
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
 8007f4a:	e016      	b.n	8007f7a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	0f1b      	lsrs	r3, r3, #28
 8007f50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	0d1b      	lsrs	r3, r3, #20
 8007f56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	0b1b      	lsrs	r3, r3, #12
 8007f5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	091b      	lsrs	r3, r3, #4
 8007f62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	011a      	lsls	r2, r3, #4
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	031b      	lsls	r3, r3, #12
 8007f72:	4313      	orrs	r3, r2
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007f82:	e00d      	b.n	8007fa0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f8c:	d104      	bne.n	8007f98 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	615a      	str	r2, [r3, #20]
}
 8007f96:	e003      	b.n	8007fa0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	60da      	str	r2, [r3, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	372c      	adds	r7, #44	; 0x2c
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e00a      	b.n	8007fde <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007fc8:	7afb      	ldrb	r3, [r7, #11]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	605a      	str	r2, [r3, #4]
      break;
 8007fd4:	e002      	b.n	8007fdc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fda:	bf00      	nop
  }

  return status;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e003      	b.n	8008006 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008004:	2300      	movs	r3, #0
  }
}
 8008006:	4618      	mov	r0, r3
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 031f 	and.w	r3, r3, #31
 8008030:	2201      	movs	r2, #1
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	011a      	lsls	r2, r3, #4
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <HAL_EXTI_IRQHandler+0x5c>)
 800803e:	4413      	add	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4013      	ands	r3, r2
 800804a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	4798      	blx	r3
    }
  }
}
 8008066:	bf00      	nop
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	58000088 	.word	0x58000088

08008074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008074:	b480      	push	{r7}
 8008076:	b089      	sub	sp, #36	; 0x24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008082:	4b89      	ldr	r3, [pc, #548]	; (80082a8 <HAL_GPIO_Init+0x234>)
 8008084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008086:	e194      	b.n	80083b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	2101      	movs	r1, #1
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	fa01 f303 	lsl.w	r3, r1, r3
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 8186 	beq.w	80083ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d005      	beq.n	80080b8 <HAL_GPIO_Init+0x44>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d130      	bne.n	800811a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	2203      	movs	r2, #3
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	43db      	mvns	r3, r3
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	4013      	ands	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	4313      	orrs	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080ee:	2201      	movs	r2, #1
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	43db      	mvns	r3, r3
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	4013      	ands	r3, r2
 80080fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	091b      	lsrs	r3, r3, #4
 8008104:	f003 0201 	and.w	r2, r3, #1
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	4313      	orrs	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b03      	cmp	r3, #3
 8008124:	d017      	beq.n	8008156 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	2203      	movs	r2, #3
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	43db      	mvns	r3, r3
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	4013      	ands	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	4313      	orrs	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d123      	bne.n	80081aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	08da      	lsrs	r2, r3, #3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3208      	adds	r2, #8
 800816a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	220f      	movs	r2, #15
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	43db      	mvns	r3, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4013      	ands	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	4313      	orrs	r3, r2
 800819a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	08da      	lsrs	r2, r3, #3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3208      	adds	r2, #8
 80081a4:	69b9      	ldr	r1, [r7, #24]
 80081a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	2203      	movs	r2, #3
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	43db      	mvns	r3, r3
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	4013      	ands	r3, r2
 80081c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f003 0203 	and.w	r2, r3, #3
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80e0 	beq.w	80083ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081ec:	4b2f      	ldr	r3, [pc, #188]	; (80082ac <HAL_GPIO_Init+0x238>)
 80081ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081f2:	4a2e      	ldr	r2, [pc, #184]	; (80082ac <HAL_GPIO_Init+0x238>)
 80081f4:	f043 0302 	orr.w	r3, r3, #2
 80081f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80081fc:	4b2b      	ldr	r3, [pc, #172]	; (80082ac <HAL_GPIO_Init+0x238>)
 80081fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800820a:	4a29      	ldr	r2, [pc, #164]	; (80082b0 <HAL_GPIO_Init+0x23c>)
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	089b      	lsrs	r3, r3, #2
 8008210:	3302      	adds	r3, #2
 8008212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	220f      	movs	r2, #15
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43db      	mvns	r3, r3
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	4013      	ands	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <HAL_GPIO_Init+0x240>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d052      	beq.n	80082dc <HAL_GPIO_Init+0x268>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_GPIO_Init+0x244>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d031      	beq.n	80082a2 <HAL_GPIO_Init+0x22e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <HAL_GPIO_Init+0x248>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d02b      	beq.n	800829e <HAL_GPIO_Init+0x22a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <HAL_GPIO_Init+0x24c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d025      	beq.n	800829a <HAL_GPIO_Init+0x226>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1c      	ldr	r2, [pc, #112]	; (80082c4 <HAL_GPIO_Init+0x250>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01f      	beq.n	8008296 <HAL_GPIO_Init+0x222>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1b      	ldr	r2, [pc, #108]	; (80082c8 <HAL_GPIO_Init+0x254>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d019      	beq.n	8008292 <HAL_GPIO_Init+0x21e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1a      	ldr	r2, [pc, #104]	; (80082cc <HAL_GPIO_Init+0x258>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d013      	beq.n	800828e <HAL_GPIO_Init+0x21a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a19      	ldr	r2, [pc, #100]	; (80082d0 <HAL_GPIO_Init+0x25c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00d      	beq.n	800828a <HAL_GPIO_Init+0x216>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <HAL_GPIO_Init+0x260>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d007      	beq.n	8008286 <HAL_GPIO_Init+0x212>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <HAL_GPIO_Init+0x264>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d101      	bne.n	8008282 <HAL_GPIO_Init+0x20e>
 800827e:	2309      	movs	r3, #9
 8008280:	e02d      	b.n	80082de <HAL_GPIO_Init+0x26a>
 8008282:	230a      	movs	r3, #10
 8008284:	e02b      	b.n	80082de <HAL_GPIO_Init+0x26a>
 8008286:	2308      	movs	r3, #8
 8008288:	e029      	b.n	80082de <HAL_GPIO_Init+0x26a>
 800828a:	2307      	movs	r3, #7
 800828c:	e027      	b.n	80082de <HAL_GPIO_Init+0x26a>
 800828e:	2306      	movs	r3, #6
 8008290:	e025      	b.n	80082de <HAL_GPIO_Init+0x26a>
 8008292:	2305      	movs	r3, #5
 8008294:	e023      	b.n	80082de <HAL_GPIO_Init+0x26a>
 8008296:	2304      	movs	r3, #4
 8008298:	e021      	b.n	80082de <HAL_GPIO_Init+0x26a>
 800829a:	2303      	movs	r3, #3
 800829c:	e01f      	b.n	80082de <HAL_GPIO_Init+0x26a>
 800829e:	2302      	movs	r3, #2
 80082a0:	e01d      	b.n	80082de <HAL_GPIO_Init+0x26a>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e01b      	b.n	80082de <HAL_GPIO_Init+0x26a>
 80082a6:	bf00      	nop
 80082a8:	58000080 	.word	0x58000080
 80082ac:	58024400 	.word	0x58024400
 80082b0:	58000400 	.word	0x58000400
 80082b4:	58020000 	.word	0x58020000
 80082b8:	58020400 	.word	0x58020400
 80082bc:	58020800 	.word	0x58020800
 80082c0:	58020c00 	.word	0x58020c00
 80082c4:	58021000 	.word	0x58021000
 80082c8:	58021400 	.word	0x58021400
 80082cc:	58021800 	.word	0x58021800
 80082d0:	58021c00 	.word	0x58021c00
 80082d4:	58022000 	.word	0x58022000
 80082d8:	58022400 	.word	0x58022400
 80082dc:	2300      	movs	r3, #0
 80082de:	69fa      	ldr	r2, [r7, #28]
 80082e0:	f002 0203 	and.w	r2, r2, #3
 80082e4:	0092      	lsls	r2, r2, #2
 80082e6:	4093      	lsls	r3, r2
 80082e8:	69ba      	ldr	r2, [r7, #24]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082ee:	4938      	ldr	r1, [pc, #224]	; (80083d0 <HAL_GPIO_Init+0x35c>)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	089b      	lsrs	r3, r3, #2
 80082f4:	3302      	adds	r3, #2
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	43db      	mvns	r3, r3
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4013      	ands	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800832a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	43db      	mvns	r3, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4013      	ands	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	43db      	mvns	r3, r3
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4013      	ands	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	43db      	mvns	r3, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	4013      	ands	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	3301      	adds	r3, #1
 80083b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	fa22 f303 	lsr.w	r3, r2, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f ae63 	bne.w	8008088 <HAL_GPIO_Init+0x14>
  }
}
 80083c2:	bf00      	nop
 80083c4:	bf00      	nop
 80083c6:	3724      	adds	r7, #36	; 0x24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	58000400 	.word	0x58000400

080083d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083e2:	4b75      	ldr	r3, [pc, #468]	; (80085b8 <HAL_GPIO_DeInit+0x1e4>)
 80083e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80083e6:	e0d9      	b.n	800859c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80083e8:	2201      	movs	r2, #1
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	fa02 f303 	lsl.w	r3, r2, r3
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	4013      	ands	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80cc 	beq.w	8008596 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80083fe:	4a6f      	ldr	r2, [pc, #444]	; (80085bc <HAL_GPIO_DeInit+0x1e8>)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	3302      	adds	r3, #2
 8008406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	220f      	movs	r2, #15
 8008416:	fa02 f303 	lsl.w	r3, r2, r3
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	4013      	ands	r3, r2
 800841e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a67      	ldr	r2, [pc, #412]	; (80085c0 <HAL_GPIO_DeInit+0x1ec>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d037      	beq.n	8008498 <HAL_GPIO_DeInit+0xc4>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a66      	ldr	r2, [pc, #408]	; (80085c4 <HAL_GPIO_DeInit+0x1f0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d031      	beq.n	8008494 <HAL_GPIO_DeInit+0xc0>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a65      	ldr	r2, [pc, #404]	; (80085c8 <HAL_GPIO_DeInit+0x1f4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d02b      	beq.n	8008490 <HAL_GPIO_DeInit+0xbc>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a64      	ldr	r2, [pc, #400]	; (80085cc <HAL_GPIO_DeInit+0x1f8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d025      	beq.n	800848c <HAL_GPIO_DeInit+0xb8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a63      	ldr	r2, [pc, #396]	; (80085d0 <HAL_GPIO_DeInit+0x1fc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d01f      	beq.n	8008488 <HAL_GPIO_DeInit+0xb4>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a62      	ldr	r2, [pc, #392]	; (80085d4 <HAL_GPIO_DeInit+0x200>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d019      	beq.n	8008484 <HAL_GPIO_DeInit+0xb0>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a61      	ldr	r2, [pc, #388]	; (80085d8 <HAL_GPIO_DeInit+0x204>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d013      	beq.n	8008480 <HAL_GPIO_DeInit+0xac>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a60      	ldr	r2, [pc, #384]	; (80085dc <HAL_GPIO_DeInit+0x208>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00d      	beq.n	800847c <HAL_GPIO_DeInit+0xa8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a5f      	ldr	r2, [pc, #380]	; (80085e0 <HAL_GPIO_DeInit+0x20c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <HAL_GPIO_DeInit+0xa4>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a5e      	ldr	r2, [pc, #376]	; (80085e4 <HAL_GPIO_DeInit+0x210>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d101      	bne.n	8008474 <HAL_GPIO_DeInit+0xa0>
 8008470:	2309      	movs	r3, #9
 8008472:	e012      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008474:	230a      	movs	r3, #10
 8008476:	e010      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008478:	2308      	movs	r3, #8
 800847a:	e00e      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 800847c:	2307      	movs	r3, #7
 800847e:	e00c      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008480:	2306      	movs	r3, #6
 8008482:	e00a      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008484:	2305      	movs	r3, #5
 8008486:	e008      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008488:	2304      	movs	r3, #4
 800848a:	e006      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 800848c:	2303      	movs	r3, #3
 800848e:	e004      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008490:	2302      	movs	r3, #2
 8008492:	e002      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <HAL_GPIO_DeInit+0xc6>
 8008498:	2300      	movs	r3, #0
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	f002 0203 	and.w	r2, r2, #3
 80084a0:	0092      	lsls	r2, r2, #2
 80084a2:	4093      	lsls	r3, r2
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d136      	bne.n	8008518 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	43db      	mvns	r3, r3
 80084c0:	401a      	ands	r2, r3
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80084c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	43db      	mvns	r3, r3
 80084d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084d4:	4013      	ands	r3, r2
 80084d6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80084d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	43db      	mvns	r3, r3
 80084e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084e6:	4013      	ands	r3, r2
 80084e8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	220f      	movs	r2, #15
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80084fa:	4a30      	ldr	r2, [pc, #192]	; (80085bc <HAL_GPIO_DeInit+0x1e8>)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	089b      	lsrs	r3, r3, #2
 8008500:	3302      	adds	r3, #2
 8008502:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	43da      	mvns	r2, r3
 800850a:	482c      	ldr	r0, [pc, #176]	; (80085bc <HAL_GPIO_DeInit+0x1e8>)
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	089b      	lsrs	r3, r3, #2
 8008510:	400a      	ands	r2, r1
 8008512:	3302      	adds	r3, #2
 8008514:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	2103      	movs	r1, #3
 8008522:	fa01 f303 	lsl.w	r3, r1, r3
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	08da      	lsrs	r2, r3, #3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3208      	adds	r2, #8
 8008534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	220f      	movs	r2, #15
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	08d2      	lsrs	r2, r2, #3
 800854c:	4019      	ands	r1, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3208      	adds	r2, #8
 8008552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	2103      	movs	r1, #3
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	43db      	mvns	r3, r3
 8008566:	401a      	ands	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	2101      	movs	r1, #1
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	fa01 f303 	lsl.w	r3, r1, r3
 8008578:	43db      	mvns	r3, r3
 800857a:	401a      	ands	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	2103      	movs	r1, #3
 800858a:	fa01 f303 	lsl.w	r3, r1, r3
 800858e:	43db      	mvns	r3, r3
 8008590:	401a      	ands	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	3301      	adds	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f47f af1f 	bne.w	80083e8 <HAL_GPIO_DeInit+0x14>
  }
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	58000080 	.word	0x58000080
 80085bc:	58000400 	.word	0x58000400
 80085c0:	58020000 	.word	0x58020000
 80085c4:	58020400 	.word	0x58020400
 80085c8:	58020800 	.word	0x58020800
 80085cc:	58020c00 	.word	0x58020c00
 80085d0:	58021000 	.word	0x58021000
 80085d4:	58021400 	.word	0x58021400
 80085d8:	58021800 	.word	0x58021800
 80085dc:	58021c00 	.word	0x58021c00
 80085e0:	58022000 	.word	0x58022000
 80085e4:	58022400 	.word	0x58022400

080085e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	887b      	ldrh	r3, [r7, #2]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008600:	2301      	movs	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
 8008604:	e001      	b.n	800860a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	807b      	strh	r3, [r7, #2]
 8008624:	4613      	mov	r3, r2
 8008626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008628:	787b      	ldrb	r3, [r7, #1]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800862e:	887a      	ldrh	r2, [r7, #2]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008634:	e003      	b.n	800863e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008636:	887b      	ldrh	r3, [r7, #2]
 8008638:	041a      	lsls	r2, r3, #16
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	619a      	str	r2, [r3, #24]
}
 800863e:	bf00      	nop
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e07f      	b.n	800875e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8a9 	bl	80087ca <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2224      	movs	r2, #36	; 0x24
 800867c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0201 	bic.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800869c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d107      	bne.n	80086c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	e006      	b.n	80086d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80086d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d104      	bne.n	80086e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <HAL_I2C_Init+0x11c>)
 80086f2:	430b      	orrs	r3, r1
 80086f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691a      	ldr	r2, [r3, #16]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69d9      	ldr	r1, [r3, #28]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	02008000 	.word	0x02008000

0800876c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e021      	b.n	80087c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2224      	movs	r2, #36	; 0x24
 8008782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0201 	bic.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f821 	bl	80087de <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	461a      	mov	r2, r3
 8008802:	4603      	mov	r3, r0
 8008804:	817b      	strh	r3, [r7, #10]
 8008806:	460b      	mov	r3, r1
 8008808:	813b      	strh	r3, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b20      	cmp	r3, #32
 8008818:	f040 80f9 	bne.w	8008a0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_I2C_Mem_Write+0x34>
 8008822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800882e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0ed      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_I2C_Mem_Write+0x4e>
 800883e:	2302      	movs	r3, #2
 8008840:	e0e6      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800884a:	f7fd fa73 	bl	8005d34 <HAL_GetTick>
 800884e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	2319      	movs	r3, #25
 8008856:	2201      	movs	r2, #1
 8008858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fadd 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0d1      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2221      	movs	r2, #33	; 0x21
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2240      	movs	r2, #64	; 0x40
 8008878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a3a      	ldr	r2, [r7, #32]
 8008886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800888c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008894:	88f8      	ldrh	r0, [r7, #6]
 8008896:	893a      	ldrh	r2, [r7, #8]
 8008898:	8979      	ldrh	r1, [r7, #10]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4603      	mov	r3, r0
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 f9ed 	bl	8008c84 <I2C_RequestMemoryWrite>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0a9      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2bff      	cmp	r3, #255	; 0xff
 80088c4:	d90e      	bls.n	80088e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	22ff      	movs	r2, #255	; 0xff
 80088ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	8979      	ldrh	r1, [r7, #10]
 80088d4:	2300      	movs	r3, #0
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fc57 	bl	8009190 <I2C_TransferConfig>
 80088e2:	e00f      	b.n	8008904 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	8979      	ldrh	r1, [r7, #10]
 80088f6:	2300      	movs	r3, #0
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 fc46 	bl	8009190 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 fad6 	bl	8008eba <I2C_WaitOnTXISFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e07b      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894c:	b29b      	uxth	r3, r3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d034      	beq.n	80089bc <HAL_I2C_Mem_Write+0x1c8>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d130      	bne.n	80089bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008960:	2200      	movs	r2, #0
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 fa59 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e04d      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008978:	b29b      	uxth	r3, r3
 800897a:	2bff      	cmp	r3, #255	; 0xff
 800897c:	d90e      	bls.n	800899c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	22ff      	movs	r2, #255	; 0xff
 8008982:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008988:	b2da      	uxtb	r2, r3
 800898a:	8979      	ldrh	r1, [r7, #10]
 800898c:	2300      	movs	r3, #0
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fbfb 	bl	8009190 <I2C_TransferConfig>
 800899a:	e00f      	b.n	80089bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	8979      	ldrh	r1, [r7, #10]
 80089ae:	2300      	movs	r3, #0
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fbea 	bl	8009190 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d19e      	bne.n	8008904 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 fabc 	bl	8008f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e01a      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2220      	movs	r2, #32
 80089e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6859      	ldr	r1, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <HAL_I2C_Mem_Write+0x224>)
 80089ee:	400b      	ands	r3, r1
 80089f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a0e:	2302      	movs	r3, #2
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	fe00e800 	.word	0xfe00e800

08008a1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	4608      	mov	r0, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	817b      	strh	r3, [r7, #10]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	813b      	strh	r3, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b20      	cmp	r3, #32
 8008a40:	f040 80fd 	bne.w	8008c3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_I2C_Mem_Read+0x34>
 8008a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d105      	bne.n	8008a5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e0f1      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_I2C_Mem_Read+0x4e>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e0ea      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a72:	f7fd f95f 	bl	8005d34 <HAL_GetTick>
 8008a76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2319      	movs	r3, #25
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 f9c9 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0d5      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2222      	movs	r2, #34	; 0x22
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2240      	movs	r2, #64	; 0x40
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6a3a      	ldr	r2, [r7, #32]
 8008aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008abc:	88f8      	ldrh	r0, [r7, #6]
 8008abe:	893a      	ldrh	r2, [r7, #8]
 8008ac0:	8979      	ldrh	r1, [r7, #10]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	4603      	mov	r3, r0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 f92d 	bl	8008d2c <I2C_RequestMemoryRead>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0ad      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	2bff      	cmp	r3, #255	; 0xff
 8008aec:	d90e      	bls.n	8008b0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	22ff      	movs	r2, #255	; 0xff
 8008af2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	8979      	ldrh	r1, [r7, #10]
 8008afc:	4b52      	ldr	r3, [pc, #328]	; (8008c48 <HAL_I2C_Mem_Read+0x22c>)
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 fb43 	bl	8009190 <I2C_TransferConfig>
 8008b0a:	e00f      	b.n	8008b2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	8979      	ldrh	r1, [r7, #10]
 8008b1e:	4b4a      	ldr	r3, [pc, #296]	; (8008c48 <HAL_I2C_Mem_Read+0x22c>)
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fb32 	bl	8009190 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	2200      	movs	r2, #0
 8008b34:	2104      	movs	r1, #4
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 f970 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e07c      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	3b01      	subs	r3, #1
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d034      	beq.n	8008bec <HAL_I2C_Mem_Read+0x1d0>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d130      	bne.n	8008bec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	2200      	movs	r2, #0
 8008b92:	2180      	movs	r1, #128	; 0x80
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 f941 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e04d      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2bff      	cmp	r3, #255	; 0xff
 8008bac:	d90e      	bls.n	8008bcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	22ff      	movs	r2, #255	; 0xff
 8008bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	8979      	ldrh	r1, [r7, #10]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 fae3 	bl	8009190 <I2C_TransferConfig>
 8008bca:	e00f      	b.n	8008bec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	8979      	ldrh	r1, [r7, #10]
 8008bde:	2300      	movs	r3, #0
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fad2 	bl	8009190 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d19a      	bne.n	8008b2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f9a4 	bl	8008f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e01a      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <HAL_I2C_Mem_Read+0x230>)
 8008c1e:	400b      	ands	r3, r1
 8008c20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e000      	b.n	8008c40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	80002400 	.word	0x80002400
 8008c4c:	fe00e800 	.word	0xfe00e800

08008c50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c5e:	b2db      	uxtb	r3, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af02      	add	r7, sp, #8
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	461a      	mov	r2, r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	817b      	strh	r3, [r7, #10]
 8008c96:	460b      	mov	r3, r1
 8008c98:	813b      	strh	r3, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	8979      	ldrh	r1, [r7, #10]
 8008ca4:	4b20      	ldr	r3, [pc, #128]	; (8008d28 <I2C_RequestMemoryWrite+0xa4>)
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fa6f 	bl	8009190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	69b9      	ldr	r1, [r7, #24]
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f8ff 	bl	8008eba <I2C_WaitOnTXISFlagUntilTimeout>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e02c      	b.n	8008d20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d105      	bne.n	8008cd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ccc:	893b      	ldrh	r3, [r7, #8]
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8008cd6:	e015      	b.n	8008d04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008cd8:	893b      	ldrh	r3, [r7, #8]
 8008cda:	0a1b      	lsrs	r3, r3, #8
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f8e5 	bl	8008eba <I2C_WaitOnTXISFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e012      	b.n	8008d20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cfa:	893b      	ldrh	r3, [r7, #8]
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2180      	movs	r1, #128	; 0x80
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f884 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	80002000 	.word	0x80002000

08008d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af02      	add	r7, sp, #8
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	4608      	mov	r0, r1
 8008d36:	4611      	mov	r1, r2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	817b      	strh	r3, [r7, #10]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	813b      	strh	r3, [r7, #8]
 8008d42:	4613      	mov	r3, r2
 8008d44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	8979      	ldrh	r1, [r7, #10]
 8008d4c:	4b20      	ldr	r3, [pc, #128]	; (8008dd0 <I2C_RequestMemoryRead+0xa4>)
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	2300      	movs	r3, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fa1c 	bl	8009190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	69b9      	ldr	r1, [r7, #24]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f8ac 	bl	8008eba <I2C_WaitOnTXISFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e02c      	b.n	8008dc6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d6c:	88fb      	ldrh	r3, [r7, #6]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d105      	bne.n	8008d7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d72:	893b      	ldrh	r3, [r7, #8]
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8008d7c:	e015      	b.n	8008daa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d7e:	893b      	ldrh	r3, [r7, #8]
 8008d80:	0a1b      	lsrs	r3, r3, #8
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	69b9      	ldr	r1, [r7, #24]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f892 	bl	8008eba <I2C_WaitOnTXISFlagUntilTimeout>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e012      	b.n	8008dc6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008da0:	893b      	ldrh	r3, [r7, #8]
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2200      	movs	r2, #0
 8008db2:	2140      	movs	r1, #64	; 0x40
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f831 	bl	8008e1c <I2C_WaitOnFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	80002000 	.word	0x80002000

08008dd4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d103      	bne.n	8008df2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2200      	movs	r2, #0
 8008df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d007      	beq.n	8008e10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	619a      	str	r2, [r3, #24]
  }
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	603b      	str	r3, [r7, #0]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e2c:	e031      	b.n	8008e92 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d02d      	beq.n	8008e92 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e36:	f7fc ff7d 	bl	8005d34 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d302      	bcc.n	8008e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d122      	bne.n	8008e92 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699a      	ldr	r2, [r3, #24]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	4013      	ands	r3, r2
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	bf0c      	ite	eq
 8008e5c:	2301      	moveq	r3, #1
 8008e5e:	2300      	movne	r3, #0
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d113      	bne.n	8008e92 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6e:	f043 0220 	orr.w	r2, r3, #32
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e00f      	b.n	8008eb2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	bf0c      	ite	eq
 8008ea2:	2301      	moveq	r3, #1
 8008ea4:	2300      	movne	r3, #0
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d0be      	beq.n	8008e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ec6:	e033      	b.n	8008f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f87f 	bl	8008fd0 <I2C_IsErrorOccurred>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e031      	b.n	8008f40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee2:	d025      	beq.n	8008f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ee4:	f7fc ff26 	bl	8005d34 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d302      	bcc.n	8008efa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d11a      	bne.n	8008f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d013      	beq.n	8008f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0c:	f043 0220 	orr.w	r2, r3, #32
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e007      	b.n	8008f40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d1c4      	bne.n	8008ec8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f54:	e02f      	b.n	8008fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 f838 	bl	8008fd0 <I2C_IsErrorOccurred>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e02d      	b.n	8008fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f6a:	f7fc fee3 	bl	8005d34 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d302      	bcc.n	8008f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d11a      	bne.n	8008fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d013      	beq.n	8008fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f92:	f043 0220 	orr.w	r2, r3, #32
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e007      	b.n	8008fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d1c8      	bne.n	8008f56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d068      	beq.n	80090ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2210      	movs	r2, #16
 8009002:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009004:	e049      	b.n	800909a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900c:	d045      	beq.n	800909a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800900e:	f7fc fe91 	bl	8005d34 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	429a      	cmp	r2, r3
 800901c:	d302      	bcc.n	8009024 <I2C_IsErrorOccurred+0x54>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d13a      	bne.n	800909a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800902e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009036:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009046:	d121      	bne.n	800908c <I2C_IsErrorOccurred+0xbc>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800904e:	d01d      	beq.n	800908c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009050:	7cfb      	ldrb	r3, [r7, #19]
 8009052:	2b20      	cmp	r3, #32
 8009054:	d01a      	beq.n	800908c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009064:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009066:	f7fc fe65 	bl	8005d34 <HAL_GetTick>
 800906a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800906c:	e00e      	b.n	800908c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800906e:	f7fc fe61 	bl	8005d34 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b19      	cmp	r3, #25
 800907a:	d907      	bls.n	800908c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	f043 0320 	orr.w	r3, r3, #32
 8009082:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800908a:	e006      	b.n	800909a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b20      	cmp	r3, #32
 8009098:	d1e9      	bne.n	800906e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	f003 0320 	and.w	r3, r3, #32
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d003      	beq.n	80090b0 <I2C_IsErrorOccurred+0xe0>
 80090a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0aa      	beq.n	8009006 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80090b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2220      	movs	r2, #32
 80090be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	f043 0304 	orr.w	r3, r3, #4
 80090c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	f043 0308 	orr.w	r3, r3, #8
 8009108:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009112:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	f043 0302 	orr.w	r3, r3, #2
 800912a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800913c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01c      	beq.n	800917e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff fe45 	bl	8008dd4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6859      	ldr	r1, [r3, #4]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <I2C_IsErrorOccurred+0x1bc>)
 8009156:	400b      	ands	r3, r1
 8009158:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	431a      	orrs	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2220      	movs	r2, #32
 800916a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800917e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009182:	4618      	mov	r0, r3
 8009184:	3728      	adds	r7, #40	; 0x28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	fe00e800 	.word	0xfe00e800

08009190 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	460b      	mov	r3, r1
 800919c:	817b      	strh	r3, [r7, #10]
 800919e:	4613      	mov	r3, r2
 80091a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091a2:	897b      	ldrh	r3, [r7, #10]
 80091a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091a8:	7a7b      	ldrb	r3, [r7, #9]
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	0d5b      	lsrs	r3, r3, #21
 80091ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80091ce:	4b08      	ldr	r3, [pc, #32]	; (80091f0 <I2C_TransferConfig+0x60>)
 80091d0:	430b      	orrs	r3, r1
 80091d2:	43db      	mvns	r3, r3
 80091d4:	ea02 0103 	and.w	r1, r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	430a      	orrs	r2, r1
 80091e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	03ff63ff 	.word	0x03ff63ff

080091f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b20      	cmp	r3, #32
 8009208:	d138      	bne.n	800927c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009210:	2b01      	cmp	r3, #1
 8009212:	d101      	bne.n	8009218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009214:	2302      	movs	r3, #2
 8009216:	e032      	b.n	800927e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2224      	movs	r2, #36	; 0x24
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0201 	bic.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6819      	ldr	r1, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	e000      	b.n	800927e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800927c:	2302      	movs	r3, #2
  }
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b20      	cmp	r3, #32
 800929e:	d139      	bne.n	8009314 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80092aa:	2302      	movs	r3, #2
 80092ac:	e033      	b.n	8009316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2224      	movs	r2, #36	; 0x24
 80092ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0201 	bic.w	r2, r2, #1
 80092cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80092dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	e000      	b.n	8009316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009314:	2302      	movs	r3, #2
  }
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
	...

08009324 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e0bf      	b.n	80094b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f8ba 	bl	80094c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009366:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6999      	ldr	r1, [r3, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800937c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6899      	ldr	r1, [r3, #8]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b4a      	ldr	r3, [pc, #296]	; (80094c0 <HAL_LTDC_Init+0x19c>)
 8009398:	400b      	ands	r3, r1
 800939a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	041b      	lsls	r3, r3, #16
 80093a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6899      	ldr	r1, [r3, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	699a      	ldr	r2, [r3, #24]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	431a      	orrs	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68d9      	ldr	r1, [r3, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	4b3e      	ldr	r3, [pc, #248]	; (80094c0 <HAL_LTDC_Init+0x19c>)
 80093c6:	400b      	ands	r3, r1
 80093c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	041b      	lsls	r3, r3, #16
 80093d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68d9      	ldr	r1, [r3, #12]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1a      	ldr	r2, [r3, #32]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	430a      	orrs	r2, r1
 80093e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6919      	ldr	r1, [r3, #16]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	4b33      	ldr	r3, [pc, #204]	; (80094c0 <HAL_LTDC_Init+0x19c>)
 80093f4:	400b      	ands	r3, r1
 80093f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	041b      	lsls	r3, r3, #16
 80093fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6919      	ldr	r1, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	430a      	orrs	r2, r1
 8009414:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6959      	ldr	r1, [r3, #20]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <HAL_LTDC_Init+0x19c>)
 8009422:	400b      	ands	r3, r1
 8009424:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	041b      	lsls	r3, r3, #16
 800942c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6959      	ldr	r1, [r3, #20]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	431a      	orrs	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009466:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4313      	orrs	r3, r2
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0206 	orr.w	r2, r2, #6
 8009492:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	699a      	ldr	r2, [r3, #24]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	f000f800 	.word	0xf000f800

080094c4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80094d8:	b5b0      	push	{r4, r5, r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_LTDC_ConfigLayer+0x1a>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e02c      	b.n	800954c <HAL_LTDC_ConfigLayer+0x74>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2202      	movs	r2, #2
 80094fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2134      	movs	r1, #52	; 0x34
 8009508:	fb01 f303 	mul.w	r3, r1, r3
 800950c:	4413      	add	r3, r2
 800950e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4614      	mov	r4, r2
 8009516:	461d      	mov	r5, r3
 8009518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800951a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800951c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800951e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f811 	bl	8009554 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2201      	movs	r2, #1
 8009538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bdb0      	pop	{r4, r5, r7, pc}

08009554 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009554:	b480      	push	{r7}
 8009556:	b089      	sub	sp, #36	; 0x24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	0c1b      	lsrs	r3, r3, #16
 800956c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009570:	4413      	add	r3, r2
 8009572:	041b      	lsls	r3, r3, #16
 8009574:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	01db      	lsls	r3, r3, #7
 8009580:	4413      	add	r3, r2
 8009582:	3384      	adds	r3, #132	; 0x84
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	4611      	mov	r1, r2
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	01d2      	lsls	r2, r2, #7
 8009590:	440a      	add	r2, r1
 8009592:	3284      	adds	r2, #132	; 0x84
 8009594:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009598:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	0c1b      	lsrs	r3, r3, #16
 80095a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80095ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	01db      	lsls	r3, r3, #7
 80095b8:	440b      	add	r3, r1
 80095ba:	3384      	adds	r3, #132	; 0x84
 80095bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80095c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095d2:	4413      	add	r3, r2
 80095d4:	041b      	lsls	r3, r3, #16
 80095d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	01db      	lsls	r3, r3, #7
 80095e2:	4413      	add	r3, r2
 80095e4:	3384      	adds	r3, #132	; 0x84
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	6812      	ldr	r2, [r2, #0]
 80095ec:	4611      	mov	r1, r2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	01d2      	lsls	r2, r2, #7
 80095f2:	440a      	add	r2, r1
 80095f4:	3284      	adds	r2, #132	; 0x84
 80095f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80095fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800960a:	4413      	add	r3, r2
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4619      	mov	r1, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	01db      	lsls	r3, r3, #7
 8009618:	440b      	add	r3, r1
 800961a:	3384      	adds	r3, #132	; 0x84
 800961c:	4619      	mov	r1, r3
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4313      	orrs	r3, r2
 8009622:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	01db      	lsls	r3, r3, #7
 800962e:	4413      	add	r3, r2
 8009630:	3384      	adds	r3, #132	; 0x84
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	6812      	ldr	r2, [r2, #0]
 8009638:	4611      	mov	r1, r2
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	01d2      	lsls	r2, r2, #7
 800963e:	440a      	add	r2, r1
 8009640:	3284      	adds	r2, #132	; 0x84
 8009642:	f023 0307 	bic.w	r3, r3, #7
 8009646:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	461a      	mov	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	01db      	lsls	r3, r3, #7
 8009652:	4413      	add	r3, r2
 8009654:	3384      	adds	r3, #132	; 0x84
 8009656:	461a      	mov	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800966e:	041b      	lsls	r3, r3, #16
 8009670:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	061b      	lsls	r3, r3, #24
 8009678:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	01db      	lsls	r3, r3, #7
 8009684:	4413      	add	r3, r2
 8009686:	3384      	adds	r3, #132	; 0x84
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	01db      	lsls	r3, r3, #7
 8009694:	4413      	add	r3, r2
 8009696:	3384      	adds	r3, #132	; 0x84
 8009698:	461a      	mov	r2, r3
 800969a:	2300      	movs	r3, #0
 800969c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80096a4:	461a      	mov	r2, r3
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	431a      	orrs	r2, r3
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4619      	mov	r1, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	01db      	lsls	r3, r3, #7
 80096b8:	440b      	add	r3, r1
 80096ba:	3384      	adds	r3, #132	; 0x84
 80096bc:	4619      	mov	r1, r3
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	01db      	lsls	r3, r3, #7
 80096ce:	4413      	add	r3, r2
 80096d0:	3384      	adds	r3, #132	; 0x84
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	6812      	ldr	r2, [r2, #0]
 80096d8:	4611      	mov	r1, r2
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	01d2      	lsls	r2, r2, #7
 80096de:	440a      	add	r2, r1
 80096e0:	3284      	adds	r2, #132	; 0x84
 80096e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	01db      	lsls	r3, r3, #7
 80096f2:	4413      	add	r3, r2
 80096f4:	3384      	adds	r3, #132	; 0x84
 80096f6:	461a      	mov	r2, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	01db      	lsls	r3, r3, #7
 8009708:	4413      	add	r3, r2
 800970a:	3384      	adds	r3, #132	; 0x84
 800970c:	69da      	ldr	r2, [r3, #28]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4619      	mov	r1, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	01db      	lsls	r3, r3, #7
 8009718:	440b      	add	r3, r1
 800971a:	3384      	adds	r3, #132	; 0x84
 800971c:	4619      	mov	r1, r3
 800971e:	4b58      	ldr	r3, [pc, #352]	; (8009880 <LTDC_SetConfig+0x32c>)
 8009720:	4013      	ands	r3, r2
 8009722:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	69da      	ldr	r2, [r3, #28]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	68f9      	ldr	r1, [r7, #12]
 800972e:	6809      	ldr	r1, [r1, #0]
 8009730:	4608      	mov	r0, r1
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	01c9      	lsls	r1, r1, #7
 8009736:	4401      	add	r1, r0
 8009738:	3184      	adds	r1, #132	; 0x84
 800973a:	4313      	orrs	r3, r2
 800973c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	01db      	lsls	r3, r3, #7
 8009748:	4413      	add	r3, r2
 800974a:	3384      	adds	r3, #132	; 0x84
 800974c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	01db      	lsls	r3, r3, #7
 8009758:	4413      	add	r3, r2
 800975a:	3384      	adds	r3, #132	; 0x84
 800975c:	461a      	mov	r2, r3
 800975e:	2300      	movs	r3, #0
 8009760:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	461a      	mov	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	01db      	lsls	r3, r3, #7
 800976c:	4413      	add	r3, r2
 800976e:	3384      	adds	r3, #132	; 0x84
 8009770:	461a      	mov	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009780:	2304      	movs	r3, #4
 8009782:	61fb      	str	r3, [r7, #28]
 8009784:	e01b      	b.n	80097be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d102      	bne.n	8009794 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800978e:	2303      	movs	r3, #3
 8009790:	61fb      	str	r3, [r7, #28]
 8009792:	e014      	b.n	80097be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b04      	cmp	r3, #4
 800979a:	d00b      	beq.n	80097b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d007      	beq.n	80097b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d003      	beq.n	80097b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80097b0:	2b07      	cmp	r3, #7
 80097b2:	d102      	bne.n	80097ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80097b4:	2302      	movs	r3, #2
 80097b6:	61fb      	str	r3, [r7, #28]
 80097b8:	e001      	b.n	80097be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80097ba:	2301      	movs	r3, #1
 80097bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	01db      	lsls	r3, r3, #7
 80097c8:	4413      	add	r3, r2
 80097ca:	3384      	adds	r3, #132	; 0x84
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	6812      	ldr	r2, [r2, #0]
 80097d2:	4611      	mov	r1, r2
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	01d2      	lsls	r2, r2, #7
 80097d8:	440a      	add	r2, r1
 80097da:	3284      	adds	r2, #132	; 0x84
 80097dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80097e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	fb02 f303 	mul.w	r3, r2, r3
 80097ec:	041a      	lsls	r2, r3, #16
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	1acb      	subs	r3, r1, r3
 80097f8:	69f9      	ldr	r1, [r7, #28]
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	3307      	adds	r3, #7
 8009800:	68f9      	ldr	r1, [r7, #12]
 8009802:	6809      	ldr	r1, [r1, #0]
 8009804:	4608      	mov	r0, r1
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	01c9      	lsls	r1, r1, #7
 800980a:	4401      	add	r1, r0
 800980c:	3184      	adds	r1, #132	; 0x84
 800980e:	4313      	orrs	r3, r2
 8009810:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	01db      	lsls	r3, r3, #7
 800981c:	4413      	add	r3, r2
 800981e:	3384      	adds	r3, #132	; 0x84
 8009820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	01db      	lsls	r3, r3, #7
 800982c:	440b      	add	r3, r1
 800982e:	3384      	adds	r3, #132	; 0x84
 8009830:	4619      	mov	r1, r3
 8009832:	4b14      	ldr	r3, [pc, #80]	; (8009884 <LTDC_SetConfig+0x330>)
 8009834:	4013      	ands	r3, r2
 8009836:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	461a      	mov	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	01db      	lsls	r3, r3, #7
 8009842:	4413      	add	r3, r2
 8009844:	3384      	adds	r3, #132	; 0x84
 8009846:	461a      	mov	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	01db      	lsls	r3, r3, #7
 8009858:	4413      	add	r3, r2
 800985a:	3384      	adds	r3, #132	; 0x84
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	4611      	mov	r1, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	01d2      	lsls	r2, r2, #7
 8009868:	440a      	add	r2, r1
 800986a:	3284      	adds	r2, #132	; 0x84
 800986c:	f043 0301 	orr.w	r3, r3, #1
 8009870:	6013      	str	r3, [r2, #0]
}
 8009872:	bf00      	nop
 8009874:	3724      	adds	r7, #36	; 0x24
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	fffff8f8 	.word	0xfffff8f8
 8009884:	fffff800 	.word	0xfffff800

08009888 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009890:	f7fc fa50 	bl	8005d34 <HAL_GetTick>
 8009894:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d101      	bne.n	80098a0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e03b      	b.n	8009918 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80098c0:	e00f      	b.n	80098e2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80098c2:	f7fc fa37 	bl	8005d34 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d908      	bls.n	80098e2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2240      	movs	r2, #64	; 0x40
 80098d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2203      	movs	r2, #3
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e01a      	b.n	8009918 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e8      	bne.n	80098c2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f9c1 	bl	8009c78 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e048      	b.n	80099c4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0201 	bic.w	r2, r2, #1
 8009940:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2200      	movs	r2, #0
 8009948:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2200      	movs	r2, #0
 8009958:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2200      	movs	r2, #0
 8009968:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2200      	movs	r2, #0
 8009970:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2200      	movs	r2, #0
 8009978:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2200      	movs	r2, #0
 8009990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	221f      	movs	r2, #31
 8009998:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80099dc:	4b91      	ldr	r3, [pc, #580]	; (8009c24 <HAL_MDMA_IRQHandler+0x254>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a91      	ldr	r2, [pc, #580]	; (8009c28 <HAL_MDMA_IRQHandler+0x258>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	0a9b      	lsrs	r3, r3, #10
 80099e8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	4b8e      	ldr	r3, [pc, #568]	; (8009c2c <HAL_MDMA_IRQHandler+0x25c>)
 80099f2:	4413      	add	r3, r2
 80099f4:	099b      	lsrs	r3, r3, #6
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2201      	movs	r2, #1
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8009a02:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 812d 	beq.w	8009c6c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d054      	beq.n	8009aca <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d04d      	beq.n	8009aca <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0202 	bic.w	r2, r2, #2
 8009a3c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a54:	f043 0201 	orr.w	r2, r3, #1
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	669a      	str	r2, [r3, #104]	; 0x68
 8009a5c:	e005      	b.n	8009a6a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a62:	f043 0202 	orr.w	r2, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d005      	beq.n	8009a80 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a78:	f043 0204 	orr.w	r2, r3, #4
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d005      	beq.n	8009a96 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a8e:	f043 0208 	orr.w	r2, r3, #8
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa4:	f043 0210 	orr.w	r2, r3, #16
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d005      	beq.n	8009ac2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aba:	f043 0220 	orr.w	r2, r3, #32
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0310 	and.w	r3, r3, #16
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d012      	beq.n	8009afe <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2210      	movs	r2, #16
 8009aec:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d012      	beq.n	8009b32 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00b      	beq.n	8009b32 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2208      	movs	r2, #8
 8009b20:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d012      	beq.n	8009b66 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2204      	movs	r2, #4
 8009b54:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d039      	beq.n	8009be8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d032      	beq.n	8009be8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8009b90:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d110      	bne.n	8009bc0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d05c      	beq.n	8009c70 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	4798      	blx	r3
        }
        return;
 8009bbe:	e057      	b.n	8009c70 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d040      	beq.n	8009c72 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0201 	bic.w	r2, r2, #1
 8009c06:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60bb      	str	r3, [r7, #8]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d30d      	bcc.n	8009c30 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f2      	bne.n	8009c08 <HAL_MDMA_IRQHandler+0x238>
 8009c22:	e006      	b.n	8009c32 <HAL_MDMA_IRQHandler+0x262>
 8009c24:	24000010 	.word	0x24000010
 8009c28:	1b4e81b5 	.word	0x1b4e81b5
 8009c2c:	adffffc0 	.word	0xadffffc0
        break;
 8009c30:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2203      	movs	r2, #3
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c50:	e003      	b.n	8009c5a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d007      	beq.n	8009c72 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
 8009c6a:	e002      	b.n	8009c72 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8009c70:	bf00      	nop
    }
  }
}
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68d9      	ldr	r1, [r3, #12]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691a      	ldr	r2, [r3, #16]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	695a      	ldr	r2, [r3, #20]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009c9e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8009caa:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8009cb6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8009cc0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009ccc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009cce:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd8:	d107      	bne.n	8009cea <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691a      	ldr	r2, [r3, #16]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8009ce8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	da11      	bge.n	8009d1e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695a      	ldr	r2, [r3, #20]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009d08:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0e:	425b      	negs	r3, r3
 8009d10:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	b292      	uxth	r2, r2
 8009d1a:	621a      	str	r2, [r3, #32]
 8009d1c:	e006      	b.n	8009d2c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	b292      	uxth	r2, r2
 8009d2a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	da15      	bge.n	8009d60 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	695a      	ldr	r2, [r3, #20]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009d42:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	425b      	negs	r3, r3
 8009d4a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6a19      	ldr	r1, [r3, #32]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	041a      	lsls	r2, r3, #16
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	621a      	str	r2, [r3, #32]
 8009d5e:	e009      	b.n	8009d74 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6a19      	ldr	r1, [r3, #32]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6a:	041a      	lsls	r2, r3, #16
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d7c:	d006      	beq.n	8009d8c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	629a      	str	r2, [r3, #40]	; 0x28
 8009d8a:	e003      	b.n	8009d94 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2200      	movs	r2, #0
 8009d92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009d9c:	bf00      	nop
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009db0:	4b19      	ldr	r3, [pc, #100]	; (8009e18 <HAL_PWREx_ConfigSupply+0x70>)
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d00a      	beq.n	8009dd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009dbc:	4b16      	ldr	r3, [pc, #88]	; (8009e18 <HAL_PWREx_ConfigSupply+0x70>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d001      	beq.n	8009dce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e01f      	b.n	8009e0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e01d      	b.n	8009e0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009dd2:	4b11      	ldr	r3, [pc, #68]	; (8009e18 <HAL_PWREx_ConfigSupply+0x70>)
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f023 0207 	bic.w	r2, r3, #7
 8009dda:	490f      	ldr	r1, [pc, #60]	; (8009e18 <HAL_PWREx_ConfigSupply+0x70>)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009de2:	f7fb ffa7 	bl	8005d34 <HAL_GetTick>
 8009de6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009de8:	e009      	b.n	8009dfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009dea:	f7fb ffa3 	bl	8005d34 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009df8:	d901      	bls.n	8009dfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e007      	b.n	8009e0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009dfe:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <HAL_PWREx_ConfigSupply+0x70>)
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e0a:	d1ee      	bne.n	8009dea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	58024800 	.word	0x58024800

08009e1c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af02      	add	r7, sp, #8
 8009e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009e24:	f7fb ff86 	bl	8005d34 <HAL_GetTick>
 8009e28:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e05f      	b.n	8009ef4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d107      	bne.n	8009e50 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f85f 	bl	8009f04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009e46:	f241 3188 	movw	r1, #5000	; 0x1388
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 faca 	bl	800a3e4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	021a      	lsls	r2, r3, #8
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	2120      	movs	r1, #32
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fac2 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d135      	bne.n	8009ef2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	; (8009efc <HAL_QSPI_Init+0xe0>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6852      	ldr	r2, [r2, #4]
 8009e94:	0611      	lsls	r1, r2, #24
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	68d2      	ldr	r2, [r2, #12]
 8009e9a:	4311      	orrs	r1, r2
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	69d2      	ldr	r2, [r2, #28]
 8009ea0:	4311      	orrs	r1, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6a12      	ldr	r2, [r2, #32]
 8009ea6:	4311      	orrs	r1, r2
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6812      	ldr	r2, [r2, #0]
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <HAL_QSPI_Init+0xe4>)
 8009eb8:	4013      	ands	r3, r2
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6912      	ldr	r2, [r2, #16]
 8009ebe:	0411      	lsls	r1, r2, #16
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	6952      	ldr	r2, [r2, #20]
 8009ec4:	4311      	orrs	r1, r2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6992      	ldr	r2, [r2, #24]
 8009eca:	4311      	orrs	r1, r2
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6812      	ldr	r2, [r2, #0]
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	00ffff2f 	.word	0x00ffff2f
 8009f00:	ffe0f8fe 	.word	0xffe0f8fe

08009f04 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009f24:	f7fb ff06 	bl	8005d34 <HAL_GetTick>
 8009f28:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_QSPI_Command+0x22>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e048      	b.n	8009fcc <HAL_QSPI_Command+0xb4>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d137      	bne.n	8009fbe <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	2200      	movs	r2, #0
 8009f64:	2120      	movs	r1, #32
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 fa4a 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d125      	bne.n	8009fc2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009f76:	2200      	movs	r2, #0
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fa77 	bl	800a46e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d115      	bne.n	8009fb4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	2102      	movs	r1, #2
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 fa34 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10f      	bne.n	8009fc2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fb2:	e006      	b.n	8009fc2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fbc:	e001      	b.n	8009fc2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08a      	sub	sp, #40	; 0x28
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8009fe4:	f7fb fea6 	bl	8005d34 <HAL_GetTick>
 8009fe8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3320      	adds	r3, #32
 8009ff0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d101      	bne.n	800a002 <HAL_QSPI_Transmit+0x2e>
 8009ffe:	2302      	movs	r3, #2
 800a000:	e076      	b.n	800a0f0 <HAL_QSPI_Transmit+0x11c>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b01      	cmp	r3, #1
 800a014:	d165      	bne.n	800a0e2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d056      	beq.n	800a0d0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2212      	movs	r2, #18
 800a026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	691b      	ldr	r3, [r3, #16]
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	695a      	ldr	r2, [r3, #20]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800a056:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800a058:	e01b      	b.n	800a092 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	2201      	movs	r2, #1
 800a062:	2104      	movs	r1, #4
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f9cb 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a06a:	4603      	mov	r3, r0
 800a06c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a06e:	7ffb      	ldrb	r3, [r7, #31]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d113      	bne.n	800a09c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	781a      	ldrb	r2, [r3, #0]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	1e5a      	subs	r2, r3, #1
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1df      	bne.n	800a05a <HAL_QSPI_Transmit+0x86>
 800a09a:	e000      	b.n	800a09e <HAL_QSPI_Transmit+0xca>
          break;
 800a09c:	bf00      	nop
      }

      if (status == HAL_OK)
 800a09e:	7ffb      	ldrb	r3, [r7, #31]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d110      	bne.n	800a0c6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 f9a6 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d103      	bne.n	800a0c6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0ce:	e00a      	b.n	800a0e6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d4:	f043 0208 	orr.w	r2, r3, #8
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	77fb      	strb	r3, [r7, #31]
 800a0e0:	e001      	b.n	800a0e6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a0ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3720      	adds	r7, #32
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08a      	sub	sp, #40	; 0x28
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800a108:	f7fb fe14 	bl	8005d34 <HAL_GetTick>
 800a10c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3320      	adds	r3, #32
 800a11c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_QSPI_Receive+0x36>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e07d      	b.n	800a22a <HAL_QSPI_Receive+0x132>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d16c      	bne.n	800a21c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d05d      	beq.n	800a20a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2222      	movs	r2, #34	; 0x22
 800a152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a186:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800a190:	e01c      	b.n	800a1cc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2201      	movs	r2, #1
 800a19a:	2106      	movs	r1, #6
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f92f 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800a1a6:	7ffb      	ldrb	r3, [r7, #31]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d114      	bne.n	800a1d6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	7812      	ldrb	r2, [r2, #0]
 800a1b4:	b2d2      	uxtb	r2, r2
 800a1b6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	1c5a      	adds	r2, r3, #1
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c6:	1e5a      	subs	r2, r3, #1
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1de      	bne.n	800a192 <HAL_QSPI_Receive+0x9a>
 800a1d4:	e000      	b.n	800a1d8 <HAL_QSPI_Receive+0xe0>
          break;
 800a1d6:	bf00      	nop
      }

      if (status == HAL_OK)
 800a1d8:	7ffb      	ldrb	r3, [r7, #31]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d110      	bne.n	800a200 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	2102      	movs	r1, #2
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 f909 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800a1f2:	7ffb      	ldrb	r3, [r7, #31]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d103      	bne.n	800a200 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a208:	e00a      	b.n	800a220 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20e:	f043 0208 	orr.w	r2, r3, #8
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	77fb      	strb	r3, [r7, #31]
 800a21a:	e001      	b.n	800a220 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a21c:	2302      	movs	r3, #2
 800a21e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800a228:	7ffb      	ldrb	r3, [r7, #31]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b088      	sub	sp, #32
 800a236:	af02      	add	r7, sp, #8
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a240:	f7fb fd78 	bl	8005d34 <HAL_GetTick>
 800a244:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d101      	bne.n	800a256 <HAL_QSPI_AutoPolling+0x24>
 800a252:	2302      	movs	r3, #2
 800a254:	e060      	b.n	800a318 <HAL_QSPI_AutoPolling+0xe6>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b01      	cmp	r3, #1
 800a268:	d14f      	bne.n	800a30a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2242      	movs	r2, #66	; 0x42
 800a274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	2200      	movs	r2, #0
 800a280:	2120      	movs	r1, #32
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f8bc 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a288:	4603      	mov	r3, r0
 800a28a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d13d      	bne.n	800a30e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6852      	ldr	r2, [r2, #4]
 800a2a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6892      	ldr	r2, [r2, #8]
 800a2ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800a2c8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a2d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f8c8 	bl	800a46e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	2108      	movs	r1, #8
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f889 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2208      	movs	r2, #8
 800a2fe:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a308:	e001      	b.n	800a30e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a30a:	2302      	movs	r3, #2
 800a30c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a32c:	f7fb fd02 	bl	8005d34 <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d101      	bne.n	800a342 <HAL_QSPI_MemoryMapped+0x22>
 800a33e:	2302      	movs	r3, #2
 800a340:	e04c      	b.n	800a3dc <HAL_QSPI_MemoryMapped+0xbc>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b01      	cmp	r3, #1
 800a354:	d13b      	bne.n	800a3ce <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2282      	movs	r2, #130	; 0x82
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2200      	movs	r2, #0
 800a36e:	2120      	movs	r1, #32
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 f845 	bl	800a400 <QSPI_WaitFlagStateUntilTimeout>
 800a376:	4603      	mov	r3, r0
 800a378:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d128      	bne.n	800a3d2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f023 0108 	bic.w	r1, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	2b08      	cmp	r3, #8
 800a39c:	d110      	bne.n	800a3c0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a3be:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a3c0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800a3c4:	68b9      	ldr	r1, [r7, #8]
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f851 	bl	800a46e <QSPI_Config>
 800a3cc:	e001      	b.n	800a3d2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	4613      	mov	r3, r2
 800a40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a410:	e01a      	b.n	800a448 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a418:	d016      	beq.n	800a448 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41a:	f7fb fc8b 	bl	8005d34 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	429a      	cmp	r2, r3
 800a428:	d302      	bcc.n	800a430 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2204      	movs	r2, #4
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43c:	f043 0201 	orr.w	r2, r3, #1
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e00e      	b.n	800a466 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	4013      	ands	r3, r2
 800a452:	2b00      	cmp	r3, #0
 800a454:	bf14      	ite	ne
 800a456:	2301      	movne	r3, #1
 800a458:	2300      	moveq	r3, #0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	461a      	mov	r2, r3
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	429a      	cmp	r2, r3
 800a462:	d1d6      	bne.n	800a412 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <QSPI_Config+0x28>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a488:	d005      	beq.n	800a496 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3a01      	subs	r2, #1
 800a494:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 80b9 	beq.w	800a612 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d05f      	beq.n	800a568 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	6892      	ldr	r2, [r2, #8]
 800a4b0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d031      	beq.n	800a51e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	049b      	lsls	r3, r3, #18
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	ea42 0103 	orr.w	r1, r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	430a      	orrs	r2, r1
 800a506:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a50e:	f000 812e 	beq.w	800a76e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	6852      	ldr	r2, [r2, #4]
 800a51a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800a51c:	e127      	b.n	800a76e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a526:	431a      	orrs	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52c:	431a      	orrs	r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a532:	431a      	orrs	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	049b      	lsls	r3, r3, #18
 800a53a:	431a      	orrs	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	431a      	orrs	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	431a      	orrs	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	431a      	orrs	r2, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	431a      	orrs	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	ea42 0103 	orr.w	r1, r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	430a      	orrs	r2, r1
 800a564:	615a      	str	r2, [r3, #20]
}
 800a566:	e102      	b.n	800a76e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d02e      	beq.n	800a5ce <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a578:	431a      	orrs	r2, r3
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57e:	431a      	orrs	r2, r3
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	431a      	orrs	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	049b      	lsls	r3, r3, #18
 800a58c:	431a      	orrs	r2, r3
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	431a      	orrs	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	431a      	orrs	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	ea42 0103 	orr.w	r1, r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a5be:	f000 80d6 	beq.w	800a76e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	6852      	ldr	r2, [r2, #4]
 800a5ca:	619a      	str	r2, [r3, #24]
}
 800a5cc:	e0cf      	b.n	800a76e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	049b      	lsls	r3, r3, #18
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	ea42 0103 	orr.w	r1, r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	615a      	str	r2, [r3, #20]
}
 800a610:	e0ad      	b.n	800a76e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d058      	beq.n	800a6cc <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	6892      	ldr	r2, [r2, #8]
 800a622:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d02d      	beq.n	800a688 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a634:	431a      	orrs	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63a:	431a      	orrs	r2, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	431a      	orrs	r2, r3
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	049b      	lsls	r3, r3, #18
 800a648:	431a      	orrs	r2, r3
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	431a      	orrs	r2, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	431a      	orrs	r2, r3
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	431a      	orrs	r2, r3
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	ea42 0103 	orr.w	r1, r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	430a      	orrs	r2, r1
 800a672:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a67a:	d078      	beq.n	800a76e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	6852      	ldr	r2, [r2, #4]
 800a684:	619a      	str	r2, [r3, #24]
}
 800a686:	e072      	b.n	800a76e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a690:	431a      	orrs	r2, r3
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a696:	431a      	orrs	r2, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	431a      	orrs	r2, r3
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	049b      	lsls	r3, r3, #18
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	ea42 0103 	orr.w	r1, r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	615a      	str	r2, [r3, #20]
}
 800a6ca:	e050      	b.n	800a76e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d02a      	beq.n	800a72a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	695b      	ldr	r3, [r3, #20]
 800a6ee:	049b      	lsls	r3, r3, #18
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	431a      	orrs	r2, r3
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	ea42 0103 	orr.w	r1, r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	430a      	orrs	r2, r1
 800a714:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a71c:	d027      	beq.n	800a76e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	6852      	ldr	r2, [r2, #4]
 800a726:	619a      	str	r2, [r3, #24]
}
 800a728:	e021      	b.n	800a76e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d01d      	beq.n	800a76e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73a:	431a      	orrs	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a740:	431a      	orrs	r2, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	431a      	orrs	r2, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	049b      	lsls	r3, r3, #18
 800a74e:	431a      	orrs	r2, r3
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	6a1b      	ldr	r3, [r3, #32]
 800a754:	431a      	orrs	r2, r3
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	431a      	orrs	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	ea42 0103 	orr.w	r1, r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	615a      	str	r2, [r3, #20]
}
 800a76e:	bf00      	nop
 800a770:	3714      	adds	r7, #20
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
	...

0800a77c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08c      	sub	sp, #48	; 0x30
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d102      	bne.n	800a790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f000 bc48 	b.w	800b020 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 8088 	beq.w	800a8ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a79e:	4b99      	ldr	r3, [pc, #612]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7a8:	4b96      	ldr	r3, [pc, #600]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	2b10      	cmp	r3, #16
 800a7b2:	d007      	beq.n	800a7c4 <HAL_RCC_OscConfig+0x48>
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	2b18      	cmp	r3, #24
 800a7b8:	d111      	bne.n	800a7de <HAL_RCC_OscConfig+0x62>
 800a7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7bc:	f003 0303 	and.w	r3, r3, #3
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d10c      	bne.n	800a7de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7c4:	4b8f      	ldr	r3, [pc, #572]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d06d      	beq.n	800a8ac <HAL_RCC_OscConfig+0x130>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d169      	bne.n	800a8ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f000 bc21 	b.w	800b020 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e6:	d106      	bne.n	800a7f6 <HAL_RCC_OscConfig+0x7a>
 800a7e8:	4b86      	ldr	r3, [pc, #536]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a85      	ldr	r2, [pc, #532]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a7ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	e02e      	b.n	800a854 <HAL_RCC_OscConfig+0xd8>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10c      	bne.n	800a818 <HAL_RCC_OscConfig+0x9c>
 800a7fe:	4b81      	ldr	r3, [pc, #516]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a80      	ldr	r2, [pc, #512]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	4b7e      	ldr	r3, [pc, #504]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a7d      	ldr	r2, [pc, #500]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	e01d      	b.n	800a854 <HAL_RCC_OscConfig+0xd8>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a820:	d10c      	bne.n	800a83c <HAL_RCC_OscConfig+0xc0>
 800a822:	4b78      	ldr	r3, [pc, #480]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a77      	ldr	r2, [pc, #476]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	4b75      	ldr	r3, [pc, #468]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a74      	ldr	r2, [pc, #464]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a838:	6013      	str	r3, [r2, #0]
 800a83a:	e00b      	b.n	800a854 <HAL_RCC_OscConfig+0xd8>
 800a83c:	4b71      	ldr	r3, [pc, #452]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a70      	ldr	r2, [pc, #448]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4b6e      	ldr	r3, [pc, #440]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a6d      	ldr	r2, [pc, #436]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a84e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d013      	beq.n	800a884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a85c:	f7fb fa6a 	bl	8005d34 <HAL_GetTick>
 800a860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a862:	e008      	b.n	800a876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a864:	f7fb fa66 	bl	8005d34 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b64      	cmp	r3, #100	; 0x64
 800a870:	d901      	bls.n	800a876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e3d4      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a876:	4b63      	ldr	r3, [pc, #396]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0f0      	beq.n	800a864 <HAL_RCC_OscConfig+0xe8>
 800a882:	e014      	b.n	800a8ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a884:	f7fb fa56 	bl	8005d34 <HAL_GetTick>
 800a888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a88c:	f7fb fa52 	bl	8005d34 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b64      	cmp	r3, #100	; 0x64
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e3c0      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a89e:	4b59      	ldr	r3, [pc, #356]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1f0      	bne.n	800a88c <HAL_RCC_OscConfig+0x110>
 800a8aa:	e000      	b.n	800a8ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 80ca 	beq.w	800aa50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8bc:	4b51      	ldr	r3, [pc, #324]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8c6:	4b4f      	ldr	r3, [pc, #316]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d007      	beq.n	800a8e2 <HAL_RCC_OscConfig+0x166>
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	2b18      	cmp	r3, #24
 800a8d6:	d156      	bne.n	800a986 <HAL_RCC_OscConfig+0x20a>
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	f003 0303 	and.w	r3, r3, #3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d151      	bne.n	800a986 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8e2:	4b48      	ldr	r3, [pc, #288]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <HAL_RCC_OscConfig+0x17e>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e392      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8fa:	4b42      	ldr	r3, [pc, #264]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f023 0219 	bic.w	r2, r3, #25
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	493f      	ldr	r1, [pc, #252]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a90c:	f7fb fa12 	bl	8005d34 <HAL_GetTick>
 800a910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a912:	e008      	b.n	800a926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a914:	f7fb fa0e 	bl	8005d34 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d901      	bls.n	800a926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e37c      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a926:	4b37      	ldr	r3, [pc, #220]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0304 	and.w	r3, r3, #4
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0f0      	beq.n	800a914 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a932:	f7fb fa2f 	bl	8005d94 <HAL_GetREVID>
 800a936:	4603      	mov	r3, r0
 800a938:	f241 0203 	movw	r2, #4099	; 0x1003
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d817      	bhi.n	800a970 <HAL_RCC_OscConfig+0x1f4>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	d108      	bne.n	800a95a <HAL_RCC_OscConfig+0x1de>
 800a948:	4b2e      	ldr	r3, [pc, #184]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a950:	4a2c      	ldr	r2, [pc, #176]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a956:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a958:	e07a      	b.n	800aa50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a95a:	4b2a      	ldr	r3, [pc, #168]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	031b      	lsls	r3, r3, #12
 800a968:	4926      	ldr	r1, [pc, #152]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a96e:	e06f      	b.n	800aa50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a970:	4b24      	ldr	r3, [pc, #144]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	061b      	lsls	r3, r3, #24
 800a97e:	4921      	ldr	r1, [pc, #132]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a980:	4313      	orrs	r3, r2
 800a982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a984:	e064      	b.n	800aa50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d047      	beq.n	800aa1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a98e:	4b1d      	ldr	r3, [pc, #116]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f023 0219 	bic.w	r2, r3, #25
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	491a      	ldr	r1, [pc, #104]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a0:	f7fb f9c8 	bl	8005d34 <HAL_GetTick>
 800a9a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9a6:	e008      	b.n	800a9ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9a8:	f7fb f9c4 	bl	8005d34 <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d901      	bls.n	800a9ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e332      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9ba:	4b12      	ldr	r3, [pc, #72]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0304 	and.w	r3, r3, #4
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0f0      	beq.n	800a9a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9c6:	f7fb f9e5 	bl	8005d94 <HAL_GetREVID>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d819      	bhi.n	800aa08 <HAL_RCC_OscConfig+0x28c>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	d108      	bne.n	800a9ee <HAL_RCC_OscConfig+0x272>
 800a9dc:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a9e4:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a9e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ea:	6053      	str	r3, [r2, #4]
 800a9ec:	e030      	b.n	800aa50 <HAL_RCC_OscConfig+0x2d4>
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	031b      	lsls	r3, r3, #12
 800a9fc:	4901      	ldr	r1, [pc, #4]	; (800aa04 <HAL_RCC_OscConfig+0x288>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	604b      	str	r3, [r1, #4]
 800aa02:	e025      	b.n	800aa50 <HAL_RCC_OscConfig+0x2d4>
 800aa04:	58024400 	.word	0x58024400
 800aa08:	4b9a      	ldr	r3, [pc, #616]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	061b      	lsls	r3, r3, #24
 800aa16:	4997      	ldr	r1, [pc, #604]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	604b      	str	r3, [r1, #4]
 800aa1c:	e018      	b.n	800aa50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa1e:	4b95      	ldr	r3, [pc, #596]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a94      	ldr	r2, [pc, #592]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa24:	f023 0301 	bic.w	r3, r3, #1
 800aa28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa2a:	f7fb f983 	bl	8005d34 <HAL_GetTick>
 800aa2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa30:	e008      	b.n	800aa44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa32:	f7fb f97f 	bl	8005d34 <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d901      	bls.n	800aa44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e2ed      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa44:	4b8b      	ldr	r3, [pc, #556]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0304 	and.w	r3, r3, #4
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f0      	bne.n	800aa32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0310 	and.w	r3, r3, #16
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f000 80a9 	beq.w	800abb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa5e:	4b85      	ldr	r3, [pc, #532]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa68:	4b82      	ldr	r3, [pc, #520]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d007      	beq.n	800aa84 <HAL_RCC_OscConfig+0x308>
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	2b18      	cmp	r3, #24
 800aa78:	d13a      	bne.n	800aaf0 <HAL_RCC_OscConfig+0x374>
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f003 0303 	and.w	r3, r3, #3
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d135      	bne.n	800aaf0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aa84:	4b7b      	ldr	r3, [pc, #492]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d005      	beq.n	800aa9c <HAL_RCC_OscConfig+0x320>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	2b80      	cmp	r3, #128	; 0x80
 800aa96:	d001      	beq.n	800aa9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e2c1      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa9c:	f7fb f97a 	bl	8005d94 <HAL_GetREVID>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f241 0203 	movw	r2, #4099	; 0x1003
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d817      	bhi.n	800aada <HAL_RCC_OscConfig+0x35e>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	2b20      	cmp	r3, #32
 800aab0:	d108      	bne.n	800aac4 <HAL_RCC_OscConfig+0x348>
 800aab2:	4b70      	ldr	r3, [pc, #448]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aaba:	4a6e      	ldr	r2, [pc, #440]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aabc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aac0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aac2:	e075      	b.n	800abb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aac4:	4b6b      	ldr	r3, [pc, #428]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	069b      	lsls	r3, r3, #26
 800aad2:	4968      	ldr	r1, [pc, #416]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aad8:	e06a      	b.n	800abb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aada:	4b66      	ldr	r3, [pc, #408]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	061b      	lsls	r3, r3, #24
 800aae8:	4962      	ldr	r1, [pc, #392]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aaee:	e05f      	b.n	800abb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d042      	beq.n	800ab7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aaf8:	4b5e      	ldr	r3, [pc, #376]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a5d      	ldr	r2, [pc, #372]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab04:	f7fb f916 	bl	8005d34 <HAL_GetTick>
 800ab08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab0a:	e008      	b.n	800ab1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab0c:	f7fb f912 	bl	8005d34 <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d901      	bls.n	800ab1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e280      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ab1e:	4b55      	ldr	r3, [pc, #340]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d0f0      	beq.n	800ab0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ab2a:	f7fb f933 	bl	8005d94 <HAL_GetREVID>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d817      	bhi.n	800ab68 <HAL_RCC_OscConfig+0x3ec>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d108      	bne.n	800ab52 <HAL_RCC_OscConfig+0x3d6>
 800ab40:	4b4c      	ldr	r3, [pc, #304]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ab48:	4a4a      	ldr	r2, [pc, #296]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab4e:	6053      	str	r3, [r2, #4]
 800ab50:	e02e      	b.n	800abb0 <HAL_RCC_OscConfig+0x434>
 800ab52:	4b48      	ldr	r3, [pc, #288]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	069b      	lsls	r3, r3, #26
 800ab60:	4944      	ldr	r1, [pc, #272]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	604b      	str	r3, [r1, #4]
 800ab66:	e023      	b.n	800abb0 <HAL_RCC_OscConfig+0x434>
 800ab68:	4b42      	ldr	r3, [pc, #264]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	061b      	lsls	r3, r3, #24
 800ab76:	493f      	ldr	r1, [pc, #252]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60cb      	str	r3, [r1, #12]
 800ab7c:	e018      	b.n	800abb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ab7e:	4b3d      	ldr	r3, [pc, #244]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a3c      	ldr	r2, [pc, #240]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ab84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab8a:	f7fb f8d3 	bl	8005d34 <HAL_GetTick>
 800ab8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ab90:	e008      	b.n	800aba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ab92:	f7fb f8cf 	bl	8005d34 <HAL_GetTick>
 800ab96:	4602      	mov	r2, r0
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d901      	bls.n	800aba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e23d      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aba4:	4b33      	ldr	r3, [pc, #204]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f0      	bne.n	800ab92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0308 	and.w	r3, r3, #8
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d036      	beq.n	800ac2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d019      	beq.n	800abf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abc4:	4b2b      	ldr	r3, [pc, #172]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800abc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abc8:	4a2a      	ldr	r2, [pc, #168]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abd0:	f7fb f8b0 	bl	8005d34 <HAL_GetTick>
 800abd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800abd6:	e008      	b.n	800abea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abd8:	f7fb f8ac 	bl	8005d34 <HAL_GetTick>
 800abdc:	4602      	mov	r2, r0
 800abde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d901      	bls.n	800abea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800abe6:	2303      	movs	r3, #3
 800abe8:	e21a      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800abea:	4b22      	ldr	r3, [pc, #136]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800abec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0f0      	beq.n	800abd8 <HAL_RCC_OscConfig+0x45c>
 800abf6:	e018      	b.n	800ac2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abf8:	4b1e      	ldr	r3, [pc, #120]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800abfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abfc:	4a1d      	ldr	r2, [pc, #116]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800abfe:	f023 0301 	bic.w	r3, r3, #1
 800ac02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac04:	f7fb f896 	bl	8005d34 <HAL_GetTick>
 800ac08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac0a:	e008      	b.n	800ac1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac0c:	f7fb f892 	bl	8005d34 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d901      	bls.n	800ac1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e200      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ac1e:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ac20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1f0      	bne.n	800ac0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0320 	and.w	r3, r3, #32
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d039      	beq.n	800acaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d01c      	beq.n	800ac78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a0c      	ldr	r2, [pc, #48]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ac44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac4a:	f7fb f873 	bl	8005d34 <HAL_GetTick>
 800ac4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac50:	e008      	b.n	800ac64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac52:	f7fb f86f 	bl	8005d34 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d901      	bls.n	800ac64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	e1dd      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ac64:	4b03      	ldr	r3, [pc, #12]	; (800ac74 <HAL_RCC_OscConfig+0x4f8>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0f0      	beq.n	800ac52 <HAL_RCC_OscConfig+0x4d6>
 800ac70:	e01b      	b.n	800acaa <HAL_RCC_OscConfig+0x52e>
 800ac72:	bf00      	nop
 800ac74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac78:	4b9b      	ldr	r3, [pc, #620]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a9a      	ldr	r2, [pc, #616]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ac7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ac84:	f7fb f856 	bl	8005d34 <HAL_GetTick>
 800ac88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac8a:	e008      	b.n	800ac9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac8c:	f7fb f852 	bl	8005d34 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d901      	bls.n	800ac9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e1c0      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ac9e:	4b92      	ldr	r3, [pc, #584]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f0      	bne.n	800ac8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0304 	and.w	r3, r3, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 8081 	beq.w	800adba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800acb8:	4b8c      	ldr	r3, [pc, #560]	; (800aeec <HAL_RCC_OscConfig+0x770>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a8b      	ldr	r2, [pc, #556]	; (800aeec <HAL_RCC_OscConfig+0x770>)
 800acbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acc4:	f7fb f836 	bl	8005d34 <HAL_GetTick>
 800acc8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acca:	e008      	b.n	800acde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800accc:	f7fb f832 	bl	8005d34 <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	2b64      	cmp	r3, #100	; 0x64
 800acd8:	d901      	bls.n	800acde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e1a0      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acde:	4b83      	ldr	r3, [pc, #524]	; (800aeec <HAL_RCC_OscConfig+0x770>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0f0      	beq.n	800accc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d106      	bne.n	800ad00 <HAL_RCC_OscConfig+0x584>
 800acf2:	4b7d      	ldr	r3, [pc, #500]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800acf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf6:	4a7c      	ldr	r2, [pc, #496]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800acf8:	f043 0301 	orr.w	r3, r3, #1
 800acfc:	6713      	str	r3, [r2, #112]	; 0x70
 800acfe:	e02d      	b.n	800ad5c <HAL_RCC_OscConfig+0x5e0>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10c      	bne.n	800ad22 <HAL_RCC_OscConfig+0x5a6>
 800ad08:	4b77      	ldr	r3, [pc, #476]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0c:	4a76      	ldr	r2, [pc, #472]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad0e:	f023 0301 	bic.w	r3, r3, #1
 800ad12:	6713      	str	r3, [r2, #112]	; 0x70
 800ad14:	4b74      	ldr	r3, [pc, #464]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad18:	4a73      	ldr	r2, [pc, #460]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad1a:	f023 0304 	bic.w	r3, r3, #4
 800ad1e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad20:	e01c      	b.n	800ad5c <HAL_RCC_OscConfig+0x5e0>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	2b05      	cmp	r3, #5
 800ad28:	d10c      	bne.n	800ad44 <HAL_RCC_OscConfig+0x5c8>
 800ad2a:	4b6f      	ldr	r3, [pc, #444]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2e:	4a6e      	ldr	r2, [pc, #440]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad30:	f043 0304 	orr.w	r3, r3, #4
 800ad34:	6713      	str	r3, [r2, #112]	; 0x70
 800ad36:	4b6c      	ldr	r3, [pc, #432]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3a:	4a6b      	ldr	r2, [pc, #428]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad3c:	f043 0301 	orr.w	r3, r3, #1
 800ad40:	6713      	str	r3, [r2, #112]	; 0x70
 800ad42:	e00b      	b.n	800ad5c <HAL_RCC_OscConfig+0x5e0>
 800ad44:	4b68      	ldr	r3, [pc, #416]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	4a67      	ldr	r2, [pc, #412]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad4a:	f023 0301 	bic.w	r3, r3, #1
 800ad4e:	6713      	str	r3, [r2, #112]	; 0x70
 800ad50:	4b65      	ldr	r3, [pc, #404]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad54:	4a64      	ldr	r2, [pc, #400]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad56:	f023 0304 	bic.w	r3, r3, #4
 800ad5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d015      	beq.n	800ad90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad64:	f7fa ffe6 	bl	8005d34 <HAL_GetTick>
 800ad68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad6a:	e00a      	b.n	800ad82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad6c:	f7fa ffe2 	bl	8005d34 <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d901      	bls.n	800ad82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e14e      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad82:	4b59      	ldr	r3, [pc, #356]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ad84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0ee      	beq.n	800ad6c <HAL_RCC_OscConfig+0x5f0>
 800ad8e:	e014      	b.n	800adba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad90:	f7fa ffd0 	bl	8005d34 <HAL_GetTick>
 800ad94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ad96:	e00a      	b.n	800adae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad98:	f7fa ffcc 	bl	8005d34 <HAL_GetTick>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d901      	bls.n	800adae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e138      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800adae:	4b4e      	ldr	r3, [pc, #312]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800adb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1ee      	bne.n	800ad98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 812d 	beq.w	800b01e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800adc4:	4b48      	ldr	r3, [pc, #288]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adcc:	2b18      	cmp	r3, #24
 800adce:	f000 80bd 	beq.w	800af4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2b02      	cmp	r3, #2
 800add8:	f040 809e 	bne.w	800af18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800addc:	4b42      	ldr	r3, [pc, #264]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a41      	ldr	r2, [pc, #260]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ade2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ade6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade8:	f7fa ffa4 	bl	8005d34 <HAL_GetTick>
 800adec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adee:	e008      	b.n	800ae02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adf0:	f7fa ffa0 	bl	8005d34 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d901      	bls.n	800ae02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e10e      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae02:	4b39      	ldr	r3, [pc, #228]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f0      	bne.n	800adf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae0e:	4b36      	ldr	r3, [pc, #216]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae12:	4b37      	ldr	r3, [pc, #220]	; (800aef0 <HAL_RCC_OscConfig+0x774>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae1e:	0112      	lsls	r2, r2, #4
 800ae20:	430a      	orrs	r2, r1
 800ae22:	4931      	ldr	r1, [pc, #196]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	628b      	str	r3, [r1, #40]	; 0x28
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae36:	3b01      	subs	r3, #1
 800ae38:	025b      	lsls	r3, r3, #9
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	431a      	orrs	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	3b01      	subs	r3, #1
 800ae44:	041b      	lsls	r3, r3, #16
 800ae46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae50:	3b01      	subs	r3, #1
 800ae52:	061b      	lsls	r3, r3, #24
 800ae54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae58:	4923      	ldr	r1, [pc, #140]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ae5e:	4b22      	ldr	r3, [pc, #136]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae62:	4a21      	ldr	r2, [pc, #132]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae64:	f023 0301 	bic.w	r3, r3, #1
 800ae68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae6a:	4b1f      	ldr	r3, [pc, #124]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae6e:	4b21      	ldr	r3, [pc, #132]	; (800aef4 <HAL_RCC_OscConfig+0x778>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae76:	00d2      	lsls	r2, r2, #3
 800ae78:	491b      	ldr	r1, [pc, #108]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ae7e:	4b1a      	ldr	r3, [pc, #104]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	f023 020c 	bic.w	r2, r3, #12
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	4917      	ldr	r1, [pc, #92]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ae90:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	f023 0202 	bic.w	r2, r3, #2
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9c:	4912      	ldr	r1, [pc, #72]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aea2:	4b11      	ldr	r3, [pc, #68]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	4a10      	ldr	r2, [pc, #64]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeae:	4b0e      	ldr	r3, [pc, #56]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	4a0d      	ldr	r2, [pc, #52]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aeb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	4a0a      	ldr	r2, [pc, #40]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	4a07      	ldr	r2, [pc, #28]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aecc:	f043 0301 	orr.w	r3, r3, #1
 800aed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a04      	ldr	r2, [pc, #16]	; (800aee8 <HAL_RCC_OscConfig+0x76c>)
 800aed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aedc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aede:	f7fa ff29 	bl	8005d34 <HAL_GetTick>
 800aee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aee4:	e011      	b.n	800af0a <HAL_RCC_OscConfig+0x78e>
 800aee6:	bf00      	nop
 800aee8:	58024400 	.word	0x58024400
 800aeec:	58024800 	.word	0x58024800
 800aef0:	fffffc0c 	.word	0xfffffc0c
 800aef4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aef8:	f7fa ff1c 	bl	8005d34 <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	2b02      	cmp	r3, #2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e08a      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af0a:	4b47      	ldr	r3, [pc, #284]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0f0      	beq.n	800aef8 <HAL_RCC_OscConfig+0x77c>
 800af16:	e082      	b.n	800b01e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af18:	4b43      	ldr	r3, [pc, #268]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a42      	ldr	r2, [pc, #264]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800af1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af24:	f7fa ff06 	bl	8005d34 <HAL_GetTick>
 800af28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af2c:	f7fa ff02 	bl	8005d34 <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e070      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af3e:	4b3a      	ldr	r3, [pc, #232]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f0      	bne.n	800af2c <HAL_RCC_OscConfig+0x7b0>
 800af4a:	e068      	b.n	800b01e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800af4c:	4b36      	ldr	r3, [pc, #216]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800af4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800af52:	4b35      	ldr	r3, [pc, #212]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d031      	beq.n	800afc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f003 0203 	and.w	r2, r3, #3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d12a      	bne.n	800afc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	091b      	lsrs	r3, r3, #4
 800af72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d122      	bne.n	800afc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d11a      	bne.n	800afc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	0a5b      	lsrs	r3, r3, #9
 800af92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d111      	bne.n	800afc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	0c1b      	lsrs	r3, r3, #16
 800afa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800afae:	429a      	cmp	r2, r3
 800afb0:	d108      	bne.n	800afc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	0e1b      	lsrs	r3, r3, #24
 800afb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d001      	beq.n	800afc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e02b      	b.n	800b020 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800afc8:	4b17      	ldr	r3, [pc, #92]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800afca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afcc:	08db      	lsrs	r3, r3, #3
 800afce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d01f      	beq.n	800b01e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800afde:	4b12      	ldr	r3, [pc, #72]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800afe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe2:	4a11      	ldr	r2, [pc, #68]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800afe4:	f023 0301 	bic.w	r3, r3, #1
 800afe8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800afea:	f7fa fea3 	bl	8005d34 <HAL_GetTick>
 800afee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aff0:	bf00      	nop
 800aff2:	f7fa fe9f 	bl	8005d34 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	4293      	cmp	r3, r2
 800affc:	d0f9      	beq.n	800aff2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800affe:	4b0a      	ldr	r3, [pc, #40]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800b000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <HAL_RCC_OscConfig+0x8b0>)
 800b004:	4013      	ands	r3, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b00a:	00d2      	lsls	r2, r2, #3
 800b00c:	4906      	ldr	r1, [pc, #24]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	4a04      	ldr	r2, [pc, #16]	; (800b028 <HAL_RCC_OscConfig+0x8ac>)
 800b018:	f043 0301 	orr.w	r3, r3, #1
 800b01c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3730      	adds	r7, #48	; 0x30
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	58024400 	.word	0x58024400
 800b02c:	ffff0007 	.word	0xffff0007

0800b030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e19c      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b044:	4b8a      	ldr	r3, [pc, #552]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d910      	bls.n	800b074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b052:	4b87      	ldr	r3, [pc, #540]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f023 020f 	bic.w	r2, r3, #15
 800b05a:	4985      	ldr	r1, [pc, #532]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	4313      	orrs	r3, r2
 800b060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b062:	4b83      	ldr	r3, [pc, #524]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 030f 	and.w	r3, r3, #15
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d001      	beq.n	800b074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e184      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d010      	beq.n	800b0a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691a      	ldr	r2, [r3, #16]
 800b084:	4b7b      	ldr	r3, [pc, #492]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d908      	bls.n	800b0a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b090:	4b78      	ldr	r3, [pc, #480]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	4975      	ldr	r1, [pc, #468]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0308 	and.w	r3, r3, #8
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d010      	beq.n	800b0d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	695a      	ldr	r2, [r3, #20]
 800b0b2:	4b70      	ldr	r3, [pc, #448]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d908      	bls.n	800b0d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0be:	4b6d      	ldr	r3, [pc, #436]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	496a      	ldr	r1, [pc, #424]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d010      	beq.n	800b0fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	699a      	ldr	r2, [r3, #24]
 800b0e0:	4b64      	ldr	r3, [pc, #400]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d908      	bls.n	800b0fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b0ec:	4b61      	ldr	r3, [pc, #388]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b0ee:	69db      	ldr	r3, [r3, #28]
 800b0f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	495e      	ldr	r1, [pc, #376]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0320 	and.w	r3, r3, #32
 800b106:	2b00      	cmp	r3, #0
 800b108:	d010      	beq.n	800b12c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69da      	ldr	r2, [r3, #28]
 800b10e:	4b59      	ldr	r3, [pc, #356]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b110:	6a1b      	ldr	r3, [r3, #32]
 800b112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b116:	429a      	cmp	r2, r3
 800b118:	d908      	bls.n	800b12c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b11a:	4b56      	ldr	r3, [pc, #344]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	4953      	ldr	r1, [pc, #332]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d010      	beq.n	800b15a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68da      	ldr	r2, [r3, #12]
 800b13c:	4b4d      	ldr	r3, [pc, #308]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	f003 030f 	and.w	r3, r3, #15
 800b144:	429a      	cmp	r2, r3
 800b146:	d908      	bls.n	800b15a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b148:	4b4a      	ldr	r3, [pc, #296]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	f023 020f 	bic.w	r2, r3, #15
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	4947      	ldr	r1, [pc, #284]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b156:	4313      	orrs	r3, r2
 800b158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	d055      	beq.n	800b212 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b166:	4b43      	ldr	r3, [pc, #268]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	4940      	ldr	r1, [pc, #256]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b174:	4313      	orrs	r3, r2
 800b176:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d107      	bne.n	800b190 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b180:	4b3c      	ldr	r3, [pc, #240]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d121      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e0f6      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	2b03      	cmp	r3, #3
 800b196:	d107      	bne.n	800b1a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b198:	4b36      	ldr	r3, [pc, #216]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d115      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e0ea      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d107      	bne.n	800b1c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1b0:	4b30      	ldr	r3, [pc, #192]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d109      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e0de      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b1c0:	4b2c      	ldr	r3, [pc, #176]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0304 	and.w	r3, r3, #4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e0d6      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b1d0:	4b28      	ldr	r3, [pc, #160]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	f023 0207 	bic.w	r2, r3, #7
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	4925      	ldr	r1, [pc, #148]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1e2:	f7fa fda7 	bl	8005d34 <HAL_GetTick>
 800b1e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1e8:	e00a      	b.n	800b200 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1ea:	f7fa fda3 	bl	8005d34 <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d901      	bls.n	800b200 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e0be      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b200:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	00db      	lsls	r3, r3, #3
 800b20e:	429a      	cmp	r2, r3
 800b210:	d1eb      	bne.n	800b1ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d010      	beq.n	800b240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	4b14      	ldr	r3, [pc, #80]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f003 030f 	and.w	r3, r3, #15
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d208      	bcs.n	800b240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b22e:	4b11      	ldr	r3, [pc, #68]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	f023 020f 	bic.w	r2, r3, #15
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	490e      	ldr	r1, [pc, #56]	; (800b274 <HAL_RCC_ClockConfig+0x244>)
 800b23c:	4313      	orrs	r3, r2
 800b23e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d214      	bcs.n	800b278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b24e:	4b08      	ldr	r3, [pc, #32]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f023 020f 	bic.w	r2, r3, #15
 800b256:	4906      	ldr	r1, [pc, #24]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b25e:	4b04      	ldr	r3, [pc, #16]	; (800b270 <HAL_RCC_ClockConfig+0x240>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 030f 	and.w	r3, r3, #15
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d005      	beq.n	800b278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e086      	b.n	800b37e <HAL_RCC_ClockConfig+0x34e>
 800b270:	52002000 	.word	0x52002000
 800b274:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d010      	beq.n	800b2a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	4b3f      	ldr	r3, [pc, #252]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b290:	429a      	cmp	r2, r3
 800b292:	d208      	bcs.n	800b2a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b294:	4b3c      	ldr	r3, [pc, #240]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	4939      	ldr	r1, [pc, #228]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0308 	and.w	r3, r3, #8
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d010      	beq.n	800b2d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	695a      	ldr	r2, [r3, #20]
 800b2b6:	4b34      	ldr	r3, [pc, #208]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d208      	bcs.n	800b2d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2c2:	4b31      	ldr	r3, [pc, #196]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2c4:	69db      	ldr	r3, [r3, #28]
 800b2c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	492e      	ldr	r1, [pc, #184]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0310 	and.w	r3, r3, #16
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d010      	beq.n	800b302 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	699a      	ldr	r2, [r3, #24]
 800b2e4:	4b28      	ldr	r3, [pc, #160]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d208      	bcs.n	800b302 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2f0:	4b25      	ldr	r3, [pc, #148]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	4922      	ldr	r1, [pc, #136]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d010      	beq.n	800b330 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	69da      	ldr	r2, [r3, #28]
 800b312:	4b1d      	ldr	r3, [pc, #116]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d208      	bcs.n	800b330 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b31e:	4b1a      	ldr	r3, [pc, #104]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	69db      	ldr	r3, [r3, #28]
 800b32a:	4917      	ldr	r1, [pc, #92]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b330:	f000 f834 	bl	800b39c <HAL_RCC_GetSysClockFreq>
 800b334:	4602      	mov	r2, r0
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	0a1b      	lsrs	r3, r3, #8
 800b33c:	f003 030f 	and.w	r3, r3, #15
 800b340:	4912      	ldr	r1, [pc, #72]	; (800b38c <HAL_RCC_ClockConfig+0x35c>)
 800b342:	5ccb      	ldrb	r3, [r1, r3]
 800b344:	f003 031f 	and.w	r3, r3, #31
 800b348:	fa22 f303 	lsr.w	r3, r2, r3
 800b34c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b34e:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <HAL_RCC_ClockConfig+0x358>)
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	f003 030f 	and.w	r3, r3, #15
 800b356:	4a0d      	ldr	r2, [pc, #52]	; (800b38c <HAL_RCC_ClockConfig+0x35c>)
 800b358:	5cd3      	ldrb	r3, [r2, r3]
 800b35a:	f003 031f 	and.w	r3, r3, #31
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	fa22 f303 	lsr.w	r3, r2, r3
 800b364:	4a0a      	ldr	r2, [pc, #40]	; (800b390 <HAL_RCC_ClockConfig+0x360>)
 800b366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b368:	4a0a      	ldr	r2, [pc, #40]	; (800b394 <HAL_RCC_ClockConfig+0x364>)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b36e:	4b0a      	ldr	r3, [pc, #40]	; (800b398 <HAL_RCC_ClockConfig+0x368>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f7fa fc94 	bl	8005ca0 <HAL_InitTick>
 800b378:	4603      	mov	r3, r0
 800b37a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	58024400 	.word	0x58024400
 800b38c:	080182c8 	.word	0x080182c8
 800b390:	24000014 	.word	0x24000014
 800b394:	24000010 	.word	0x24000010
 800b398:	2400005c 	.word	0x2400005c

0800b39c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b089      	sub	sp, #36	; 0x24
 800b3a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3a2:	4bb3      	ldr	r3, [pc, #716]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3aa:	2b18      	cmp	r3, #24
 800b3ac:	f200 8155 	bhi.w	800b65a <HAL_RCC_GetSysClockFreq+0x2be>
 800b3b0:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b41d 	.word	0x0800b41d
 800b3bc:	0800b65b 	.word	0x0800b65b
 800b3c0:	0800b65b 	.word	0x0800b65b
 800b3c4:	0800b65b 	.word	0x0800b65b
 800b3c8:	0800b65b 	.word	0x0800b65b
 800b3cc:	0800b65b 	.word	0x0800b65b
 800b3d0:	0800b65b 	.word	0x0800b65b
 800b3d4:	0800b65b 	.word	0x0800b65b
 800b3d8:	0800b443 	.word	0x0800b443
 800b3dc:	0800b65b 	.word	0x0800b65b
 800b3e0:	0800b65b 	.word	0x0800b65b
 800b3e4:	0800b65b 	.word	0x0800b65b
 800b3e8:	0800b65b 	.word	0x0800b65b
 800b3ec:	0800b65b 	.word	0x0800b65b
 800b3f0:	0800b65b 	.word	0x0800b65b
 800b3f4:	0800b65b 	.word	0x0800b65b
 800b3f8:	0800b449 	.word	0x0800b449
 800b3fc:	0800b65b 	.word	0x0800b65b
 800b400:	0800b65b 	.word	0x0800b65b
 800b404:	0800b65b 	.word	0x0800b65b
 800b408:	0800b65b 	.word	0x0800b65b
 800b40c:	0800b65b 	.word	0x0800b65b
 800b410:	0800b65b 	.word	0x0800b65b
 800b414:	0800b65b 	.word	0x0800b65b
 800b418:	0800b44f 	.word	0x0800b44f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b41c:	4b94      	ldr	r3, [pc, #592]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0320 	and.w	r3, r3, #32
 800b424:	2b00      	cmp	r3, #0
 800b426:	d009      	beq.n	800b43c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b428:	4b91      	ldr	r3, [pc, #580]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	08db      	lsrs	r3, r3, #3
 800b42e:	f003 0303 	and.w	r3, r3, #3
 800b432:	4a90      	ldr	r2, [pc, #576]	; (800b674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b434:	fa22 f303 	lsr.w	r3, r2, r3
 800b438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b43a:	e111      	b.n	800b660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b43c:	4b8d      	ldr	r3, [pc, #564]	; (800b674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b43e:	61bb      	str	r3, [r7, #24]
      break;
 800b440:	e10e      	b.n	800b660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b442:	4b8d      	ldr	r3, [pc, #564]	; (800b678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b444:	61bb      	str	r3, [r7, #24]
      break;
 800b446:	e10b      	b.n	800b660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b448:	4b8c      	ldr	r3, [pc, #560]	; (800b67c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b44a:	61bb      	str	r3, [r7, #24]
      break;
 800b44c:	e108      	b.n	800b660 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b44e:	4b88      	ldr	r3, [pc, #544]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	f003 0303 	and.w	r3, r3, #3
 800b456:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b458:	4b85      	ldr	r3, [pc, #532]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45c:	091b      	lsrs	r3, r3, #4
 800b45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b462:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b464:	4b82      	ldr	r3, [pc, #520]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b46e:	4b80      	ldr	r3, [pc, #512]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b472:	08db      	lsrs	r3, r3, #3
 800b474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	fb02 f303 	mul.w	r3, r2, r3
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b486:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80e1 	beq.w	800b654 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b02      	cmp	r3, #2
 800b496:	f000 8083 	beq.w	800b5a0 <HAL_RCC_GetSysClockFreq+0x204>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	f200 80a1 	bhi.w	800b5e4 <HAL_RCC_GetSysClockFreq+0x248>
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d003      	beq.n	800b4b0 <HAL_RCC_GetSysClockFreq+0x114>
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d056      	beq.n	800b55c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b4ae:	e099      	b.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4b0:	4b6f      	ldr	r3, [pc, #444]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 0320 	and.w	r3, r3, #32
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d02d      	beq.n	800b518 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4bc:	4b6c      	ldr	r3, [pc, #432]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	08db      	lsrs	r3, r3, #3
 800b4c2:	f003 0303 	and.w	r3, r3, #3
 800b4c6:	4a6b      	ldr	r2, [pc, #428]	; (800b674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4e6:	4b62      	ldr	r3, [pc, #392]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ee:	ee07 3a90 	vmov	s15, r3
 800b4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b512:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b516:	e087      	b.n	800b628 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	ee07 3a90 	vmov	s15, r3
 800b51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b522:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b684 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b52a:	4b51      	ldr	r3, [pc, #324]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b532:	ee07 3a90 	vmov	s15, r3
 800b536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b53e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b55a:	e065      	b.n	800b628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	ee07 3a90 	vmov	s15, r3
 800b562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b566:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b56e:	4b40      	ldr	r3, [pc, #256]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b582:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b59a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b59e:	e043      	b.n	800b628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b68c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b2:	4b2f      	ldr	r3, [pc, #188]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ba:	ee07 3a90 	vmov	s15, r3
 800b5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5e2:	e021      	b.n	800b628 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f6:	4b1e      	ldr	r3, [pc, #120]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b606:	ed97 6a02 	vldr	s12, [r7, #8]
 800b60a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b626:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b628:	4b11      	ldr	r3, [pc, #68]	; (800b670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62c:	0a5b      	lsrs	r3, r3, #9
 800b62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b632:	3301      	adds	r3, #1
 800b634:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	ee07 3a90 	vmov	s15, r3
 800b63c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b640:	edd7 6a07 	vldr	s13, [r7, #28]
 800b644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64c:	ee17 3a90 	vmov	r3, s15
 800b650:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b652:	e005      	b.n	800b660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	61bb      	str	r3, [r7, #24]
      break;
 800b658:	e002      	b.n	800b660 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b65a:	4b07      	ldr	r3, [pc, #28]	; (800b678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b65c:	61bb      	str	r3, [r7, #24]
      break;
 800b65e:	bf00      	nop
  }

  return sysclockfreq;
 800b660:	69bb      	ldr	r3, [r7, #24]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3724      	adds	r7, #36	; 0x24
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	58024400 	.word	0x58024400
 800b674:	03d09000 	.word	0x03d09000
 800b678:	003d0900 	.word	0x003d0900
 800b67c:	017d7840 	.word	0x017d7840
 800b680:	46000000 	.word	0x46000000
 800b684:	4c742400 	.word	0x4c742400
 800b688:	4a742400 	.word	0x4a742400
 800b68c:	4bbebc20 	.word	0x4bbebc20

0800b690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b696:	f7ff fe81 	bl	800b39c <HAL_RCC_GetSysClockFreq>
 800b69a:	4602      	mov	r2, r0
 800b69c:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	0a1b      	lsrs	r3, r3, #8
 800b6a2:	f003 030f 	and.w	r3, r3, #15
 800b6a6:	490f      	ldr	r1, [pc, #60]	; (800b6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6a8:	5ccb      	ldrb	r3, [r1, r3]
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6b4:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	f003 030f 	and.w	r3, r3, #15
 800b6bc:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b6be:	5cd3      	ldrb	r3, [r2, r3]
 800b6c0:	f003 031f 	and.w	r3, r3, #31
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ca:	4a07      	ldr	r2, [pc, #28]	; (800b6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6ce:	4a07      	ldr	r2, [pc, #28]	; (800b6ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b6d4:	4b04      	ldr	r3, [pc, #16]	; (800b6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	58024400 	.word	0x58024400
 800b6e4:	080182c8 	.word	0x080182c8
 800b6e8:	24000014 	.word	0x24000014
 800b6ec:	24000010 	.word	0x24000010

0800b6f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b6f4:	f7ff ffcc 	bl	800b690 <HAL_RCC_GetHCLKFreq>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	0a1b      	lsrs	r3, r3, #8
 800b700:	f003 0307 	and.w	r3, r3, #7
 800b704:	4904      	ldr	r1, [pc, #16]	; (800b718 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b706:	5ccb      	ldrb	r3, [r1, r3]
 800b708:	f003 031f 	and.w	r3, r3, #31
 800b70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b710:	4618      	mov	r0, r3
 800b712:	bd80      	pop	{r7, pc}
 800b714:	58024400 	.word	0x58024400
 800b718:	080182c8 	.word	0x080182c8

0800b71c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b720:	b0ca      	sub	sp, #296	; 0x128
 800b722:	af00      	add	r7, sp, #0
 800b724:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b728:	2300      	movs	r3, #0
 800b72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b72e:	2300      	movs	r3, #0
 800b730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b740:	2500      	movs	r5, #0
 800b742:	ea54 0305 	orrs.w	r3, r4, r5
 800b746:	d049      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b74e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b752:	d02f      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b754:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b758:	d828      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b75a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b75e:	d01a      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b764:	d822      	bhi.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b766:	2b00      	cmp	r3, #0
 800b768:	d003      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b76a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b76e:	d007      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b770:	e01c      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b772:	4bb8      	ldr	r3, [pc, #736]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	4ab7      	ldr	r2, [pc, #732]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b77c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b77e:	e01a      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b784:	3308      	adds	r3, #8
 800b786:	2102      	movs	r1, #2
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 f9d1 	bl	800cb30 <RCCEx_PLL2_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b794:	e00f      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b79a:	3328      	adds	r3, #40	; 0x28
 800b79c:	2102      	movs	r1, #2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f001 fa78 	bl	800cc94 <RCCEx_PLL3_Config>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b7aa:	e004      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7b2:	e000      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b7be:	4ba5      	ldr	r3, [pc, #660]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7cc:	4aa1      	ldr	r2, [pc, #644]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	6513      	str	r3, [r2, #80]	; 0x50
 800b7d2:	e003      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b7e8:	f04f 0900 	mov.w	r9, #0
 800b7ec:	ea58 0309 	orrs.w	r3, r8, r9
 800b7f0:	d047      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d82a      	bhi.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b7fc:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b802:	bf00      	nop
 800b804:	0800b819 	.word	0x0800b819
 800b808:	0800b827 	.word	0x0800b827
 800b80c:	0800b83d 	.word	0x0800b83d
 800b810:	0800b85b 	.word	0x0800b85b
 800b814:	0800b85b 	.word	0x0800b85b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b818:	4b8e      	ldr	r3, [pc, #568]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	4a8d      	ldr	r2, [pc, #564]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b81e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b824:	e01a      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82a:	3308      	adds	r3, #8
 800b82c:	2100      	movs	r1, #0
 800b82e:	4618      	mov	r0, r3
 800b830:	f001 f97e 	bl	800cb30 <RCCEx_PLL2_Config>
 800b834:	4603      	mov	r3, r0
 800b836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b83a:	e00f      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b840:	3328      	adds	r3, #40	; 0x28
 800b842:	2100      	movs	r1, #0
 800b844:	4618      	mov	r0, r3
 800b846:	f001 fa25 	bl	800cc94 <RCCEx_PLL3_Config>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b850:	e004      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b858:	e000      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b85a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b85c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10a      	bne.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b864:	4b7b      	ldr	r3, [pc, #492]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b868:	f023 0107 	bic.w	r1, r3, #7
 800b86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b872:	4a78      	ldr	r2, [pc, #480]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b874:	430b      	orrs	r3, r1
 800b876:	6513      	str	r3, [r2, #80]	; 0x50
 800b878:	e003      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b87a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b87e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b88e:	f04f 0b00 	mov.w	fp, #0
 800b892:	ea5a 030b 	orrs.w	r3, sl, fp
 800b896:	d04c      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d030      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a8:	d829      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b8aa:	2bc0      	cmp	r3, #192	; 0xc0
 800b8ac:	d02d      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b8ae:	2bc0      	cmp	r3, #192	; 0xc0
 800b8b0:	d825      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b8b2:	2b80      	cmp	r3, #128	; 0x80
 800b8b4:	d018      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b8b6:	2b80      	cmp	r3, #128	; 0x80
 800b8b8:	d821      	bhi.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b8be:	2b40      	cmp	r3, #64	; 0x40
 800b8c0:	d007      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b8c2:	e01c      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c4:	4b63      	ldr	r3, [pc, #396]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	4a62      	ldr	r2, [pc, #392]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b8ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8d0:	e01c      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	2100      	movs	r1, #0
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f001 f928 	bl	800cb30 <RCCEx_PLL2_Config>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8e6:	e011      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ec:	3328      	adds	r3, #40	; 0x28
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 f9cf 	bl	800cc94 <RCCEx_PLL3_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b8fc:	e006      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b904:	e002      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b906:	bf00      	nop
 800b908:	e000      	b.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b90c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b914:	4b4f      	ldr	r3, [pc, #316]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b918:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b922:	4a4c      	ldr	r2, [pc, #304]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b924:	430b      	orrs	r3, r1
 800b926:	6513      	str	r3, [r2, #80]	; 0x50
 800b928:	e003      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b92e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b93e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b942:	2300      	movs	r3, #0
 800b944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b948:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b94c:	460b      	mov	r3, r1
 800b94e:	4313      	orrs	r3, r2
 800b950:	d053      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b956:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b95a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b95e:	d035      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b964:	d82e      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b96a:	d031      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b96c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b970:	d828      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b976:	d01a      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b97c:	d822      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b986:	d007      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b988:	e01c      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b98a:	4b32      	ldr	r3, [pc, #200]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98e:	4a31      	ldr	r2, [pc, #196]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b996:	e01c      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99c:	3308      	adds	r3, #8
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f001 f8c5 	bl	800cb30 <RCCEx_PLL2_Config>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b9ac:	e011      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b2:	3328      	adds	r3, #40	; 0x28
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f001 f96c 	bl	800cc94 <RCCEx_PLL3_Config>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9c2:	e006      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ca:	e002      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b9cc:	bf00      	nop
 800b9ce:	e000      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10b      	bne.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b9da:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9de:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b9ea:	4a1a      	ldr	r2, [pc, #104]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	6593      	str	r3, [r2, #88]	; 0x58
 800b9f0:	e003      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ba06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ba10:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ba14:	460b      	mov	r3, r1
 800ba16:	4313      	orrs	r3, r2
 800ba18:	d056      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ba1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba26:	d038      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ba28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba2c:	d831      	bhi.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba32:	d034      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ba34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba38:	d82b      	bhi.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba3e:	d01d      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ba40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba44:	d825      	bhi.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d006      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ba4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba4e:	d00a      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ba50:	e01f      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ba52:	bf00      	nop
 800ba54:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba58:	4ba2      	ldr	r3, [pc, #648]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4aa1      	ldr	r2, [pc, #644]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba64:	e01c      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6a:	3308      	adds	r3, #8
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 f85e 	bl	800cb30 <RCCEx_PLL2_Config>
 800ba74:	4603      	mov	r3, r0
 800ba76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ba7a:	e011      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba80:	3328      	adds	r3, #40	; 0x28
 800ba82:	2100      	movs	r1, #0
 800ba84:	4618      	mov	r0, r3
 800ba86:	f001 f905 	bl	800cc94 <RCCEx_PLL3_Config>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba90:	e006      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba98:	e002      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ba9a:	bf00      	nop
 800ba9c:	e000      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ba9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10b      	bne.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800baa8:	4b8e      	ldr	r3, [pc, #568]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800baaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800bab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bab8:	4a8a      	ldr	r2, [pc, #552]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800baba:	430b      	orrs	r3, r1
 800babc:	6593      	str	r3, [r2, #88]	; 0x58
 800babe:	e003      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800bad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bad8:	2300      	movs	r3, #0
 800bada:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bade:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800bae2:	460b      	mov	r3, r1
 800bae4:	4313      	orrs	r3, r2
 800bae6:	d03a      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800bae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baee:	2b30      	cmp	r3, #48	; 0x30
 800baf0:	d01f      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800baf2:	2b30      	cmp	r3, #48	; 0x30
 800baf4:	d819      	bhi.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	d00c      	beq.n	800bb14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	d815      	bhi.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d019      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bb02:	2b10      	cmp	r3, #16
 800bb04:	d111      	bne.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb06:	4b77      	ldr	r3, [pc, #476]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0a:	4a76      	ldr	r2, [pc, #472]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bb12:	e011      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb18:	3308      	adds	r3, #8
 800bb1a:	2102      	movs	r1, #2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f001 f807 	bl	800cb30 <RCCEx_PLL2_Config>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bb28:	e006      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb30:	e002      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bb36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10a      	bne.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bb40:	4b68      	ldr	r3, [pc, #416]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb44:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800bb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb4e:	4a65      	ldr	r2, [pc, #404]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bb50:	430b      	orrs	r3, r1
 800bb52:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb54:	e003      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800bb6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	d051      	beq.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb88:	d035      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800bb8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb8e:	d82e      	bhi.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bb90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb94:	d031      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800bb96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bb9a:	d828      	bhi.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bb9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba0:	d01a      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba6:	d822      	bhi.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d003      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bbac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb0:	d007      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800bbb2:	e01c      	b.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbb4:	4b4b      	ldr	r3, [pc, #300]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	4a4a      	ldr	r2, [pc, #296]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bbba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbc0:	e01c      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 ffb0 	bl	800cb30 <RCCEx_PLL2_Config>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbd6:	e011      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbdc:	3328      	adds	r3, #40	; 0x28
 800bbde:	2100      	movs	r1, #0
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 f857 	bl	800cc94 <RCCEx_PLL3_Config>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bbec:	e006      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbf4:	e002      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bbf6:	bf00      	nop
 800bbf8:	e000      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800bbfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bc04:	4b37      	ldr	r3, [pc, #220]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800bc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc12:	4a34      	ldr	r2, [pc, #208]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bc14:	430b      	orrs	r3, r1
 800bc16:	6513      	str	r3, [r2, #80]	; 0x50
 800bc18:	e003      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bc2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc32:	2300      	movs	r3, #0
 800bc34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	d056      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc4c:	d033      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bc4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bc52:	d82c      	bhi.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc58:	d02f      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800bc5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc5e:	d826      	bhi.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc64:	d02b      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800bc66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bc6a:	d820      	bhi.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc70:	d012      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800bc72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc76:	d81a      	bhi.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d022      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc80:	d115      	bne.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	3308      	adds	r3, #8
 800bc88:	2101      	movs	r1, #1
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 ff50 	bl	800cb30 <RCCEx_PLL2_Config>
 800bc90:	4603      	mov	r3, r0
 800bc92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bc96:	e015      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9c:	3328      	adds	r3, #40	; 0x28
 800bc9e:	2101      	movs	r1, #1
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fff7 	bl	800cc94 <RCCEx_PLL3_Config>
 800bca6:	4603      	mov	r3, r0
 800bca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bcac:	e00a      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcb4:	e006      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcb6:	bf00      	nop
 800bcb8:	e004      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcba:	bf00      	nop
 800bcbc:	e002      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcbe:	bf00      	nop
 800bcc0:	e000      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bcc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10d      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bccc:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcd0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcda:	4a02      	ldr	r2, [pc, #8]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	6513      	str	r3, [r2, #80]	; 0x50
 800bce0:	e006      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bce2:	bf00      	nop
 800bce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bcfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd00:	2300      	movs	r3, #0
 800bd02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	d055      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd1c:	d033      	beq.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bd1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd22:	d82c      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd28:	d02f      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2e:	d826      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd34:	d02b      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bd36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd3a:	d820      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd40:	d012      	beq.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bd42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd46:	d81a      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d022      	beq.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bd4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd50:	d115      	bne.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd56:	3308      	adds	r3, #8
 800bd58:	2101      	movs	r1, #1
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fee8 	bl	800cb30 <RCCEx_PLL2_Config>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd66:	e015      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6c:	3328      	adds	r3, #40	; 0x28
 800bd6e:	2101      	movs	r1, #1
 800bd70:	4618      	mov	r0, r3
 800bd72:	f000 ff8f 	bl	800cc94 <RCCEx_PLL3_Config>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bd7c:	e00a      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd84:	e006      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd86:	bf00      	nop
 800bd88:	e004      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd8a:	bf00      	nop
 800bd8c:	e002      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd8e:	bf00      	nop
 800bd90:	e000      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bd92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10b      	bne.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bd9c:	4ba3      	ldr	r3, [pc, #652]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bd9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bdac:	4a9f      	ldr	r2, [pc, #636]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdae:	430b      	orrs	r3, r1
 800bdb0:	6593      	str	r3, [r2, #88]	; 0x58
 800bdb2:	e003      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bdbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bdc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bdd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	d037      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde6:	d00e      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bde8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdec:	d816      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d018      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800bdf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdf6:	d111      	bne.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdf8:	4b8c      	ldr	r3, [pc, #560]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	4a8b      	ldr	r2, [pc, #556]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bdfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be04:	e00f      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0a:	3308      	adds	r3, #8
 800be0c:	2101      	movs	r1, #1
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fe8e 	bl	800cb30 <RCCEx_PLL2_Config>
 800be14:	4603      	mov	r3, r0
 800be16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be1a:	e004      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be22:	e000      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800be24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be2e:	4b7f      	ldr	r3, [pc, #508]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be32:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800be36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3c:	4a7b      	ldr	r2, [pc, #492]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be3e:	430b      	orrs	r3, r1
 800be40:	6513      	str	r3, [r2, #80]	; 0x50
 800be42:	e003      	b.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800be58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be5c:	2300      	movs	r3, #0
 800be5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800be66:	460b      	mov	r3, r1
 800be68:	4313      	orrs	r3, r2
 800be6a:	d039      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be72:	2b03      	cmp	r3, #3
 800be74:	d81c      	bhi.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800beb9 	.word	0x0800beb9
 800be80:	0800be8d 	.word	0x0800be8d
 800be84:	0800be9b 	.word	0x0800be9b
 800be88:	0800beb9 	.word	0x0800beb9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be8c:	4b67      	ldr	r3, [pc, #412]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be90:	4a66      	ldr	r2, [pc, #408]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800be92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800be98:	e00f      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9e:	3308      	adds	r3, #8
 800bea0:	2102      	movs	r1, #2
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 fe44 	bl	800cb30 <RCCEx_PLL2_Config>
 800bea8:	4603      	mov	r3, r0
 800beaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800beae:	e004      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800beb6:	e000      	b.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800beb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bec2:	4b5a      	ldr	r3, [pc, #360]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec6:	f023 0103 	bic.w	r1, r3, #3
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bed0:	4a56      	ldr	r2, [pc, #344]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bed2:	430b      	orrs	r3, r1
 800bed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bed6:	e003      	b.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bedc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800beec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bef0:	2300      	movs	r3, #0
 800bef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bef6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800befa:	460b      	mov	r3, r1
 800befc:	4313      	orrs	r3, r2
 800befe:	f000 809f 	beq.w	800c040 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf02:	4b4b      	ldr	r3, [pc, #300]	; (800c030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4a4a      	ldr	r2, [pc, #296]	; (800c030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bf08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf0e:	f7f9 ff11 	bl	8005d34 <HAL_GetTick>
 800bf12:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf16:	e00b      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf18:	f7f9 ff0c 	bl	8005d34 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	2b64      	cmp	r3, #100	; 0x64
 800bf26:	d903      	bls.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf2e:	e005      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf30:	4b3f      	ldr	r3, [pc, #252]	; (800c030 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0ed      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bf3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d179      	bne.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf44:	4b39      	ldr	r3, [pc, #228]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf50:	4053      	eors	r3, r2
 800bf52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d015      	beq.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf5a:	4b34      	ldr	r3, [pc, #208]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf66:	4b31      	ldr	r3, [pc, #196]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6a:	4a30      	ldr	r2, [pc, #192]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf70:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf72:	4b2e      	ldr	r3, [pc, #184]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf76:	4a2d      	ldr	r2, [pc, #180]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf7c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf7e:	4a2b      	ldr	r2, [pc, #172]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bf80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bf84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf92:	d118      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf94:	f7f9 fece 	bl	8005d34 <HAL_GetTick>
 800bf98:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf9c:	e00d      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf9e:	f7f9 fec9 	bl	8005d34 <HAL_GetTick>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bfa8:	1ad2      	subs	r2, r2, r3
 800bfaa:	f241 3388 	movw	r3, #5000	; 0x1388
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d903      	bls.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bfb8:	e005      	b.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfba:	4b1c      	ldr	r3, [pc, #112]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	f003 0302 	and.w	r3, r3, #2
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0eb      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bfc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d129      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfde:	d10e      	bne.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bfe0:	4b12      	ldr	r3, [pc, #72]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bfe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bff0:	091a      	lsrs	r2, r3, #4
 800bff2:	4b10      	ldr	r3, [pc, #64]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	4a0d      	ldr	r2, [pc, #52]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bff8:	430b      	orrs	r3, r1
 800bffa:	6113      	str	r3, [r2, #16]
 800bffc:	e005      	b.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bffe:	4b0b      	ldr	r3, [pc, #44]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	4a0a      	ldr	r2, [pc, #40]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c004:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c008:	6113      	str	r3, [r2, #16]
 800c00a:	4b08      	ldr	r3, [pc, #32]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c00c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c01a:	4a04      	ldr	r2, [pc, #16]	; (800c02c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c01c:	430b      	orrs	r3, r1
 800c01e:	6713      	str	r3, [r2, #112]	; 0x70
 800c020:	e00e      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800c02a:	e009      	b.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c02c:	58024400 	.word	0x58024400
 800c030:	58024800 	.word	0x58024800
 800c034:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c03c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	f002 0301 	and.w	r3, r2, #1
 800c04c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c050:	2300      	movs	r3, #0
 800c052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c056:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4313      	orrs	r3, r2
 800c05e:	f000 8089 	beq.w	800c174 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c068:	2b28      	cmp	r3, #40	; 0x28
 800c06a:	d86b      	bhi.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c06c:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c072:	bf00      	nop
 800c074:	0800c14d 	.word	0x0800c14d
 800c078:	0800c145 	.word	0x0800c145
 800c07c:	0800c145 	.word	0x0800c145
 800c080:	0800c145 	.word	0x0800c145
 800c084:	0800c145 	.word	0x0800c145
 800c088:	0800c145 	.word	0x0800c145
 800c08c:	0800c145 	.word	0x0800c145
 800c090:	0800c145 	.word	0x0800c145
 800c094:	0800c119 	.word	0x0800c119
 800c098:	0800c145 	.word	0x0800c145
 800c09c:	0800c145 	.word	0x0800c145
 800c0a0:	0800c145 	.word	0x0800c145
 800c0a4:	0800c145 	.word	0x0800c145
 800c0a8:	0800c145 	.word	0x0800c145
 800c0ac:	0800c145 	.word	0x0800c145
 800c0b0:	0800c145 	.word	0x0800c145
 800c0b4:	0800c12f 	.word	0x0800c12f
 800c0b8:	0800c145 	.word	0x0800c145
 800c0bc:	0800c145 	.word	0x0800c145
 800c0c0:	0800c145 	.word	0x0800c145
 800c0c4:	0800c145 	.word	0x0800c145
 800c0c8:	0800c145 	.word	0x0800c145
 800c0cc:	0800c145 	.word	0x0800c145
 800c0d0:	0800c145 	.word	0x0800c145
 800c0d4:	0800c14d 	.word	0x0800c14d
 800c0d8:	0800c145 	.word	0x0800c145
 800c0dc:	0800c145 	.word	0x0800c145
 800c0e0:	0800c145 	.word	0x0800c145
 800c0e4:	0800c145 	.word	0x0800c145
 800c0e8:	0800c145 	.word	0x0800c145
 800c0ec:	0800c145 	.word	0x0800c145
 800c0f0:	0800c145 	.word	0x0800c145
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c145 	.word	0x0800c145
 800c0fc:	0800c145 	.word	0x0800c145
 800c100:	0800c145 	.word	0x0800c145
 800c104:	0800c145 	.word	0x0800c145
 800c108:	0800c145 	.word	0x0800c145
 800c10c:	0800c145 	.word	0x0800c145
 800c110:	0800c145 	.word	0x0800c145
 800c114:	0800c14d 	.word	0x0800c14d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11c:	3308      	adds	r3, #8
 800c11e:	2101      	movs	r1, #1
 800c120:	4618      	mov	r0, r3
 800c122:	f000 fd05 	bl	800cb30 <RCCEx_PLL2_Config>
 800c126:	4603      	mov	r3, r0
 800c128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c12c:	e00f      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c132:	3328      	adds	r3, #40	; 0x28
 800c134:	2101      	movs	r1, #1
 800c136:	4618      	mov	r0, r3
 800c138:	f000 fdac 	bl	800cc94 <RCCEx_PLL3_Config>
 800c13c:	4603      	mov	r3, r0
 800c13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c142:	e004      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c14a:	e000      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10a      	bne.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c156:	4bbf      	ldr	r3, [pc, #764]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c15a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c164:	4abb      	ldr	r2, [pc, #748]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c166:	430b      	orrs	r3, r1
 800c168:	6553      	str	r3, [r2, #84]	; 0x54
 800c16a:	e003      	b.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c16c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17c:	f002 0302 	and.w	r3, r2, #2
 800c180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c184:	2300      	movs	r3, #0
 800c186:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c18a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c18e:	460b      	mov	r3, r1
 800c190:	4313      	orrs	r3, r2
 800c192:	d041      	beq.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c19a:	2b05      	cmp	r3, #5
 800c19c:	d824      	bhi.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c19e:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c1f1 	.word	0x0800c1f1
 800c1a8:	0800c1bd 	.word	0x0800c1bd
 800c1ac:	0800c1d3 	.word	0x0800c1d3
 800c1b0:	0800c1f1 	.word	0x0800c1f1
 800c1b4:	0800c1f1 	.word	0x0800c1f1
 800c1b8:	0800c1f1 	.word	0x0800c1f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c0:	3308      	adds	r3, #8
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fcb3 	bl	800cb30 <RCCEx_PLL2_Config>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1d0:	e00f      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d6:	3328      	adds	r3, #40	; 0x28
 800c1d8:	2101      	movs	r1, #1
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 fd5a 	bl	800cc94 <RCCEx_PLL3_Config>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c1e6:	e004      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1ee:	e000      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1fa:	4b96      	ldr	r3, [pc, #600]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fe:	f023 0107 	bic.w	r1, r3, #7
 800c202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c208:	4a92      	ldr	r2, [pc, #584]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c20a:	430b      	orrs	r3, r1
 800c20c:	6553      	str	r3, [r2, #84]	; 0x54
 800c20e:	e003      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c210:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c214:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f002 0304 	and.w	r3, r2, #4
 800c224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c228:	2300      	movs	r3, #0
 800c22a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c22e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c232:	460b      	mov	r3, r1
 800c234:	4313      	orrs	r3, r2
 800c236:	d044      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c23c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c240:	2b05      	cmp	r3, #5
 800c242:	d825      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c244:	a201      	add	r2, pc, #4	; (adr r2, 800c24c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24a:	bf00      	nop
 800c24c:	0800c299 	.word	0x0800c299
 800c250:	0800c265 	.word	0x0800c265
 800c254:	0800c27b 	.word	0x0800c27b
 800c258:	0800c299 	.word	0x0800c299
 800c25c:	0800c299 	.word	0x0800c299
 800c260:	0800c299 	.word	0x0800c299
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c268:	3308      	adds	r3, #8
 800c26a:	2101      	movs	r1, #1
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 fc5f 	bl	800cb30 <RCCEx_PLL2_Config>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c278:	e00f      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27e:	3328      	adds	r3, #40	; 0x28
 800c280:	2101      	movs	r1, #1
 800c282:	4618      	mov	r0, r3
 800c284:	f000 fd06 	bl	800cc94 <RCCEx_PLL3_Config>
 800c288:	4603      	mov	r3, r0
 800c28a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c28e:	e004      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c296:	e000      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10b      	bne.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2a2:	4b6c      	ldr	r3, [pc, #432]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a6:	f023 0107 	bic.w	r1, r3, #7
 800c2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2b2:	4a68      	ldr	r2, [pc, #416]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	6593      	str	r3, [r2, #88]	; 0x58
 800c2b8:	e003      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f002 0320 	and.w	r3, r2, #32
 800c2ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2dc:	460b      	mov	r3, r1
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	d055      	beq.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2ee:	d033      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2f4:	d82c      	bhi.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fa:	d02f      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c300:	d826      	bhi.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c306:	d02b      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c30c:	d820      	bhi.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c312:	d012      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c318:	d81a      	bhi.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d022      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c31e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c322:	d115      	bne.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c328:	3308      	adds	r3, #8
 800c32a:	2100      	movs	r1, #0
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 fbff 	bl	800cb30 <RCCEx_PLL2_Config>
 800c332:	4603      	mov	r3, r0
 800c334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c338:	e015      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33e:	3328      	adds	r3, #40	; 0x28
 800c340:	2102      	movs	r1, #2
 800c342:	4618      	mov	r0, r3
 800c344:	f000 fca6 	bl	800cc94 <RCCEx_PLL3_Config>
 800c348:	4603      	mov	r3, r0
 800c34a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c34e:	e00a      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c356:	e006      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c358:	bf00      	nop
 800c35a:	e004      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c35c:	bf00      	nop
 800c35e:	e002      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c360:	bf00      	nop
 800c362:	e000      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10b      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c36e:	4b39      	ldr	r3, [pc, #228]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c372:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c37e:	4a35      	ldr	r2, [pc, #212]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c380:	430b      	orrs	r3, r1
 800c382:	6553      	str	r3, [r2, #84]	; 0x54
 800c384:	e003      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c38a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c39a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c3a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	d058      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c3ba:	d033      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c3bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c3c0:	d82c      	bhi.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c6:	d02f      	beq.n	800c428 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3cc:	d826      	bhi.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3d2:	d02b      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c3d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3d8:	d820      	bhi.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3de:	d012      	beq.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c3e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3e4:	d81a      	bhi.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d022      	beq.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c3ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3ee:	d115      	bne.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fb99 	bl	800cb30 <RCCEx_PLL2_Config>
 800c3fe:	4603      	mov	r3, r0
 800c400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c404:	e015      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c40a:	3328      	adds	r3, #40	; 0x28
 800c40c:	2102      	movs	r1, #2
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 fc40 	bl	800cc94 <RCCEx_PLL3_Config>
 800c414:	4603      	mov	r3, r0
 800c416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c41a:	e00a      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c422:	e006      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c424:	bf00      	nop
 800c426:	e004      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c428:	bf00      	nop
 800c42a:	e002      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c42c:	bf00      	nop
 800c42e:	e000      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c430:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10e      	bne.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c43a:	4b06      	ldr	r3, [pc, #24]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c43c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c44a:	4a02      	ldr	r2, [pc, #8]	; (800c454 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c44c:	430b      	orrs	r3, r1
 800c44e:	6593      	str	r3, [r2, #88]	; 0x58
 800c450:	e006      	b.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c452:	bf00      	nop
 800c454:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c45c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c46c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c470:	2300      	movs	r3, #0
 800c472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c476:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c47a:	460b      	mov	r3, r1
 800c47c:	4313      	orrs	r3, r2
 800c47e:	d055      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c484:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c488:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c48c:	d033      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c48e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c492:	d82c      	bhi.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c498:	d02f      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c49a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c49e:	d826      	bhi.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c4a4:	d02b      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c4a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c4aa:	d820      	bhi.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4b0:	d012      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c4b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4b6:	d81a      	bhi.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d022      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4c0:	d115      	bne.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fb30 	bl	800cb30 <RCCEx_PLL2_Config>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4d6:	e015      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4dc:	3328      	adds	r3, #40	; 0x28
 800c4de:	2102      	movs	r1, #2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fbd7 	bl	800cc94 <RCCEx_PLL3_Config>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c4ec:	e00a      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c4f4:	e006      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4f6:	bf00      	nop
 800c4f8:	e004      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4fa:	bf00      	nop
 800c4fc:	e002      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c4fe:	bf00      	nop
 800c500:	e000      	b.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c502:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10b      	bne.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c50c:	4ba1      	ldr	r3, [pc, #644]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c510:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c518:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c51c:	4a9d      	ldr	r2, [pc, #628]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c51e:	430b      	orrs	r3, r1
 800c520:	6593      	str	r3, [r2, #88]	; 0x58
 800c522:	e003      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c534:	f002 0308 	and.w	r3, r2, #8
 800c538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c53c:	2300      	movs	r3, #0
 800c53e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c542:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c546:	460b      	mov	r3, r1
 800c548:	4313      	orrs	r3, r2
 800c54a:	d01e      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c558:	d10c      	bne.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c55e:	3328      	adds	r3, #40	; 0x28
 800c560:	2102      	movs	r1, #2
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fb96 	bl	800cc94 <RCCEx_PLL3_Config>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c574:	4b87      	ldr	r3, [pc, #540]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c578:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c584:	4a83      	ldr	r2, [pc, #524]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c586:	430b      	orrs	r3, r1
 800c588:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	f002 0310 	and.w	r3, r2, #16
 800c596:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c59a:	2300      	movs	r3, #0
 800c59c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c5a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	d01e      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b6:	d10c      	bne.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5bc:	3328      	adds	r3, #40	; 0x28
 800c5be:	2102      	movs	r1, #2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 fb67 	bl	800cc94 <RCCEx_PLL3_Config>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c5d2:	4b70      	ldr	r3, [pc, #448]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5e2:	4a6c      	ldr	r2, [pc, #432]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c5f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c602:	460b      	mov	r3, r1
 800c604:	4313      	orrs	r3, r2
 800c606:	d03e      	beq.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c60c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c614:	d022      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c61a:	d81b      	bhi.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c624:	d00b      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c626:	e015      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c62c:	3308      	adds	r3, #8
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fa7d 	bl	800cb30 <RCCEx_PLL2_Config>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c63c:	e00f      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c642:	3328      	adds	r3, #40	; 0x28
 800c644:	2102      	movs	r1, #2
 800c646:	4618      	mov	r0, r3
 800c648:	f000 fb24 	bl	800cc94 <RCCEx_PLL3_Config>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c652:	e004      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c654:	2301      	movs	r3, #1
 800c656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c65a:	e000      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c65c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c65e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10b      	bne.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c666:	4b4b      	ldr	r3, [pc, #300]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c66a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c672:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c676:	4a47      	ldr	r2, [pc, #284]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c678:	430b      	orrs	r3, r1
 800c67a:	6593      	str	r3, [r2, #88]	; 0x58
 800c67c:	e003      	b.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c67e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c692:	67bb      	str	r3, [r7, #120]	; 0x78
 800c694:	2300      	movs	r3, #0
 800c696:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c698:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c69c:	460b      	mov	r3, r1
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	d03b      	beq.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6ae:	d01f      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c6b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c6b4:	d818      	bhi.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c6b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6ba:	d003      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c6bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6c0:	d007      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c6c2:	e011      	b.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6c4:	4b33      	ldr	r3, [pc, #204]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	4a32      	ldr	r2, [pc, #200]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6d0:	e00f      	b.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6d6:	3328      	adds	r3, #40	; 0x28
 800c6d8:	2101      	movs	r1, #1
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fada 	bl	800cc94 <RCCEx_PLL3_Config>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c6e6:	e004      	b.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c6ee:	e000      	b.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10b      	bne.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6fa:	4b26      	ldr	r3, [pc, #152]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c70a:	4a22      	ldr	r2, [pc, #136]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c70c:	430b      	orrs	r3, r1
 800c70e:	6553      	str	r3, [r2, #84]	; 0x54
 800c710:	e003      	b.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c722:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c726:	673b      	str	r3, [r7, #112]	; 0x70
 800c728:	2300      	movs	r3, #0
 800c72a:	677b      	str	r3, [r7, #116]	; 0x74
 800c72c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c730:	460b      	mov	r3, r1
 800c732:	4313      	orrs	r3, r2
 800c734:	d034      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d003      	beq.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c744:	d007      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c746:	e011      	b.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c748:	4b12      	ldr	r3, [pc, #72]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	4a11      	ldr	r2, [pc, #68]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c754:	e00e      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c75a:	3308      	adds	r3, #8
 800c75c:	2102      	movs	r1, #2
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 f9e6 	bl	800cb30 <RCCEx_PLL2_Config>
 800c764:	4603      	mov	r3, r0
 800c766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c76a:	e003      	b.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c772:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10d      	bne.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c78a:	4a02      	ldr	r2, [pc, #8]	; (800c794 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c78c:	430b      	orrs	r3, r1
 800c78e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c790:	e006      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c792:	bf00      	nop
 800c794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c79c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c7ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	d00c      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7c0:	3328      	adds	r3, #40	; 0x28
 800c7c2:	2102      	movs	r1, #2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 fa65 	bl	800cc94 <RCCEx_PLL3_Config>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c7e2:	663b      	str	r3, [r7, #96]	; 0x60
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	667b      	str	r3, [r7, #100]	; 0x64
 800c7e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	d038      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7fe:	d018      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c804:	d811      	bhi.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c80a:	d014      	beq.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c810:	d80b      	bhi.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d011      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81a:	d106      	bne.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c81c:	4bc3      	ldr	r3, [pc, #780]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c820:	4ac2      	ldr	r2, [pc, #776]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c828:	e008      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c830:	e004      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c832:	bf00      	nop
 800c834:	e002      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c836:	bf00      	nop
 800c838:	e000      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c83a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c83c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10b      	bne.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c844:	4bb9      	ldr	r3, [pc, #740]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c848:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c854:	4ab5      	ldr	r2, [pc, #724]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c856:	430b      	orrs	r3, r1
 800c858:	6553      	str	r3, [r2, #84]	; 0x54
 800c85a:	e003      	b.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c85c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c870:	65bb      	str	r3, [r7, #88]	; 0x58
 800c872:	2300      	movs	r3, #0
 800c874:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c876:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c87a:	460b      	mov	r3, r1
 800c87c:	4313      	orrs	r3, r2
 800c87e:	d009      	beq.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c880:	4baa      	ldr	r3, [pc, #680]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c884:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c88e:	4aa7      	ldr	r2, [pc, #668]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c890:	430b      	orrs	r3, r1
 800c892:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c8a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	657b      	str	r3, [r7, #84]	; 0x54
 800c8a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	d00a      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c8b0:	4b9e      	ldr	r3, [pc, #632]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c8c0:	4a9a      	ldr	r2, [pc, #616]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8c2:	430b      	orrs	r3, r1
 800c8c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c8d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	d009      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c8e2:	4b92      	ldr	r3, [pc, #584]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8e6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8f0:	4a8e      	ldr	r2, [pc, #568]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c8f2:	430b      	orrs	r3, r1
 800c8f4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c902:	643b      	str	r3, [r7, #64]	; 0x40
 800c904:	2300      	movs	r3, #0
 800c906:	647b      	str	r3, [r7, #68]	; 0x44
 800c908:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c90c:	460b      	mov	r3, r1
 800c90e:	4313      	orrs	r3, r2
 800c910:	d00e      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c912:	4b86      	ldr	r3, [pc, #536]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	4a85      	ldr	r2, [pc, #532]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c91c:	6113      	str	r3, [r2, #16]
 800c91e:	4b83      	ldr	r3, [pc, #524]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c920:	6919      	ldr	r1, [r3, #16]
 800c922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c926:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c92a:	4a80      	ldr	r2, [pc, #512]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c92c:	430b      	orrs	r3, r1
 800c92e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c93c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c93e:	2300      	movs	r3, #0
 800c940:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c942:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c946:	460b      	mov	r3, r1
 800c948:	4313      	orrs	r3, r2
 800c94a:	d009      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c94c:	4b77      	ldr	r3, [pc, #476]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c950:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c95a:	4a74      	ldr	r2, [pc, #464]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c95c:	430b      	orrs	r3, r1
 800c95e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c96c:	633b      	str	r3, [r7, #48]	; 0x30
 800c96e:	2300      	movs	r3, #0
 800c970:	637b      	str	r3, [r7, #52]	; 0x34
 800c972:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c976:	460b      	mov	r3, r1
 800c978:	4313      	orrs	r3, r2
 800c97a:	d00a      	beq.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c97c:	4b6b      	ldr	r3, [pc, #428]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c980:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c98c:	4a67      	ldr	r2, [pc, #412]	; (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c98e:	430b      	orrs	r3, r1
 800c990:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	2100      	movs	r1, #0
 800c99c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c99e:	f003 0301 	and.w	r3, r3, #1
 800c9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	d011      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 f8ba 	bl	800cb30 <RCCEx_PLL2_Config>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c9ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	6239      	str	r1, [r7, #32]
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	d011      	beq.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c9f2:	3308      	adds	r3, #8
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f89a 	bl	800cb30 <RCCEx_PLL2_Config>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ca02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d003      	beq.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ca12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	61b9      	str	r1, [r7, #24]
 800ca1e:	f003 0304 	and.w	r3, r3, #4
 800ca22:	61fb      	str	r3, [r7, #28]
 800ca24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	d011      	beq.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca32:	3308      	adds	r3, #8
 800ca34:	2102      	movs	r1, #2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f87a 	bl	800cb30 <RCCEx_PLL2_Config>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ca42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ca52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	6139      	str	r1, [r7, #16]
 800ca5e:	f003 0308 	and.w	r3, r3, #8
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	d011      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca72:	3328      	adds	r3, #40	; 0x28
 800ca74:	2100      	movs	r1, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 f90c 	bl	800cc94 <RCCEx_PLL3_Config>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ca82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ca8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ca92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ca96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	f003 0310 	and.w	r3, r3, #16
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800caa8:	460b      	mov	r3, r1
 800caaa:	4313      	orrs	r3, r2
 800caac:	d011      	beq.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800caae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cab2:	3328      	adds	r3, #40	; 0x28
 800cab4:	2101      	movs	r1, #1
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 f8ec 	bl	800cc94 <RCCEx_PLL3_Config>
 800cabc:	4603      	mov	r3, r0
 800cabe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	2100      	movs	r1, #0
 800cadc:	6039      	str	r1, [r7, #0]
 800cade:	f003 0320 	and.w	r3, r3, #32
 800cae2:	607b      	str	r3, [r7, #4]
 800cae4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cae8:	460b      	mov	r3, r1
 800caea:	4313      	orrs	r3, r2
 800caec:	d011      	beq.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800caee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800caf2:	3328      	adds	r3, #40	; 0x28
 800caf4:	2102      	movs	r1, #2
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 f8cc 	bl	800cc94 <RCCEx_PLL3_Config>
 800cafc:	4603      	mov	r3, r0
 800cafe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800cb02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d003      	beq.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cb0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800cb12:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e000      	b.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800cb26:	46bd      	mov	sp, r7
 800cb28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb2c:	58024400 	.word	0x58024400

0800cb30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb3e:	4b53      	ldr	r3, [pc, #332]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	f003 0303 	and.w	r3, r3, #3
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	d101      	bne.n	800cb4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e099      	b.n	800cc82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cb4e:	4b4f      	ldr	r3, [pc, #316]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a4e      	ldr	r2, [pc, #312]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cb54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cb58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb5a:	f7f9 f8eb 	bl	8005d34 <HAL_GetTick>
 800cb5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb60:	e008      	b.n	800cb74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cb62:	f7f9 f8e7 	bl	8005d34 <HAL_GetTick>
 800cb66:	4602      	mov	r2, r0
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d901      	bls.n	800cb74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e086      	b.n	800cc82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cb74:	4b45      	ldr	r3, [pc, #276]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1f0      	bne.n	800cb62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cb80:	4b42      	ldr	r3, [pc, #264]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	031b      	lsls	r3, r3, #12
 800cb8e:	493f      	ldr	r1, [pc, #252]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cb90:	4313      	orrs	r3, r2
 800cb92:	628b      	str	r3, [r1, #40]	; 0x28
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	025b      	lsls	r3, r3, #9
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	041b      	lsls	r3, r3, #16
 800cbb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	061b      	lsls	r3, r3, #24
 800cbc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbc4:	4931      	ldr	r1, [pc, #196]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cbca:	4b30      	ldr	r3, [pc, #192]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	492d      	ldr	r1, [pc, #180]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cbdc:	4b2b      	ldr	r3, [pc, #172]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe0:	f023 0220 	bic.w	r2, r3, #32
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	4928      	ldr	r1, [pc, #160]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbea:	4313      	orrs	r3, r2
 800cbec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cbee:	4b27      	ldr	r3, [pc, #156]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf2:	4a26      	ldr	r2, [pc, #152]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbf4:	f023 0310 	bic.w	r3, r3, #16
 800cbf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cbfa:	4b24      	ldr	r3, [pc, #144]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cbfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbfe:	4b24      	ldr	r3, [pc, #144]	; (800cc90 <RCCEx_PLL2_Config+0x160>)
 800cc00:	4013      	ands	r3, r2
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	69d2      	ldr	r2, [r2, #28]
 800cc06:	00d2      	lsls	r2, r2, #3
 800cc08:	4920      	ldr	r1, [pc, #128]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc0e:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc12:	4a1e      	ldr	r2, [pc, #120]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc14:	f043 0310 	orr.w	r3, r3, #16
 800cc18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cc20:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	4a19      	ldr	r2, [pc, #100]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc2c:	e00f      	b.n	800cc4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d106      	bne.n	800cc42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cc34:	4b15      	ldr	r3, [pc, #84]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	4a14      	ldr	r2, [pc, #80]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc40:	e005      	b.n	800cc4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cc42:	4b12      	ldr	r3, [pc, #72]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc46:	4a11      	ldr	r2, [pc, #68]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cc4e:	4b0f      	ldr	r3, [pc, #60]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a0e      	ldr	r2, [pc, #56]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc5a:	f7f9 f86b 	bl	8005d34 <HAL_GetTick>
 800cc5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc60:	e008      	b.n	800cc74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc62:	f7f9 f867 	bl	8005d34 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d901      	bls.n	800cc74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e006      	b.n	800cc82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cc74:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <RCCEx_PLL2_Config+0x15c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d0f0      	beq.n	800cc62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	58024400 	.word	0x58024400
 800cc90:	ffff0007 	.word	0xffff0007

0800cc94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cca2:	4b53      	ldr	r3, [pc, #332]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca6:	f003 0303 	and.w	r3, r3, #3
 800ccaa:	2b03      	cmp	r3, #3
 800ccac:	d101      	bne.n	800ccb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e099      	b.n	800cde6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ccb2:	4b4f      	ldr	r3, [pc, #316]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a4e      	ldr	r2, [pc, #312]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800ccb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccbe:	f7f9 f839 	bl	8005d34 <HAL_GetTick>
 800ccc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccc4:	e008      	b.n	800ccd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ccc6:	f7f9 f835 	bl	8005d34 <HAL_GetTick>
 800ccca:	4602      	mov	r2, r0
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d901      	bls.n	800ccd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e086      	b.n	800cde6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ccd8:	4b45      	ldr	r3, [pc, #276]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1f0      	bne.n	800ccc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cce4:	4b42      	ldr	r3, [pc, #264]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	051b      	lsls	r3, r3, #20
 800ccf2:	493f      	ldr	r1, [pc, #252]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	628b      	str	r3, [r1, #40]	; 0x28
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	3b01      	subs	r3, #1
 800cd08:	025b      	lsls	r3, r3, #9
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	041b      	lsls	r3, r3, #16
 800cd16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	061b      	lsls	r3, r3, #24
 800cd24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd28:	4931      	ldr	r1, [pc, #196]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd2e:	4b30      	ldr	r3, [pc, #192]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	695b      	ldr	r3, [r3, #20]
 800cd3a:	492d      	ldr	r1, [pc, #180]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cd40:	4b2b      	ldr	r3, [pc, #172]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	4928      	ldr	r1, [pc, #160]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cd52:	4b27      	ldr	r3, [pc, #156]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd56:	4a26      	ldr	r2, [pc, #152]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cd5e:	4b24      	ldr	r3, [pc, #144]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd62:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <RCCEx_PLL3_Config+0x160>)
 800cd64:	4013      	ands	r3, r2
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	69d2      	ldr	r2, [r2, #28]
 800cd6a:	00d2      	lsls	r2, r2, #3
 800cd6c:	4920      	ldr	r1, [pc, #128]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cd72:	4b1f      	ldr	r3, [pc, #124]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd76:	4a1e      	ldr	r2, [pc, #120]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cd84:	4b1a      	ldr	r3, [pc, #104]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd88:	4a19      	ldr	r2, [pc, #100]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd90:	e00f      	b.n	800cdb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d106      	bne.n	800cda6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cd98:	4b15      	ldr	r3, [pc, #84]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	4a14      	ldr	r2, [pc, #80]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cd9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cda2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cda4:	e005      	b.n	800cdb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cda6:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdaa:	4a11      	ldr	r2, [pc, #68]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cdac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cdb2:	4b0f      	ldr	r3, [pc, #60]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a0e      	ldr	r2, [pc, #56]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cdb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdbe:	f7f8 ffb9 	bl	8005d34 <HAL_GetTick>
 800cdc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdc4:	e008      	b.n	800cdd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdc6:	f7f8 ffb5 	bl	8005d34 <HAL_GetTick>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d901      	bls.n	800cdd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	e006      	b.n	800cde6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdd8:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <RCCEx_PLL3_Config+0x15c>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d0f0      	beq.n	800cdc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	58024400 	.word	0x58024400
 800cdf4:	ffff0007 	.word	0xffff0007

0800cdf8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e02b      	b.n	800ce64 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f825 	bl	800ce70 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2202      	movs	r2, #2
 800ce2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3304      	adds	r3, #4
 800ce36:	4619      	mov	r1, r3
 800ce38:	4610      	mov	r0, r2
 800ce3a:	f001 f9af 	bl	800e19c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6818      	ldr	r0, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	461a      	mov	r2, r3
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	f001 fa03 	bl	800e254 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <HAL_SDRAM_Init+0x74>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a06      	ldr	r2, [pc, #24]	; (800ce6c <HAL_SDRAM_Init+0x74>)
 800ce54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce58:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	52004000 	.word	0x52004000

0800ce70 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce96:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d101      	bne.n	800cea2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800ce9e:	2302      	movs	r3, #2
 800cea0:	e021      	b.n	800cee6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d002      	beq.n	800ceae <HAL_SDRAM_SendCommand+0x2a>
 800cea8:	7dfb      	ldrb	r3, [r7, #23]
 800ceaa:	2b05      	cmp	r3, #5
 800ceac:	d118      	bne.n	800cee0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f001 fa32 	bl	800e328 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d104      	bne.n	800ced6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2205      	movs	r2, #5
 800ced0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ced4:	e006      	b.n	800cee4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cede:	e001      	b.n	800cee4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800cee0:	2301      	movs	r3, #1
 800cee2:	e000      	b.n	800cee6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d101      	bne.n	800cf08 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800cf04:	2302      	movs	r3, #2
 800cf06:	e016      	b.n	800cf36 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d10f      	bne.n	800cf34 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2202      	movs	r2, #2
 800cf18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f001 fa24 	bl	800e370 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	e000      	b.n	800cf36 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b082      	sub	sp, #8
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e049      	b.n	800cfe4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f89d 	bl	800d0a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f000 f9f7 	bl	800d370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2202      	movs	r2, #2
 800cff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6a1a      	ldr	r2, [r3, #32]
 800d002:	f241 1311 	movw	r3, #4369	; 0x1111
 800d006:	4013      	ands	r3, r2
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d10f      	bne.n	800d02c <HAL_TIM_PWM_DeInit+0x40>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6a1a      	ldr	r2, [r3, #32]
 800d012:	f240 4344 	movw	r3, #1092	; 0x444
 800d016:	4013      	ands	r3, r2
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d107      	bne.n	800d02c <HAL_TIM_PWM_DeInit+0x40>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f022 0201 	bic.w	r2, r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f843 	bl	800d0b8 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800d0c0:	bf00      	nop
 800d0c2:	370c      	adds	r7, #12
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr

0800d0cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	f003 0302 	and.w	r3, r3, #2
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d122      	bne.n	800d128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f003 0302 	and.w	r3, r3, #2
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d11b      	bne.n	800d128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f06f 0202 	mvn.w	r2, #2
 800d0f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	f003 0303 	and.w	r3, r3, #3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d003      	beq.n	800d116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f90f 	bl	800d332 <HAL_TIM_IC_CaptureCallback>
 800d114:	e005      	b.n	800d122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 f901 	bl	800d31e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f912 	bl	800d346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	f003 0304 	and.w	r3, r3, #4
 800d132:	2b04      	cmp	r3, #4
 800d134:	d122      	bne.n	800d17c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b04      	cmp	r3, #4
 800d142:	d11b      	bne.n	800d17c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f06f 0204 	mvn.w	r2, #4
 800d14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2202      	movs	r2, #2
 800d152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 f8e5 	bl	800d332 <HAL_TIM_IC_CaptureCallback>
 800d168:	e005      	b.n	800d176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f8d7 	bl	800d31e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f8e8 	bl	800d346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	f003 0308 	and.w	r3, r3, #8
 800d186:	2b08      	cmp	r3, #8
 800d188:	d122      	bne.n	800d1d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f003 0308 	and.w	r3, r3, #8
 800d194:	2b08      	cmp	r3, #8
 800d196:	d11b      	bne.n	800d1d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f06f 0208 	mvn.w	r2, #8
 800d1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2204      	movs	r2, #4
 800d1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	f003 0303 	and.w	r3, r3, #3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d003      	beq.n	800d1be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f8bb 	bl	800d332 <HAL_TIM_IC_CaptureCallback>
 800d1bc:	e005      	b.n	800d1ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f8ad 	bl	800d31e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f8be 	bl	800d346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	f003 0310 	and.w	r3, r3, #16
 800d1da:	2b10      	cmp	r3, #16
 800d1dc:	d122      	bne.n	800d224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f003 0310 	and.w	r3, r3, #16
 800d1e8:	2b10      	cmp	r3, #16
 800d1ea:	d11b      	bne.n	800d224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f06f 0210 	mvn.w	r2, #16
 800d1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2208      	movs	r2, #8
 800d1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	69db      	ldr	r3, [r3, #28]
 800d202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f891 	bl	800d332 <HAL_TIM_IC_CaptureCallback>
 800d210:	e005      	b.n	800d21e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f883 	bl	800d31e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f894 	bl	800d346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	691b      	ldr	r3, [r3, #16]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d10e      	bne.n	800d250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d107      	bne.n	800d250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f06f 0201 	mvn.w	r2, #1
 800d248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f85d 	bl	800d30a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d25a:	2b80      	cmp	r3, #128	; 0x80
 800d25c:	d10e      	bne.n	800d27c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d268:	2b80      	cmp	r3, #128	; 0x80
 800d26a:	d107      	bne.n	800d27c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f91e 	bl	800d4b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d28a:	d10e      	bne.n	800d2aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d296:	2b80      	cmp	r3, #128	; 0x80
 800d298:	d107      	bne.n	800d2aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f911 	bl	800d4cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2b4:	2b40      	cmp	r3, #64	; 0x40
 800d2b6:	d10e      	bne.n	800d2d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c2:	2b40      	cmp	r3, #64	; 0x40
 800d2c4:	d107      	bne.n	800d2d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f842 	bl	800d35a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	f003 0320 	and.w	r3, r3, #32
 800d2e0:	2b20      	cmp	r3, #32
 800d2e2:	d10e      	bne.n	800d302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f003 0320 	and.w	r3, r3, #32
 800d2ee:	2b20      	cmp	r3, #32
 800d2f0:	d107      	bne.n	800d302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f06f 0220 	mvn.w	r2, #32
 800d2fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f8d1 	bl	800d4a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d302:	bf00      	nop
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b083      	sub	sp, #12
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d312:	bf00      	nop
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d31e:	b480      	push	{r7}
 800d320:	b083      	sub	sp, #12
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d326:	bf00      	nop
 800d328:	370c      	adds	r7, #12
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d33a:	bf00      	nop
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d346:	b480      	push	{r7}
 800d348:	b083      	sub	sp, #12
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d34e:	bf00      	nop
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b083      	sub	sp, #12
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d362:	bf00      	nop
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
	...

0800d370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a40      	ldr	r2, [pc, #256]	; (800d484 <TIM_Base_SetConfig+0x114>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d013      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d38e:	d00f      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a3d      	ldr	r2, [pc, #244]	; (800d488 <TIM_Base_SetConfig+0x118>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d00b      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a3c      	ldr	r2, [pc, #240]	; (800d48c <TIM_Base_SetConfig+0x11c>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d007      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a3b      	ldr	r2, [pc, #236]	; (800d490 <TIM_Base_SetConfig+0x120>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d003      	beq.n	800d3b0 <TIM_Base_SetConfig+0x40>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a3a      	ldr	r2, [pc, #232]	; (800d494 <TIM_Base_SetConfig+0x124>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d108      	bne.n	800d3c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a2f      	ldr	r2, [pc, #188]	; (800d484 <TIM_Base_SetConfig+0x114>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d01f      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3d0:	d01b      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a2c      	ldr	r2, [pc, #176]	; (800d488 <TIM_Base_SetConfig+0x118>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d017      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a2b      	ldr	r2, [pc, #172]	; (800d48c <TIM_Base_SetConfig+0x11c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d013      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a2a      	ldr	r2, [pc, #168]	; (800d490 <TIM_Base_SetConfig+0x120>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d00f      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a29      	ldr	r2, [pc, #164]	; (800d494 <TIM_Base_SetConfig+0x124>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d00b      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a28      	ldr	r2, [pc, #160]	; (800d498 <TIM_Base_SetConfig+0x128>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d007      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a27      	ldr	r2, [pc, #156]	; (800d49c <TIM_Base_SetConfig+0x12c>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d003      	beq.n	800d40a <TIM_Base_SetConfig+0x9a>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a26      	ldr	r2, [pc, #152]	; (800d4a0 <TIM_Base_SetConfig+0x130>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d108      	bne.n	800d41c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	4313      	orrs	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	695b      	ldr	r3, [r3, #20]
 800d426:	4313      	orrs	r3, r2
 800d428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a10      	ldr	r2, [pc, #64]	; (800d484 <TIM_Base_SetConfig+0x114>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d00f      	beq.n	800d468 <TIM_Base_SetConfig+0xf8>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a12      	ldr	r2, [pc, #72]	; (800d494 <TIM_Base_SetConfig+0x124>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d00b      	beq.n	800d468 <TIM_Base_SetConfig+0xf8>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a11      	ldr	r2, [pc, #68]	; (800d498 <TIM_Base_SetConfig+0x128>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d007      	beq.n	800d468 <TIM_Base_SetConfig+0xf8>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a10      	ldr	r2, [pc, #64]	; (800d49c <TIM_Base_SetConfig+0x12c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d003      	beq.n	800d468 <TIM_Base_SetConfig+0xf8>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a0f      	ldr	r2, [pc, #60]	; (800d4a0 <TIM_Base_SetConfig+0x130>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d103      	bne.n	800d470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	691a      	ldr	r2, [r3, #16]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	615a      	str	r2, [r3, #20]
}
 800d476:	bf00      	nop
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	40010000 	.word	0x40010000
 800d488:	40000400 	.word	0x40000400
 800d48c:	40000800 	.word	0x40000800
 800d490:	40000c00 	.word	0x40000c00
 800d494:	40010400 	.word	0x40010400
 800d498:	40014000 	.word	0x40014000
 800d49c:	40014400 	.word	0x40014400
 800d4a0:	40014800 	.word	0x40014800

0800d4a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08a      	sub	sp, #40	; 0x28
 800d4e4:	af02      	add	r7, sp, #8
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4f6:	2b20      	cmp	r3, #32
 800d4f8:	d17b      	bne.n	800d5f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d002      	beq.n	800d506 <HAL_UART_Transmit+0x26>
 800d500:	88fb      	ldrh	r3, [r7, #6]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e074      	b.n	800d5f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2221      	movs	r2, #33	; 0x21
 800d516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d51a:	f7f8 fc0b 	bl	8005d34 <HAL_GetTick>
 800d51e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	88fa      	ldrh	r2, [r7, #6]
 800d524:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	88fa      	ldrh	r2, [r7, #6]
 800d52c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d538:	d108      	bne.n	800d54c <HAL_UART_Transmit+0x6c>
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d104      	bne.n	800d54c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	e003      	b.n	800d554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d550:	2300      	movs	r3, #0
 800d552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d554:	e030      	b.n	800d5b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2200      	movs	r2, #0
 800d55e:	2180      	movs	r1, #128	; 0x80
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f000 fced 	bl	800df40 <UART_WaitOnFlagUntilTimeout>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2220      	movs	r2, #32
 800d570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d574:	2303      	movs	r3, #3
 800d576:	e03d      	b.n	800d5f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10b      	bne.n	800d596 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	461a      	mov	r2, r3
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d58c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	3302      	adds	r3, #2
 800d592:	61bb      	str	r3, [r7, #24]
 800d594:	e007      	b.n	800d5a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	781a      	ldrb	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	b29a      	uxth	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1c8      	bne.n	800d556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2140      	movs	r1, #64	; 0x40
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f000 fcb6 	bl	800df40 <UART_WaitOnFlagUntilTimeout>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e006      	b.n	800d5f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2220      	movs	r2, #32
 800d5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	e000      	b.n	800d5f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d5f2:	2302      	movs	r3, #2
  }
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3720      	adds	r7, #32
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08a      	sub	sp, #40	; 0x28
 800d600:	af02      	add	r7, sp, #8
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	603b      	str	r3, [r7, #0]
 800d608:	4613      	mov	r3, r2
 800d60a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d612:	2b20      	cmp	r3, #32
 800d614:	f040 80b5 	bne.w	800d782 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <HAL_UART_Receive+0x28>
 800d61e:	88fb      	ldrh	r3, [r7, #6]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	e0ad      	b.n	800d784 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2222      	movs	r2, #34	; 0x22
 800d634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d63e:	f7f8 fb79 	bl	8005d34 <HAL_GetTick>
 800d642:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	88fa      	ldrh	r2, [r7, #6]
 800d648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	88fa      	ldrh	r2, [r7, #6]
 800d650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d65c:	d10e      	bne.n	800d67c <HAL_UART_Receive+0x80>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d105      	bne.n	800d672 <HAL_UART_Receive+0x76>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d66c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d670:	e02d      	b.n	800d6ce <HAL_UART_Receive+0xd2>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	22ff      	movs	r2, #255	; 0xff
 800d676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d67a:	e028      	b.n	800d6ce <HAL_UART_Receive+0xd2>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10d      	bne.n	800d6a0 <HAL_UART_Receive+0xa4>
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <HAL_UART_Receive+0x9a>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	22ff      	movs	r2, #255	; 0xff
 800d690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d694:	e01b      	b.n	800d6ce <HAL_UART_Receive+0xd2>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	227f      	movs	r2, #127	; 0x7f
 800d69a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d69e:	e016      	b.n	800d6ce <HAL_UART_Receive+0xd2>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6a8:	d10d      	bne.n	800d6c6 <HAL_UART_Receive+0xca>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d104      	bne.n	800d6bc <HAL_UART_Receive+0xc0>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	227f      	movs	r2, #127	; 0x7f
 800d6b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6ba:	e008      	b.n	800d6ce <HAL_UART_Receive+0xd2>
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	223f      	movs	r2, #63	; 0x3f
 800d6c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6c4:	e003      	b.n	800d6ce <HAL_UART_Receive+0xd2>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6de:	d108      	bne.n	800d6f2 <HAL_UART_Receive+0xf6>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d104      	bne.n	800d6f2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	61bb      	str	r3, [r7, #24]
 800d6f0:	e003      	b.n	800d6fa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d6fa:	e036      	b.n	800d76a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	2200      	movs	r2, #0
 800d704:	2120      	movs	r1, #32
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f000 fc1a 	bl	800df40 <UART_WaitOnFlagUntilTimeout>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2220      	movs	r2, #32
 800d716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d71a:	2303      	movs	r3, #3
 800d71c:	e032      	b.n	800d784 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10c      	bne.n	800d73e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	8a7b      	ldrh	r3, [r7, #18]
 800d72e:	4013      	ands	r3, r2
 800d730:	b29a      	uxth	r2, r3
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	3302      	adds	r3, #2
 800d73a:	61bb      	str	r3, [r7, #24]
 800d73c:	e00c      	b.n	800d758 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d744:	b2da      	uxtb	r2, r3
 800d746:	8a7b      	ldrh	r3, [r7, #18]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	4013      	ands	r3, r2
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	3301      	adds	r3, #1
 800d756:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d75e:	b29b      	uxth	r3, r3
 800d760:	3b01      	subs	r3, #1
 800d762:	b29a      	uxth	r2, r3
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d770:	b29b      	uxth	r3, r3
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1c2      	bne.n	800d6fc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2220      	movs	r2, #32
 800d77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	e000      	b.n	800d784 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d782:	2302      	movs	r3, #2
  }
}
 800d784:	4618      	mov	r0, r3
 800d786:	3720      	adds	r7, #32
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b0ba      	sub	sp, #232	; 0xe8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d7b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d7b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d7c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d11b      	bne.n	800d800 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7cc:	f003 0320 	and.w	r3, r3, #32
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d015      	beq.n	800d800 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7d8:	f003 0320 	and.w	r3, r3, #32
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d105      	bne.n	800d7ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d009      	beq.n	800d800 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 8377 	beq.w	800dee4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	4798      	blx	r3
      }
      return;
 800d7fe:	e371      	b.n	800dee4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 8123 	beq.w	800da50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d80a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d80e:	4b8d      	ldr	r3, [pc, #564]	; (800da44 <HAL_UART_IRQHandler+0x2b8>)
 800d810:	4013      	ands	r3, r2
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d81a:	4b8b      	ldr	r3, [pc, #556]	; (800da48 <HAL_UART_IRQHandler+0x2bc>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f000 8116 	beq.w	800da50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d011      	beq.n	800d854 <HAL_UART_IRQHandler+0xc8>
 800d830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00b      	beq.n	800d854 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2201      	movs	r2, #1
 800d842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d84a:	f043 0201 	orr.w	r2, r3, #1
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d858:	f003 0302 	and.w	r3, r3, #2
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d011      	beq.n	800d884 <HAL_UART_IRQHandler+0xf8>
 800d860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00b      	beq.n	800d884 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2202      	movs	r2, #2
 800d872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d87a:	f043 0204 	orr.w	r2, r3, #4
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d888:	f003 0304 	and.w	r3, r3, #4
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d011      	beq.n	800d8b4 <HAL_UART_IRQHandler+0x128>
 800d890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00b      	beq.n	800d8b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2204      	movs	r2, #4
 800d8a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8aa:	f043 0202 	orr.w	r2, r3, #2
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b8:	f003 0308 	and.w	r3, r3, #8
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d017      	beq.n	800d8f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8c4:	f003 0320 	and.w	r3, r3, #32
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d105      	bne.n	800d8d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d8cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8d0:	4b5c      	ldr	r3, [pc, #368]	; (800da44 <HAL_UART_IRQHandler+0x2b8>)
 800d8d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2208      	movs	r2, #8
 800d8de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8e6:	f043 0208 	orr.w	r2, r3, #8
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d012      	beq.n	800d922 <HAL_UART_IRQHandler+0x196>
 800d8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d00c      	beq.n	800d922 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d918:	f043 0220 	orr.w	r2, r3, #32
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 82dd 	beq.w	800dee8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d932:	f003 0320 	and.w	r3, r3, #32
 800d936:	2b00      	cmp	r3, #0
 800d938:	d013      	beq.n	800d962 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d93e:	f003 0320 	and.w	r3, r3, #32
 800d942:	2b00      	cmp	r3, #0
 800d944:	d105      	bne.n	800d952 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d94a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d007      	beq.n	800d962 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d976:	2b40      	cmp	r3, #64	; 0x40
 800d978:	d005      	beq.n	800d986 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d97a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d97e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d982:	2b00      	cmp	r3, #0
 800d984:	d054      	beq.n	800da30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fb42 	bl	800e010 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d996:	2b40      	cmp	r3, #64	; 0x40
 800d998:	d146      	bne.n	800da28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3308      	adds	r3, #8
 800d9a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9a8:	e853 3f00 	ldrex	r3, [r3]
 800d9ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d9b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d9c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d9ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d9d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d9d6:	e841 2300 	strex	r3, r2, [r1]
 800d9da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d9de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1d9      	bne.n	800d99a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d017      	beq.n	800da20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9f6:	4a15      	ldr	r2, [pc, #84]	; (800da4c <HAL_UART_IRQHandler+0x2c0>)
 800d9f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da00:	4618      	mov	r0, r3
 800da02:	f7f8 fe8d 	bl	8006720 <HAL_DMA_Abort_IT>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d019      	beq.n	800da40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800da1a:	4610      	mov	r0, r2
 800da1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da1e:	e00f      	b.n	800da40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fa77 	bl	800df14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da26:	e00b      	b.n	800da40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 fa73 	bl	800df14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da2e:	e007      	b.n	800da40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fa6f 	bl	800df14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800da3e:	e253      	b.n	800dee8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da40:	bf00      	nop
    return;
 800da42:	e251      	b.n	800dee8 <HAL_UART_IRQHandler+0x75c>
 800da44:	10000001 	.word	0x10000001
 800da48:	04000120 	.word	0x04000120
 800da4c:	0800e0dd 	.word	0x0800e0dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da54:	2b01      	cmp	r3, #1
 800da56:	f040 81e7 	bne.w	800de28 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da5e:	f003 0310 	and.w	r3, r3, #16
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 81e0 	beq.w	800de28 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da6c:	f003 0310 	and.w	r3, r3, #16
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 81d9 	beq.w	800de28 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2210      	movs	r2, #16
 800da7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da88:	2b40      	cmp	r3, #64	; 0x40
 800da8a:	f040 8151 	bne.w	800dd30 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a96      	ldr	r2, [pc, #600]	; (800dcf0 <HAL_UART_IRQHandler+0x564>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d068      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a93      	ldr	r2, [pc, #588]	; (800dcf4 <HAL_UART_IRQHandler+0x568>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d061      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a91      	ldr	r2, [pc, #580]	; (800dcf8 <HAL_UART_IRQHandler+0x56c>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d05a      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a8e      	ldr	r2, [pc, #568]	; (800dcfc <HAL_UART_IRQHandler+0x570>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d053      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a8c      	ldr	r2, [pc, #560]	; (800dd00 <HAL_UART_IRQHandler+0x574>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d04c      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a89      	ldr	r2, [pc, #548]	; (800dd04 <HAL_UART_IRQHandler+0x578>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d045      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a87      	ldr	r2, [pc, #540]	; (800dd08 <HAL_UART_IRQHandler+0x57c>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d03e      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a84      	ldr	r2, [pc, #528]	; (800dd0c <HAL_UART_IRQHandler+0x580>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d037      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a82      	ldr	r2, [pc, #520]	; (800dd10 <HAL_UART_IRQHandler+0x584>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d030      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a7f      	ldr	r2, [pc, #508]	; (800dd14 <HAL_UART_IRQHandler+0x588>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d029      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a7d      	ldr	r2, [pc, #500]	; (800dd18 <HAL_UART_IRQHandler+0x58c>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d022      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a7a      	ldr	r2, [pc, #488]	; (800dd1c <HAL_UART_IRQHandler+0x590>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d01b      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a78      	ldr	r2, [pc, #480]	; (800dd20 <HAL_UART_IRQHandler+0x594>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d014      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a75      	ldr	r2, [pc, #468]	; (800dd24 <HAL_UART_IRQHandler+0x598>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d00d      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a73      	ldr	r2, [pc, #460]	; (800dd28 <HAL_UART_IRQHandler+0x59c>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d006      	beq.n	800db6e <HAL_UART_IRQHandler+0x3e2>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a70      	ldr	r2, [pc, #448]	; (800dd2c <HAL_UART_IRQHandler+0x5a0>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d106      	bne.n	800db7c <HAL_UART_IRQHandler+0x3f0>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	e005      	b.n	800db88 <HAL_UART_IRQHandler+0x3fc>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	b29b      	uxth	r3, r3
 800db88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 81ab 	beq.w	800deec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dba0:	429a      	cmp	r2, r3
 800dba2:	f080 81a3 	bcs.w	800deec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dbac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbb6:	69db      	ldr	r3, [r3, #28]
 800dbb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbbc:	f000 8087 	beq.w	800dcce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbcc:	e853 3f00 	ldrex	r3, [r3]
 800dbd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dbd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dbea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dbee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dbf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dc02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1da      	bne.n	800dbc0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc14:	e853 3f00 	ldrex	r3, [r3]
 800dc18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dc1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc1c:	f023 0301 	bic.w	r3, r3, #1
 800dc20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3308      	adds	r3, #8
 800dc2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dc32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dc36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dc3a:	e841 2300 	strex	r3, r2, [r1]
 800dc3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dc40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d1e1      	bne.n	800dc0a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3308      	adds	r3, #8
 800dc4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc50:	e853 3f00 	ldrex	r3, [r3]
 800dc54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dc56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	3308      	adds	r3, #8
 800dc66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc72:	e841 2300 	strex	r3, r2, [r1]
 800dc76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d1e3      	bne.n	800dc46 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2220      	movs	r2, #32
 800dc82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc94:	e853 3f00 	ldrex	r3, [r3]
 800dc98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc9c:	f023 0310 	bic.w	r3, r3, #16
 800dca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dcae:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcb0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcb6:	e841 2300 	strex	r3, r2, [r1]
 800dcba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dcbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e4      	bne.n	800dc8c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7f8 fa0b 	bl	80060e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 f91d 	bl	800df28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcee:	e0fd      	b.n	800deec <HAL_UART_IRQHandler+0x760>
 800dcf0:	40020010 	.word	0x40020010
 800dcf4:	40020028 	.word	0x40020028
 800dcf8:	40020040 	.word	0x40020040
 800dcfc:	40020058 	.word	0x40020058
 800dd00:	40020070 	.word	0x40020070
 800dd04:	40020088 	.word	0x40020088
 800dd08:	400200a0 	.word	0x400200a0
 800dd0c:	400200b8 	.word	0x400200b8
 800dd10:	40020410 	.word	0x40020410
 800dd14:	40020428 	.word	0x40020428
 800dd18:	40020440 	.word	0x40020440
 800dd1c:	40020458 	.word	0x40020458
 800dd20:	40020470 	.word	0x40020470
 800dd24:	40020488 	.word	0x40020488
 800dd28:	400204a0 	.word	0x400204a0
 800dd2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 80cf 	beq.w	800def0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dd52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 80ca 	beq.w	800def0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	e853 3f00 	ldrex	r3, [r3]
 800dd68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd7e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd86:	e841 2300 	strex	r3, r2, [r1]
 800dd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1e4      	bne.n	800dd5c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3308      	adds	r3, #8
 800dd98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	e853 3f00 	ldrex	r3, [r3]
 800dda0:	623b      	str	r3, [r7, #32]
   return(result);
 800dda2:	6a3a      	ldr	r2, [r7, #32]
 800dda4:	4b55      	ldr	r3, [pc, #340]	; (800defc <HAL_UART_IRQHandler+0x770>)
 800dda6:	4013      	ands	r3, r2
 800dda8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ddb6:	633a      	str	r2, [r7, #48]	; 0x30
 800ddb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e3      	bne.n	800dd92 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2220      	movs	r2, #32
 800ddce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	e853 3f00 	ldrex	r3, [r3]
 800ddea:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f023 0310 	bic.w	r3, r3, #16
 800ddf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800de00:	61fb      	str	r3, [r7, #28]
 800de02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de04:	69b9      	ldr	r1, [r7, #24]
 800de06:	69fa      	ldr	r2, [r7, #28]
 800de08:	e841 2300 	strex	r3, r2, [r1]
 800de0c:	617b      	str	r3, [r7, #20]
   return(result);
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d1e4      	bne.n	800ddde <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2202      	movs	r2, #2
 800de18:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 f881 	bl	800df28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de26:	e063      	b.n	800def0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de30:	2b00      	cmp	r3, #0
 800de32:	d00e      	beq.n	800de52 <HAL_UART_IRQHandler+0x6c6>
 800de34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d008      	beq.n	800de52 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800de48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f987 	bl	800e15e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de50:	e051      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800de52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d014      	beq.n	800de88 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800de5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de66:	2b00      	cmp	r3, #0
 800de68:	d105      	bne.n	800de76 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d008      	beq.n	800de88 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d03a      	beq.n	800def4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	4798      	blx	r3
    }
    return;
 800de86:	e035      	b.n	800def4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de90:	2b00      	cmp	r3, #0
 800de92:	d009      	beq.n	800dea8 <HAL_UART_IRQHandler+0x71c>
 800de94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f931 	bl	800e108 <UART_EndTransmit_IT>
    return;
 800dea6:	e026      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800deac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d009      	beq.n	800dec8 <HAL_UART_IRQHandler+0x73c>
 800deb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800debc:	2b00      	cmp	r3, #0
 800debe:	d003      	beq.n	800dec8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 f960 	bl	800e186 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dec6:	e016      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800decc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d010      	beq.n	800def6 <HAL_UART_IRQHandler+0x76a>
 800ded4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	da0c      	bge.n	800def6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f948 	bl	800e172 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dee2:	e008      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
      return;
 800dee4:	bf00      	nop
 800dee6:	e006      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
    return;
 800dee8:	bf00      	nop
 800deea:	e004      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
      return;
 800deec:	bf00      	nop
 800deee:	e002      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
      return;
 800def0:	bf00      	nop
 800def2:	e000      	b.n	800def6 <HAL_UART_IRQHandler+0x76a>
    return;
 800def4:	bf00      	nop
  }
}
 800def6:	37e8      	adds	r7, #232	; 0xe8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	effffffe 	.word	0xeffffffe

0800df00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	603b      	str	r3, [r7, #0]
 800df4c:	4613      	mov	r3, r2
 800df4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df50:	e049      	b.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df58:	d045      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df5a:	f7f7 feeb 	bl	8005d34 <HAL_GetTick>
 800df5e:	4602      	mov	r2, r0
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	429a      	cmp	r2, r3
 800df68:	d302      	bcc.n	800df70 <UART_WaitOnFlagUntilTimeout+0x30>
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800df70:	2303      	movs	r3, #3
 800df72:	e048      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f003 0304 	and.w	r3, r3, #4
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d031      	beq.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	69db      	ldr	r3, [r3, #28]
 800df88:	f003 0308 	and.w	r3, r3, #8
 800df8c:	2b08      	cmp	r3, #8
 800df8e:	d110      	bne.n	800dfb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2208      	movs	r2, #8
 800df96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800df98:	68f8      	ldr	r0, [r7, #12]
 800df9a:	f000 f839 	bl	800e010 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2208      	movs	r2, #8
 800dfa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e029      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	69db      	ldr	r3, [r3, #28]
 800dfb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfc0:	d111      	bne.n	800dfe6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dfca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 f81f 	bl	800e010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2220      	movs	r2, #32
 800dfd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	e00f      	b.n	800e006 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	69da      	ldr	r2, [r3, #28]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	4013      	ands	r3, r2
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	bf0c      	ite	eq
 800dff6:	2301      	moveq	r3, #1
 800dff8:	2300      	movne	r3, #0
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	461a      	mov	r2, r3
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	429a      	cmp	r2, r3
 800e002:	d0a6      	beq.n	800df52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e010:	b480      	push	{r7}
 800e012:	b095      	sub	sp, #84	; 0x54
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e020:	e853 3f00 	ldrex	r3, [r3]
 800e024:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e02c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	461a      	mov	r2, r3
 800e034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e036:	643b      	str	r3, [r7, #64]	; 0x40
 800e038:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e03c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e03e:	e841 2300 	strex	r3, r2, [r1]
 800e042:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1e6      	bne.n	800e018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3308      	adds	r3, #8
 800e050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	e853 3f00 	ldrex	r3, [r3]
 800e058:	61fb      	str	r3, [r7, #28]
   return(result);
 800e05a:	69fa      	ldr	r2, [r7, #28]
 800e05c:	4b1e      	ldr	r3, [pc, #120]	; (800e0d8 <UART_EndRxTransfer+0xc8>)
 800e05e:	4013      	ands	r3, r2
 800e060:	64bb      	str	r3, [r7, #72]	; 0x48
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3308      	adds	r3, #8
 800e068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e06a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e06c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e072:	e841 2300 	strex	r3, r2, [r1]
 800e076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1e5      	bne.n	800e04a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e082:	2b01      	cmp	r3, #1
 800e084:	d118      	bne.n	800e0b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	e853 3f00 	ldrex	r3, [r3]
 800e092:	60bb      	str	r3, [r7, #8]
   return(result);
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	f023 0310 	bic.w	r3, r3, #16
 800e09a:	647b      	str	r3, [r7, #68]	; 0x44
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0a4:	61bb      	str	r3, [r7, #24]
 800e0a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a8:	6979      	ldr	r1, [r7, #20]
 800e0aa:	69ba      	ldr	r2, [r7, #24]
 800e0ac:	e841 2300 	strex	r3, r2, [r1]
 800e0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1e6      	bne.n	800e086 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2220      	movs	r2, #32
 800e0bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e0cc:	bf00      	nop
 800e0ce:	3754      	adds	r7, #84	; 0x54
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	effffffe 	.word	0xeffffffe

0800e0dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7ff ff0a 	bl	800df14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e100:	bf00      	nop
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b088      	sub	sp, #32
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	e853 3f00 	ldrex	r3, [r3]
 800e11c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e124:	61fb      	str	r3, [r7, #28]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	461a      	mov	r2, r3
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	61bb      	str	r3, [r7, #24]
 800e130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e132:	6979      	ldr	r1, [r7, #20]
 800e134:	69ba      	ldr	r2, [r7, #24]
 800e136:	e841 2300 	strex	r3, r2, [r1]
 800e13a:	613b      	str	r3, [r7, #16]
   return(result);
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1e6      	bne.n	800e110 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2220      	movs	r2, #32
 800e146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7ff fed5 	bl	800df00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e156:	bf00      	nop
 800e158:	3720      	adds	r7, #32
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e15e:	b480      	push	{r7}
 800e160:	b083      	sub	sp, #12
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e166:	bf00      	nop
 800e168:	370c      	adds	r7, #12
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e17a:	bf00      	nop
 800e17c:	370c      	adds	r7, #12
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr

0800e186 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e186:	b480      	push	{r7}
 800e188:	b083      	sub	sp, #12
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e18e:	bf00      	nop
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr
	...

0800e19c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d121      	bne.n	800e1f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	4b27      	ldr	r3, [pc, #156]	; (800e250 <FMC_SDRAM_Init+0xb4>)
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	6851      	ldr	r1, [r2, #4]
 800e1ba:	683a      	ldr	r2, [r7, #0]
 800e1bc:	6892      	ldr	r2, [r2, #8]
 800e1be:	4311      	orrs	r1, r2
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	68d2      	ldr	r2, [r2, #12]
 800e1c4:	4311      	orrs	r1, r2
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	6912      	ldr	r2, [r2, #16]
 800e1ca:	4311      	orrs	r1, r2
 800e1cc:	683a      	ldr	r2, [r7, #0]
 800e1ce:	6952      	ldr	r2, [r2, #20]
 800e1d0:	4311      	orrs	r1, r2
 800e1d2:	683a      	ldr	r2, [r7, #0]
 800e1d4:	6992      	ldr	r2, [r2, #24]
 800e1d6:	4311      	orrs	r1, r2
 800e1d8:	683a      	ldr	r2, [r7, #0]
 800e1da:	69d2      	ldr	r2, [r2, #28]
 800e1dc:	4311      	orrs	r1, r2
 800e1de:	683a      	ldr	r2, [r7, #0]
 800e1e0:	6a12      	ldr	r2, [r2, #32]
 800e1e2:	4311      	orrs	r1, r2
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	431a      	orrs	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	e026      	b.n	800e240 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	69d9      	ldr	r1, [r3, #28]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	6a1b      	ldr	r3, [r3, #32]
 800e202:	4319      	orrs	r1, r3
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e208:	430b      	orrs	r3, r1
 800e20a:	431a      	orrs	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	685a      	ldr	r2, [r3, #4]
 800e214:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <FMC_SDRAM_Init+0xb4>)
 800e216:	4013      	ands	r3, r2
 800e218:	683a      	ldr	r2, [r7, #0]
 800e21a:	6851      	ldr	r1, [r2, #4]
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	6892      	ldr	r2, [r2, #8]
 800e220:	4311      	orrs	r1, r2
 800e222:	683a      	ldr	r2, [r7, #0]
 800e224:	68d2      	ldr	r2, [r2, #12]
 800e226:	4311      	orrs	r1, r2
 800e228:	683a      	ldr	r2, [r7, #0]
 800e22a:	6912      	ldr	r2, [r2, #16]
 800e22c:	4311      	orrs	r1, r2
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	6952      	ldr	r2, [r2, #20]
 800e232:	4311      	orrs	r1, r2
 800e234:	683a      	ldr	r2, [r7, #0]
 800e236:	6992      	ldr	r2, [r2, #24]
 800e238:	430a      	orrs	r2, r1
 800e23a:	431a      	orrs	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	370c      	adds	r7, #12
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	ffff8000 	.word	0xffff8000

0800e254 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	60f8      	str	r0, [r7, #12]
 800e25c:	60b9      	str	r1, [r7, #8]
 800e25e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d128      	bne.n	800e2b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	1e59      	subs	r1, r3, #1
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	3b01      	subs	r3, #1
 800e27a:	011b      	lsls	r3, r3, #4
 800e27c:	4319      	orrs	r1, r3
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	3b01      	subs	r3, #1
 800e284:	021b      	lsls	r3, r3, #8
 800e286:	4319      	orrs	r1, r3
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	031b      	lsls	r3, r3, #12
 800e290:	4319      	orrs	r1, r3
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	3b01      	subs	r3, #1
 800e298:	041b      	lsls	r3, r3, #16
 800e29a:	4319      	orrs	r1, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	051b      	lsls	r3, r3, #20
 800e2a4:	4319      	orrs	r1, r3
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	699b      	ldr	r3, [r3, #24]
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	061b      	lsls	r3, r3, #24
 800e2ae:	430b      	orrs	r3, r1
 800e2b0:	431a      	orrs	r2, r3
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	609a      	str	r2, [r3, #8]
 800e2b6:	e02d      	b.n	800e314 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	689a      	ldr	r2, [r3, #8]
 800e2bc:	4b19      	ldr	r3, [pc, #100]	; (800e324 <FMC_SDRAM_Timing_Init+0xd0>)
 800e2be:	4013      	ands	r3, r2
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	68d2      	ldr	r2, [r2, #12]
 800e2c4:	3a01      	subs	r2, #1
 800e2c6:	0311      	lsls	r1, r2, #12
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	6952      	ldr	r2, [r2, #20]
 800e2cc:	3a01      	subs	r2, #1
 800e2ce:	0512      	lsls	r2, r2, #20
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	431a      	orrs	r2, r3
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	1e59      	subs	r1, r3, #1
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	011b      	lsls	r3, r3, #4
 800e2ee:	4319      	orrs	r1, r3
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	021b      	lsls	r3, r3, #8
 800e2f8:	4319      	orrs	r1, r3
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	041b      	lsls	r3, r3, #16
 800e302:	4319      	orrs	r1, r3
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	3b01      	subs	r3, #1
 800e30a:	061b      	lsls	r3, r3, #24
 800e30c:	430b      	orrs	r3, r1
 800e30e:	431a      	orrs	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	ff0f0fff 	.word	0xff0f0fff

0800e328 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	691a      	ldr	r2, [r3, #16]
 800e338:	4b0c      	ldr	r3, [pc, #48]	; (800e36c <FMC_SDRAM_SendCommand+0x44>)
 800e33a:	4013      	ands	r3, r2
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	6811      	ldr	r1, [r2, #0]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	6852      	ldr	r2, [r2, #4]
 800e344:	4311      	orrs	r1, r2
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	6892      	ldr	r2, [r2, #8]
 800e34a:	3a01      	subs	r2, #1
 800e34c:	0152      	lsls	r2, r2, #5
 800e34e:	4311      	orrs	r1, r2
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	68d2      	ldr	r2, [r2, #12]
 800e354:	0252      	lsls	r2, r2, #9
 800e356:	430a      	orrs	r2, r1
 800e358:	431a      	orrs	r2, r3
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr
 800e36c:	ffc00000 	.word	0xffc00000

0800e370 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	695a      	ldr	r2, [r3, #20]
 800e37e:	4b07      	ldr	r3, [pc, #28]	; (800e39c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e380:	4013      	ands	r3, r2
 800e382:	683a      	ldr	r2, [r7, #0]
 800e384:	0052      	lsls	r2, r2, #1
 800e386:	431a      	orrs	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	370c      	adds	r7, #12
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	ffffc001 	.word	0xffffc001

0800e3a0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	689a      	ldr	r2, [r3, #8]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	689b      	ldr	r3, [r3, #8]
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	601a      	str	r2, [r3, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	3714      	adds	r7, #20
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	6892      	ldr	r2, [r2, #8]
 800e3fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	6852      	ldr	r2, [r2, #4]
 800e408:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	429a      	cmp	r2, r3
 800e412:	d103      	bne.n	800e41c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	689a      	ldr	r2, [r3, #8]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	1e5a      	subs	r2, r3, #1
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e442:	2300      	movs	r3, #0
 800e444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e446:	4b4f      	ldr	r3, [pc, #316]	; (800e584 <xTaskIncrementTick+0x148>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f040 808f 	bne.w	800e56e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e450:	4b4d      	ldr	r3, [pc, #308]	; (800e588 <xTaskIncrementTick+0x14c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3301      	adds	r3, #1
 800e456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e458:	4a4b      	ldr	r2, [pc, #300]	; (800e588 <xTaskIncrementTick+0x14c>)
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d120      	bne.n	800e4a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e464:	4b49      	ldr	r3, [pc, #292]	; (800e58c <xTaskIncrementTick+0x150>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00a      	beq.n	800e484 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e480:	bf00      	nop
 800e482:	e7fe      	b.n	800e482 <xTaskIncrementTick+0x46>
 800e484:	4b41      	ldr	r3, [pc, #260]	; (800e58c <xTaskIncrementTick+0x150>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	60fb      	str	r3, [r7, #12]
 800e48a:	4b41      	ldr	r3, [pc, #260]	; (800e590 <xTaskIncrementTick+0x154>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a3f      	ldr	r2, [pc, #252]	; (800e58c <xTaskIncrementTick+0x150>)
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	4a3f      	ldr	r2, [pc, #252]	; (800e590 <xTaskIncrementTick+0x154>)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6013      	str	r3, [r2, #0]
 800e498:	4b3e      	ldr	r3, [pc, #248]	; (800e594 <xTaskIncrementTick+0x158>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	3301      	adds	r3, #1
 800e49e:	4a3d      	ldr	r2, [pc, #244]	; (800e594 <xTaskIncrementTick+0x158>)
 800e4a0:	6013      	str	r3, [r2, #0]
 800e4a2:	f000 f8e3 	bl	800e66c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4a6:	4b3c      	ldr	r3, [pc, #240]	; (800e598 <xTaskIncrementTick+0x15c>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d349      	bcc.n	800e544 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4b0:	4b36      	ldr	r3, [pc, #216]	; (800e58c <xTaskIncrementTick+0x150>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d104      	bne.n	800e4c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4ba:	4b37      	ldr	r3, [pc, #220]	; (800e598 <xTaskIncrementTick+0x15c>)
 800e4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c0:	601a      	str	r2, [r3, #0]
					break;
 800e4c2:	e03f      	b.n	800e544 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4c4:	4b31      	ldr	r3, [pc, #196]	; (800e58c <xTaskIncrementTick+0x150>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4d4:	693a      	ldr	r2, [r7, #16]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d203      	bcs.n	800e4e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4dc:	4a2e      	ldr	r2, [pc, #184]	; (800e598 <xTaskIncrementTick+0x15c>)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4e2:	e02f      	b.n	800e544 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff ff7d 	bl	800e3e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d004      	beq.n	800e500 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	3318      	adds	r3, #24
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff ff74 	bl	800e3e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e504:	4b25      	ldr	r3, [pc, #148]	; (800e59c <xTaskIncrementTick+0x160>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d903      	bls.n	800e514 <xTaskIncrementTick+0xd8>
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	4a22      	ldr	r2, [pc, #136]	; (800e59c <xTaskIncrementTick+0x160>)
 800e512:	6013      	str	r3, [r2, #0]
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	4a1f      	ldr	r2, [pc, #124]	; (800e5a0 <xTaskIncrementTick+0x164>)
 800e522:	441a      	add	r2, r3
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	3304      	adds	r3, #4
 800e528:	4619      	mov	r1, r3
 800e52a:	4610      	mov	r0, r2
 800e52c:	f7ff ff38 	bl	800e3a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e534:	4b1b      	ldr	r3, [pc, #108]	; (800e5a4 <xTaskIncrementTick+0x168>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d3b8      	bcc.n	800e4b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e53e:	2301      	movs	r3, #1
 800e540:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e542:	e7b5      	b.n	800e4b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e544:	4b17      	ldr	r3, [pc, #92]	; (800e5a4 <xTaskIncrementTick+0x168>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e54a:	4915      	ldr	r1, [pc, #84]	; (800e5a0 <xTaskIncrementTick+0x164>)
 800e54c:	4613      	mov	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	440b      	add	r3, r1
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d901      	bls.n	800e560 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e55c:	2301      	movs	r3, #1
 800e55e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e560:	4b11      	ldr	r3, [pc, #68]	; (800e5a8 <xTaskIncrementTick+0x16c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d007      	beq.n	800e578 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e568:	2301      	movs	r3, #1
 800e56a:	617b      	str	r3, [r7, #20]
 800e56c:	e004      	b.n	800e578 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e56e:	4b0f      	ldr	r3, [pc, #60]	; (800e5ac <xTaskIncrementTick+0x170>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	4a0d      	ldr	r2, [pc, #52]	; (800e5ac <xTaskIncrementTick+0x170>)
 800e576:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e578:	697b      	ldr	r3, [r7, #20]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	24002238 	.word	0x24002238
 800e588:	2400221c 	.word	0x2400221c
 800e58c:	24002214 	.word	0x24002214
 800e590:	24002218 	.word	0x24002218
 800e594:	24002230 	.word	0x24002230
 800e598:	24002234 	.word	0x24002234
 800e59c:	24002220 	.word	0x24002220
 800e5a0:	24001db4 	.word	0x24001db4
 800e5a4:	24001db0 	.word	0x24001db0
 800e5a8:	2400222c 	.word	0x2400222c
 800e5ac:	24002228 	.word	0x24002228

0800e5b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5b6:	4b28      	ldr	r3, [pc, #160]	; (800e658 <vTaskSwitchContext+0xa8>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5be:	4b27      	ldr	r3, [pc, #156]	; (800e65c <vTaskSwitchContext+0xac>)
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5c4:	e041      	b.n	800e64a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e5c6:	4b25      	ldr	r3, [pc, #148]	; (800e65c <vTaskSwitchContext+0xac>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5cc:	4b24      	ldr	r3, [pc, #144]	; (800e660 <vTaskSwitchContext+0xb0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	e010      	b.n	800e5f6 <vTaskSwitchContext+0x46>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10a      	bne.n	800e5f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	607b      	str	r3, [r7, #4]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <vTaskSwitchContext+0x3e>
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	3b01      	subs	r3, #1
 800e5f4:	60fb      	str	r3, [r7, #12]
 800e5f6:	491b      	ldr	r1, [pc, #108]	; (800e664 <vTaskSwitchContext+0xb4>)
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	440b      	add	r3, r1
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d0e4      	beq.n	800e5d4 <vTaskSwitchContext+0x24>
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	4613      	mov	r3, r2
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4413      	add	r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	4a13      	ldr	r2, [pc, #76]	; (800e664 <vTaskSwitchContext+0xb4>)
 800e616:	4413      	add	r3, r2
 800e618:	60bb      	str	r3, [r7, #8]
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	605a      	str	r2, [r3, #4]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	685a      	ldr	r2, [r3, #4]
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	3308      	adds	r3, #8
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d104      	bne.n	800e63a <vTaskSwitchContext+0x8a>
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	605a      	str	r2, [r3, #4]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	4a09      	ldr	r2, [pc, #36]	; (800e668 <vTaskSwitchContext+0xb8>)
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	4a06      	ldr	r2, [pc, #24]	; (800e660 <vTaskSwitchContext+0xb0>)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	6013      	str	r3, [r2, #0]
}
 800e64a:	bf00      	nop
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	24002238 	.word	0x24002238
 800e65c:	2400222c 	.word	0x2400222c
 800e660:	24002220 	.word	0x24002220
 800e664:	24001db4 	.word	0x24001db4
 800e668:	24001db0 	.word	0x24001db0

0800e66c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e672:	4b0c      	ldr	r3, [pc, #48]	; (800e6a4 <prvResetNextTaskUnblockTime+0x38>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d104      	bne.n	800e686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e67c:	4b0a      	ldr	r3, [pc, #40]	; (800e6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800e67e:	f04f 32ff 	mov.w	r2, #4294967295
 800e682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e684:	e008      	b.n	800e698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e686:	4b07      	ldr	r3, [pc, #28]	; (800e6a4 <prvResetNextTaskUnblockTime+0x38>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	4a04      	ldr	r2, [pc, #16]	; (800e6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800e696:	6013      	str	r3, [r2, #0]
}
 800e698:	bf00      	nop
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	24002214 	.word	0x24002214
 800e6a8:	24002234 	.word	0x24002234

0800e6ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6b2:	4b0b      	ldr	r3, [pc, #44]	; (800e6e0 <xTaskGetSchedulerState+0x34>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d102      	bne.n	800e6c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	607b      	str	r3, [r7, #4]
 800e6be:	e008      	b.n	800e6d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c0:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <xTaskGetSchedulerState+0x38>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d102      	bne.n	800e6ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	607b      	str	r3, [r7, #4]
 800e6cc:	e001      	b.n	800e6d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e6d2:	687b      	ldr	r3, [r7, #4]
	}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	24002224 	.word	0x24002224
 800e6e4:	24002238 	.word	0x24002238
	...

0800e6f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6f0:	4b07      	ldr	r3, [pc, #28]	; (800e710 <pxCurrentTCBConst2>)
 800e6f2:	6819      	ldr	r1, [r3, #0]
 800e6f4:	6808      	ldr	r0, [r1, #0]
 800e6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	f380 8809 	msr	PSP, r0
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f04f 0000 	mov.w	r0, #0
 800e706:	f380 8811 	msr	BASEPRI, r0
 800e70a:	4770      	bx	lr
 800e70c:	f3af 8000 	nop.w

0800e710 <pxCurrentTCBConst2>:
 800e710:	24001db0 	.word	0x24001db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e714:	bf00      	nop
 800e716:	bf00      	nop
	...

0800e720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e720:	f3ef 8009 	mrs	r0, PSP
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	4b15      	ldr	r3, [pc, #84]	; (800e780 <pxCurrentTCBConst>)
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	f01e 0f10 	tst.w	lr, #16
 800e730:	bf08      	it	eq
 800e732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	6010      	str	r0, [r2, #0]
 800e73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e744:	f380 8811 	msr	BASEPRI, r0
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f7ff ff2e 	bl	800e5b0 <vTaskSwitchContext>
 800e754:	f04f 0000 	mov.w	r0, #0
 800e758:	f380 8811 	msr	BASEPRI, r0
 800e75c:	bc09      	pop	{r0, r3}
 800e75e:	6819      	ldr	r1, [r3, #0]
 800e760:	6808      	ldr	r0, [r1, #0]
 800e762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e766:	f01e 0f10 	tst.w	lr, #16
 800e76a:	bf08      	it	eq
 800e76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e770:	f380 8809 	msr	PSP, r0
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	f3af 8000 	nop.w

0800e780 <pxCurrentTCBConst>:
 800e780:	24001db0 	.word	0x24001db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e784:	bf00      	nop
 800e786:	bf00      	nop

0800e788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	607b      	str	r3, [r7, #4]
}
 800e7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e7a2:	f7ff fe4b 	bl	800e43c <xTaskIncrementTick>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e7ac:	4b06      	ldr	r3, [pc, #24]	; (800e7c8 <xPortSysTickHandler+0x40>)
 800e7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e7c0:	bf00      	nop
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	e000ed04 	.word	0xe000ed04

0800e7cc <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d009      	beq.n	800e7f0 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 800e7dc:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800e7de:	461a      	mov	r2, r3
        err.type, err.code);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	4806      	ldr	r0, [pc, #24]	; (800e804 <ai_log_err+0x38>)
 800e7ea:	f004 f9a5 	bl	8012b38 <iprintf>
 800e7ee:	e008      	b.n	800e802 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800e7f0:	793b      	ldrb	r3, [r7, #4]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	4802      	ldr	r0, [pc, #8]	; (800e808 <ai_log_err+0x3c>)
 800e7fe:	f004 f99b 	bl	8012b38 <iprintf>

  do {} while (1);
 800e802:	e7fe      	b.n	800e802 <ai_log_err+0x36>
 800e804:	08016730 	.word	0x08016730
 800e808:	08016764 	.word	0x08016764

0800e80c <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_mnist_nn_create_and_init(&mnist_nn, act_addr, NULL);
 800e814:	2200      	movs	r2, #0
 800e816:	6879      	ldr	r1, [r7, #4]
 800e818:	4828      	ldr	r0, [pc, #160]	; (800e8bc <ai_boostrap+0xb0>)
 800e81a:	f000 fa69 	bl	800ecf0 <ai_mnist_nn_create_and_init>
 800e81e:	4603      	mov	r3, r0
 800e820:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800e822:	7b3b      	ldrb	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d006      	beq.n	800e836 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_mnist_nn_create_and_init");
 800e828:	4925      	ldr	r1, [pc, #148]	; (800e8c0 <ai_boostrap+0xb4>)
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f7ff ffce 	bl	800e7cc <ai_log_err>
    return -1;
 800e830:	f04f 33ff 	mov.w	r3, #4294967295
 800e834:	e03e      	b.n	800e8b4 <ai_boostrap+0xa8>
  }

  ai_input = ai_mnist_nn_inputs_get(mnist_nn, NULL);
 800e836:	4b21      	ldr	r3, [pc, #132]	; (800e8bc <ai_boostrap+0xb0>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2100      	movs	r1, #0
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 fad5 	bl	800edec <ai_mnist_nn_inputs_get>
 800e842:	4603      	mov	r3, r0
 800e844:	4a1f      	ldr	r2, [pc, #124]	; (800e8c4 <ai_boostrap+0xb8>)
 800e846:	6013      	str	r3, [r2, #0]
  ai_output = ai_mnist_nn_outputs_get(mnist_nn, NULL);
 800e848:	4b1c      	ldr	r3, [pc, #112]	; (800e8bc <ai_boostrap+0xb0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2100      	movs	r1, #0
 800e84e:	4618      	mov	r0, r3
 800e850:	f000 fae6 	bl	800ee20 <ai_mnist_nn_outputs_get>
 800e854:	4603      	mov	r3, r0
 800e856:	4a1c      	ldr	r2, [pc, #112]	; (800e8c8 <ai_boostrap+0xbc>)
 800e858:	6013      	str	r3, [r2, #0]

#if defined(AI_MNIST_NN_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_MNIST_NN_IN_NUM; idx++) {
 800e85a:	2300      	movs	r3, #0
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e00f      	b.n	800e880 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 800e860:	4b18      	ldr	r3, [pc, #96]	; (800e8c4 <ai_boostrap+0xb8>)
 800e862:	6819      	ldr	r1, [r3, #0]
 800e864:	697a      	ldr	r2, [r7, #20]
 800e866:	4613      	mov	r3, r2
 800e868:	00db      	lsls	r3, r3, #3
 800e86a:	1a9b      	subs	r3, r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	440b      	add	r3, r1
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	4916      	ldr	r1, [pc, #88]	; (800e8cc <ai_boostrap+0xc0>)
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MNIST_NN_IN_NUM; idx++) {
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	3301      	adds	r3, #1
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2b00      	cmp	r3, #0
 800e884:	ddec      	ble.n	800e860 <ai_boostrap+0x54>

#if defined(AI_MNIST_NN_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_MNIST_NN_OUT_NUM; idx++) {
 800e886:	2300      	movs	r3, #0
 800e888:	613b      	str	r3, [r7, #16]
 800e88a:	e00f      	b.n	800e8ac <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 800e88c:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <ai_boostrap+0xbc>)
 800e88e:	6819      	ldr	r1, [r3, #0]
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	4613      	mov	r3, r2
 800e894:	00db      	lsls	r3, r3, #3
 800e896:	1a9b      	subs	r3, r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	440b      	add	r3, r1
 800e89c:	685a      	ldr	r2, [r3, #4]
 800e89e:	490c      	ldr	r1, [pc, #48]	; (800e8d0 <ai_boostrap+0xc4>)
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_MNIST_NN_OUT_NUM; idx++) {
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	613b      	str	r3, [r7, #16]
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	ddec      	ble.n	800e88c <ai_boostrap+0x80>
  for (int idx=0; idx < AI_MNIST_NN_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	24009d20 	.word	0x24009d20
 800e8c0:	08016794 	.word	0x08016794
 800e8c4:	24009d24 	.word	0x24009d24
 800e8c8:	24009d28 	.word	0x24009d28
 800e8cc:	2400223c 	.word	0x2400223c
 800e8d0:	24002240 	.word	0x24002240

0800e8d4 <ai_run>:

static int ai_run(void)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_mnist_nn_run(mnist_nn, ai_input, ai_output);
 800e8da:	4b0f      	ldr	r3, [pc, #60]	; (800e918 <ai_run+0x44>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a0f      	ldr	r2, [pc, #60]	; (800e91c <ai_run+0x48>)
 800e8e0:	6811      	ldr	r1, [r2, #0]
 800e8e2:	4a0f      	ldr	r2, [pc, #60]	; (800e920 <ai_run+0x4c>)
 800e8e4:	6812      	ldr	r2, [r2, #0]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f000 faf0 	bl	800eecc <ai_mnist_nn_run>
 800e8ec:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d00c      	beq.n	800e90e <ai_run+0x3a>
    ai_log_err(ai_mnist_nn_get_error(mnist_nn),
 800e8f4:	4b08      	ldr	r3, [pc, #32]	; (800e918 <ai_run+0x44>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f000 f9d7 	bl	800ecac <ai_mnist_nn_get_error>
 800e8fe:	4603      	mov	r3, r0
 800e900:	4908      	ldr	r1, [pc, #32]	; (800e924 <ai_run+0x50>)
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff ff62 	bl	800e7cc <ai_log_err>
        "ai_mnist_nn_run");
    return -1;
 800e908:	f04f 33ff 	mov.w	r3, #4294967295
 800e90c:	e000      	b.n	800e910 <ai_run+0x3c>
  }

  return 0;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	24009d20 	.word	0x24009d20
 800e91c:	24009d24 	.word	0x24009d24
 800e920:	24009d28 	.word	0x24009d28
 800e924:	080167b0 	.word	0x080167b0

0800e928 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
    BSP_QSPI_Init_t qspiInit;
    qspiInit.InterfaceMode=MT25TL01G_QPI_MODE;
 800e92e:	2303      	movs	r3, #3
 800e930:	713b      	strb	r3, [r7, #4]
    qspiInit.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800e932:	2301      	movs	r3, #1
 800e934:	717b      	strb	r3, [r7, #5]
    qspiInit.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800e936:	2340      	movs	r3, #64	; 0x40
 800e938:	71bb      	strb	r3, [r7, #6]
    BSP_QSPI_Init(0,&qspiInit);
 800e93a:	1d3b      	adds	r3, r7, #4
 800e93c:	4619      	mov	r1, r3
 800e93e:	2000      	movs	r0, #0
 800e940:	f7f6 f9ac 	bl	8004c9c <BSP_QSPI_Init>
    BSP_QSPI_EnableMemoryMappedMode(0);
 800e944:	2000      	movs	r0, #0
 800e946:	f7f6 fa83 	bl	8004e50 <BSP_QSPI_EnableMemoryMappedMode>
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 800e94a:	4805      	ldr	r0, [pc, #20]	; (800e960 <MX_X_CUBE_AI_Init+0x38>)
 800e94c:	f004 f97a 	bl	8012c44 <puts>

  ai_boostrap(data_activations0);
 800e950:	4804      	ldr	r0, [pc, #16]	; (800e964 <MX_X_CUBE_AI_Init+0x3c>)
 800e952:	f7ff ff5b 	bl	800e80c <ai_boostrap>
    /* USER CODE END 5 */
}
 800e956:	bf00      	nop
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	080167c0 	.word	0x080167c0
 800e964:	24000064 	.word	0x24000064

0800e968 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(ai_float * nn_input_data, ai_float * nn_output_data) //MX_X_CUBE_AI_Process(void)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
			nn_input_data_TEST[0][i][j][0] = *(nn_input_data + i * AI_MNIST_NN_IN_1_WIDTH + j); //nn_input_data[i][j];
		}
	}
	*/

	ai_input[0].data = AI_HANDLE_PTR(nn_input_data);
 800e972:	4b07      	ldr	r3, [pc, #28]	; (800e990 <MX_X_CUBE_AI_Process+0x28>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(nn_output_data);
 800e97a:	4b06      	ldr	r3, [pc, #24]	; (800e994 <MX_X_CUBE_AI_Process+0x2c>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	683a      	ldr	r2, [r7, #0]
 800e980:	605a      	str	r2, [r3, #4]
	}*/
	//data_ins[0] = nn_input_data_TEST;



	ai_run();
 800e982:	f7ff ffa7 	bl	800e8d4 <ai_run>
	///////////////////////////////////memcpy(nn_output_data, data_outs[0], 10 * sizeof(ai_float));



    /* USER CODE END 6 */
}
 800e986:	bf00      	nop
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	24009d24 	.word	0x24009d24
 800e994:	24009d28 	.word	0x24009d28

0800e998 <mnist_nn_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnist_nn_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_mnist_nn_activations_map, 1, params)) {
 800e9a2:	683a      	ldr	r2, [r7, #0]
 800e9a4:	2101      	movs	r1, #1
 800e9a6:	4840      	ldr	r0, [pc, #256]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9a8:	f000 fb6e 	bl	800f088 <ai_platform_get_activations_map>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d06f      	beq.n	800ea92 <mnist_nn_configure_activations+0xfa>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800e9b2:	4b3d      	ldr	r3, [pc, #244]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a3d      	ldr	r2, [pc, #244]	; (800eaac <mnist_nn_configure_activations+0x114>)
 800e9b8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800e9ba:	4b3b      	ldr	r3, [pc, #236]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a3b      	ldr	r2, [pc, #236]	; (800eaac <mnist_nn_configure_activations+0x114>)
 800e9c0:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 3136);
 800e9c2:	4b39      	ldr	r3, [pc, #228]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800e9ca:	4a39      	ldr	r2, [pc, #228]	; (800eab0 <mnist_nn_configure_activations+0x118>)
 800e9cc:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 3136);
 800e9ce:	4b36      	ldr	r3, [pc, #216]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800e9d6:	4a36      	ldr	r2, [pc, #216]	; (800eab0 <mnist_nn_configure_activations+0x118>)
 800e9d8:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 9792);
 800e9da:	4b33      	ldr	r3, [pc, #204]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 800e9e2:	4a34      	ldr	r2, [pc, #208]	; (800eab4 <mnist_nn_configure_activations+0x11c>)
 800e9e4:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 9792);
 800e9e6:	4b30      	ldr	r3, [pc, #192]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f503 5319 	add.w	r3, r3, #9792	; 0x2640
 800e9ee:	4a31      	ldr	r2, [pc, #196]	; (800eab4 <mnist_nn_configure_activations+0x11c>)
 800e9f0:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800e9f2:	4b2d      	ldr	r3, [pc, #180]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a30      	ldr	r2, [pc, #192]	; (800eab8 <mnist_nn_configure_activations+0x120>)
 800e9f8:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800e9fa:	4b2b      	ldr	r3, [pc, #172]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4a2e      	ldr	r2, [pc, #184]	; (800eab8 <mnist_nn_configure_activations+0x120>)
 800ea00:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 8512);
 800ea02:	4b29      	ldr	r3, [pc, #164]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800ea0a:	4a2c      	ldr	r2, [pc, #176]	; (800eabc <mnist_nn_configure_activations+0x124>)
 800ea0c:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 8512);
 800ea0e:	4b26      	ldr	r3, [pc, #152]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f503 5305 	add.w	r3, r3, #8512	; 0x2140
 800ea16:	4a29      	ldr	r2, [pc, #164]	; (800eabc <mnist_nn_configure_activations+0x124>)
 800ea18:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea1a:	4b23      	ldr	r3, [pc, #140]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a28      	ldr	r2, [pc, #160]	; (800eac0 <mnist_nn_configure_activations+0x128>)
 800ea20:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea22:	4b21      	ldr	r3, [pc, #132]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4a26      	ldr	r2, [pc, #152]	; (800eac0 <mnist_nn_configure_activations+0x128>)
 800ea28:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 2304);
 800ea2a:	4b1f      	ldr	r3, [pc, #124]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea32:	4a24      	ldr	r2, [pc, #144]	; (800eac4 <mnist_nn_configure_activations+0x12c>)
 800ea34:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 2304);
 800ea36:	4b1c      	ldr	r3, [pc, #112]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea3e:	4a21      	ldr	r2, [pc, #132]	; (800eac4 <mnist_nn_configure_activations+0x12c>)
 800ea40:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea42:	4b19      	ldr	r3, [pc, #100]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a20      	ldr	r2, [pc, #128]	; (800eac8 <mnist_nn_configure_activations+0x130>)
 800ea48:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea4a:	4b17      	ldr	r3, [pc, #92]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a1e      	ldr	r2, [pc, #120]	; (800eac8 <mnist_nn_configure_activations+0x130>)
 800ea50:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 256);
 800ea52:	4b15      	ldr	r3, [pc, #84]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ea5a:	4a1c      	ldr	r2, [pc, #112]	; (800eacc <mnist_nn_configure_activations+0x134>)
 800ea5c:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 256);
 800ea5e:	4b12      	ldr	r3, [pc, #72]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ea66:	4a19      	ldr	r2, [pc, #100]	; (800eacc <mnist_nn_configure_activations+0x134>)
 800ea68:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea6a:	4b0f      	ldr	r3, [pc, #60]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a18      	ldr	r2, [pc, #96]	; (800ead0 <mnist_nn_configure_activations+0x138>)
 800ea70:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 0);
 800ea72:	4b0d      	ldr	r3, [pc, #52]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a16      	ldr	r2, [pc, #88]	; (800ead0 <mnist_nn_configure_activations+0x138>)
 800ea78:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_mnist_nn_activations_map[0] + 40);
 800ea7a:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	3328      	adds	r3, #40	; 0x28
 800ea80:	4a14      	ldr	r2, [pc, #80]	; (800ead4 <mnist_nn_configure_activations+0x13c>)
 800ea82:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_mnist_nn_activations_map[0] + 40);
 800ea84:	4b08      	ldr	r3, [pc, #32]	; (800eaa8 <mnist_nn_configure_activations+0x110>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3328      	adds	r3, #40	; 0x28
 800ea8a:	4a12      	ldr	r2, [pc, #72]	; (800ead4 <mnist_nn_configure_activations+0x13c>)
 800ea8c:	60d3      	str	r3, [r2, #12]
    return true;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e005      	b.n	800ea9e <mnist_nn_configure_activations+0x106>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ea92:	2213      	movs	r2, #19
 800ea94:	2130      	movs	r1, #48	; 0x30
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 fb74 	bl	800f184 <ai_platform_network_set_error>
  return false;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	24009d2c 	.word	0x24009d2c
 800eaac:	24000068 	.word	0x24000068
 800eab0:	24000198 	.word	0x24000198
 800eab4:	24000078 	.word	0x24000078
 800eab8:	240001a8 	.word	0x240001a8
 800eabc:	24000088 	.word	0x24000088
 800eac0:	24000098 	.word	0x24000098
 800eac4:	240000a8 	.word	0x240000a8
 800eac8:	240000b8 	.word	0x240000b8
 800eacc:	240000c8 	.word	0x240000c8
 800ead0:	240000d8 	.word	0x240000d8
 800ead4:	240000e8 	.word	0x240000e8

0800ead8 <mnist_nn_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool mnist_nn_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_mnist_nn_weights_map, 1, params)) {
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	2101      	movs	r1, #1
 800eae6:	4861      	ldr	r0, [pc, #388]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eae8:	f000 fa76 	bl	800efd8 <ai_platform_get_weights_map>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f000 80b2 	beq.w	800ec58 <mnist_nn_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800eaf4:	4b5e      	ldr	r3, [pc, #376]	; (800ec70 <mnist_nn_configure_weights+0x198>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eafc:	4a5c      	ldr	r2, [pc, #368]	; (800ec70 <mnist_nn_configure_weights+0x198>)
 800eafe:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 0);
 800eb00:	4b5a      	ldr	r3, [pc, #360]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a5a      	ldr	r2, [pc, #360]	; (800ec70 <mnist_nn_configure_weights+0x198>)
 800eb06:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 0);
 800eb08:	4b58      	ldr	r3, [pc, #352]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a58      	ldr	r2, [pc, #352]	; (800ec70 <mnist_nn_configure_weights+0x198>)
 800eb0e:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800eb10:	4b58      	ldr	r3, [pc, #352]	; (800ec74 <mnist_nn_configure_weights+0x19c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb18:	4a56      	ldr	r2, [pc, #344]	; (800ec74 <mnist_nn_configure_weights+0x19c>)
 800eb1a:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 1152);
 800eb1c:	4b53      	ldr	r3, [pc, #332]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800eb24:	4a53      	ldr	r2, [pc, #332]	; (800ec74 <mnist_nn_configure_weights+0x19c>)
 800eb26:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 1152);
 800eb28:	4b50      	ldr	r3, [pc, #320]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800eb30:	4a50      	ldr	r2, [pc, #320]	; (800ec74 <mnist_nn_configure_weights+0x19c>)
 800eb32:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800eb34:	4b50      	ldr	r3, [pc, #320]	; (800ec78 <mnist_nn_configure_weights+0x1a0>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb3c:	4a4e      	ldr	r2, [pc, #312]	; (800ec78 <mnist_nn_configure_weights+0x1a0>)
 800eb3e:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 1280);
 800eb40:	4b4a      	ldr	r3, [pc, #296]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb48:	4a4b      	ldr	r2, [pc, #300]	; (800ec78 <mnist_nn_configure_weights+0x1a0>)
 800eb4a:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 1280);
 800eb4c:	4b47      	ldr	r3, [pc, #284]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb54:	4a48      	ldr	r2, [pc, #288]	; (800ec78 <mnist_nn_configure_weights+0x1a0>)
 800eb56:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800eb58:	4b48      	ldr	r3, [pc, #288]	; (800ec7c <mnist_nn_configure_weights+0x1a4>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb60:	4a46      	ldr	r2, [pc, #280]	; (800ec7c <mnist_nn_configure_weights+0x1a4>)
 800eb62:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 75008);
 800eb64:	4b41      	ldr	r3, [pc, #260]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	4b45      	ldr	r3, [pc, #276]	; (800ec80 <mnist_nn_configure_weights+0x1a8>)
 800eb6a:	4413      	add	r3, r2
 800eb6c:	4a43      	ldr	r2, [pc, #268]	; (800ec7c <mnist_nn_configure_weights+0x1a4>)
 800eb6e:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 75008);
 800eb70:	4b3e      	ldr	r3, [pc, #248]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	4b42      	ldr	r3, [pc, #264]	; (800ec80 <mnist_nn_configure_weights+0x1a8>)
 800eb76:	4413      	add	r3, r2
 800eb78:	4a40      	ldr	r2, [pc, #256]	; (800ec7c <mnist_nn_configure_weights+0x1a4>)
 800eb7a:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800eb7c:	4b41      	ldr	r3, [pc, #260]	; (800ec84 <mnist_nn_configure_weights+0x1ac>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb84:	4a3f      	ldr	r2, [pc, #252]	; (800ec84 <mnist_nn_configure_weights+0x1ac>)
 800eb86:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 75264);
 800eb88:	4b38      	ldr	r3, [pc, #224]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 800eb90:	4a3c      	ldr	r2, [pc, #240]	; (800ec84 <mnist_nn_configure_weights+0x1ac>)
 800eb92:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 75264);
 800eb94:	4b35      	ldr	r3, [pc, #212]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 800eb9c:	4a39      	ldr	r2, [pc, #228]	; (800ec84 <mnist_nn_configure_weights+0x1ac>)
 800eb9e:	60d3      	str	r3, [r2, #12]
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800eba0:	4b39      	ldr	r3, [pc, #228]	; (800ec88 <mnist_nn_configure_weights+0x1b0>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eba8:	4a37      	ldr	r2, [pc, #220]	; (800ec88 <mnist_nn_configure_weights+0x1b0>)
 800ebaa:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 222720);
 800ebac:	4b2f      	ldr	r3, [pc, #188]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	4b36      	ldr	r3, [pc, #216]	; (800ec8c <mnist_nn_configure_weights+0x1b4>)
 800ebb2:	4413      	add	r3, r2
 800ebb4:	4a34      	ldr	r2, [pc, #208]	; (800ec88 <mnist_nn_configure_weights+0x1b0>)
 800ebb6:	6093      	str	r3, [r2, #8]
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 222720);
 800ebb8:	4b2c      	ldr	r3, [pc, #176]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	4b33      	ldr	r3, [pc, #204]	; (800ec8c <mnist_nn_configure_weights+0x1b4>)
 800ebbe:	4413      	add	r3, r2
 800ebc0:	4a31      	ldr	r2, [pc, #196]	; (800ec88 <mnist_nn_configure_weights+0x1b0>)
 800ebc2:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ebc4:	4b32      	ldr	r3, [pc, #200]	; (800ec90 <mnist_nn_configure_weights+0x1b8>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebcc:	4a30      	ldr	r2, [pc, #192]	; (800ec90 <mnist_nn_configure_weights+0x1b8>)
 800ebce:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 222976);
 800ebd0:	4b26      	ldr	r3, [pc, #152]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	4b2f      	ldr	r3, [pc, #188]	; (800ec94 <mnist_nn_configure_weights+0x1bc>)
 800ebd6:	4413      	add	r3, r2
 800ebd8:	4a2d      	ldr	r2, [pc, #180]	; (800ec90 <mnist_nn_configure_weights+0x1b8>)
 800ebda:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 222976);
 800ebdc:	4b23      	ldr	r3, [pc, #140]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	4b2c      	ldr	r3, [pc, #176]	; (800ec94 <mnist_nn_configure_weights+0x1bc>)
 800ebe2:	4413      	add	r3, r2
 800ebe4:	4a2a      	ldr	r2, [pc, #168]	; (800ec90 <mnist_nn_configure_weights+0x1b8>)
 800ebe6:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	; (800ec98 <mnist_nn_configure_weights+0x1c0>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebf0:	4a29      	ldr	r2, [pc, #164]	; (800ec98 <mnist_nn_configure_weights+0x1c0>)
 800ebf2:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 370432);
 800ebf4:	4b1d      	ldr	r3, [pc, #116]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	4b28      	ldr	r3, [pc, #160]	; (800ec9c <mnist_nn_configure_weights+0x1c4>)
 800ebfa:	4413      	add	r3, r2
 800ebfc:	4a26      	ldr	r2, [pc, #152]	; (800ec98 <mnist_nn_configure_weights+0x1c0>)
 800ebfe:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 370432);
 800ec00:	4b1a      	ldr	r3, [pc, #104]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	4b25      	ldr	r3, [pc, #148]	; (800ec9c <mnist_nn_configure_weights+0x1c4>)
 800ec06:	4413      	add	r3, r2
 800ec08:	4a23      	ldr	r2, [pc, #140]	; (800ec98 <mnist_nn_configure_weights+0x1c0>)
 800ec0a:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ec0c:	4b24      	ldr	r3, [pc, #144]	; (800eca0 <mnist_nn_configure_weights+0x1c8>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec14:	4a22      	ldr	r2, [pc, #136]	; (800eca0 <mnist_nn_configure_weights+0x1c8>)
 800ec16:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 370688);
 800ec18:	4b14      	ldr	r3, [pc, #80]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f503 23b5 	add.w	r3, r3, #370688	; 0x5a800
 800ec20:	4a1f      	ldr	r2, [pc, #124]	; (800eca0 <mnist_nn_configure_weights+0x1c8>)
 800ec22:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 370688);
 800ec24:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f503 23b5 	add.w	r3, r3, #370688	; 0x5a800
 800ec2c:	4a1c      	ldr	r2, [pc, #112]	; (800eca0 <mnist_nn_configure_weights+0x1c8>)
 800ec2e:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ec30:	4b1c      	ldr	r3, [pc, #112]	; (800eca4 <mnist_nn_configure_weights+0x1cc>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec38:	4a1a      	ldr	r2, [pc, #104]	; (800eca4 <mnist_nn_configure_weights+0x1cc>)
 800ec3a:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_mnist_nn_weights_map[0] + 373248);
 800ec3c:	4b0b      	ldr	r3, [pc, #44]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	4b19      	ldr	r3, [pc, #100]	; (800eca8 <mnist_nn_configure_weights+0x1d0>)
 800ec42:	4413      	add	r3, r2
 800ec44:	4a17      	ldr	r2, [pc, #92]	; (800eca4 <mnist_nn_configure_weights+0x1cc>)
 800ec46:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_mnist_nn_weights_map[0] + 373248);
 800ec48:	4b08      	ldr	r3, [pc, #32]	; (800ec6c <mnist_nn_configure_weights+0x194>)
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	4b16      	ldr	r3, [pc, #88]	; (800eca8 <mnist_nn_configure_weights+0x1d0>)
 800ec4e:	4413      	add	r3, r2
 800ec50:	4a14      	ldr	r2, [pc, #80]	; (800eca4 <mnist_nn_configure_weights+0x1cc>)
 800ec52:	60d3      	str	r3, [r2, #12]
    return true;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e005      	b.n	800ec64 <mnist_nn_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ec58:	2212      	movs	r2, #18
 800ec5a:	2130      	movs	r1, #48	; 0x30
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 fa91 	bl	800f184 <ai_platform_network_set_error>
  return false;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	24009d30 	.word	0x24009d30
 800ec70:	240000f8 	.word	0x240000f8
 800ec74:	24000108 	.word	0x24000108
 800ec78:	24000118 	.word	0x24000118
 800ec7c:	24000128 	.word	0x24000128
 800ec80:	00012500 	.word	0x00012500
 800ec84:	24000138 	.word	0x24000138
 800ec88:	24000148 	.word	0x24000148
 800ec8c:	00036600 	.word	0x00036600
 800ec90:	24000158 	.word	0x24000158
 800ec94:	00036700 	.word	0x00036700
 800ec98:	24000168 	.word	0x24000168
 800ec9c:	0005a700 	.word	0x0005a700
 800eca0:	24000178 	.word	0x24000178
 800eca4:	24000188 	.word	0x24000188
 800eca8:	0005b200 	.word	0x0005b200

0800ecac <ai_mnist_nn_get_error>:
}


AI_API_ENTRY
ai_error ai_mnist_nn_get_error(ai_handle network)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fa59 	bl	800f16c <ai_platform_network_get_error>
 800ecba:	4603      	mov	r3, r0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <ai_mnist_nn_create>:


AI_API_ENTRY
ai_error ai_mnist_nn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af02      	add	r7, sp, #8
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ecce:	2300      	movs	r3, #0
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	2305      	movs	r3, #5
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	4a04      	ldr	r2, [pc, #16]	; (800ecec <ai_mnist_nn_create+0x28>)
 800ecda:	6839      	ldr	r1, [r7, #0]
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 fb45 	bl	800f36c <ai_platform_network_create>
 800ece2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	24000b08 	.word	0x24000b08

0800ecf0 <ai_mnist_nn_create_and_init>:


AI_API_ENTRY
ai_error ai_mnist_nn_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b094      	sub	sp, #80	; 0x50
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_mnist_nn_create(network, AI_MNIST_NN_DATA_CONFIG);
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f7ff ffe0 	bl	800ecc4 <ai_mnist_nn_create>
 800ed04:	4603      	mov	r3, r0
 800ed06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (err.type != AI_ERROR_NONE) {
 800ed08:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <ai_mnist_nn_create_and_init+0x24>
    return err;
 800ed10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed12:	e067      	b.n	800ede4 <ai_mnist_nn_create_and_init+0xf4>
  }
  
  if (ai_mnist_nn_data_params_get(&params) != true) {
 800ed14:	f107 0310 	add.w	r3, r7, #16
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 f8e7 	bl	800eeec <ai_mnist_nn_data_params_get>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f083 0301 	eor.w	r3, r3, #1
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d008      	beq.n	800ed3c <ai_mnist_nn_create_and_init+0x4c>
    err = ai_mnist_nn_get_error(*network);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7ff ffbc 	bl	800ecac <ai_mnist_nn_get_error>
 800ed34:	4603      	mov	r3, r0
 800ed36:	64bb      	str	r3, [r7, #72]	; 0x48
    return err;
 800ed38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed3a:	e053      	b.n	800ede4 <ai_mnist_nn_create_and_init+0xf4>
  }
#if defined(AI_MNIST_NN_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ed42:	e012      	b.n	800ed6a <ai_mnist_nn_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800ed44:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 800ed48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	4413      	add	r3, r2
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	f107 0310 	add.w	r3, r7, #16
 800ed58:	330c      	adds	r3, #12
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 f92c 	bl	800efb8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ed60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ed64:	3301      	adds	r3, #1
 800ed66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d004      	beq.n	800ed7a <ai_mnist_nn_create_and_init+0x8a>
 800ed70:	8bfb      	ldrh	r3, [r7, #30]
 800ed72:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d3e4      	bcc.n	800ed44 <ai_mnist_nn_create_and_init+0x54>
  }
#endif
#if defined(AI_MNIST_NN_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ed80:	e012      	b.n	800eda8 <ai_mnist_nn_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800ed82:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800ed86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	4413      	add	r3, r2
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	f107 0310 	add.w	r3, r7, #16
 800ed96:	3304      	adds	r3, #4
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f000 f90d 	bl	800efb8 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ed9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800eda2:	3301      	adds	r3, #1
 800eda4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d004      	beq.n	800edb8 <ai_mnist_nn_create_and_init+0xc8>
 800edae:	8afb      	ldrh	r3, [r7, #22]
 800edb0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d3e4      	bcc.n	800ed82 <ai_mnist_nn_create_and_init+0x92>
  }
#endif
  if (ai_mnist_nn_init(*network, &params) != true) {
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f107 0210 	add.w	r2, r7, #16
 800edc0:	4611      	mov	r1, r2
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 f846 	bl	800ee54 <ai_mnist_nn_init>
 800edc8:	4603      	mov	r3, r0
 800edca:	f083 0301 	eor.w	r3, r3, #1
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d006      	beq.n	800ede2 <ai_mnist_nn_create_and_init+0xf2>
    err = ai_mnist_nn_get_error(*network);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff ff67 	bl	800ecac <ai_mnist_nn_get_error>
 800edde:	4603      	mov	r3, r0
 800ede0:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  return err;
 800ede2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3750      	adds	r7, #80	; 0x50
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <ai_mnist_nn_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_mnist_nn_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d104      	bne.n	800ee06 <ai_mnist_nn_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800edfc:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <ai_mnist_nn_inputs_get+0x2c>)
 800edfe:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a06      	ldr	r2, [pc, #24]	; (800ee1c <ai_mnist_nn_inputs_get+0x30>)
 800ee04:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ee06:	6839      	ldr	r1, [r7, #0]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 f9c1 	bl	800f190 <ai_platform_inputs_get>
 800ee0e:	4603      	mov	r3, r0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	24000b08 	.word	0x24000b08
 800ee1c:	a1c00100 	.word	0xa1c00100

0800ee20 <ai_mnist_nn_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_mnist_nn_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d104      	bne.n	800ee3a <ai_mnist_nn_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ee30:	4b06      	ldr	r3, [pc, #24]	; (800ee4c <ai_mnist_nn_outputs_get+0x2c>)
 800ee32:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a06      	ldr	r2, [pc, #24]	; (800ee50 <ai_mnist_nn_outputs_get+0x30>)
 800ee38:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ee3a:	6839      	ldr	r1, [r7, #0]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 fa1f 	bl	800f280 <ai_platform_outputs_get>
 800ee42:	4603      	mov	r3, r0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	24000b08 	.word	0x24000b08
 800ee50:	a1c00100 	.word	0xa1c00100

0800ee54 <ai_mnist_nn_init>:


AI_API_ENTRY
ai_bool ai_mnist_nn_init(
  ai_handle network, const ai_network_params* params)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 fac5 	bl	800f3f0 <ai_platform_network_init>
 800ee66:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d101      	bne.n	800ee76 <ai_mnist_nn_init+0x22>
 800ee72:	2300      	movs	r3, #0
 800ee74:	e026      	b.n	800eec4 <ai_mnist_nn_init+0x70>
  ok &= mnist_nn_configure_weights(net_ctx, params);
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f7ff fe2d 	bl	800ead8 <mnist_nn_configure_weights>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	461a      	mov	r2, r3
 800ee82:	7afb      	ldrb	r3, [r7, #11]
 800ee84:	4013      	ands	r3, r2
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	bf14      	ite	ne
 800ee8a:	2301      	movne	r3, #1
 800ee8c:	2300      	moveq	r3, #0
 800ee8e:	72fb      	strb	r3, [r7, #11]
  ok &= mnist_nn_configure_activations(net_ctx, params);
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f7ff fd80 	bl	800e998 <mnist_nn_configure_activations>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	7afb      	ldrb	r3, [r7, #11]
 800ee9e:	4013      	ands	r3, r2
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	bf14      	ite	ne
 800eea4:	2301      	movne	r3, #1
 800eea6:	2300      	moveq	r3, #0
 800eea8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fb60 	bl	800f570 <ai_platform_network_post_init>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	7afb      	ldrb	r3, [r7, #11]
 800eeb6:	4013      	ands	r3, r2
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	bf14      	ite	ne
 800eebc:	2301      	movne	r3, #1
 800eebe:	2300      	moveq	r3, #0
 800eec0:	72fb      	strb	r3, [r7, #11]

  return ok;
 800eec2:	7afb      	ldrb	r3, [r7, #11]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <ai_mnist_nn_run>:


AI_API_ENTRY
ai_i32 ai_mnist_nn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	68b9      	ldr	r1, [r7, #8]
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f000 fb77 	bl	800f5d0 <ai_platform_network_process>
 800eee2:	4603      	mov	r3, r0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <ai_mnist_nn_data_params_get>:
 * @ingroup mnist_nn_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_mnist_nn_data_params_get(ai_network_params* params)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d101      	bne.n	800eefe <ai_mnist_nn_data_params_get+0x12>
 800eefa:	2300      	movs	r3, #0
 800eefc:	e016      	b.n	800ef2c <ai_mnist_nn_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800eefe:	4a0d      	ldr	r2, [pc, #52]	; (800ef34 <ai_mnist_nn_data_params_get+0x48>)
 800ef00:	f107 0310 	add.w	r3, r7, #16
 800ef04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef08:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNIST_NN_DATA_ACTIVATIONS_COUNT, g_mnist_nn_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800ef0c:	4a0a      	ldr	r2, [pc, #40]	; (800ef38 <ai_mnist_nn_data_params_get+0x4c>)
 800ef0e:	f107 0308 	add.w	r3, r7, #8
 800ef12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef16:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MNIST_NN_DATA_WEIGHTS_COUNT, g_mnist_nn_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800ef1a:	f107 0210 	add.w	r2, r7, #16
 800ef1e:	f107 0308 	add.w	r3, r7, #8
 800ef22:	4619      	mov	r1, r3
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 f907 	bl	800f138 <ai_platform_bind_network_params>
 800ef2a:	4603      	mov	r3, r0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3718      	adds	r7, #24
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	08016800 	.word	0x08016800
 800ef38:	08016808 	.word	0x08016808

0800ef3c <ai_buffer_get_size>:
 800ef3c:	b368      	cbz	r0, 800ef9a <ai_buffer_get_size+0x5e>
 800ef3e:	4b17      	ldr	r3, [pc, #92]	; (800ef9c <ai_buffer_get_size+0x60>)
 800ef40:	4a17      	ldr	r2, [pc, #92]	; (800efa0 <ai_buffer_get_size+0x64>)
 800ef42:	b410      	push	{r4}
 800ef44:	6804      	ldr	r4, [r0, #0]
 800ef46:	4023      	ands	r3, r4
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d123      	bne.n	800ef94 <ai_buffer_get_size+0x58>
 800ef4c:	b311      	cbz	r1, 800ef94 <ai_buffer_get_size+0x58>
 800ef4e:	6984      	ldr	r4, [r0, #24]
 800ef50:	6862      	ldr	r2, [r4, #4]
 800ef52:	321f      	adds	r2, #31
 800ef54:	f022 021f 	bic.w	r2, r2, #31
 800ef58:	7d03      	ldrb	r3, [r0, #20]
 800ef5a:	6941      	ldr	r1, [r0, #20]
 800ef5c:	f1a3 0301 	sub.w	r3, r3, #1
 800ef60:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ef64:	fab3 f383 	clz	r3, r3
 800ef68:	095b      	lsrs	r3, r3, #5
 800ef6a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ef6e:	da0c      	bge.n	800ef8a <ai_buffer_get_size+0x4e>
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d103      	bne.n	800ef7c <ai_buffer_get_size+0x40>
 800ef74:	2802      	cmp	r0, #2
 800ef76:	f04f 0302 	mov.w	r3, #2
 800ef7a:	d006      	beq.n	800ef8a <ai_buffer_get_size+0x4e>
 800ef7c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ef80:	3301      	adds	r3, #1
 800ef82:	4298      	cmp	r0, r3
 800ef84:	fb01 f202 	mul.w	r2, r1, r2
 800ef88:	d1f2      	bne.n	800ef70 <ai_buffer_get_size+0x34>
 800ef8a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ef8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef92:	4770      	bx	lr
 800ef94:	6984      	ldr	r4, [r0, #24]
 800ef96:	6862      	ldr	r2, [r4, #4]
 800ef98:	e7de      	b.n	800ef58 <ai_buffer_get_size+0x1c>
 800ef9a:	4770      	bx	lr
 800ef9c:	017fffff 	.word	0x017fffff
 800efa0:	000400c0 	.word	0x000400c0

0800efa4 <ai_buffer_array_sane>:
 800efa4:	b138      	cbz	r0, 800efb6 <ai_buffer_array_sane+0x12>
 800efa6:	6843      	ldr	r3, [r0, #4]
 800efa8:	b123      	cbz	r3, 800efb4 <ai_buffer_array_sane+0x10>
 800efaa:	8840      	ldrh	r0, [r0, #2]
 800efac:	3800      	subs	r0, #0
 800efae:	bf18      	it	ne
 800efb0:	2001      	movne	r0, #1
 800efb2:	4770      	bx	lr
 800efb4:	4618      	mov	r0, r3
 800efb6:	4770      	bx	lr

0800efb8 <ai_buffer_array_item_set_address>:
 800efb8:	b150      	cbz	r0, 800efd0 <ai_buffer_array_item_set_address+0x18>
 800efba:	6843      	ldr	r3, [r0, #4]
 800efbc:	b14b      	cbz	r3, 800efd2 <ai_buffer_array_item_set_address+0x1a>
 800efbe:	8840      	ldrh	r0, [r0, #2]
 800efc0:	b900      	cbnz	r0, 800efc4 <ai_buffer_array_item_set_address+0xc>
 800efc2:	4770      	bx	lr
 800efc4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800efc8:	2001      	movs	r0, #1
 800efca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800efce:	605a      	str	r2, [r3, #4]
 800efd0:	4770      	bx	lr
 800efd2:	4618      	mov	r0, r3
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop

0800efd8 <ai_platform_get_weights_map>:
 800efd8:	2900      	cmp	r1, #0
 800efda:	bf18      	it	ne
 800efdc:	2800      	cmpne	r0, #0
 800efde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe0:	bf0c      	ite	eq
 800efe2:	2401      	moveq	r4, #1
 800efe4:	2400      	movne	r4, #0
 800efe6:	2a00      	cmp	r2, #0
 800efe8:	bf08      	it	eq
 800efea:	f044 0401 	orreq.w	r4, r4, #1
 800efee:	b114      	cbz	r4, 800eff6 <ai_platform_get_weights_map+0x1e>
 800eff0:	2400      	movs	r4, #0
 800eff2:	4620      	mov	r0, r4
 800eff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff6:	4616      	mov	r6, r2
 800eff8:	4b22      	ldr	r3, [pc, #136]	; (800f084 <ai_platform_get_weights_map+0xac>)
 800effa:	6812      	ldr	r2, [r2, #0]
 800effc:	4605      	mov	r5, r0
 800effe:	460f      	mov	r7, r1
 800f000:	429a      	cmp	r2, r3
 800f002:	d022      	beq.n	800f04a <ai_platform_get_weights_map+0x72>
 800f004:	6870      	ldr	r0, [r6, #4]
 800f006:	2800      	cmp	r0, #0
 800f008:	d0f2      	beq.n	800eff0 <ai_platform_get_weights_map+0x18>
 800f00a:	6806      	ldr	r6, [r0, #0]
 800f00c:	429e      	cmp	r6, r3
 800f00e:	d006      	beq.n	800f01e <ai_platform_get_weights_map+0x46>
 800f010:	f1a1 0401 	sub.w	r4, r1, #1
 800f014:	6028      	str	r0, [r5, #0]
 800f016:	fab4 f484 	clz	r4, r4
 800f01a:	0964      	lsrs	r4, r4, #5
 800f01c:	e7e9      	b.n	800eff2 <ai_platform_get_weights_map+0x1a>
 800f01e:	3d04      	subs	r5, #4
 800f020:	4602      	mov	r2, r0
 800f022:	4621      	mov	r1, r4
 800f024:	e000      	b.n	800f028 <ai_platform_get_weights_map+0x50>
 800f026:	4619      	mov	r1, r3
 800f028:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f02c:	42b3      	cmp	r3, r6
 800f02e:	d025      	beq.n	800f07c <ai_platform_get_weights_map+0xa4>
 800f030:	f845 3f04 	str.w	r3, [r5, #4]!
 800f034:	1c4b      	adds	r3, r1, #1
 800f036:	429f      	cmp	r7, r3
 800f038:	d8f5      	bhi.n	800f026 <ai_platform_get_weights_map+0x4e>
 800f03a:	d1da      	bne.n	800eff2 <ai_platform_get_weights_map+0x1a>
 800f03c:	3102      	adds	r1, #2
 800f03e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f042:	42b3      	cmp	r3, r6
 800f044:	d1d5      	bne.n	800eff2 <ai_platform_get_weights_map+0x1a>
 800f046:	2401      	movs	r4, #1
 800f048:	e7d3      	b.n	800eff2 <ai_platform_get_weights_map+0x1a>
 800f04a:	1d30      	adds	r0, r6, #4
 800f04c:	f7ff ffaa 	bl	800efa4 <ai_buffer_array_sane>
 800f050:	2800      	cmp	r0, #0
 800f052:	d0cd      	beq.n	800eff0 <ai_platform_get_weights_map+0x18>
 800f054:	88f3      	ldrh	r3, [r6, #6]
 800f056:	429f      	cmp	r7, r3
 800f058:	d1ca      	bne.n	800eff0 <ai_platform_get_weights_map+0x18>
 800f05a:	3d04      	subs	r5, #4
 800f05c:	4622      	mov	r2, r4
 800f05e:	68b3      	ldr	r3, [r6, #8]
 800f060:	4423      	add	r3, r4
 800f062:	341c      	adds	r4, #28
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	b123      	cbz	r3, 800f072 <ai_platform_get_weights_map+0x9a>
 800f068:	3201      	adds	r2, #1
 800f06a:	f845 3f04 	str.w	r3, [r5, #4]!
 800f06e:	4297      	cmp	r7, r2
 800f070:	d8f5      	bhi.n	800f05e <ai_platform_get_weights_map+0x86>
 800f072:	1abc      	subs	r4, r7, r2
 800f074:	fab4 f484 	clz	r4, r4
 800f078:	0964      	lsrs	r4, r4, #5
 800f07a:	e7ba      	b.n	800eff2 <ai_platform_get_weights_map+0x1a>
 800f07c:	428f      	cmp	r7, r1
 800f07e:	d1b8      	bne.n	800eff2 <ai_platform_get_weights_map+0x1a>
 800f080:	e7e1      	b.n	800f046 <ai_platform_get_weights_map+0x6e>
 800f082:	bf00      	nop
 800f084:	a1facade 	.word	0xa1facade

0800f088 <ai_platform_get_activations_map>:
 800f088:	2900      	cmp	r1, #0
 800f08a:	bf18      	it	ne
 800f08c:	2800      	cmpne	r0, #0
 800f08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f090:	bf0c      	ite	eq
 800f092:	2401      	moveq	r4, #1
 800f094:	2400      	movne	r4, #0
 800f096:	2a00      	cmp	r2, #0
 800f098:	bf08      	it	eq
 800f09a:	f044 0401 	orreq.w	r4, r4, #1
 800f09e:	b114      	cbz	r4, 800f0a6 <ai_platform_get_activations_map+0x1e>
 800f0a0:	2400      	movs	r4, #0
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a6:	4616      	mov	r6, r2
 800f0a8:	4b22      	ldr	r3, [pc, #136]	; (800f134 <ai_platform_get_activations_map+0xac>)
 800f0aa:	6812      	ldr	r2, [r2, #0]
 800f0ac:	4605      	mov	r5, r0
 800f0ae:	460f      	mov	r7, r1
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d022      	beq.n	800f0fa <ai_platform_get_activations_map+0x72>
 800f0b4:	6a30      	ldr	r0, [r6, #32]
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d0f2      	beq.n	800f0a0 <ai_platform_get_activations_map+0x18>
 800f0ba:	6806      	ldr	r6, [r0, #0]
 800f0bc:	429e      	cmp	r6, r3
 800f0be:	d006      	beq.n	800f0ce <ai_platform_get_activations_map+0x46>
 800f0c0:	f1a1 0401 	sub.w	r4, r1, #1
 800f0c4:	6028      	str	r0, [r5, #0]
 800f0c6:	fab4 f484 	clz	r4, r4
 800f0ca:	0964      	lsrs	r4, r4, #5
 800f0cc:	e7e9      	b.n	800f0a2 <ai_platform_get_activations_map+0x1a>
 800f0ce:	3d04      	subs	r5, #4
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	4621      	mov	r1, r4
 800f0d4:	e000      	b.n	800f0d8 <ai_platform_get_activations_map+0x50>
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800f0dc:	42b3      	cmp	r3, r6
 800f0de:	d026      	beq.n	800f12e <ai_platform_get_activations_map+0xa6>
 800f0e0:	f845 3f04 	str.w	r3, [r5, #4]!
 800f0e4:	1c4b      	adds	r3, r1, #1
 800f0e6:	429f      	cmp	r7, r3
 800f0e8:	d8f5      	bhi.n	800f0d6 <ai_platform_get_activations_map+0x4e>
 800f0ea:	d1da      	bne.n	800f0a2 <ai_platform_get_activations_map+0x1a>
 800f0ec:	3102      	adds	r1, #2
 800f0ee:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800f0f2:	42b3      	cmp	r3, r6
 800f0f4:	d1d5      	bne.n	800f0a2 <ai_platform_get_activations_map+0x1a>
 800f0f6:	2401      	movs	r4, #1
 800f0f8:	e7d3      	b.n	800f0a2 <ai_platform_get_activations_map+0x1a>
 800f0fa:	f106 000c 	add.w	r0, r6, #12
 800f0fe:	f7ff ff51 	bl	800efa4 <ai_buffer_array_sane>
 800f102:	2800      	cmp	r0, #0
 800f104:	d0cc      	beq.n	800f0a0 <ai_platform_get_activations_map+0x18>
 800f106:	89f3      	ldrh	r3, [r6, #14]
 800f108:	429f      	cmp	r7, r3
 800f10a:	d1c9      	bne.n	800f0a0 <ai_platform_get_activations_map+0x18>
 800f10c:	3d04      	subs	r5, #4
 800f10e:	4622      	mov	r2, r4
 800f110:	6933      	ldr	r3, [r6, #16]
 800f112:	4423      	add	r3, r4
 800f114:	341c      	adds	r4, #28
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	b123      	cbz	r3, 800f124 <ai_platform_get_activations_map+0x9c>
 800f11a:	3201      	adds	r2, #1
 800f11c:	f845 3f04 	str.w	r3, [r5, #4]!
 800f120:	4297      	cmp	r7, r2
 800f122:	d8f5      	bhi.n	800f110 <ai_platform_get_activations_map+0x88>
 800f124:	1abc      	subs	r4, r7, r2
 800f126:	fab4 f484 	clz	r4, r4
 800f12a:	0964      	lsrs	r4, r4, #5
 800f12c:	e7b9      	b.n	800f0a2 <ai_platform_get_activations_map+0x1a>
 800f12e:	428f      	cmp	r7, r1
 800f130:	d1b7      	bne.n	800f0a2 <ai_platform_get_activations_map+0x1a>
 800f132:	e7e0      	b.n	800f0f6 <ai_platform_get_activations_map+0x6e>
 800f134:	a1facade 	.word	0xa1facade

0800f138 <ai_platform_bind_network_params>:
 800f138:	2a00      	cmp	r2, #0
 800f13a:	bf18      	it	ne
 800f13c:	2900      	cmpne	r1, #0
 800f13e:	d010      	beq.n	800f162 <ai_platform_bind_network_params+0x2a>
 800f140:	b178      	cbz	r0, 800f162 <ai_platform_bind_network_params+0x2a>
 800f142:	4603      	mov	r3, r0
 800f144:	4808      	ldr	r0, [pc, #32]	; (800f168 <ai_platform_bind_network_params+0x30>)
 800f146:	f103 0c0c 	add.w	ip, r3, #12
 800f14a:	f843 0b04 	str.w	r0, [r3], #4
 800f14e:	c903      	ldmia	r1, {r0, r1}
 800f150:	e883 0003 	stmia.w	r3, {r0, r1}
 800f154:	2301      	movs	r3, #1
 800f156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f15a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f15e:	4618      	mov	r0, r3
 800f160:	4770      	bx	lr
 800f162:	2300      	movs	r3, #0
 800f164:	4618      	mov	r0, r3
 800f166:	4770      	bx	lr
 800f168:	a1facade 	.word	0xa1facade

0800f16c <ai_platform_network_get_error>:
 800f16c:	4b04      	ldr	r3, [pc, #16]	; (800f180 <ai_platform_network_get_error+0x14>)
 800f16e:	6802      	ldr	r2, [r0, #0]
 800f170:	4393      	bics	r3, r2
 800f172:	d102      	bne.n	800f17a <ai_platform_network_get_error+0xe>
 800f174:	300c      	adds	r0, #12
 800f176:	f000 bc73 	b.w	800fa60 <core_get_error>
 800f17a:	f241 0010 	movw	r0, #4112	; 0x1010
 800f17e:	4770      	bx	lr
 800f180:	a1c00100 	.word	0xa1c00100

0800f184 <ai_platform_network_set_error>:
 800f184:	b110      	cbz	r0, 800f18c <ai_platform_network_set_error+0x8>
 800f186:	300c      	adds	r0, #12
 800f188:	f000 bc70 	b.w	800fa6c <core_set_error>
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop

0800f190 <ai_platform_inputs_get>:
 800f190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f194:	4b39      	ldr	r3, [pc, #228]	; (800f27c <ai_platform_inputs_get+0xec>)
 800f196:	b085      	sub	sp, #20
 800f198:	6802      	ldr	r2, [r0, #0]
 800f19a:	4393      	bics	r3, r2
 800f19c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f1a0:	d162      	bne.n	800f268 <ai_platform_inputs_get+0xd8>
 800f1a2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d051      	beq.n	800f24c <ai_platform_inputs_get+0xbc>
 800f1a8:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800f1ac:	f1ba 0f00 	cmp.w	sl, #0
 800f1b0:	d04c      	beq.n	800f24c <ai_platform_inputs_get+0xbc>
 800f1b2:	f04f 0900 	mov.w	r9, #0
 800f1b6:	464d      	mov	r5, r9
 800f1b8:	e016      	b.n	800f1e8 <ai_platform_inputs_get+0x58>
 800f1ba:	9901      	ldr	r1, [sp, #4]
 800f1bc:	2301      	movs	r3, #1
 800f1be:	f848 3001 	str.w	r3, [r8, r1]
 800f1c2:	69b1      	ldr	r1, [r6, #24]
 800f1c4:	f04f 0301 	mov.w	r3, #1
 800f1c8:	684e      	ldr	r6, [r1, #4]
 800f1ca:	3501      	adds	r5, #1
 800f1cc:	f109 091c 	add.w	r9, r9, #28
 800f1d0:	7523      	strb	r3, [r4, #20]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	6961      	ldr	r1, [r4, #20]
 800f1d6:	6020      	str	r0, [r4, #0]
 800f1d8:	f36b 211f 	bfi	r1, fp, #8, #24
 800f1dc:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f1e0:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f1e4:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f1e8:	f8ba 3000 	ldrh.w	r3, [sl]
 800f1ec:	b2ac      	uxth	r4, r5
 800f1ee:	42ab      	cmp	r3, r5
 800f1f0:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f1f4:	9301      	str	r3, [sp, #4]
 800f1f6:	d93b      	bls.n	800f270 <ai_platform_inputs_get+0xe0>
 800f1f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d037      	beq.n	800f270 <ai_platform_inputs_get+0xe0>
 800f200:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f204:	2e00      	cmp	r6, #0
 800f206:	d033      	beq.n	800f270 <ai_platform_inputs_get+0xe0>
 800f208:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f20c:	69b2      	ldr	r2, [r6, #24]
 800f20e:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f212:	6810      	ldr	r0, [r2, #0]
 800f214:	68b3      	ldr	r3, [r6, #8]
 800f216:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f21a:	68f2      	ldr	r2, [r6, #12]
 800f21c:	444c      	add	r4, r9
 800f21e:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f222:	9200      	str	r2, [sp, #0]
 800f224:	f002 fc52 	bl	8011acc <ai_array_to_buffer_fmt>
 800f228:	69b1      	ldr	r1, [r6, #24]
 800f22a:	9a00      	ldr	r2, [sp, #0]
 800f22c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f230:	2f00      	cmp	r7, #0
 800f232:	d0c7      	beq.n	800f1c4 <ai_platform_inputs_get+0x34>
 800f234:	2100      	movs	r1, #0
 800f236:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f23a:	6831      	ldr	r1, [r6, #0]
 800f23c:	6079      	str	r1, [r7, #4]
 800f23e:	b111      	cbz	r1, 800f246 <ai_platform_inputs_get+0xb6>
 800f240:	8849      	ldrh	r1, [r1, #2]
 800f242:	2900      	cmp	r1, #0
 800f244:	d1b9      	bne.n	800f1ba <ai_platform_inputs_get+0x2a>
 800f246:	69b1      	ldr	r1, [r6, #24]
 800f248:	2700      	movs	r7, #0
 800f24a:	e7bb      	b.n	800f1c4 <ai_platform_inputs_get+0x34>
 800f24c:	9803      	ldr	r0, [sp, #12]
 800f24e:	2400      	movs	r4, #0
 800f250:	2218      	movs	r2, #24
 800f252:	2111      	movs	r1, #17
 800f254:	300c      	adds	r0, #12
 800f256:	f000 fc09 	bl	800fa6c <core_set_error>
 800f25a:	4620      	mov	r0, r4
 800f25c:	9b02      	ldr	r3, [sp, #8]
 800f25e:	b103      	cbz	r3, 800f262 <ai_platform_inputs_get+0xd2>
 800f260:	801c      	strh	r4, [r3, #0]
 800f262:	b005      	add	sp, #20
 800f264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f268:	2000      	movs	r0, #0
 800f26a:	b005      	add	sp, #20
 800f26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f270:	2c00      	cmp	r4, #0
 800f272:	d0eb      	beq.n	800f24c <ai_platform_inputs_get+0xbc>
 800f274:	f8da 3008 	ldr.w	r3, [sl, #8]
 800f278:	6858      	ldr	r0, [r3, #4]
 800f27a:	e7ef      	b.n	800f25c <ai_platform_inputs_get+0xcc>
 800f27c:	a1c00100 	.word	0xa1c00100

0800f280 <ai_platform_outputs_get>:
 800f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f284:	4b38      	ldr	r3, [pc, #224]	; (800f368 <ai_platform_outputs_get+0xe8>)
 800f286:	b085      	sub	sp, #20
 800f288:	6802      	ldr	r2, [r0, #0]
 800f28a:	4393      	bics	r3, r2
 800f28c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800f290:	d15f      	bne.n	800f352 <ai_platform_outputs_get+0xd2>
 800f292:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800f294:	2b01      	cmp	r3, #1
 800f296:	d94e      	bls.n	800f336 <ai_platform_outputs_get+0xb6>
 800f298:	f04f 0900 	mov.w	r9, #0
 800f29c:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 800f2a0:	464d      	mov	r5, r9
 800f2a2:	e016      	b.n	800f2d2 <ai_platform_outputs_get+0x52>
 800f2a4:	9901      	ldr	r1, [sp, #4]
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	f848 3001 	str.w	r3, [r8, r1]
 800f2ac:	69b1      	ldr	r1, [r6, #24]
 800f2ae:	f04f 0301 	mov.w	r3, #1
 800f2b2:	684e      	ldr	r6, [r1, #4]
 800f2b4:	3501      	adds	r5, #1
 800f2b6:	f109 091c 	add.w	r9, r9, #28
 800f2ba:	7523      	strb	r3, [r4, #20]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	6961      	ldr	r1, [r4, #20]
 800f2c0:	6020      	str	r0, [r4, #0]
 800f2c2:	f36b 211f 	bfi	r1, fp, #8, #24
 800f2c6:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800f2ca:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800f2ce:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800f2d2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800f2d6:	b2ac      	uxth	r4, r5
 800f2d8:	42ab      	cmp	r3, r5
 800f2da:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800f2de:	9301      	str	r3, [sp, #4]
 800f2e0:	d93b      	bls.n	800f35a <ai_platform_outputs_get+0xda>
 800f2e2:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d037      	beq.n	800f35a <ai_platform_outputs_get+0xda>
 800f2ea:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800f2ee:	2e00      	cmp	r6, #0
 800f2f0:	d033      	beq.n	800f35a <ai_platform_outputs_get+0xda>
 800f2f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f2f6:	69b2      	ldr	r2, [r6, #24]
 800f2f8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800f2fc:	6810      	ldr	r0, [r2, #0]
 800f2fe:	68b3      	ldr	r3, [r6, #8]
 800f300:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800f304:	68f2      	ldr	r2, [r6, #12]
 800f306:	444c      	add	r4, r9
 800f308:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800f30c:	9200      	str	r2, [sp, #0]
 800f30e:	f002 fbdd 	bl	8011acc <ai_array_to_buffer_fmt>
 800f312:	69b1      	ldr	r1, [r6, #24]
 800f314:	9a00      	ldr	r2, [sp, #0]
 800f316:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800f31a:	2f00      	cmp	r7, #0
 800f31c:	d0c7      	beq.n	800f2ae <ai_platform_outputs_get+0x2e>
 800f31e:	2100      	movs	r1, #0
 800f320:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800f324:	6831      	ldr	r1, [r6, #0]
 800f326:	6079      	str	r1, [r7, #4]
 800f328:	b111      	cbz	r1, 800f330 <ai_platform_outputs_get+0xb0>
 800f32a:	8849      	ldrh	r1, [r1, #2]
 800f32c:	2900      	cmp	r1, #0
 800f32e:	d1b9      	bne.n	800f2a4 <ai_platform_outputs_get+0x24>
 800f330:	69b1      	ldr	r1, [r6, #24]
 800f332:	2700      	movs	r7, #0
 800f334:	e7bb      	b.n	800f2ae <ai_platform_outputs_get+0x2e>
 800f336:	9803      	ldr	r0, [sp, #12]
 800f338:	2400      	movs	r4, #0
 800f33a:	2218      	movs	r2, #24
 800f33c:	2111      	movs	r1, #17
 800f33e:	300c      	adds	r0, #12
 800f340:	f000 fb94 	bl	800fa6c <core_set_error>
 800f344:	4620      	mov	r0, r4
 800f346:	9b02      	ldr	r3, [sp, #8]
 800f348:	b103      	cbz	r3, 800f34c <ai_platform_outputs_get+0xcc>
 800f34a:	801c      	strh	r4, [r3, #0]
 800f34c:	b005      	add	sp, #20
 800f34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f352:	2000      	movs	r0, #0
 800f354:	b005      	add	sp, #20
 800f356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35a:	2c00      	cmp	r4, #0
 800f35c:	d0eb      	beq.n	800f336 <ai_platform_outputs_get+0xb6>
 800f35e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800f362:	6858      	ldr	r0, [r3, #4]
 800f364:	e7ef      	b.n	800f346 <ai_platform_outputs_get+0xc6>
 800f366:	bf00      	nop
 800f368:	a1c00100 	.word	0xa1c00100

0800f36c <ai_platform_network_create>:
 800f36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f370:	b083      	sub	sp, #12
 800f372:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 800f376:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800f37a:	b320      	cbz	r0, 800f3c6 <ai_platform_network_create+0x5a>
 800f37c:	6002      	str	r2, [r0, #0]
 800f37e:	4616      	mov	r6, r2
 800f380:	461f      	mov	r7, r3
 800f382:	4604      	mov	r4, r0
 800f384:	f000 fb6a 	bl	800fa5c <core_init>
 800f388:	b970      	cbnz	r0, 800f3a8 <ai_platform_network_create+0x3c>
 800f38a:	2530      	movs	r5, #48	; 0x30
 800f38c:	2300      	movs	r3, #0
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	2410      	movs	r4, #16
 800f392:	464a      	mov	r2, r9
 800f394:	4641      	mov	r1, r8
 800f396:	4638      	mov	r0, r7
 800f398:	f002 fc42 	bl	8011c20 <ai_version_get>
 800f39c:	60b0      	str	r0, [r6, #8]
 800f39e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800f3a2:	b003      	add	sp, #12
 800f3a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	4641      	mov	r1, r8
 800f3ac:	4638      	mov	r0, r7
 800f3ae:	f002 fc37 	bl	8011c20 <ai_version_get>
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	2105      	movs	r1, #5
 800f3b8:	2001      	movs	r0, #1
 800f3ba:	f002 fc31 	bl	8011c20 <ai_version_get>
 800f3be:	4285      	cmp	r5, r0
 800f3c0:	d008      	beq.n	800f3d4 <ai_platform_network_create+0x68>
 800f3c2:	2501      	movs	r5, #1
 800f3c4:	e7e2      	b.n	800f38c <ai_platform_network_create+0x20>
 800f3c6:	2510      	movs	r5, #16
 800f3c8:	462c      	mov	r4, r5
 800f3ca:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800f3ce:	b003      	add	sp, #12
 800f3d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3d4:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <ai_platform_network_create+0x80>)
 800f3d6:	a801      	add	r0, sp, #4
 800f3d8:	9301      	str	r3, [sp, #4]
 800f3da:	f000 fb53 	bl	800fa84 <ai_check_custom_types>
 800f3de:	b110      	cbz	r0, 800f3e6 <ai_platform_network_create+0x7a>
 800f3e0:	2400      	movs	r4, #0
 800f3e2:	4625      	mov	r5, r4
 800f3e4:	e7d5      	b.n	800f392 <ai_platform_network_create+0x26>
 800f3e6:	2502      	movs	r5, #2
 800f3e8:	e7d0      	b.n	800f38c <ai_platform_network_create+0x20>
 800f3ea:	bf00      	nop
 800f3ec:	84048403 	.word	0x84048403

0800f3f0 <ai_platform_network_init>:
 800f3f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f4:	4a5c      	ldr	r2, [pc, #368]	; (800f568 <ai_platform_network_init+0x178>)
 800f3f6:	460c      	mov	r4, r1
 800f3f8:	6801      	ldr	r1, [r0, #0]
 800f3fa:	438a      	bics	r2, r1
 800f3fc:	d133      	bne.n	800f466 <ai_platform_network_init+0x76>
 800f3fe:	4605      	mov	r5, r0
 800f400:	2c00      	cmp	r4, #0
 800f402:	f000 8093 	beq.w	800f52c <ai_platform_network_init+0x13c>
 800f406:	f8d4 b000 	ldr.w	fp, [r4]
 800f40a:	4a58      	ldr	r2, [pc, #352]	; (800f56c <ai_platform_network_init+0x17c>)
 800f40c:	4593      	cmp	fp, r2
 800f40e:	d10f      	bne.n	800f430 <ai_platform_network_init+0x40>
 800f410:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800f414:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f418:	4b53      	ldr	r3, [pc, #332]	; (800f568 <ai_platform_network_init+0x178>)
 800f41a:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800f41e:	0c32      	lsrs	r2, r6, #16
 800f420:	4299      	cmp	r1, r3
 800f422:	d02c      	beq.n	800f47e <ai_platform_network_init+0x8e>
 800f424:	2303      	movs	r3, #3
 800f426:	462c      	mov	r4, r5
 800f428:	612b      	str	r3, [r5, #16]
 800f42a:	4620      	mov	r0, r4
 800f42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f430:	4627      	mov	r7, r4
 800f432:	2101      	movs	r1, #1
 800f434:	6864      	ldr	r4, [r4, #4]
 800f436:	4638      	mov	r0, r7
 800f438:	f107 081c 	add.w	r8, r7, #28
 800f43c:	f7ff fd7e 	bl	800ef3c <ai_buffer_get_size>
 800f440:	4606      	mov	r6, r0
 800f442:	2101      	movs	r1, #1
 800f444:	4640      	mov	r0, r8
 800f446:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800f44a:	f7ff fd77 	bl	800ef3c <ai_buffer_get_size>
 800f44e:	b976      	cbnz	r6, 800f46e <ai_platform_network_init+0x7e>
 800f450:	2800      	cmp	r0, #0
 800f452:	d150      	bne.n	800f4f6 <ai_platform_network_init+0x106>
 800f454:	4680      	mov	r8, r0
 800f456:	4686      	mov	lr, r0
 800f458:	4606      	mov	r6, r0
 800f45a:	4607      	mov	r7, r0
 800f45c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800f460:	6829      	ldr	r1, [r5, #0]
 800f462:	0436      	lsls	r6, r6, #16
 800f464:	e7d8      	b.n	800f418 <ai_platform_network_init+0x28>
 800f466:	2400      	movs	r4, #0
 800f468:	4620      	mov	r0, r4
 800f46a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46e:	2800      	cmp	r0, #0
 800f470:	d13b      	bne.n	800f4ea <ai_platform_network_init+0xfa>
 800f472:	4680      	mov	r8, r0
 800f474:	4686      	mov	lr, r0
 800f476:	2c00      	cmp	r4, #0
 800f478:	d05e      	beq.n	800f538 <ai_platform_network_init+0x148>
 800f47a:	2601      	movs	r6, #1
 800f47c:	e7ee      	b.n	800f45c <ai_platform_network_init+0x6c>
 800f47e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800f480:	4293      	cmp	r3, r2
 800f482:	4b3a      	ldr	r3, [pc, #232]	; (800f56c <ai_platform_network_init+0x17c>)
 800f484:	d33e      	bcc.n	800f504 <ai_platform_network_init+0x114>
 800f486:	459b      	cmp	fp, r3
 800f488:	d03e      	beq.n	800f508 <ai_platform_network_init+0x118>
 800f48a:	b1a2      	cbz	r2, 800f4b6 <ai_platform_network_init+0xc6>
 800f48c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800f490:	f04f 0c00 	mov.w	ip, #0
 800f494:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800f498:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800f49a:	eb07 0b0c 	add.w	fp, r7, ip
 800f49e:	4464      	add	r4, ip
 800f4a0:	f10c 0c1c 	add.w	ip, ip, #28
 800f4a4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f4a8:	45cc      	cmp	ip, r9
 800f4aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4ac:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800f4b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f4b4:	d1f0      	bne.n	800f498 <ai_platform_network_init+0xa8>
 800f4b6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800f4b8:	622e      	str	r6, [r5, #32]
 800f4ba:	4553      	cmp	r3, sl
 800f4bc:	d34b      	bcc.n	800f556 <ai_platform_network_init+0x166>
 800f4be:	f1ba 0f00 	cmp.w	sl, #0
 800f4c2:	d025      	beq.n	800f510 <ai_platform_network_init+0x120>
 800f4c4:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800f4c8:	2700      	movs	r7, #0
 800f4ca:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800f4ce:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800f4d0:	eb08 0607 	add.w	r6, r8, r7
 800f4d4:	443c      	add	r4, r7
 800f4d6:	371c      	adds	r7, #28
 800f4d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f4da:	4557      	cmp	r7, sl
 800f4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f4de:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f4e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f4e6:	d1f2      	bne.n	800f4ce <ai_platform_network_init+0xde>
 800f4e8:	e012      	b.n	800f510 <ai_platform_network_init+0x120>
 800f4ea:	f1b9 0f00 	cmp.w	r9, #0
 800f4ee:	d015      	beq.n	800f51c <ai_platform_network_init+0x12c>
 800f4f0:	f04f 0e01 	mov.w	lr, #1
 800f4f4:	e7bf      	b.n	800f476 <ai_platform_network_init+0x86>
 800f4f6:	f1b9 0f00 	cmp.w	r9, #0
 800f4fa:	d00f      	beq.n	800f51c <ai_platform_network_init+0x12c>
 800f4fc:	f04f 0e01 	mov.w	lr, #1
 800f500:	4637      	mov	r7, r6
 800f502:	e7ab      	b.n	800f45c <ai_platform_network_init+0x6c>
 800f504:	459b      	cmp	fp, r3
 800f506:	d11e      	bne.n	800f546 <ai_platform_network_init+0x156>
 800f508:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800f50c:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800f510:	4628      	mov	r0, r5
 800f512:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 800f516:	f000 fadd 	bl	800fad4 <ai_layers_init_all>
 800f51a:	e783      	b.n	800f424 <ai_platform_network_init+0x34>
 800f51c:	2213      	movs	r2, #19
 800f51e:	2110      	movs	r1, #16
 800f520:	f105 000c 	add.w	r0, r5, #12
 800f524:	2400      	movs	r4, #0
 800f526:	f000 faa1 	bl	800fa6c <core_set_error>
 800f52a:	e77e      	b.n	800f42a <ai_platform_network_init+0x3a>
 800f52c:	2211      	movs	r2, #17
 800f52e:	2110      	movs	r1, #16
 800f530:	300c      	adds	r0, #12
 800f532:	f000 fa9b 	bl	800fa6c <core_set_error>
 800f536:	e778      	b.n	800f42a <ai_platform_network_init+0x3a>
 800f538:	2212      	movs	r2, #18
 800f53a:	2110      	movs	r1, #16
 800f53c:	f105 000c 	add.w	r0, r5, #12
 800f540:	f000 fa94 	bl	800fa6c <core_set_error>
 800f544:	e771      	b.n	800f42a <ai_platform_network_init+0x3a>
 800f546:	2212      	movs	r2, #18
 800f548:	2116      	movs	r1, #22
 800f54a:	f105 000c 	add.w	r0, r5, #12
 800f54e:	2400      	movs	r4, #0
 800f550:	f000 fa8c 	bl	800fa6c <core_set_error>
 800f554:	e769      	b.n	800f42a <ai_platform_network_init+0x3a>
 800f556:	2213      	movs	r2, #19
 800f558:	2116      	movs	r1, #22
 800f55a:	f105 000c 	add.w	r0, r5, #12
 800f55e:	2400      	movs	r4, #0
 800f560:	f000 fa84 	bl	800fa6c <core_set_error>
 800f564:	e761      	b.n	800f42a <ai_platform_network_init+0x3a>
 800f566:	bf00      	nop
 800f568:	a1c00100 	.word	0xa1c00100
 800f56c:	a1facade 	.word	0xa1facade

0800f570 <ai_platform_network_post_init>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4b16      	ldr	r3, [pc, #88]	; (800f5cc <ai_platform_network_post_init+0x5c>)
 800f574:	6802      	ldr	r2, [r0, #0]
 800f576:	ea02 0103 	and.w	r1, r2, r3
 800f57a:	4393      	bics	r3, r2
 800f57c:	d108      	bne.n	800f590 <ai_platform_network_post_init+0x20>
 800f57e:	6903      	ldr	r3, [r0, #16]
 800f580:	4604      	mov	r4, r0
 800f582:	f013 0502 	ands.w	r5, r3, #2
 800f586:	d005      	beq.n	800f594 <ai_platform_network_post_init+0x24>
 800f588:	428a      	cmp	r2, r1
 800f58a:	d00a      	beq.n	800f5a2 <ai_platform_network_post_init+0x32>
 800f58c:	2001      	movs	r0, #1
 800f58e:	bd38      	pop	{r3, r4, r5, pc}
 800f590:	2000      	movs	r0, #0
 800f592:	bd38      	pop	{r3, r4, r5, pc}
 800f594:	2210      	movs	r2, #16
 800f596:	2111      	movs	r1, #17
 800f598:	300c      	adds	r0, #12
 800f59a:	f000 fa67 	bl	800fa6c <core_set_error>
 800f59e:	4628      	mov	r0, r5
 800f5a0:	bd38      	pop	{r3, r4, r5, pc}
 800f5a2:	f000 faa5 	bl	800faf0 <ai_layers_post_init_all>
 800f5a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d0ef      	beq.n	800f58c <ai_platform_network_post_init+0x1c>
 800f5ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800f5ae:	e008      	b.n	800f5c2 <ai_platform_network_post_init+0x52>
 800f5b0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 800f5b4:	4798      	blx	r3
 800f5b6:	692b      	ldr	r3, [r5, #16]
 800f5b8:	42ab      	cmp	r3, r5
 800f5ba:	461d      	mov	r5, r3
 800f5bc:	d0e6      	beq.n	800f58c <ai_platform_network_post_init+0x1c>
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d0e4      	beq.n	800f58c <ai_platform_network_post_init+0x1c>
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	2d00      	cmp	r5, #0
 800f5c8:	d1f2      	bne.n	800f5b0 <ai_platform_network_post_init+0x40>
 800f5ca:	e7df      	b.n	800f58c <ai_platform_network_post_init+0x1c>
 800f5cc:	a1c00100 	.word	0xa1c00100

0800f5d0 <ai_platform_network_process>:
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	b085      	sub	sp, #20
 800f5d6:	4bb7      	ldr	r3, [pc, #732]	; (800f8b4 <ai_platform_network_process+0x2e4>)
 800f5d8:	9202      	str	r2, [sp, #8]
 800f5da:	6802      	ldr	r2, [r0, #0]
 800f5dc:	4393      	bics	r3, r2
 800f5de:	f040 8142 	bne.w	800f866 <ai_platform_network_process+0x296>
 800f5e2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f000 8126 	beq.w	800f838 <ai_platform_network_process+0x268>
 800f5ec:	6903      	ldr	r3, [r0, #16]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 800f5f4:	f003 0303 	and.w	r3, r3, #3
 800f5f8:	6182      	str	r2, [r0, #24]
 800f5fa:	2b03      	cmp	r3, #3
 800f5fc:	f040 8122 	bne.w	800f844 <ai_platform_network_process+0x274>
 800f600:	2900      	cmp	r1, #0
 800f602:	f000 8136 	beq.w	800f872 <ai_platform_network_process+0x2a2>
 800f606:	fab8 f788 	clz	r7, r8
 800f60a:	097f      	lsrs	r7, r7, #5
 800f60c:	f1b8 0f00 	cmp.w	r8, #0
 800f610:	f000 812f 	beq.w	800f872 <ai_platform_network_process+0x2a2>
 800f614:	f8b8 3000 	ldrh.w	r3, [r8]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f000 812a 	beq.w	800f872 <ai_platform_network_process+0x2a2>
 800f61e:	698b      	ldr	r3, [r1, #24]
 800f620:	460e      	mov	r6, r1
 800f622:	9003      	str	r0, [sp, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	9301      	str	r3, [sp, #4]
 800f628:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d072      	beq.n	800f716 <ai_platform_network_process+0x146>
 800f630:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800f634:	2c00      	cmp	r4, #0
 800f636:	d06e      	beq.n	800f716 <ai_platform_network_process+0x146>
 800f638:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f63c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800f640:	f8d3 a000 	ldr.w	sl, [r3]
 800f644:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800f648:	f000 8112 	beq.w	800f870 <ai_platform_network_process+0x2a0>
 800f64c:	69a3      	ldr	r3, [r4, #24]
 800f64e:	2101      	movs	r1, #1
 800f650:	4630      	mov	r0, r6
 800f652:	685d      	ldr	r5, [r3, #4]
 800f654:	f7ff fc72 	bl	800ef3c <ai_buffer_get_size>
 800f658:	4285      	cmp	r5, r0
 800f65a:	f0c0 8115 	bcc.w	800f888 <ai_platform_network_process+0x2b8>
 800f65e:	68e0      	ldr	r0, [r4, #12]
 800f660:	69b1      	ldr	r1, [r6, #24]
 800f662:	68c2      	ldr	r2, [r0, #12]
 800f664:	68cb      	ldr	r3, [r1, #12]
 800f666:	429a      	cmp	r2, r3
 800f668:	f040 810e 	bne.w	800f888 <ai_platform_network_process+0x2b8>
 800f66c:	6882      	ldr	r2, [r0, #8]
 800f66e:	688b      	ldr	r3, [r1, #8]
 800f670:	429a      	cmp	r2, r3
 800f672:	f040 8109 	bne.w	800f888 <ai_platform_network_process+0x2b8>
 800f676:	6842      	ldr	r2, [r0, #4]
 800f678:	684b      	ldr	r3, [r1, #4]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	f040 8104 	bne.w	800f888 <ai_platform_network_process+0x2b8>
 800f680:	69a3      	ldr	r3, [r4, #24]
 800f682:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f686:	f002 fab9 	bl	8011bfc <ai_array_get_data_byte_size>
 800f68a:	4605      	mov	r5, r0
 800f68c:	4620      	mov	r0, r4
 800f68e:	f002 facd 	bl	8011c2c <get_tensor_byte_size>
 800f692:	4285      	cmp	r5, r0
 800f694:	f0c0 80f8 	bcc.w	800f888 <ai_platform_network_process+0x2b8>
 800f698:	69a3      	ldr	r3, [r4, #24]
 800f69a:	6818      	ldr	r0, [r3, #0]
 800f69c:	f002 fa16 	bl	8011acc <ai_array_to_buffer_fmt>
 800f6a0:	6833      	ldr	r3, [r6, #0]
 800f6a2:	4058      	eors	r0, r3
 800f6a4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f6a8:	f040 81a4 	bne.w	800f9f4 <ai_platform_network_process+0x424>
 800f6ac:	6873      	ldr	r3, [r6, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f000 80de 	beq.w	800f870 <ai_platform_network_process+0x2a0>
 800f6b4:	69b3      	ldr	r3, [r6, #24]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 81a4 	beq.w	800fa06 <ai_platform_network_process+0x436>
 800f6be:	9a01      	ldr	r2, [sp, #4]
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	3701      	adds	r7, #1
 800f6c4:	361c      	adds	r6, #28
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	bf38      	it	cc
 800f6ca:	461a      	movcc	r2, r3
 800f6cc:	9201      	str	r2, [sp, #4]
 800f6ce:	f002 faad 	bl	8011c2c <get_tensor_byte_size>
 800f6d2:	f8c9 0008 	str.w	r0, [r9, #8]
 800f6d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	fb00 f303 	mul.w	r3, r0, r3
 800f6e0:	f8c9 300c 	str.w	r3, [r9, #12]
 800f6e4:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800f6e8:	440b      	add	r3, r1
 800f6ea:	f8c9 1004 	str.w	r1, [r9, #4]
 800f6ee:	f84a 300b 	str.w	r3, [sl, fp]
 800f6f2:	69a0      	ldr	r0, [r4, #24]
 800f6f4:	6803      	ldr	r3, [r0, #0]
 800f6f6:	009a      	lsls	r2, r3, #2
 800f6f8:	f100 80af 	bmi.w	800f85a <ai_platform_network_process+0x28a>
 800f6fc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f700:	1a9b      	subs	r3, r3, r2
 800f702:	4419      	add	r1, r3
 800f704:	6081      	str	r1, [r0, #8]
 800f706:	69a3      	ldr	r3, [r4, #24]
 800f708:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f70c:	60da      	str	r2, [r3, #12]
 800f70e:	f8b8 3000 	ldrh.w	r3, [r8]
 800f712:	42bb      	cmp	r3, r7
 800f714:	d888      	bhi.n	800f628 <ai_platform_network_process+0x58>
 800f716:	9d03      	ldr	r5, [sp, #12]
 800f718:	9b02      	ldr	r3, [sp, #8]
 800f71a:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 817b 	beq.w	800fa18 <ai_platform_network_process+0x448>
 800f722:	2a01      	cmp	r2, #1
 800f724:	f240 80bd 	bls.w	800f8a2 <ai_platform_network_process+0x2d2>
 800f728:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 800f72c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	f000 80b6 	beq.w	800f8a2 <ai_platform_network_process+0x2d2>
 800f736:	2700      	movs	r7, #0
 800f738:	f8dd b008 	ldr.w	fp, [sp, #8]
 800f73c:	9502      	str	r5, [sp, #8]
 800f73e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 80bd 	beq.w	800f8c2 <ai_platform_network_process+0x2f2>
 800f748:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800f74c:	2e00      	cmp	r6, #0
 800f74e:	f000 80b8 	beq.w	800f8c2 <ai_platform_network_process+0x2f2>
 800f752:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f756:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800f75a:	681c      	ldr	r4, [r3, #0]
 800f75c:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800f760:	f000 8170 	beq.w	800fa44 <ai_platform_network_process+0x474>
 800f764:	69b3      	ldr	r3, [r6, #24]
 800f766:	2101      	movs	r1, #1
 800f768:	4658      	mov	r0, fp
 800f76a:	685d      	ldr	r5, [r3, #4]
 800f76c:	f7ff fbe6 	bl	800ef3c <ai_buffer_get_size>
 800f770:	4285      	cmp	r5, r0
 800f772:	f0c0 8095 	bcc.w	800f8a0 <ai_platform_network_process+0x2d0>
 800f776:	68f0      	ldr	r0, [r6, #12]
 800f778:	f8db 1018 	ldr.w	r1, [fp, #24]
 800f77c:	68c2      	ldr	r2, [r0, #12]
 800f77e:	68cb      	ldr	r3, [r1, #12]
 800f780:	429a      	cmp	r2, r3
 800f782:	f040 808d 	bne.w	800f8a0 <ai_platform_network_process+0x2d0>
 800f786:	6882      	ldr	r2, [r0, #8]
 800f788:	688b      	ldr	r3, [r1, #8]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	f040 8088 	bne.w	800f8a0 <ai_platform_network_process+0x2d0>
 800f790:	6842      	ldr	r2, [r0, #4]
 800f792:	684b      	ldr	r3, [r1, #4]
 800f794:	429a      	cmp	r2, r3
 800f796:	f040 8083 	bne.w	800f8a0 <ai_platform_network_process+0x2d0>
 800f79a:	69b3      	ldr	r3, [r6, #24]
 800f79c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f7a0:	f002 fa2c 	bl	8011bfc <ai_array_get_data_byte_size>
 800f7a4:	9003      	str	r0, [sp, #12]
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f002 fa40 	bl	8011c2c <get_tensor_byte_size>
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	4283      	cmp	r3, r0
 800f7b0:	d376      	bcc.n	800f8a0 <ai_platform_network_process+0x2d0>
 800f7b2:	69b3      	ldr	r3, [r6, #24]
 800f7b4:	6818      	ldr	r0, [r3, #0]
 800f7b6:	f002 f989 	bl	8011acc <ai_array_to_buffer_fmt>
 800f7ba:	f8db 3000 	ldr.w	r3, [fp]
 800f7be:	4058      	eors	r0, r3
 800f7c0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800f7c4:	f040 812c 	bne.w	800fa20 <ai_platform_network_process+0x450>
 800f7c8:	f8db 3004 	ldr.w	r3, [fp, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 8139 	beq.w	800fa44 <ai_platform_network_process+0x474>
 800f7d2:	f8db 3018 	ldr.w	r3, [fp, #24]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 812a 	beq.w	800fa32 <ai_platform_network_process+0x462>
 800f7de:	9a01      	ldr	r2, [sp, #4]
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	3701      	adds	r7, #1
 800f7e4:	f10b 0b1c 	add.w	fp, fp, #28
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	bf38      	it	cc
 800f7ec:	461a      	movcc	r2, r3
 800f7ee:	9201      	str	r2, [sp, #4]
 800f7f0:	f002 fa1c 	bl	8011c2c <get_tensor_byte_size>
 800f7f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800f7f8:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	fb00 f303 	mul.w	r3, r0, r3
 800f802:	f8c8 300c 	str.w	r3, [r8, #12]
 800f806:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800f80a:	440b      	add	r3, r1
 800f80c:	f8c8 1004 	str.w	r1, [r8, #4]
 800f810:	f844 300a 	str.w	r3, [r4, sl]
 800f814:	69b0      	ldr	r0, [r6, #24]
 800f816:	6803      	ldr	r3, [r0, #0]
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	d44d      	bmi.n	800f8b8 <ai_platform_network_process+0x2e8>
 800f81c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800f820:	1a9b      	subs	r3, r3, r2
 800f822:	4419      	add	r1, r3
 800f824:	6081      	str	r1, [r0, #8]
 800f826:	69b3      	ldr	r3, [r6, #24]
 800f828:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f82c:	60da      	str	r2, [r3, #12]
 800f82e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f832:	42bb      	cmp	r3, r7
 800f834:	d883      	bhi.n	800f73e <ai_platform_network_process+0x16e>
 800f836:	e044      	b.n	800f8c2 <ai_platform_network_process+0x2f2>
 800f838:	6902      	ldr	r2, [r0, #16]
 800f83a:	6183      	str	r3, [r0, #24]
 800f83c:	f002 0203 	and.w	r2, r2, #3
 800f840:	2a03      	cmp	r2, #3
 800f842:	d016      	beq.n	800f872 <ai_platform_network_process+0x2a2>
 800f844:	2230      	movs	r2, #48	; 0x30
 800f846:	2111      	movs	r1, #17
 800f848:	f105 000c 	add.w	r0, r5, #12
 800f84c:	2400      	movs	r4, #0
 800f84e:	f000 f90d 	bl	800fa6c <core_set_error>
 800f852:	4620      	mov	r0, r4
 800f854:	b005      	add	sp, #20
 800f856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f85a:	f8b8 3000 	ldrh.w	r3, [r8]
 800f85e:	429f      	cmp	r7, r3
 800f860:	f4ff aee2 	bcc.w	800f628 <ai_platform_network_process+0x58>
 800f864:	e757      	b.n	800f716 <ai_platform_network_process+0x146>
 800f866:	2400      	movs	r4, #0
 800f868:	4620      	mov	r0, r4
 800f86a:	b005      	add	sp, #20
 800f86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f870:	9d03      	ldr	r5, [sp, #12]
 800f872:	2400      	movs	r4, #0
 800f874:	2217      	movs	r2, #23
 800f876:	2112      	movs	r1, #18
 800f878:	f105 000c 	add.w	r0, r5, #12
 800f87c:	f000 f8f6 	bl	800fa6c <core_set_error>
 800f880:	4620      	mov	r0, r4
 800f882:	b005      	add	sp, #20
 800f884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f888:	9d03      	ldr	r5, [sp, #12]
 800f88a:	2400      	movs	r4, #0
 800f88c:	2218      	movs	r2, #24
 800f88e:	2112      	movs	r1, #18
 800f890:	f105 000c 	add.w	r0, r5, #12
 800f894:	f000 f8ea 	bl	800fa6c <core_set_error>
 800f898:	4620      	mov	r0, r4
 800f89a:	b005      	add	sp, #20
 800f89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8a0:	9d02      	ldr	r5, [sp, #8]
 800f8a2:	2218      	movs	r2, #24
 800f8a4:	2113      	movs	r1, #19
 800f8a6:	f105 000c 	add.w	r0, r5, #12
 800f8aa:	2400      	movs	r4, #0
 800f8ac:	f000 f8de 	bl	800fa6c <core_set_error>
 800f8b0:	e7cf      	b.n	800f852 <ai_platform_network_process+0x282>
 800f8b2:	bf00      	nop
 800f8b4:	a1c00100 	.word	0xa1c00100
 800f8b8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800f8bc:	429f      	cmp	r7, r3
 800f8be:	f4ff af3e 	bcc.w	800f73e <ai_platform_network_process+0x16e>
 800f8c2:	9d02      	ldr	r5, [sp, #8]
 800f8c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f8c8:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800f8ca:	832b      	strh	r3, [r5, #24]
 800f8cc:	2a00      	cmp	r2, #0
 800f8ce:	f040 808b 	bne.w	800f9e8 <ai_platform_network_process+0x418>
 800f8d2:	4616      	mov	r6, r2
 800f8d4:	4617      	mov	r7, r2
 800f8d6:	8b6c      	ldrh	r4, [r5, #26]
 800f8d8:	429c      	cmp	r4, r3
 800f8da:	d2ba      	bcs.n	800f852 <ai_platform_network_process+0x282>
 800f8dc:	46ab      	mov	fp, r5
 800f8de:	2e00      	cmp	r6, #0
 800f8e0:	d030      	beq.n	800f944 <ai_platform_network_process+0x374>
 800f8e2:	f04f 0800 	mov.w	r8, #0
 800f8e6:	e014      	b.n	800f912 <ai_platform_network_process+0x342>
 800f8e8:	6882      	ldr	r2, [r0, #8]
 800f8ea:	68c5      	ldr	r5, [r0, #12]
 800f8ec:	6863      	ldr	r3, [r4, #4]
 800f8ee:	1b52      	subs	r2, r2, r5
 800f8f0:	4413      	add	r3, r2
 800f8f2:	6083      	str	r3, [r0, #8]
 800f8f4:	698b      	ldr	r3, [r1, #24]
 800f8f6:	6862      	ldr	r2, [r4, #4]
 800f8f8:	60da      	str	r2, [r3, #12]
 800f8fa:	f859 200a 	ldr.w	r2, [r9, sl]
 800f8fe:	f108 0801 	add.w	r8, r8, #1
 800f902:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800f906:	440b      	add	r3, r1
 800f908:	4293      	cmp	r3, r2
 800f90a:	d301      	bcc.n	800f910 <ai_platform_network_process+0x340>
 800f90c:	68e3      	ldr	r3, [r4, #12]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	6063      	str	r3, [r4, #4]
 800f912:	8833      	ldrh	r3, [r6, #0]
 800f914:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800f918:	4543      	cmp	r3, r8
 800f91a:	d913      	bls.n	800f944 <ai_platform_network_process+0x374>
 800f91c:	6873      	ldr	r3, [r6, #4]
 800f91e:	b18b      	cbz	r3, 800f944 <ai_platform_network_process+0x374>
 800f920:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800f924:	b171      	cbz	r1, 800f944 <ai_platform_network_process+0x374>
 800f926:	6988      	ldr	r0, [r1, #24]
 800f928:	68b2      	ldr	r2, [r6, #8]
 800f92a:	6803      	ldr	r3, [r0, #0]
 800f92c:	f8d2 9000 	ldr.w	r9, [r2]
 800f930:	009d      	lsls	r5, r3, #2
 800f932:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800f936:	d5d7      	bpl.n	800f8e8 <ai_platform_network_process+0x318>
 800f938:	6881      	ldr	r1, [r0, #8]
 800f93a:	68a2      	ldr	r2, [r4, #8]
 800f93c:	6860      	ldr	r0, [r4, #4]
 800f93e:	f002 f83d 	bl	80119bc <st_int8_copy>
 800f942:	e7da      	b.n	800f8fa <ai_platform_network_process+0x32a>
 800f944:	4658      	mov	r0, fp
 800f946:	f000 f8e7 	bl	800fb18 <ai_layers_forward_all>
 800f94a:	2f00      	cmp	r7, #0
 800f94c:	d03d      	beq.n	800f9ca <ai_platform_network_process+0x3fa>
 800f94e:	2400      	movs	r4, #0
 800f950:	e016      	b.n	800f980 <ai_platform_network_process+0x3b0>
 800f952:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800f956:	f859 100a 	ldr.w	r1, [r9, sl]
 800f95a:	4413      	add	r3, r2
 800f95c:	428b      	cmp	r3, r1
 800f95e:	d302      	bcc.n	800f966 <ai_platform_network_process+0x396>
 800f960:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f964:	1acb      	subs	r3, r1, r3
 800f966:	f8c8 3004 	str.w	r3, [r8, #4]
 800f96a:	6981      	ldr	r1, [r0, #24]
 800f96c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800f970:	1b52      	subs	r2, r2, r5
 800f972:	4413      	add	r3, r2
 800f974:	608b      	str	r3, [r1, #8]
 800f976:	6983      	ldr	r3, [r0, #24]
 800f978:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f97c:	60da      	str	r2, [r3, #12]
 800f97e:	3401      	adds	r4, #1
 800f980:	883b      	ldrh	r3, [r7, #0]
 800f982:	42a3      	cmp	r3, r4
 800f984:	d921      	bls.n	800f9ca <ai_platform_network_process+0x3fa>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	b1fb      	cbz	r3, 800f9ca <ai_platform_network_process+0x3fa>
 800f98a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f98e:	b1e0      	cbz	r0, 800f9ca <ai_platform_network_process+0x3fa>
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f996:	6983      	ldr	r3, [r0, #24]
 800f998:	f8d2 9000 	ldr.w	r9, [r2]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f9a2:	0092      	lsls	r2, r2, #2
 800f9a4:	d5d5      	bpl.n	800f952 <ai_platform_network_process+0x382>
 800f9a6:	6898      	ldr	r0, [r3, #8]
 800f9a8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800f9ac:	f002 f806 	bl	80119bc <st_int8_copy>
 800f9b0:	f859 200a 	ldr.w	r2, [r9, sl]
 800f9b4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f9b8:	440b      	add	r3, r1
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d302      	bcc.n	800f9c4 <ai_platform_network_process+0x3f4>
 800f9be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	f8c8 3004 	str.w	r3, [r8, #4]
 800f9c8:	e7d9      	b.n	800f97e <ai_platform_network_process+0x3ae>
 800f9ca:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800f9ce:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800f9d2:	3401      	adds	r4, #1
 800f9d4:	b2a4      	uxth	r4, r4
 800f9d6:	42a3      	cmp	r3, r4
 800f9d8:	f8ab 401a 	strh.w	r4, [fp, #26]
 800f9dc:	f63f af7f 	bhi.w	800f8de <ai_platform_network_process+0x30e>
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	b005      	add	sp, #20
 800f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e8:	2a01      	cmp	r2, #1
 800f9ea:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800f9ec:	d033      	beq.n	800fa56 <ai_platform_network_process+0x486>
 800f9ee:	f106 070c 	add.w	r7, r6, #12
 800f9f2:	e770      	b.n	800f8d6 <ai_platform_network_process+0x306>
 800f9f4:	9d03      	ldr	r5, [sp, #12]
 800f9f6:	2219      	movs	r2, #25
 800f9f8:	2112      	movs	r1, #18
 800f9fa:	2400      	movs	r4, #0
 800f9fc:	f105 000c 	add.w	r0, r5, #12
 800fa00:	f000 f834 	bl	800fa6c <core_set_error>
 800fa04:	e725      	b.n	800f852 <ai_platform_network_process+0x282>
 800fa06:	9d03      	ldr	r5, [sp, #12]
 800fa08:	4604      	mov	r4, r0
 800fa0a:	2221      	movs	r2, #33	; 0x21
 800fa0c:	2112      	movs	r1, #18
 800fa0e:	f105 000c 	add.w	r0, r5, #12
 800fa12:	f000 f82b 	bl	800fa6c <core_set_error>
 800fa16:	e71c      	b.n	800f852 <ai_platform_network_process+0x282>
 800fa18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fa1c:	832b      	strh	r3, [r5, #24]
 800fa1e:	e755      	b.n	800f8cc <ai_platform_network_process+0x2fc>
 800fa20:	9d02      	ldr	r5, [sp, #8]
 800fa22:	2219      	movs	r2, #25
 800fa24:	2113      	movs	r1, #19
 800fa26:	2400      	movs	r4, #0
 800fa28:	f105 000c 	add.w	r0, r5, #12
 800fa2c:	f000 f81e 	bl	800fa6c <core_set_error>
 800fa30:	e70f      	b.n	800f852 <ai_platform_network_process+0x282>
 800fa32:	9d02      	ldr	r5, [sp, #8]
 800fa34:	4604      	mov	r4, r0
 800fa36:	2221      	movs	r2, #33	; 0x21
 800fa38:	2113      	movs	r1, #19
 800fa3a:	f105 000c 	add.w	r0, r5, #12
 800fa3e:	f000 f815 	bl	800fa6c <core_set_error>
 800fa42:	e706      	b.n	800f852 <ai_platform_network_process+0x282>
 800fa44:	9d02      	ldr	r5, [sp, #8]
 800fa46:	2217      	movs	r2, #23
 800fa48:	2113      	movs	r1, #19
 800fa4a:	2400      	movs	r4, #0
 800fa4c:	f105 000c 	add.w	r0, r5, #12
 800fa50:	f000 f80c 	bl	800fa6c <core_set_error>
 800fa54:	e6fd      	b.n	800f852 <ai_platform_network_process+0x282>
 800fa56:	2700      	movs	r7, #0
 800fa58:	e73d      	b.n	800f8d6 <ai_platform_network_process+0x306>
 800fa5a:	bf00      	nop

0800fa5c <core_init>:
 800fa5c:	2001      	movs	r0, #1
 800fa5e:	4770      	bx	lr

0800fa60 <core_get_error>:
 800fa60:	4603      	mov	r3, r0
 800fa62:	2200      	movs	r2, #0
 800fa64:	6800      	ldr	r0, [r0, #0]
 800fa66:	601a      	str	r2, [r3, #0]
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop

0800fa6c <core_set_error>:
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	7800      	ldrb	r0, [r0, #0]
 800fa70:	b108      	cbz	r0, 800fa76 <core_set_error+0xa>
 800fa72:	2000      	movs	r0, #0
 800fa74:	4770      	bx	lr
 800fa76:	7019      	strb	r1, [r3, #0]
 800fa78:	2001      	movs	r0, #1
 800fa7a:	6819      	ldr	r1, [r3, #0]
 800fa7c:	f362 211f 	bfi	r1, r2, #8, #24
 800fa80:	6019      	str	r1, [r3, #0]
 800fa82:	4770      	bx	lr

0800fa84 <ai_check_custom_types>:
 800fa84:	b082      	sub	sp, #8
 800fa86:	4b12      	ldr	r3, [pc, #72]	; (800fad0 <ai_check_custom_types+0x4c>)
 800fa88:	9301      	str	r3, [sp, #4]
 800fa8a:	b118      	cbz	r0, 800fa94 <ai_check_custom_types+0x10>
 800fa8c:	7803      	ldrb	r3, [r0, #0]
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d002      	beq.n	800fa98 <ai_check_custom_types+0x14>
 800fa92:	2000      	movs	r0, #0
 800fa94:	b002      	add	sp, #8
 800fa96:	4770      	bx	lr
 800fa98:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d004      	beq.n	800faaa <ai_check_custom_types+0x26>
 800faa0:	2001      	movs	r0, #1
 800faa2:	f080 0001 	eor.w	r0, r0, #1
 800faa6:	b002      	add	sp, #8
 800faa8:	4770      	bx	lr
 800faaa:	7842      	ldrb	r2, [r0, #1]
 800faac:	3001      	adds	r0, #1
 800faae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d1f4      	bne.n	800faa0 <ai_check_custom_types+0x1c>
 800fab6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800faba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d1ee      	bne.n	800faa0 <ai_check_custom_types+0x1c>
 800fac2:	7842      	ldrb	r2, [r0, #1]
 800fac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fac8:	429a      	cmp	r2, r3
 800faca:	d1e9      	bne.n	800faa0 <ai_check_custom_types+0x1c>
 800facc:	2000      	movs	r0, #0
 800face:	e7e8      	b.n	800faa2 <ai_check_custom_types+0x1e>
 800fad0:	84048403 	.word	0x84048403

0800fad4 <ai_layers_init_all>:
 800fad4:	2100      	movs	r1, #0
 800fad6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fad8:	b13b      	cbz	r3, 800faea <ai_layers_init_all+0x16>
 800fada:	691a      	ldr	r2, [r3, #16]
 800fadc:	3101      	adds	r1, #1
 800fade:	60d8      	str	r0, [r3, #12]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	4613      	mov	r3, r2
 800fae4:	d001      	beq.n	800faea <ai_layers_init_all+0x16>
 800fae6:	2a00      	cmp	r2, #0
 800fae8:	d1f6      	bne.n	800fad8 <ai_layers_init_all+0x4>
 800faea:	4608      	mov	r0, r1
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop

0800faf0 <ai_layers_post_init_all>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	2500      	movs	r5, #0
 800faf4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800faf6:	b16c      	cbz	r4, 800fb14 <ai_layers_post_init_all+0x24>
 800faf8:	6863      	ldr	r3, [r4, #4]
 800fafa:	07db      	lsls	r3, r3, #31
 800fafc:	d504      	bpl.n	800fb08 <ai_layers_post_init_all+0x18>
 800fafe:	6a23      	ldr	r3, [r4, #32]
 800fb00:	4620      	mov	r0, r4
 800fb02:	b10b      	cbz	r3, 800fb08 <ai_layers_post_init_all+0x18>
 800fb04:	3501      	adds	r5, #1
 800fb06:	4798      	blx	r3
 800fb08:	6923      	ldr	r3, [r4, #16]
 800fb0a:	42a3      	cmp	r3, r4
 800fb0c:	461c      	mov	r4, r3
 800fb0e:	d001      	beq.n	800fb14 <ai_layers_post_init_all+0x24>
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1f0      	bne.n	800faf6 <ai_layers_post_init_all+0x6>
 800fb14:	4628      	mov	r0, r5
 800fb16:	bd38      	pop	{r3, r4, r5, pc}

0800fb18 <ai_layers_forward_all>:
 800fb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb1c:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800fb20:	4604      	mov	r4, r0
 800fb22:	f1b8 0f00 	cmp.w	r8, #0
 800fb26:	d02a      	beq.n	800fb7e <ai_layers_forward_all+0x66>
 800fb28:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800fb2a:	63c1      	str	r1, [r0, #60]	; 0x3c
 800fb2c:	b319      	cbz	r1, 800fb76 <ai_layers_forward_all+0x5e>
 800fb2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb30:	2001      	movs	r0, #1
 800fb32:	47c0      	blx	r8
 800fb34:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800fb36:	b1f6      	cbz	r6, 800fb76 <ai_layers_forward_all+0x5e>
 800fb38:	2700      	movs	r7, #0
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fb3e:	2002      	movs	r0, #2
 800fb40:	47c0      	blx	r8
 800fb42:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800fb44:	4628      	mov	r0, r5
 800fb46:	696b      	ldr	r3, [r5, #20]
 800fb48:	4798      	blx	r3
 800fb4a:	692e      	ldr	r6, [r5, #16]
 800fb4c:	2003      	movs	r0, #3
 800fb4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fb50:	42b5      	cmp	r5, r6
 800fb52:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fb54:	d007      	beq.n	800fb66 <ai_layers_forward_all+0x4e>
 800fb56:	47c0      	blx	r8
 800fb58:	3701      	adds	r7, #1
 800fb5a:	63e6      	str	r6, [r4, #60]	; 0x3c
 800fb5c:	2e00      	cmp	r6, #0
 800fb5e:	d1ec      	bne.n	800fb3a <ai_layers_forward_all+0x22>
 800fb60:	4638      	mov	r0, r7
 800fb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb66:	2003      	movs	r0, #3
 800fb68:	3701      	adds	r7, #1
 800fb6a:	47c0      	blx	r8
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4638      	mov	r0, r7
 800fb70:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb76:	2700      	movs	r7, #0
 800fb78:	4638      	mov	r0, r7
 800fb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800fb80:	63c5      	str	r5, [r0, #60]	; 0x3c
 800fb82:	2d00      	cmp	r5, #0
 800fb84:	d0f7      	beq.n	800fb76 <ai_layers_forward_all+0x5e>
 800fb86:	4647      	mov	r7, r8
 800fb88:	696b      	ldr	r3, [r5, #20]
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	4798      	blx	r3
 800fb8e:	462b      	mov	r3, r5
 800fb90:	692d      	ldr	r5, [r5, #16]
 800fb92:	429d      	cmp	r5, r3
 800fb94:	d004      	beq.n	800fba0 <ai_layers_forward_all+0x88>
 800fb96:	3701      	adds	r7, #1
 800fb98:	63e5      	str	r5, [r4, #60]	; 0x3c
 800fb9a:	2d00      	cmp	r5, #0
 800fb9c:	d1f4      	bne.n	800fb88 <ai_layers_forward_all+0x70>
 800fb9e:	e7df      	b.n	800fb60 <ai_layers_forward_all+0x48>
 800fba0:	2300      	movs	r3, #0
 800fba2:	3701      	adds	r7, #1
 800fba4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fba6:	e7db      	b.n	800fb60 <ai_layers_forward_all+0x48>

0800fba8 <forward_conv2d_if32of32wf32>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	6983      	ldr	r3, [r0, #24]
 800fbae:	b0a7      	sub	sp, #156	; 0x9c
 800fbb0:	881d      	ldrh	r5, [r3, #0]
 800fbb2:	2d00      	cmp	r5, #0
 800fbb4:	f000 80a3 	beq.w	800fcfe <forward_conv2d_if32of32wf32+0x156>
 800fbb8:	685e      	ldr	r6, [r3, #4]
 800fbba:	4680      	mov	r8, r0
 800fbbc:	6872      	ldr	r2, [r6, #4]
 800fbbe:	b102      	cbz	r2, 800fbc2 <forward_conv2d_if32of32wf32+0x1a>
 800fbc0:	6812      	ldr	r2, [r2, #0]
 800fbc2:	2d01      	cmp	r5, #1
 800fbc4:	f000 8098 	beq.w	800fcf8 <forward_conv2d_if32of32wf32+0x150>
 800fbc8:	6931      	ldr	r1, [r6, #16]
 800fbca:	b101      	cbz	r1, 800fbce <forward_conv2d_if32of32wf32+0x26>
 800fbcc:	6809      	ldr	r1, [r1, #0]
 800fbce:	2d02      	cmp	r5, #2
 800fbd0:	f000 8092 	beq.w	800fcf8 <forward_conv2d_if32of32wf32+0x150>
 800fbd4:	69f3      	ldr	r3, [r6, #28]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 80c6 	beq.w	800fd68 <forward_conv2d_if32of32wf32+0x1c0>
 800fbdc:	8b30      	ldrh	r0, [r6, #24]
 800fbde:	681c      	ldr	r4, [r3, #0]
 800fbe0:	2801      	cmp	r0, #1
 800fbe2:	f240 80c3 	bls.w	800fd6c <forward_conv2d_if32of32wf32+0x1c4>
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800fbec:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 800fbf0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800fbf4:	f8d8 e03c 	ldr.w	lr, [r8, #60]	; 0x3c
 800fbf8:	9015      	str	r0, [sp, #84]	; 0x54
 800fbfa:	f8da 0004 	ldr.w	r0, [sl, #4]
 800fbfe:	6992      	ldr	r2, [r2, #24]
 800fc00:	9016      	str	r0, [sp, #88]	; 0x58
 800fc02:	f8da 000c 	ldr.w	r0, [sl, #12]
 800fc06:	edd2 7a02 	vldr	s15, [r2, #8]
 800fc0a:	9017      	str	r0, [sp, #92]	; 0x5c
 800fc0c:	f8da 0008 	ldr.w	r0, [sl, #8]
 800fc10:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800fc14:	9018      	str	r0, [sp, #96]	; 0x60
 800fc16:	f8d9 000c 	ldr.w	r0, [r9, #12]
 800fc1a:	69a4      	ldr	r4, [r4, #24]
 800fc1c:	9019      	str	r0, [sp, #100]	; 0x64
 800fc1e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800fc22:	901a      	str	r0, [sp, #104]	; 0x68
 800fc24:	f8b8 0028 	ldrh.w	r0, [r8, #40]	; 0x28
 800fc28:	901b      	str	r0, [sp, #108]	; 0x6c
 800fc2a:	f8b8 002c 	ldrh.w	r0, [r8, #44]	; 0x2c
 800fc2e:	901c      	str	r0, [sp, #112]	; 0x70
 800fc30:	f8d8 001c 	ldr.w	r0, [r8, #28]
 800fc34:	9021      	str	r0, [sp, #132]	; 0x84
 800fc36:	f8be 0000 	ldrh.w	r0, [lr]
 800fc3a:	e9d8 270c 	ldrd	r2, r7, [r8, #48]	; 0x30
 800fc3e:	901d      	str	r0, [sp, #116]	; 0x74
 800fc40:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800fc44:	901e      	str	r0, [sp, #120]	; 0x78
 800fc46:	b290      	uxth	r0, r2
 800fc48:	901f      	str	r0, [sp, #124]	; 0x7c
 800fc4a:	b2b8      	uxth	r0, r7
 800fc4c:	9020      	str	r0, [sp, #128]	; 0x80
 800fc4e:	68a0      	ldr	r0, [r4, #8]
 800fc50:	e9dc ab01 	ldrd	sl, fp, [ip, #4]
 800fc54:	9023      	str	r0, [sp, #140]	; 0x8c
 800fc56:	b10b      	cbz	r3, 800fc5c <forward_conv2d_if32of32wf32+0xb4>
 800fc58:	699b      	ldr	r3, [r3, #24]
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	b2bf      	uxth	r7, r7
 800fc5e:	f10b 3cff 	add.w	ip, fp, #4294967295
 800fc62:	b292      	uxth	r2, r2
 800fc64:	6989      	ldr	r1, [r1, #24]
 800fc66:	3f01      	subs	r7, #1
 800fc68:	2d03      	cmp	r5, #3
 800fc6a:	f102 32ff 	add.w	r2, r2, #4294967295
 800fc6e:	6889      	ldr	r1, [r1, #8]
 800fc70:	fb0c b707 	mla	r7, ip, r7, fp
 800fc74:	9713      	str	r7, [sp, #76]	; 0x4c
 800fc76:	f10a 37ff 	add.w	r7, sl, #4294967295
 800fc7a:	fb07 a202 	mla	r2, r7, r2, sl
 800fc7e:	9214      	str	r2, [sp, #80]	; 0x50
 800fc80:	d03a      	beq.n	800fcf8 <forward_conv2d_if32of32wf32+0x150>
 800fc82:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800fc84:	2a00      	cmp	r2, #0
 800fc86:	d05f      	beq.n	800fd48 <forward_conv2d_if32of32wf32+0x1a0>
 800fc88:	6812      	ldr	r2, [r2, #0]
 800fc8a:	2a00      	cmp	r2, #0
 800fc8c:	d05c      	beq.n	800fd48 <forward_conv2d_if32of32wf32+0x1a0>
 800fc8e:	6826      	ldr	r6, [r4, #0]
 800fc90:	6997      	ldr	r7, [r2, #24]
 800fc92:	f46f 7288 	mvn.w	r2, #272	; 0x110
 800fc96:	f3c6 4543 	ubfx	r5, r6, #17, #4
 800fc9a:	fa42 f505 	asr.w	r5, r2, r5
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	07e8      	lsls	r0, r5, #31
 800fca2:	d52e      	bpl.n	800fd02 <forward_conv2d_if32of32wf32+0x15a>
 800fca4:	2a00      	cmp	r2, #0
 800fca6:	d058      	beq.n	800fd5a <forward_conv2d_if32of32wf32+0x1b2>
 800fca8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800fcaa:	ee17 0a90 	vmov	r0, s15
 800fcae:	f8cd a018 	str.w	sl, [sp, #24]
 800fcb2:	940e      	str	r4, [sp, #56]	; 0x38
 800fcb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800fcb6:	940d      	str	r4, [sp, #52]	; 0x34
 800fcb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800fcba:	940c      	str	r4, [sp, #48]	; 0x30
 800fcbc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800fcbe:	940b      	str	r4, [sp, #44]	; 0x2c
 800fcc0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800fcc2:	940a      	str	r4, [sp, #40]	; 0x28
 800fcc4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800fcc6:	9409      	str	r4, [sp, #36]	; 0x24
 800fcc8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800fcca:	e9cd b407 	strd	fp, r4, [sp, #28]
 800fcce:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800fcd0:	9405      	str	r4, [sp, #20]
 800fcd2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800fcd4:	9404      	str	r4, [sp, #16]
 800fcd6:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800fcd8:	9403      	str	r4, [sp, #12]
 800fcda:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800fcdc:	9402      	str	r4, [sp, #8]
 800fcde:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800fce0:	9401      	str	r4, [sp, #4]
 800fce2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800fce4:	9400      	str	r4, [sp, #0]
 800fce6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800fce8:	9410      	str	r4, [sp, #64]	; 0x40
 800fcea:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800fcec:	940f      	str	r4, [sp, #60]	; 0x3c
 800fcee:	f000 fddb 	bl	80108a8 <forward_lite_conv2d_if32of32wf32>
 800fcf2:	b027      	add	sp, #156	; 0x9c
 800fcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	deff      	udf	#255	; 0xff
 800fcfe:	686b      	ldr	r3, [r5, #4]
 800fd00:	deff      	udf	#255	; 0xff
 800fd02:	68e5      	ldr	r5, [r4, #12]
 800fd04:	2d00      	cmp	r5, #0
 800fd06:	d0cd      	beq.n	800fca4 <forward_conv2d_if32of32wf32+0xfc>
 800fd08:	687c      	ldr	r4, [r7, #4]
 800fd0a:	f3c6 17c6 	ubfx	r7, r6, #7, #7
 800fd0e:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 800fd12:	f3c6 5441 	ubfx	r4, r6, #21, #2
 800fd16:	fa47 f404 	asr.w	r4, r7, r4
 800fd1a:	2c04      	cmp	r4, #4
 800fd1c:	b2a6      	uxth	r6, r4
 800fd1e:	d027      	beq.n	800fd70 <forward_conv2d_if32of32wf32+0x1c8>
 800fd20:	2e08      	cmp	r6, #8
 800fd22:	d1bf      	bne.n	800fca4 <forward_conv2d_if32of32wf32+0xfc>
 800fd24:	454a      	cmp	r2, r9
 800fd26:	d2bd      	bcs.n	800fca4 <forward_conv2d_if32of32wf32+0xfc>
 800fd28:	4616      	mov	r6, r2
 800fd2a:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800fd2c:	ee17 0a90 	vmov	r0, s15
 800fd30:	f817 4b01 	ldrb.w	r4, [r7], #1
 800fd34:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fd38:	6824      	ldr	r4, [r4, #0]
 800fd3a:	f846 4b04 	str.w	r4, [r6], #4
 800fd3e:	45b1      	cmp	r9, r6
 800fd40:	d8f6      	bhi.n	800fd30 <forward_conv2d_if32of32wf32+0x188>
 800fd42:	ee07 0a90 	vmov	s15, r0
 800fd46:	e7ad      	b.n	800fca4 <forward_conv2d_if32of32wf32+0xfc>
 800fd48:	6822      	ldr	r2, [r4, #0]
 800fd4a:	f46f 7588 	mvn.w	r5, #272	; 0x110
 800fd4e:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800fd52:	4115      	asrs	r5, r2
 800fd54:	f015 0501 	ands.w	r5, r5, #1
 800fd58:	d001      	beq.n	800fd5e <forward_conv2d_if32of32wf32+0x1b6>
 800fd5a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800fd5c:	e7a4      	b.n	800fca8 <forward_conv2d_if32of32wf32+0x100>
 800fd5e:	68e2      	ldr	r2, [r4, #12]
 800fd60:	2a00      	cmp	r2, #0
 800fd62:	d0fa      	beq.n	800fd5a <forward_conv2d_if32of32wf32+0x1b2>
 800fd64:	69ab      	ldr	r3, [r5, #24]
 800fd66:	deff      	udf	#255	; 0xff
 800fd68:	461c      	mov	r4, r3
 800fd6a:	e73d      	b.n	800fbe8 <forward_conv2d_if32of32wf32+0x40>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	e73b      	b.n	800fbe8 <forward_conv2d_if32of32wf32+0x40>
 800fd70:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800fd72:	4617      	mov	r7, r2
 800fd74:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800fd78:	0860      	lsrs	r0, r4, #1
 800fd7a:	f004 0401 	and.w	r4, r4, #1
 800fd7e:	9422      	str	r4, [sp, #136]	; 0x88
 800fd80:	00c4      	lsls	r4, r0, #3
 800fd82:	9012      	str	r0, [sp, #72]	; 0x48
 800fd84:	3801      	subs	r0, #1
 800fd86:	9424      	str	r4, [sp, #144]	; 0x90
 800fd88:	4654      	mov	r4, sl
 800fd8a:	9025      	str	r0, [sp, #148]	; 0x94
 800fd8c:	4692      	mov	sl, r2
 800fd8e:	ee17 0a90 	vmov	r0, s15
 800fd92:	461a      	mov	r2, r3
 800fd94:	4623      	mov	r3, r4
 800fd96:	45b9      	cmp	r9, r7
 800fd98:	d93a      	bls.n	800fe10 <forward_conv2d_if32of32wf32+0x268>
 800fd9a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800fd9c:	b374      	cbz	r4, 800fdfc <forward_conv2d_if32of32wf32+0x254>
 800fd9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800fda0:	f108 3cff 	add.w	ip, r8, #4294967295
 800fda4:	f107 0608 	add.w	r6, r7, #8
 800fda8:	eb08 0e04 	add.w	lr, r8, r4
 800fdac:	4664      	mov	r4, ip
 800fdae:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 800fdb2:	3608      	adds	r6, #8
 800fdb4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800fdb8:	4574      	cmp	r4, lr
 800fdba:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800fdbe:	f8dc c000 	ldr.w	ip, [ip]
 800fdc2:	f846 cc10 	str.w	ip, [r6, #-16]
 800fdc6:	f894 c000 	ldrb.w	ip, [r4]
 800fdca:	f00c 0c0f 	and.w	ip, ip, #15
 800fdce:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800fdd2:	f8dc c000 	ldr.w	ip, [ip]
 800fdd6:	f846 cc0c 	str.w	ip, [r6, #-12]
 800fdda:	d1e8      	bne.n	800fdae <forward_conv2d_if32of32wf32+0x206>
 800fddc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800fdde:	44a0      	add	r8, r4
 800fde0:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800fde2:	4427      	add	r7, r4
 800fde4:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800fde6:	2c00      	cmp	r4, #0
 800fde8:	d0d5      	beq.n	800fd96 <forward_conv2d_if32of32wf32+0x1ee>
 800fdea:	f818 4b01 	ldrb.w	r4, [r8], #1
 800fdee:	0924      	lsrs	r4, r4, #4
 800fdf0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800fdf4:	6824      	ldr	r4, [r4, #0]
 800fdf6:	f847 4b04 	str.w	r4, [r7], #4
 800fdfa:	e7cc      	b.n	800fd96 <forward_conv2d_if32of32wf32+0x1ee>
 800fdfc:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800fdfe:	2c00      	cmp	r4, #0
 800fe00:	d1f3      	bne.n	800fdea <forward_conv2d_if32of32wf32+0x242>
 800fe02:	461c      	mov	r4, r3
 800fe04:	4613      	mov	r3, r2
 800fe06:	4652      	mov	r2, sl
 800fe08:	46a2      	mov	sl, r4
 800fe0a:	45b9      	cmp	r9, r7
 800fe0c:	d8fd      	bhi.n	800fe0a <forward_conv2d_if32of32wf32+0x262>
 800fe0e:	e798      	b.n	800fd42 <forward_conv2d_if32of32wf32+0x19a>
 800fe10:	461c      	mov	r4, r3
 800fe12:	ee07 0a90 	vmov	s15, r0
 800fe16:	4613      	mov	r3, r2
 800fe18:	4652      	mov	r2, sl
 800fe1a:	46a2      	mov	sl, r4
 800fe1c:	e742      	b.n	800fca4 <forward_conv2d_if32of32wf32+0xfc>
 800fe1e:	bf00      	nop

0800fe20 <forward_conv2d_if32of32wf32_nl_pool>:
 800fe20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe24:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800fe28:	b0c1      	sub	sp, #260	; 0x104
 800fe2a:	f8bc 7000 	ldrh.w	r7, [ip]
 800fe2e:	2f00      	cmp	r7, #0
 800fe30:	f000 813c 	beq.w	80100ac <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800fe34:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800fe38:	4604      	mov	r4, r0
 800fe3a:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800fe3e:	f1bb 0f00 	cmp.w	fp, #0
 800fe42:	d001      	beq.n	800fe48 <forward_conv2d_if32of32wf32_nl_pool+0x28>
 800fe44:	f8db b000 	ldr.w	fp, [fp]
 800fe48:	2f01      	cmp	r7, #1
 800fe4a:	f000 812c 	beq.w	80100a6 <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800fe4e:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800fe52:	f1ba 0f00 	cmp.w	sl, #0
 800fe56:	d001      	beq.n	800fe5c <forward_conv2d_if32of32wf32_nl_pool+0x3c>
 800fe58:	f8da a000 	ldr.w	sl, [sl]
 800fe5c:	2f02      	cmp	r7, #2
 800fe5e:	f000 8122 	beq.w	80100a6 <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800fe62:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800fe66:	8b1b      	ldrh	r3, [r3, #24]
 800fe68:	f1b8 0f00 	cmp.w	r8, #0
 800fe6c:	f000 8130 	beq.w	80100d0 <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	f8d8 2000 	ldr.w	r2, [r8]
 800fe76:	f240 8131 	bls.w	80100dc <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 800fe7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe7e:	933e      	str	r3, [sp, #248]	; 0xf8
 800fe80:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800fe84:	f8db 000c 	ldr.w	r0, [fp, #12]
 800fe88:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800fe8c:	9020      	str	r0, [sp, #128]	; 0x80
 800fe8e:	f8da 000c 	ldr.w	r0, [sl, #12]
 800fe92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe94:	9021      	str	r0, [sp, #132]	; 0x84
 800fe96:	9820      	ldr	r0, [sp, #128]	; 0x80
 800fe98:	f8de 1004 	ldr.w	r1, [lr, #4]
 800fe9c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800fea0:	681e      	ldr	r6, [r3, #0]
 800fea2:	902e      	str	r0, [sp, #184]	; 0xb8
 800fea4:	9821      	ldr	r0, [sp, #132]	; 0x84
 800fea6:	9127      	str	r1, [sp, #156]	; 0x9c
 800fea8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800feac:	f8de 1008 	ldr.w	r1, [lr, #8]
 800feb0:	902f      	str	r0, [sp, #188]	; 0xbc
 800feb2:	9821      	ldr	r0, [sp, #132]	; 0x84
 800feb4:	9625      	str	r6, [sp, #148]	; 0x94
 800feb6:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800feba:	912c      	str	r1, [sp, #176]	; 0xb0
 800febc:	9030      	str	r0, [sp, #192]	; 0xc0
 800febe:	9821      	ldr	r0, [sp, #132]	; 0x84
 800fec0:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	; 0x28
 800fec4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800fec8:	9524      	str	r5, [sp, #144]	; 0x90
 800feca:	9031      	str	r0, [sp, #196]	; 0xc4
 800fecc:	685d      	ldr	r5, [r3, #4]
 800fece:	9820      	ldr	r0, [sp, #128]	; 0x80
 800fed0:	9526      	str	r5, [sp, #152]	; 0x98
 800fed2:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	; 0x30
 800fed6:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800feda:	9021      	str	r0, [sp, #132]	; 0x84
 800fedc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800fede:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800fee2:	9022      	str	r0, [sp, #136]	; 0x88
 800fee4:	fa1f f089 	uxth.w	r0, r9
 800fee8:	9032      	str	r0, [sp, #200]	; 0xc8
 800feea:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 800feee:	9033      	str	r0, [sp, #204]	; 0xcc
 800fef0:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 800fef4:	9034      	str	r0, [sp, #208]	; 0xd0
 800fef6:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
 800fefa:	9035      	str	r0, [sp, #212]	; 0xd4
 800fefc:	6898      	ldr	r0, [r3, #8]
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	902a      	str	r0, [sp, #168]	; 0xa8
 800ff02:	932b      	str	r3, [sp, #172]	; 0xac
 800ff04:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800ff08:	9336      	str	r3, [sp, #216]	; 0xd8
 800ff0a:	b2ab      	uxth	r3, r5
 800ff0c:	9337      	str	r3, [sp, #220]	; 0xdc
 800ff0e:	b2b3      	uxth	r3, r6
 800ff10:	9338      	str	r3, [sp, #224]	; 0xe0
 800ff12:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 800ff16:	9323      	str	r3, [sp, #140]	; 0x8c
 800ff18:	b20b      	sxth	r3, r1
 800ff1a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ff1c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800ff20:	9339      	str	r3, [sp, #228]	; 0xe4
 800ff22:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 800ff26:	933a      	str	r3, [sp, #232]	; 0xe8
 800ff28:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 800ff2c:	933b      	str	r3, [sp, #236]	; 0xec
 800ff2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff34:	933c      	str	r3, [sp, #240]	; 0xf0
 800ff36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ff38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ff3c:	933d      	str	r3, [sp, #244]	; 0xf4
 800ff3e:	6a23      	ldr	r3, [r4, #32]
 800ff40:	9320      	str	r3, [sp, #128]	; 0x80
 800ff42:	f1b8 0f00 	cmp.w	r8, #0
 800ff46:	f000 80b3 	beq.w	80100b0 <forward_conv2d_if32of32wf32_nl_pool+0x290>
 800ff4a:	f8d8 e018 	ldr.w	lr, [r8, #24]
 800ff4e:	f1be 0f00 	cmp.w	lr, #0
 800ff52:	f000 80b5 	beq.w	80100c0 <forward_conv2d_if32of32wf32_nl_pool+0x2a0>
 800ff56:	f8de 3008 	ldr.w	r3, [lr, #8]
 800ff5a:	9228      	str	r2, [sp, #160]	; 0xa0
 800ff5c:	9320      	str	r3, [sp, #128]	; 0x80
 800ff5e:	e9de 0100 	ldrd	r0, r1, [lr]
 800ff62:	f001 fe23 	bl	8011bac <ai_array_get_byte_size>
 800ff66:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800ff6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ff6c:	9029      	str	r0, [sp, #164]	; 0xa4
 800ff6e:	2f00      	cmp	r7, #0
 800ff70:	f000 80b7 	beq.w	80100e2 <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 800ff74:	923f      	str	r2, [sp, #252]	; 0xfc
 800ff76:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ff7a:	f001 fe17 	bl	8011bac <ai_array_get_byte_size>
 800ff7e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800ff82:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800ff84:	f8bc 7000 	ldrh.w	r7, [ip]
 800ff88:	9028      	str	r0, [sp, #160]	; 0xa0
 800ff8a:	6992      	ldr	r2, [r2, #24]
 800ff8c:	b2ad      	uxth	r5, r5
 800ff8e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800ff90:	b2b6      	uxth	r6, r6
 800ff92:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
 800ff96:	3d01      	subs	r5, #1
 800ff98:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800ff9c:	3e01      	subs	r6, #1
 800ff9e:	6893      	ldr	r3, [r2, #8]
 800ffa0:	fa1f f989 	uxth.w	r9, r9
 800ffa4:	f8db 0018 	ldr.w	r0, [fp, #24]
 800ffa8:	2f03      	cmp	r7, #3
 800ffaa:	9324      	str	r3, [sp, #144]	; 0x90
 800ffac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ffae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ffb0:	f103 3bff 	add.w	fp, r3, #4294967295
 800ffb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ffb6:	f8da 1018 	ldr.w	r1, [sl, #24]
 800ffba:	fb15 250b 	smlabb	r5, r5, fp, r2
 800ffbe:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800ffc0:	f8de a008 	ldr.w	sl, [lr, #8]
 800ffc4:	fa0f fb85 	sxth.w	fp, r5
 800ffc8:	f103 35ff 	add.w	r5, r3, #4294967295
 800ffcc:	6880      	ldr	r0, [r0, #8]
 800ffce:	fb16 2605 	smlabb	r6, r6, r5, r2
 800ffd2:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800ffd4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ffd6:	eba5 050b 	sub.w	r5, r5, fp
 800ffda:	b236      	sxth	r6, r6
 800ffdc:	6889      	ldr	r1, [r1, #8]
 800ffde:	fa15 f582 	uxtah	r5, r5, r2
 800ffe2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800ffe4:	fa15 f582 	uxtah	r5, r5, r2
 800ffe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffea:	eba2 0e06 	sub.w	lr, r2, r6
 800ffee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800fff0:	fa1e fe82 	uxtah	lr, lr, r2
 800fff4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800fff6:	fb95 f5f9 	sdiv	r5, r5, r9
 800fffa:	fa1e fe82 	uxtah	lr, lr, r2
 800fffe:	f105 0501 	add.w	r5, r5, #1
 8010002:	f8d4 905c 	ldr.w	r9, [r4, #92]	; 0x5c
 8010006:	b22d      	sxth	r5, r5
 8010008:	fb9e fef8 	sdiv	lr, lr, r8
 801000c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8010010:	f10e 0e01 	add.w	lr, lr, #1
 8010014:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	; 0x48
 8010018:	d945      	bls.n	80100a6 <forward_conv2d_if32of32wf32_nl_pool+0x286>
 801001a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801001e:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8010020:	2f00      	cmp	r7, #0
 8010022:	d068      	beq.n	80100f6 <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8010024:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8010026:	9512      	str	r5, [sp, #72]	; 0x48
 8010028:	921e      	str	r2, [sp, #120]	; 0x78
 801002a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 801002c:	960d      	str	r6, [sp, #52]	; 0x34
 801002e:	921d      	str	r2, [sp, #116]	; 0x74
 8010030:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8010032:	921c      	str	r2, [sp, #112]	; 0x70
 8010034:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8010036:	e9cd 421a 	strd	r4, r2, [sp, #104]	; 0x68
 801003a:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 801003c:	e9cd 9418 	strd	r9, r4, [sp, #96]	; 0x60
 8010040:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8010042:	9417      	str	r4, [sp, #92]	; 0x5c
 8010044:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8010046:	9416      	str	r4, [sp, #88]	; 0x58
 8010048:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801004a:	e9cd 8414 	strd	r8, r4, [sp, #80]	; 0x50
 801004e:	9c36      	ldr	r4, [sp, #216]	; 0xd8
 8010050:	9411      	str	r4, [sp, #68]	; 0x44
 8010052:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8010054:	9410      	str	r4, [sp, #64]	; 0x40
 8010056:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8010058:	e9cd b40e 	strd	fp, r4, [sp, #56]	; 0x38
 801005c:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 801005e:	940c      	str	r4, [sp, #48]	; 0x30
 8010060:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 8010062:	940b      	str	r4, [sp, #44]	; 0x2c
 8010064:	9c34      	ldr	r4, [sp, #208]	; 0xd0
 8010066:	9308      	str	r3, [sp, #32]
 8010068:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801006a:	940a      	str	r4, [sp, #40]	; 0x28
 801006c:	9307      	str	r3, [sp, #28]
 801006e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8010070:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8010072:	9306      	str	r3, [sp, #24]
 8010074:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8010076:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010078:	9305      	str	r3, [sp, #20]
 801007a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801007c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801007e:	9302      	str	r3, [sp, #8]
 8010080:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8010082:	9204      	str	r2, [sp, #16]
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	fa0f f38e 	sxth.w	r3, lr
 801008a:	9409      	str	r4, [sp, #36]	; 0x24
 801008c:	9313      	str	r3, [sp, #76]	; 0x4c
 801008e:	4653      	mov	r3, sl
 8010090:	9503      	str	r5, [sp, #12]
 8010092:	683c      	ldr	r4, [r7, #0]
 8010094:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010096:	69a4      	ldr	r4, [r4, #24]
 8010098:	68a4      	ldr	r4, [r4, #8]
 801009a:	9400      	str	r4, [sp, #0]
 801009c:	f000 fd60 	bl	8010b60 <forward_lite_conv2d_if32of32wf32_pool>
 80100a0:	b041      	add	sp, #260	; 0x104
 80100a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a6:	2300      	movs	r3, #0
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	deff      	udf	#255	; 0xff
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	deff      	udf	#255	; 0xff
 80100b0:	b10b      	cbz	r3, 80100b6 <forward_conv2d_if32of32wf32_nl_pool+0x296>
 80100b2:	689b      	ldr	r3, [r3, #8]
 80100b4:	9320      	str	r3, [sp, #128]	; 0x80
 80100b6:	2301      	movs	r3, #1
 80100b8:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
 80100bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80100be:	e764      	b.n	800ff8a <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 80100c0:	b10b      	cbz	r3, 80100c6 <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	9320      	str	r3, [sp, #128]	; 0x80
 80100c6:	2301      	movs	r3, #1
 80100c8:	2100      	movs	r1, #0
 80100ca:	e9cd 3128 	strd	r3, r1, [sp, #160]	; 0xa0
 80100ce:	e75c      	b.n	800ff8a <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d90d      	bls.n	80100f0 <forward_conv2d_if32of32wf32_nl_pool+0x2d0>
 80100d4:	4642      	mov	r2, r8
 80100d6:	f8cd 80f8 	str.w	r8, [sp, #248]	; 0xf8
 80100da:	e6d3      	b.n	800fe84 <forward_conv2d_if32of32wf32_nl_pool+0x64>
 80100dc:	2300      	movs	r3, #0
 80100de:	933e      	str	r3, [sp, #248]	; 0xf8
 80100e0:	e6ce      	b.n	800fe80 <forward_conv2d_if32of32wf32_nl_pool+0x60>
 80100e2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80100e6:	2301      	movs	r3, #1
 80100e8:	f8bc 7000 	ldrh.w	r7, [ip]
 80100ec:	9328      	str	r3, [sp, #160]	; 0xa0
 80100ee:	e74c      	b.n	800ff8a <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 80100f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100f4:	deff      	udf	#255	; 0xff
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	deff      	udf	#255	; 0xff
 80100fa:	bf00      	nop

080100fc <forward_dense>:
 80100fc:	6983      	ldr	r3, [r0, #24]
 80100fe:	881a      	ldrh	r2, [r3, #0]
 8010100:	2a00      	cmp	r2, #0
 8010102:	f000 80cb 	beq.w	801029c <forward_dense+0x1a0>
 8010106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010a:	ed2d 8b02 	vpush	{d8}
 801010e:	6858      	ldr	r0, [r3, #4]
 8010110:	b09b      	sub	sp, #108	; 0x6c
 8010112:	6844      	ldr	r4, [r0, #4]
 8010114:	b104      	cbz	r4, 8010118 <forward_dense+0x1c>
 8010116:	6824      	ldr	r4, [r4, #0]
 8010118:	2a01      	cmp	r2, #1
 801011a:	f000 81d8 	beq.w	80104ce <forward_dense+0x3d2>
 801011e:	6905      	ldr	r5, [r0, #16]
 8010120:	b105      	cbz	r5, 8010124 <forward_dense+0x28>
 8010122:	682d      	ldr	r5, [r5, #0]
 8010124:	2a02      	cmp	r2, #2
 8010126:	f000 80bb 	beq.w	80102a0 <forward_dense+0x1a4>
 801012a:	69c3      	ldr	r3, [r0, #28]
 801012c:	9308      	str	r3, [sp, #32]
 801012e:	2b00      	cmp	r3, #0
 8010130:	f000 81c4 	beq.w	80104bc <forward_dense+0x3c0>
 8010134:	4619      	mov	r1, r3
 8010136:	8b03      	ldrh	r3, [r0, #24]
 8010138:	6809      	ldr	r1, [r1, #0]
 801013a:	2b01      	cmp	r3, #1
 801013c:	910a      	str	r1, [sp, #40]	; 0x28
 801013e:	f240 81bf 	bls.w	80104c0 <forward_dense+0x3c4>
 8010142:	9b08      	ldr	r3, [sp, #32]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	9308      	str	r3, [sp, #32]
 8010148:	460b      	mov	r3, r1
 801014a:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801014e:	2a03      	cmp	r2, #3
 8010150:	68e3      	ldr	r3, [r4, #12]
 8010152:	68ee      	ldr	r6, [r5, #12]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	6877      	ldr	r7, [r6, #4]
 8010158:	9310      	str	r3, [sp, #64]	; 0x40
 801015a:	f8d9 3000 	ldr.w	r3, [r9]
 801015e:	4639      	mov	r1, r7
 8010160:	970f      	str	r7, [sp, #60]	; 0x3c
 8010162:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8010166:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 801016a:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 801016e:	fb01 f707 	mul.w	r7, r1, r7
 8010172:	fa4e f10c 	asr.w	r1, lr, ip
 8010176:	910d      	str	r1, [sp, #52]	; 0x34
 8010178:	f000 81a6 	beq.w	80104c8 <forward_dense+0x3cc>
 801017c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8010180:	f1b8 0f00 	cmp.w	r8, #0
 8010184:	d006      	beq.n	8010194 <forward_dense+0x98>
 8010186:	f8d8 8000 	ldr.w	r8, [r8]
 801018a:	f1b8 0f00 	cmp.w	r8, #0
 801018e:	d001      	beq.n	8010194 <forward_dense+0x98>
 8010190:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8010194:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8010198:	f46f 7288 	mvn.w	r2, #272	; 0x110
 801019c:	fa42 f303 	asr.w	r3, r2, r3
 80101a0:	07db      	lsls	r3, r3, #31
 80101a2:	f140 8178 	bpl.w	8010496 <forward_dense+0x39a>
 80101a6:	f04f 0900 	mov.w	r9, #0
 80101aa:	69a3      	ldr	r3, [r4, #24]
 80101ac:	fb07 f606 	mul.w	r6, r7, r6
 80101b0:	69aa      	ldr	r2, [r5, #24]
 80101b2:	6891      	ldr	r1, [r2, #8]
 80101b4:	689a      	ldr	r2, [r3, #8]
 80101b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b8:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80101bc:	9102      	str	r1, [sp, #8]
 80101be:	695b      	ldr	r3, [r3, #20]
 80101c0:	4281      	cmp	r1, r0
 80101c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	9303      	str	r3, [sp, #12]
 80101c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101ca:	ea4f 0483 	mov.w	r4, r3, lsl #2
 80101ce:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 80101d2:	9409      	str	r4, [sp, #36]	; 0x24
 80101d4:	d25d      	bcs.n	8010292 <forward_dense+0x196>
 80101d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80101d8:	4693      	mov	fp, r2
 80101da:	464c      	mov	r4, r9
 80101dc:	ed9f 8abd 	vldr	s16, [pc, #756]	; 80104d4 <forward_dense+0x3d8>
 80101e0:	08d9      	lsrs	r1, r3, #3
 80101e2:	46c1      	mov	r9, r8
 80101e4:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80101e8:	461a      	mov	r2, r3
 80101ea:	f023 0301 	bic.w	r3, r3, #1
 80101ee:	9104      	str	r1, [sp, #16]
 80101f0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	014b      	lsls	r3, r1, #5
 80101f8:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 80101fc:	9311      	str	r3, [sp, #68]	; 0x44
 80101fe:	0093      	lsls	r3, r2, #2
 8010200:	930c      	str	r3, [sp, #48]	; 0x30
 8010202:	f002 0301 	and.w	r3, r2, #1
 8010206:	9305      	str	r3, [sp, #20]
 8010208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801020a:	699b      	ldr	r3, [r3, #24]
 801020c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8010210:	9b08      	ldr	r3, [sp, #32]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d04a      	beq.n	80102ac <forward_dense+0x1b0>
 8010216:	699b      	ldr	r3, [r3, #24]
 8010218:	689d      	ldr	r5, [r3, #8]
 801021a:	2c00      	cmp	r4, #0
 801021c:	d049      	beq.n	80102b2 <forward_dense+0x1b6>
 801021e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010220:	2b04      	cmp	r3, #4
 8010222:	9b02      	ldr	r3, [sp, #8]
 8010224:	d058      	beq.n	80102d8 <forward_dense+0x1dc>
 8010226:	4599      	cmp	r9, r3
 8010228:	d927      	bls.n	801027a <forward_dense+0x17e>
 801022a:	4618      	mov	r0, r3
 801022c:	9e03      	ldr	r6, [sp, #12]
 801022e:	2d00      	cmp	r5, #0
 8010230:	d039      	beq.n	80102a6 <forward_dense+0x1aa>
 8010232:	ecb5 6a01 	vldmia	r5!, {s12}
 8010236:	45da      	cmp	sl, fp
 8010238:	d911      	bls.n	801025e <forward_dense+0x162>
 801023a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80104d4 <forward_dense+0x3d8>
 801023e:	465a      	mov	r2, fp
 8010240:	4661      	mov	r1, ip
 8010242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010246:	ecb2 7a01 	vldmia	r2!, {s14}
 801024a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801024e:	4592      	cmp	sl, r2
 8010250:	edd3 6a00 	vldr	s13, [r3]
 8010254:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010258:	d8f3      	bhi.n	8010242 <forward_dense+0x146>
 801025a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801025e:	eca0 6a01 	vstmia	r0!, {s12}
 8010262:	4548      	cmp	r0, r9
 8010264:	44b4      	add	ip, r6
 8010266:	d3e2      	bcc.n	801022e <forward_dense+0x132>
 8010268:	9a02      	ldr	r2, [sp, #8]
 801026a:	eba9 0302 	sub.w	r3, r9, r2
 801026e:	3b01      	subs	r3, #1
 8010270:	f023 0303 	bic.w	r3, r3, #3
 8010274:	3304      	adds	r3, #4
 8010276:	18d3      	adds	r3, r2, r3
 8010278:	9302      	str	r3, [sp, #8]
 801027a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801027c:	9a01      	ldr	r2, [sp, #4]
 801027e:	4499      	add	r9, r3
 8010280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010282:	441a      	add	r2, r3
 8010284:	449a      	add	sl, r3
 8010286:	449b      	add	fp, r3
 8010288:	9b02      	ldr	r3, [sp, #8]
 801028a:	9201      	str	r2, [sp, #4]
 801028c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801028e:	4293      	cmp	r3, r2
 8010290:	d3ba      	bcc.n	8010208 <forward_dense+0x10c>
 8010292:	b01b      	add	sp, #108	; 0x6c
 8010294:	ecbd 8b02 	vpop	{d8}
 8010298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801029c:	6853      	ldr	r3, [r2, #4]
 801029e:	deff      	udf	#255	; 0xff
 80102a0:	2300      	movs	r3, #0
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	deff      	udf	#255	; 0xff
 80102a6:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 80104d4 <forward_dense+0x3d8>
 80102aa:	e7c4      	b.n	8010236 <forward_dense+0x13a>
 80102ac:	461d      	mov	r5, r3
 80102ae:	2c00      	cmp	r4, #0
 80102b0:	d1b5      	bne.n	801021e <forward_dense+0x122>
 80102b2:	9b02      	ldr	r3, [sp, #8]
 80102b4:	a813      	add	r0, sp, #76	; 0x4c
 80102b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80102ba:	4413      	add	r3, r2
 80102bc:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 80102c0:	9302      	str	r3, [sp, #8]
 80102c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80102c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102c8:	9318      	str	r3, [sp, #96]	; 0x60
 80102ca:	2301      	movs	r3, #1
 80102cc:	e9cd c515 	strd	ip, r5, [sp, #84]	; 0x54
 80102d0:	9319      	str	r3, [sp, #100]	; 0x64
 80102d2:	f001 f9f9 	bl	80116c8 <forward_lite_dense_if32of32wf32>
 80102d6:	e7d0      	b.n	801027a <forward_dense+0x17e>
 80102d8:	4599      	cmp	r9, r3
 80102da:	d9ce      	bls.n	801027a <forward_dense+0x17e>
 80102dc:	9a04      	ldr	r2, [sp, #16]
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	1c57      	adds	r7, r2, #1
 80102e2:	9b01      	ldr	r3, [sp, #4]
 80102e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80102e6:	3b01      	subs	r3, #1
 80102e8:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 80102ec:	4452      	add	r2, sl
 80102ee:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80102f2:	9307      	str	r3, [sp, #28]
 80102f4:	9206      	str	r2, [sp, #24]
 80102f6:	2d00      	cmp	r5, #0
 80102f8:	f000 80c2 	beq.w	8010480 <forward_dense+0x384>
 80102fc:	9b04      	ldr	r3, [sp, #16]
 80102fe:	ecf5 2a01 	vldmia	r5!, {s5}
 8010302:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80104d4 <forward_dense+0x3d8>
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 80c2 	beq.w	8010490 <forward_dense+0x394>
 801030c:	f10c 0204 	add.w	r2, ip, #4
 8010310:	f10b 0320 	add.w	r3, fp, #32
 8010314:	f812 6c04 	ldrb.w	r6, [r2, #-4]
 8010318:	3204      	adds	r2, #4
 801031a:	ed13 2a07 	vldr	s4, [r3, #-28]	; 0xffffffe4
 801031e:	3320      	adds	r3, #32
 8010320:	f006 0e0f 	and.w	lr, r6, #15
 8010324:	0936      	lsrs	r6, r6, #4
 8010326:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 801032a:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801032e:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 8010332:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010336:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 801033a:	edde 7a00 	vldr	s15, [lr]
 801033e:	ed96 3a00 	vldr	s6, [r6]
 8010342:	0906      	lsrs	r6, r0, #4
 8010344:	ee67 7a82 	vmul.f32	s15, s15, s4
 8010348:	f000 000f 	and.w	r0, r0, #15
 801034c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010350:	f812 1c06 	ldrb.w	r1, [r2, #-6]
 8010354:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8010358:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 801035c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010360:	ed96 3a00 	vldr	s6, [r6]
 8010364:	ed90 4a00 	vldr	s8, [r0]
 8010368:	0908      	lsrs	r0, r1, #4
 801036a:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 801036e:	f001 010f 	and.w	r1, r1, #15
 8010372:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8010376:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 801037a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801037e:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8010382:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8010386:	eee3 7a23 	vfma.f32	s15, s6, s7
 801038a:	eee4 7a05 	vfma.f32	s15, s8, s10
 801038e:	ed90 4a00 	vldr	s8, [r0]
 8010392:	ed91 5a00 	vldr	s10, [r1]
 8010396:	f812 1c05 	ldrb.w	r1, [r2, #-5]
 801039a:	42ba      	cmp	r2, r7
 801039c:	ea4f 1011 	mov.w	r0, r1, lsr #4
 80103a0:	f001 010f 	and.w	r1, r1, #15
 80103a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80103a8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80103ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80103b0:	eee5 7a06 	vfma.f32	s15, s10, s12
 80103b4:	ed90 5a00 	vldr	s10, [r0]
 80103b8:	ed91 6a00 	vldr	s12, [r1]
 80103bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80103c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80103c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103c8:	d1a4      	bne.n	8010314 <forward_dense+0x218>
 80103ca:	f1a7 0804 	sub.w	r8, r7, #4
 80103ce:	f8dd e018 	ldr.w	lr, [sp, #24]
 80103d2:	9b01      	ldr	r3, [sp, #4]
 80103d4:	459e      	cmp	lr, r3
 80103d6:	d229      	bcs.n	801042c <forward_dense+0x330>
 80103d8:	9b07      	ldr	r3, [sp, #28]
 80103da:	f10e 0208 	add.w	r2, lr, #8
 80103de:	f108 30ff 	add.w	r0, r8, #4294967295
 80103e2:	eba3 060e 	sub.w	r6, r3, lr
 80103e6:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 80103ea:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 80103ee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80103f2:	3208      	adds	r2, #8
 80103f4:	ed52 5a03 	vldr	s11, [r2, #-12]
 80103f8:	f003 010f 	and.w	r1, r3, #15
 80103fc:	091b      	lsrs	r3, r3, #4
 80103fe:	ed52 6a04 	vldr	s13, [r2, #-16]
 8010402:	42b0      	cmp	r0, r6
 8010404:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010408:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801040c:	edd1 7a00 	vldr	s15, [r1]
 8010410:	ed93 6a00 	vldr	s12, [r3]
 8010414:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010418:	eee6 7a26 	vfma.f32	s15, s12, s13
 801041c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010420:	d1e5      	bne.n	80103ee <forward_dense+0x2f2>
 8010422:	f10a 0a01 	add.w	sl, sl, #1
 8010426:	44d0      	add	r8, sl
 8010428:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 801042c:	9b05      	ldr	r3, [sp, #20]
 801042e:	b1cb      	cbz	r3, 8010464 <forward_dense+0x368>
 8010430:	f898 3000 	ldrb.w	r3, [r8]
 8010434:	edde 7a00 	vldr	s15, [lr]
 8010438:	091b      	lsrs	r3, r3, #4
 801043a:	9a03      	ldr	r2, [sp, #12]
 801043c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010440:	4494      	add	ip, r2
 8010442:	4417      	add	r7, r2
 8010444:	edd3 6a00 	vldr	s13, [r3]
 8010448:	9b00      	ldr	r3, [sp, #0]
 801044a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801044e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8010452:	eca3 7a01 	vstmia	r3!, {s14}
 8010456:	4599      	cmp	r9, r3
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	f63f af4c 	bhi.w	80102f6 <forward_dense+0x1fa>
 801045e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8010462:	e701      	b.n	8010268 <forward_dense+0x16c>
 8010464:	9b03      	ldr	r3, [sp, #12]
 8010466:	ee72 2a87 	vadd.f32	s5, s5, s14
 801046a:	449c      	add	ip, r3
 801046c:	441f      	add	r7, r3
 801046e:	9b00      	ldr	r3, [sp, #0]
 8010470:	ece3 2a01 	vstmia	r3!, {s5}
 8010474:	454b      	cmp	r3, r9
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	d2f1      	bcs.n	801045e <forward_dense+0x362>
 801047a:	2d00      	cmp	r5, #0
 801047c:	f47f af3e 	bne.w	80102fc <forward_dense+0x200>
 8010480:	9b04      	ldr	r3, [sp, #16]
 8010482:	eef0 2a48 	vmov.f32	s5, s16
 8010486:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80104d4 <forward_dense+0x3d8>
 801048a:	2b00      	cmp	r3, #0
 801048c:	f47f af3e 	bne.w	801030c <forward_dense+0x210>
 8010490:	46de      	mov	lr, fp
 8010492:	46e0      	mov	r8, ip
 8010494:	e79d      	b.n	80103d2 <forward_dense+0x2d6>
 8010496:	f8d9 900c 	ldr.w	r9, [r9, #12]
 801049a:	f1b8 0f00 	cmp.w	r8, #0
 801049e:	f43f ae84 	beq.w	80101aa <forward_dense+0xae>
 80104a2:	e9d8 0100 	ldrd	r0, r1, [r8]
 80104a6:	f001 fb81 	bl	8011bac <ai_array_get_byte_size>
 80104aa:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80104ae:	4602      	mov	r2, r0
 80104b0:	4648      	mov	r0, r9
 80104b2:	4641      	mov	r1, r8
 80104b4:	46c1      	mov	r9, r8
 80104b6:	f001 fa81 	bl	80119bc <st_int8_copy>
 80104ba:	e676      	b.n	80101aa <forward_dense+0xae>
 80104bc:	930a      	str	r3, [sp, #40]	; 0x28
 80104be:	e644      	b.n	801014a <forward_dense+0x4e>
 80104c0:	2300      	movs	r3, #0
 80104c2:	9308      	str	r3, [sp, #32]
 80104c4:	460b      	mov	r3, r1
 80104c6:	e640      	b.n	801014a <forward_dense+0x4e>
 80104c8:	2300      	movs	r3, #0
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	deff      	udf	#255	; 0xff
 80104ce:	2300      	movs	r3, #0
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	deff      	udf	#255	; 0xff
 80104d4:	00000000 	.word	0x00000000

080104d8 <forward_relu>:
 80104d8:	6982      	ldr	r2, [r0, #24]
 80104da:	8813      	ldrh	r3, [r2, #0]
 80104dc:	b323      	cbz	r3, 8010528 <forward_relu+0x50>
 80104de:	6851      	ldr	r1, [r2, #4]
 80104e0:	684a      	ldr	r2, [r1, #4]
 80104e2:	b102      	cbz	r2, 80104e6 <forward_relu+0xe>
 80104e4:	6812      	ldr	r2, [r2, #0]
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	f000 8086 	beq.w	80105f8 <forward_relu+0x120>
 80104ec:	b470      	push	{r4, r5, r6}
 80104ee:	690b      	ldr	r3, [r1, #16]
 80104f0:	b103      	cbz	r3, 80104f4 <forward_relu+0x1c>
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	69c6      	ldr	r6, [r0, #28]
 80104f6:	b1ce      	cbz	r6, 801052c <forward_relu+0x54>
 80104f8:	6871      	ldr	r1, [r6, #4]
 80104fa:	6998      	ldr	r0, [r3, #24]
 80104fc:	2901      	cmp	r1, #1
 80104fe:	d03f      	beq.n	8010580 <forward_relu+0xa8>
 8010500:	6893      	ldr	r3, [r2, #8]
 8010502:	6991      	ldr	r1, [r2, #24]
 8010504:	0a1b      	lsrs	r3, r3, #8
 8010506:	6880      	ldr	r0, [r0, #8]
 8010508:	6889      	ldr	r1, [r1, #8]
 801050a:	d06c      	beq.n	80105e6 <forward_relu+0x10e>
 801050c:	68d5      	ldr	r5, [r2, #12]
 801050e:	2201      	movs	r2, #1
 8010510:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010514:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8010518:	429d      	cmp	r5, r3
 801051a:	fb04 f202 	mul.w	r2, r4, r2
 801051e:	d1f9      	bne.n	8010514 <forward_relu+0x3c>
 8010520:	68b3      	ldr	r3, [r6, #8]
 8010522:	bc70      	pop	{r4, r5, r6}
 8010524:	f000 be52 	b.w	80111cc <forward_lite_nl_relu_generic_if32of32_kernel>
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	deff      	udf	#255	; 0xff
 801052c:	6999      	ldr	r1, [r3, #24]
 801052e:	6893      	ldr	r3, [r2, #8]
 8010530:	6990      	ldr	r0, [r2, #24]
 8010532:	0a1b      	lsrs	r3, r3, #8
 8010534:	6889      	ldr	r1, [r1, #8]
 8010536:	6884      	ldr	r4, [r0, #8]
 8010538:	d057      	beq.n	80105ea <forward_relu+0x112>
 801053a:	68d5      	ldr	r5, [r2, #12]
 801053c:	2201      	movs	r2, #1
 801053e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010542:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8010546:	429d      	cmp	r5, r3
 8010548:	fb00 f202 	mul.w	r2, r0, r2
 801054c:	d1f9      	bne.n	8010542 <forward_relu+0x6a>
 801054e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010552:	4413      	add	r3, r2
 8010554:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010558:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801055c:	4294      	cmp	r4, r2
 801055e:	d80d      	bhi.n	801057c <forward_relu+0xa4>
 8010560:	3204      	adds	r2, #4
 8010562:	3104      	adds	r1, #4
 8010564:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8010600 <forward_relu+0x128>
 8010568:	4613      	mov	r3, r2
 801056a:	ed72 7a01 	vldmdb	r2!, {s15}
 801056e:	3b08      	subs	r3, #8
 8010570:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010574:	ed61 7a01 	vstmdb	r1!, {s15}
 8010578:	429c      	cmp	r4, r3
 801057a:	d9f5      	bls.n	8010568 <forward_relu+0x90>
 801057c:	bc70      	pop	{r4, r5, r6}
 801057e:	4770      	bx	lr
 8010580:	6993      	ldr	r3, [r2, #24]
 8010582:	6880      	ldr	r0, [r0, #8]
 8010584:	689c      	ldr	r4, [r3, #8]
 8010586:	6893      	ldr	r3, [r2, #8]
 8010588:	0a1b      	lsrs	r3, r3, #8
 801058a:	d030      	beq.n	80105ee <forward_relu+0x116>
 801058c:	68d5      	ldr	r5, [r2, #12]
 801058e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010592:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010596:	429d      	cmp	r5, r3
 8010598:	fb02 f101 	mul.w	r1, r2, r1
 801059c:	d1f9      	bne.n	8010592 <forward_relu+0xba>
 801059e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80105a2:	68b3      	ldr	r3, [r6, #8]
 80105a4:	440a      	add	r2, r1
 80105a6:	ed93 7a00 	vldr	s14, [r3]
 80105aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105ae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80105b2:	429c      	cmp	r4, r3
 80105b4:	d8e2      	bhi.n	801057c <forward_relu+0xa4>
 80105b6:	1d02      	adds	r2, r0, #4
 80105b8:	3304      	adds	r3, #4
 80105ba:	2000      	movs	r0, #0
 80105bc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80105c0:	1f19      	subs	r1, r3, #4
 80105c2:	3b08      	subs	r3, #8
 80105c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105cc:	d405      	bmi.n	80105da <forward_relu+0x102>
 80105ce:	429c      	cmp	r4, r3
 80105d0:	f842 0d04 	str.w	r0, [r2, #-4]!
 80105d4:	d8d2      	bhi.n	801057c <forward_relu+0xa4>
 80105d6:	460b      	mov	r3, r1
 80105d8:	e7f0      	b.n	80105bc <forward_relu+0xe4>
 80105da:	429c      	cmp	r4, r3
 80105dc:	ed62 7a01 	vstmdb	r2!, {s15}
 80105e0:	d8cc      	bhi.n	801057c <forward_relu+0xa4>
 80105e2:	460b      	mov	r3, r1
 80105e4:	e7ea      	b.n	80105bc <forward_relu+0xe4>
 80105e6:	2201      	movs	r2, #1
 80105e8:	e79a      	b.n	8010520 <forward_relu+0x48>
 80105ea:	4622      	mov	r2, r4
 80105ec:	e7b8      	b.n	8010560 <forward_relu+0x88>
 80105ee:	68b2      	ldr	r2, [r6, #8]
 80105f0:	4623      	mov	r3, r4
 80105f2:	ed92 7a00 	vldr	s14, [r2]
 80105f6:	e7de      	b.n	80105b6 <forward_relu+0xde>
 80105f8:	2300      	movs	r3, #0
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	deff      	udf	#255	; 0xff
 80105fe:	bf00      	nop
 8010600:	00000000 	.word	0x00000000

08010604 <forward_sm>:
 8010604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010608:	6982      	ldr	r2, [r0, #24]
 801060a:	8813      	ldrh	r3, [r2, #0]
 801060c:	b383      	cbz	r3, 8010670 <forward_sm+0x6c>
 801060e:	6852      	ldr	r2, [r2, #4]
 8010610:	6855      	ldr	r5, [r2, #4]
 8010612:	b105      	cbz	r5, 8010616 <forward_sm+0x12>
 8010614:	682d      	ldr	r5, [r5, #0]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d029      	beq.n	801066e <forward_sm+0x6a>
 801061a:	6913      	ldr	r3, [r2, #16]
 801061c:	b363      	cbz	r3, 8010678 <forward_sm+0x74>
 801061e:	681e      	ldr	r6, [r3, #0]
 8010620:	68a9      	ldr	r1, [r5, #8]
 8010622:	68ec      	ldr	r4, [r5, #12]
 8010624:	68f3      	ldr	r3, [r6, #12]
 8010626:	0a09      	lsrs	r1, r1, #8
 8010628:	6867      	ldr	r7, [r4, #4]
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	d022      	beq.n	8010674 <forward_sm+0x70>
 801062e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010632:	2301      	movs	r3, #1
 8010634:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8010638:	428c      	cmp	r4, r1
 801063a:	fb00 f303 	mul.w	r3, r0, r3
 801063e:	d1f9      	bne.n	8010634 <forward_sm+0x30>
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	69a8      	ldr	r0, [r5, #24]
 8010644:	69b1      	ldr	r1, [r6, #24]
 8010646:	6884      	ldr	r4, [r0, #8]
 8010648:	688e      	ldr	r6, [r1, #8]
 801064a:	18e5      	adds	r5, r4, r3
 801064c:	42ac      	cmp	r4, r5
 801064e:	d20c      	bcs.n	801066a <forward_sm+0x66>
 8010650:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8010654:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8010658:	4621      	mov	r1, r4
 801065a:	444c      	add	r4, r9
 801065c:	4630      	mov	r0, r6
 801065e:	463a      	mov	r2, r7
 8010660:	f000 fd70 	bl	8011144 <forward_lite_nl_softmax_if32of32_kernel>
 8010664:	42a5      	cmp	r5, r4
 8010666:	4446      	add	r6, r8
 8010668:	d8f6      	bhi.n	8010658 <forward_sm+0x54>
 801066a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801066e:	2300      	movs	r3, #0
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	deff      	udf	#255	; 0xff
 8010674:	2304      	movs	r3, #4
 8010676:	e7e4      	b.n	8010642 <forward_sm+0x3e>
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	deff      	udf	#255	; 0xff

0801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 801067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010680:	ed2d 8b0c 	vpush	{d8-d13}
 8010684:	b08d      	sub	sp, #52	; 0x34
 8010686:	461d      	mov	r5, r3
 8010688:	9003      	str	r0, [sp, #12]
 801068a:	9207      	str	r2, [sp, #28]
 801068c:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801068e:	9308      	str	r3, [sp, #32]
 8010690:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 8010694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010696:	910b      	str	r1, [sp, #44]	; 0x2c
 8010698:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
 801069c:	fb00 f002 	mul.w	r0, r0, r2
 80106a0:	9004      	str	r0, [sp, #16]
 80106a2:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 80106a6:	9009      	str	r0, [sp, #36]	; 0x24
 80106a8:	2c00      	cmp	r4, #0
 80106aa:	f000 80ed 	beq.w	8010888 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 80106ae:	009c      	lsls	r4, r3, #2
 80106b0:	fb00 f305 	mul.w	r3, r0, r5
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	9405      	str	r4, [sp, #20]
 80106b8:	9306      	str	r3, [sp, #24]
 80106ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80106bc:	fb03 f305 	mul.w	r3, r3, r5
 80106c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80106c8:	425b      	negs	r3, r3
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	2300      	movs	r3, #0
 80106ce:	9302      	str	r3, [sp, #8]
 80106d0:	00ab      	lsls	r3, r5, #2
 80106d2:	930a      	str	r3, [sp, #40]	; 0x28
 80106d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f2c0 80dd 	blt.w	8010896 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 80106dc:	9e01      	ldr	r6, [sp, #4]
 80106de:	2000      	movs	r0, #0
 80106e0:	9d04      	ldr	r5, [sp, #16]
 80106e2:	9b07      	ldr	r3, [sp, #28]
 80106e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106e6:	9900      	ldr	r1, [sp, #0]
 80106e8:	fb05 3502 	mla	r5, r5, r2, r3
 80106ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80106ee:	440b      	add	r3, r1
 80106f0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80106f2:	428b      	cmp	r3, r1
 80106f4:	bf94      	ite	ls
 80106f6:	ebc0 0003 	rsbls	r0, r0, r3
 80106fa:	ebc0 0001 	rsbhi	r0, r0, r1
 80106fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010700:	f1bb 0f00 	cmp.w	fp, #0
 8010704:	eba3 0a00 	sub.w	sl, r3, r0
 8010708:	9b08      	ldr	r3, [sp, #32]
 801070a:	eba1 0900 	sub.w	r9, r1, r0
 801070e:	fb03 f000 	mul.w	r0, r3, r0
 8010712:	f340 80c6 	ble.w	80108a2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8010716:	f020 040f 	bic.w	r4, r0, #15
 801071a:	eeb0 7a40 	vmov.f32	s14, s0
 801071e:	fb02 fa0a 	mul.w	sl, r2, sl
 8010722:	f04f 0c00 	mov.w	ip, #0
 8010726:	f104 38ff 	add.w	r8, r4, #4294967295
 801072a:	fb02 f909 	mul.w	r9, r2, r9
 801072e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8010732:	f108 0801 	add.w	r8, r8, #1
 8010736:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 801073a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801073e:	2c00      	cmp	r4, #0
 8010740:	f340 80a7 	ble.w	8010892 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8010744:	f106 0240 	add.w	r2, r6, #64	; 0x40
 8010748:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801074c:	2100      	movs	r1, #0
 801074e:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8010752:	3110      	adds	r1, #16
 8010754:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8010758:	3340      	adds	r3, #64	; 0x40
 801075a:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 801075e:	42a1      	cmp	r1, r4
 8010760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010764:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8010768:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 801076c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8010770:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8010774:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010778:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 801077c:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8010780:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8010784:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8010788:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 801078c:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8010790:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010794:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8010798:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 801079c:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 80107a0:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 80107a4:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 80107a8:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 80107ac:	eeed 7aa6 	vfma.f32	s15, s27, s13
 80107b0:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 80107b4:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 80107b8:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 80107bc:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80107c0:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80107c4:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80107c8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80107cc:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80107d0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80107d4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80107d8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80107dc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80107e0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80107e4:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80107e8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80107ec:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80107f0:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80107f4:	eeea 7a29 	vfma.f32	s15, s20, s19
 80107f8:	eee9 7a28 	vfma.f32	s15, s18, s17
 80107fc:	eee8 7a20 	vfma.f32	s15, s16, s1
 8010800:	eee1 7a21 	vfma.f32	s15, s2, s3
 8010804:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010808:	eee3 7a23 	vfma.f32	s15, s6, s7
 801080c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010810:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010814:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010818:	ee37 7a27 	vadd.f32	s14, s14, s15
 801081c:	db97      	blt.n	801074e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 801081e:	4476      	add	r6, lr
 8010820:	4475      	add	r5, lr
 8010822:	4647      	mov	r7, r8
 8010824:	42b8      	cmp	r0, r7
 8010826:	dd10      	ble.n	801084a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8010828:	463b      	mov	r3, r7
 801082a:	4631      	mov	r1, r6
 801082c:	462a      	mov	r2, r5
 801082e:	3301      	adds	r3, #1
 8010830:	ecf2 6a01 	vldmia	r2!, {s13}
 8010834:	ecf1 7a01 	vldmia	r1!, {s15}
 8010838:	4298      	cmp	r0, r3
 801083a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801083e:	d1f6      	bne.n	801082e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8010840:	1bc7      	subs	r7, r0, r7
 8010842:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8010846:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 801084a:	f10c 0c01 	add.w	ip, ip, #1
 801084e:	4456      	add	r6, sl
 8010850:	444d      	add	r5, r9
 8010852:	45dc      	cmp	ip, fp
 8010854:	f47f af73 	bne.w	801073e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8010858:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801085a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801085c:	9a03      	ldr	r2, [sp, #12]
 801085e:	4401      	add	r1, r0
 8010860:	9b02      	ldr	r3, [sp, #8]
 8010862:	ed82 7a00 	vstr	s14, [r2]
 8010866:	9128      	str	r1, [sp, #160]	; 0xa0
 8010868:	3301      	adds	r3, #1
 801086a:	9905      	ldr	r1, [sp, #20]
 801086c:	9302      	str	r3, [sp, #8]
 801086e:	440a      	add	r2, r1
 8010870:	9906      	ldr	r1, [sp, #24]
 8010872:	9203      	str	r2, [sp, #12]
 8010874:	9a00      	ldr	r2, [sp, #0]
 8010876:	1a12      	subs	r2, r2, r0
 8010878:	9200      	str	r2, [sp, #0]
 801087a:	9a01      	ldr	r2, [sp, #4]
 801087c:	440a      	add	r2, r1
 801087e:	9201      	str	r2, [sp, #4]
 8010880:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010882:	4293      	cmp	r3, r2
 8010884:	f47f af26 	bne.w	80106d4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8010888:	b00d      	add	sp, #52	; 0x34
 801088a:	ecbd 8b0c 	vpop	{d8-d13}
 801088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010892:	2700      	movs	r7, #0
 8010894:	e7c6      	b.n	8010824 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8010896:	9a00      	ldr	r2, [sp, #0]
 8010898:	9b04      	ldr	r3, [sp, #16]
 801089a:	4610      	mov	r0, r2
 801089c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801089e:	189d      	adds	r5, r3, r2
 80108a0:	e71f      	b.n	80106e2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 80108a2:	eeb0 7a40 	vmov.f32	s14, s0
 80108a6:	e7d7      	b.n	8010858 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

080108a8 <forward_lite_conv2d_if32of32wf32>:
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	ed2d 8b02 	vpush	{d8}
 80108b0:	b09f      	sub	sp, #124	; 0x7c
 80108b2:	4686      	mov	lr, r0
 80108b4:	4694      	mov	ip, r2
 80108b6:	af08      	add	r7, sp, #32
 80108b8:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 80108bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80108be:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80108c2:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 80108c6:	424e      	negs	r6, r1
 80108c8:	64fc      	str	r4, [r7, #76]	; 0x4c
 80108ca:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	613a      	str	r2, [r7, #16]
 80108d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80108d8:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 80108dc:	617d      	str	r5, [r7, #20]
 80108de:	633e      	str	r6, [r7, #48]	; 0x30
 80108e0:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 80108e4:	2c00      	cmp	r4, #0
 80108e6:	f000 8090 	beq.w	8010a0a <forward_lite_conv2d_if32of32wf32+0x162>
 80108ea:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80108ee:	6379      	str	r1, [r7, #52]	; 0x34
 80108f0:	fb04 f202 	mul.w	r2, r4, r2
 80108f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80108f8:	4244      	negs	r4, r0
 80108fa:	ed9f 8a98 	vldr	s16, [pc, #608]	; 8010b5c <forward_lite_conv2d_if32of32wf32+0x2b4>
 80108fe:	653c      	str	r4, [r7, #80]	; 0x50
 8010900:	fb03 f402 	mul.w	r4, r3, r2
 8010904:	fb03 f201 	mul.w	r2, r3, r1
 8010908:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801090c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010910:	63bc      	str	r4, [r7, #56]	; 0x38
 8010912:	fb01 f10a 	mul.w	r1, r1, sl
 8010916:	0089      	lsls	r1, r1, #2
 8010918:	61f9      	str	r1, [r7, #28]
 801091a:	fb05 f102 	mul.w	r1, r5, r2
 801091e:	4655      	mov	r5, sl
 8010920:	fb06 f202 	mul.w	r2, r6, r2
 8010924:	46da      	mov	sl, fp
 8010926:	0089      	lsls	r1, r1, #2
 8010928:	61b9      	str	r1, [r7, #24]
 801092a:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 801092e:	f10b 0207 	add.w	r2, fp, #7
 8010932:	62b9      	str	r1, [r7, #40]	; 0x28
 8010934:	f022 0107 	bic.w	r1, r2, #7
 8010938:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 801093c:	60f9      	str	r1, [r7, #12]
 801093e:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8010942:	60ba      	str	r2, [r7, #8]
 8010944:	2200      	movs	r2, #0
 8010946:	6239      	str	r1, [r7, #32]
 8010948:	627a      	str	r2, [r7, #36]	; 0x24
 801094a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801094c:	2a00      	cmp	r2, #0
 801094e:	f2c0 80d3 	blt.w	8010af8 <forward_lite_conv2d_if32of32wf32+0x250>
 8010952:	2200      	movs	r2, #0
 8010954:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8010958:	657a      	str	r2, [r7, #84]	; 0x54
 801095a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801095e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010960:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8010964:	440a      	add	r2, r1
 8010966:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010968:	4282      	cmp	r2, r0
 801096a:	bf94      	ite	ls
 801096c:	ebc1 0102 	rsbls	r1, r1, r2
 8010970:	ebc1 0100 	rsbhi	r1, r1, r0
 8010974:	6a3a      	ldr	r2, [r7, #32]
 8010976:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801097a:	6439      	str	r1, [r7, #64]	; 0x40
 801097c:	d24b      	bcs.n	8010a16 <forward_lite_conv2d_if32of32wf32+0x16e>
 801097e:	b375      	cbz	r5, 80109de <forward_lite_conv2d_if32of32wf32+0x136>
 8010980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010982:	2a00      	cmp	r2, #0
 8010984:	f000 80bd 	beq.w	8010b02 <forward_lite_conv2d_if32of32wf32+0x25a>
 8010988:	4659      	mov	r1, fp
 801098a:	4691      	mov	r9, r2
 801098c:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8010990:	2400      	movs	r4, #0
 8010992:	693e      	ldr	r6, [r7, #16]
 8010994:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
 8010998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801099a:	3401      	adds	r4, #1
 801099c:	ecb9 0a01 	vldmia	r9!, {s0}
 80109a0:	4640      	mov	r0, r8
 80109a2:	9207      	str	r2, [sp, #28]
 80109a4:	f108 0804 	add.w	r8, r8, #4
 80109a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109aa:	e9cd b205 	strd	fp, r2, [sp, #20]
 80109ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109b0:	9204      	str	r2, [sp, #16]
 80109b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80109b6:	9203      	str	r2, [sp, #12]
 80109b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80109bc:	9202      	str	r2, [sp, #8]
 80109be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80109c2:	e9cd 5200 	strd	r5, r2, [sp]
 80109c6:	4632      	mov	r2, r6
 80109c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80109cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80109ce:	4456      	add	r6, sl
 80109d0:	f7ff fe54 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80109d4:	42a5      	cmp	r5, r4
 80109d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80109d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80109dc:	d1dc      	bne.n	8010998 <forward_lite_conv2d_if32of32wf32+0xf0>
 80109de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109e0:	69f8      	ldr	r0, [r7, #28]
 80109e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e4:	4401      	add	r1, r0
 80109e6:	6978      	ldr	r0, [r7, #20]
 80109e8:	3201      	adds	r2, #1
 80109ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80109ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109ee:	627a      	str	r2, [r7, #36]	; 0x24
 80109f0:	4401      	add	r1, r0
 80109f2:	6339      	str	r1, [r7, #48]	; 0x30
 80109f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109f6:	1a09      	subs	r1, r1, r0
 80109f8:	69b8      	ldr	r0, [r7, #24]
 80109fa:	6379      	str	r1, [r7, #52]	; 0x34
 80109fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109fe:	4401      	add	r1, r0
 8010a00:	62b9      	str	r1, [r7, #40]	; 0x28
 8010a02:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010a06:	4291      	cmp	r1, r2
 8010a08:	d19f      	bne.n	801094a <forward_lite_conv2d_if32of32wf32+0xa2>
 8010a0a:	375c      	adds	r7, #92	; 0x5c
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	ecbd 8b02 	vpop	{d8}
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	466a      	mov	r2, sp
 8010a18:	ee08 2a90 	vmov	s17, r2
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	ebad 0d02 	sub.w	sp, sp, r2
 8010a22:	aa08      	add	r2, sp, #32
 8010a24:	2d00      	cmp	r5, #0
 8010a26:	d03d      	beq.n	8010aa4 <forward_lite_conv2d_if32of32wf32+0x1fc>
 8010a28:	6938      	ldr	r0, [r7, #16]
 8010a2a:	4659      	mov	r1, fp
 8010a2c:	68bc      	ldr	r4, [r7, #8]
 8010a2e:	46ab      	mov	fp, r5
 8010a30:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 8010a34:	f04f 0800 	mov.w	r8, #0
 8010a38:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a3e:	b138      	cbz	r0, 8010a50 <forward_lite_conv2d_if32of32wf32+0x1a8>
 8010a40:	4628      	mov	r0, r5
 8010a42:	4694      	mov	ip, r2
 8010a44:	f850 eb04 	ldr.w	lr, [r0], #4
 8010a48:	42a0      	cmp	r0, r4
 8010a4a:	f84c eb04 	str.w	lr, [ip], #4
 8010a4e:	d1f9      	bne.n	8010a44 <forward_lite_conv2d_if32of32wf32+0x19c>
 8010a50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a52:	f108 0801 	add.w	r8, r8, #1
 8010a56:	b348      	cbz	r0, 8010aac <forward_lite_conv2d_if32of32wf32+0x204>
 8010a58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010a5a:	4455      	add	r5, sl
 8010a5c:	ecb6 0a01 	vldmia	r6!, {s0}
 8010a60:	4454      	add	r4, sl
 8010a62:	9007      	str	r0, [sp, #28]
 8010a64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010a66:	9006      	str	r0, [sp, #24]
 8010a68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010a6a:	9005      	str	r0, [sp, #20]
 8010a6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010a6e:	9004      	str	r0, [sp, #16]
 8010a70:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8010a74:	9003      	str	r0, [sp, #12]
 8010a76:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8010a7a:	9002      	str	r0, [sp, #8]
 8010a7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010a80:	e9cd b000 	strd	fp, r0, [sp]
 8010a84:	4648      	mov	r0, r9
 8010a86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a8a:	f109 0904 	add.w	r9, r9, #4
 8010a8e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8010a92:	f7ff fdf3 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010a96:	45d8      	cmp	r8, fp
 8010a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a9c:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8010aa0:	d1cc      	bne.n	8010a3c <forward_lite_conv2d_if32of32wf32+0x194>
 8010aa2:	465d      	mov	r5, fp
 8010aa4:	ee18 2a90 	vmov	r2, s17
 8010aa8:	4695      	mov	sp, r2
 8010aaa:	e798      	b.n	80109de <forward_lite_conv2d_if32of32wf32+0x136>
 8010aac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010aae:	eeb0 0a48 	vmov.f32	s0, s16
 8010ab2:	4455      	add	r5, sl
 8010ab4:	4454      	add	r4, sl
 8010ab6:	9007      	str	r0, [sp, #28]
 8010ab8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010aba:	9006      	str	r0, [sp, #24]
 8010abc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010abe:	9005      	str	r0, [sp, #20]
 8010ac0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010ac2:	9004      	str	r0, [sp, #16]
 8010ac4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8010ac8:	9003      	str	r0, [sp, #12]
 8010aca:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8010ace:	9002      	str	r0, [sp, #8]
 8010ad0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010ad4:	e9cd b000 	strd	fp, r0, [sp]
 8010ad8:	4648      	mov	r0, r9
 8010ada:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010ade:	f109 0904 	add.w	r9, r9, #4
 8010ae2:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8010ae6:	f7ff fdc9 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010aea:	45c3      	cmp	fp, r8
 8010aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010af0:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8010af4:	d1a2      	bne.n	8010a3c <forward_lite_conv2d_if32of32wf32+0x194>
 8010af6:	e7d4      	b.n	8010aa2 <forward_lite_conv2d_if32of32wf32+0x1fa>
 8010af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010afa:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8010afe:	657a      	str	r2, [r7, #84]	; 0x54
 8010b00:	e72b      	b.n	801095a <forward_lite_conv2d_if32of32wf32+0xb2>
 8010b02:	4659      	mov	r1, fp
 8010b04:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8010b08:	693e      	ldr	r6, [r7, #16]
 8010b0a:	4614      	mov	r4, r2
 8010b0c:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8010b10:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
 8010b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b16:	3401      	adds	r4, #1
 8010b18:	4640      	mov	r0, r8
 8010b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8010b1e:	9207      	str	r2, [sp, #28]
 8010b20:	f108 0804 	add.w	r8, r8, #4
 8010b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010b26:	f8cd 9010 	str.w	r9, [sp, #16]
 8010b2a:	e9cd b205 	strd	fp, r2, [sp, #20]
 8010b2e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010b32:	9203      	str	r2, [sp, #12]
 8010b34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010b38:	9202      	str	r2, [sp, #8]
 8010b3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010b3e:	e9cd 5200 	strd	r5, r2, [sp]
 8010b42:	4632      	mov	r2, r6
 8010b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010b48:	6579      	str	r1, [r7, #84]	; 0x54
 8010b4a:	4456      	add	r6, sl
 8010b4c:	f7ff fd96 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010b50:	42a5      	cmp	r5, r4
 8010b52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b58:	d1dc      	bne.n	8010b14 <forward_lite_conv2d_if32of32wf32+0x26c>
 8010b5a:	e740      	b.n	80109de <forward_lite_conv2d_if32of32wf32+0x136>
 8010b5c:	00000000 	.word	0x00000000

08010b60 <forward_lite_conv2d_if32of32wf32_pool>:
 8010b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	ed2d 8b04 	vpush	{d8-d9}
 8010b68:	b0bd      	sub	sp, #244	; 0xf4
 8010b6a:	469c      	mov	ip, r3
 8010b6c:	4696      	mov	lr, r2
 8010b6e:	4681      	mov	r9, r0
 8010b70:	af0a      	add	r7, sp, #40	; 0x28
 8010b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010b76:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
 8010b7a:	f9b7 5148 	ldrsh.w	r5, [r7, #328]	; 0x148
 8010b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8010b80:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	; 0x114
 8010b84:	f9b7 a11c 	ldrsh.w	sl, [r7, #284]	; 0x11c
 8010b88:	6579      	str	r1, [r7, #84]	; 0x54
 8010b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b8c:	f9b7 1168 	ldrsh.w	r1, [r7, #360]	; 0x168
 8010b90:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8010b94:	f9b7 410c 	ldrsh.w	r4, [r7, #268]	; 0x10c
 8010b98:	62ba      	str	r2, [r7, #40]	; 0x28
 8010b9a:	6739      	str	r1, [r7, #112]	; 0x70
 8010b9c:	fb05 f201 	mul.w	r2, r5, r1
 8010ba0:	f9b7 1118 	ldrsh.w	r1, [r7, #280]	; 0x118
 8010ba4:	f8c7 a0b0 	str.w	sl, [r7, #176]	; 0xb0
 8010ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010bac:	f9b7 a134 	ldrsh.w	sl, [r7, #308]	; 0x134
 8010bb0:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8010bb4:	f9b7 8108 	ldrsh.w	r8, [r7, #264]	; 0x108
 8010bb8:	60f8      	str	r0, [r7, #12]
 8010bba:	6639      	str	r1, [r7, #96]	; 0x60
 8010bbc:	f8b7 0128 	ldrh.w	r0, [r7, #296]	; 0x128
 8010bc0:	fb08 f202 	mul.w	r2, r8, r2
 8010bc4:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 8010bc8:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 8010bcc:	4241      	negs	r1, r0
 8010bce:	f9b7 6104 	ldrsh.w	r6, [r7, #260]	; 0x104
 8010bd2:	f9b7 b120 	ldrsh.w	fp, [r7, #288]	; 0x120
 8010bd6:	f8b7 4124 	ldrh.w	r4, [r7, #292]	; 0x124
 8010bda:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8010bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8010be0:	f9b7 314c 	ldrsh.w	r3, [r7, #332]	; 0x14c
 8010be4:	f9b7 a164 	ldrsh.w	sl, [r7, #356]	; 0x164
 8010be8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8010bec:	f8c7 a044 	str.w	sl, [r7, #68]	; 0x44
 8010bf0:	f9b7 a16c 	ldrsh.w	sl, [r7, #364]	; 0x16c
 8010bf4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010bf6:	f8c7 a040 	str.w	sl, [r7, #64]	; 0x40
 8010bfa:	f9b7 a170 	ldrsh.w	sl, [r7, #368]	; 0x170
 8010bfe:	2900      	cmp	r1, #0
 8010c00:	f8c7 a068 	str.w	sl, [r7, #104]	; 0x68
 8010c04:	f9b7 a174 	ldrsh.w	sl, [r7, #372]	; 0x174
 8010c08:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
 8010c0c:	f9b7 a178 	ldrsh.w	sl, [r7, #376]	; 0x178
 8010c10:	f8c7 a0bc 	str.w	sl, [r7, #188]	; 0xbc
 8010c14:	f340 80ca 	ble.w	8010dac <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8010c1e:	4260      	negs	r0, r4
 8010c20:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8010c24:	ee09 6a10 	vmov	s18, r6
 8010c28:	ed9f 8abd 	vldr	s16, [pc, #756]	; 8010f20 <forward_lite_conv2d_if32of32wf32_pool+0x3c0>
 8010c2c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8010c30:	b298      	uxth	r0, r3
 8010c32:	fb01 f10b 	mul.w	r1, r1, fp
 8010c36:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8010c3a:	fa1f f088 	uxth.w	r0, r8
 8010c3e:	fb06 fa01 	mul.w	sl, r6, r1
 8010c42:	4604      	mov	r4, r0
 8010c44:	ee08 0a90 	vmov	s17, r0
 8010c48:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8010c4a:	4651      	mov	r1, sl
 8010c4c:	f8c7 a06c 	str.w	sl, [r7, #108]	; 0x6c
 8010c50:	fb08 f300 	mul.w	r3, r8, r0
 8010c54:	fb05 f303 	mul.w	r3, r5, r3
 8010c58:	fb08 f505 	mul.w	r5, r8, r5
 8010c5c:	0098      	lsls	r0, r3, #2
 8010c5e:	1e63      	subs	r3, r4, #1
 8010c60:	008c      	lsls	r4, r1, #2
 8010c62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	6238      	str	r0, [r7, #32]
 8010c68:	67fc      	str	r4, [r7, #124]	; 0x7c
 8010c6a:	eb0e 008a 	add.w	r0, lr, sl, lsl #2
 8010c6e:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8010c72:	3301      	adds	r3, #1
 8010c74:	627d      	str	r5, [r7, #36]	; 0x24
 8010c76:	f10e 4578 	add.w	r5, lr, #4160749568	; 0xf8000000
 8010c7a:	fb01 f104 	mul.w	r1, r1, r4
 8010c7e:	f8d7 a154 	ldr.w	sl, [r7, #340]	; 0x154
 8010c82:	62fd      	str	r5, [r7, #44]	; 0x2c
 8010c84:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8010c88:	fb06 f101 	mul.w	r1, r6, r1
 8010c8c:	6138      	str	r0, [r7, #16]
 8010c8e:	0098      	lsls	r0, r3, #2
 8010c90:	0089      	lsls	r1, r1, #2
 8010c92:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8010c96:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8010c9a:	61f8      	str	r0, [r7, #28]
 8010c9c:	64f9      	str	r1, [r7, #76]	; 0x4c
 8010c9e:	fb04 f106 	mul.w	r1, r4, r6
 8010ca2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8010ca6:	607b      	str	r3, [r7, #4]
 8010ca8:	fb04 f101 	mul.w	r1, r4, r1
 8010cac:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8010cb0:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8010cb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010cb6:	eb04 0b82 	add.w	fp, r4, r2, lsl #2
 8010cba:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8010cbc:	f8c7 609c 	str.w	r6, [r7, #156]	; 0x9c
 8010cc0:	0096      	lsls	r6, r2, #2
 8010cc2:	fb08 f201 	mul.w	r2, r8, r1
 8010cc6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010cca:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8010cce:	4275      	negs	r5, r6
 8010cd0:	0092      	lsls	r2, r2, #2
 8010cd2:	f8d7 9100 	ldr.w	r9, [r7, #256]	; 0x100
 8010cd6:	60be      	str	r6, [r7, #8]
 8010cd8:	63ba      	str	r2, [r7, #56]	; 0x38
 8010cda:	2200      	movs	r2, #0
 8010cdc:	667d      	str	r5, [r7, #100]	; 0x64
 8010cde:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010ce0:	1de2      	adds	r2, r4, #7
 8010ce2:	6539      	str	r1, [r7, #80]	; 0x50
 8010ce4:	f022 0407 	bic.w	r4, r2, #7
 8010ce8:	2200      	movs	r2, #0
 8010cea:	617c      	str	r4, [r7, #20]
 8010cec:	67ba      	str	r2, [r7, #120]	; 0x78
 8010cee:	603b      	str	r3, [r7, #0]
 8010cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	b21b      	sxth	r3, r3
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dc7e      	bgt.n	8010dfa <forward_lite_conv2d_if32of32wf32_pool+0x29a>
 8010cfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d00:	041b      	lsls	r3, r3, #16
 8010d02:	f100 810f 	bmi.w	8010f24 <forward_lite_conv2d_if32of32wf32_pool+0x3c4>
 8010d06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010d08:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8010d0c:	428a      	cmp	r2, r1
 8010d0e:	dc53      	bgt.n	8010db8 <forward_lite_conv2d_if32of32wf32_pool+0x258>
 8010d10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010d12:	b292      	uxth	r2, r2
 8010d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d16:	9008      	str	r0, [sp, #32]
 8010d18:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 8010d20:	442c      	add	r4, r5
 8010d22:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8010d26:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8010d28:	4420      	add	r0, r4
 8010d2a:	b21c      	sxth	r4, r3
 8010d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d30:	6578      	str	r0, [r7, #84]	; 0x54
 8010d32:	1b5b      	subs	r3, r3, r5
 8010d34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010d36:	67bc      	str	r4, [r7, #120]	; 0x78
 8010d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d40:	4403      	add	r3, r0
 8010d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010d46:	9201      	str	r2, [sp, #4]
 8010d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d4a:	1ad2      	subs	r2, r2, r3
 8010d4c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8010d50:	1ac9      	subs	r1, r1, r3
 8010d52:	9305      	str	r3, [sp, #20]
 8010d54:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8010d56:	b292      	uxth	r2, r2
 8010d58:	b20b      	sxth	r3, r1
 8010d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010d5e:	b2b3      	uxth	r3, r6
 8010d60:	9303      	str	r3, [sp, #12]
 8010d62:	2301      	movs	r3, #1
 8010d64:	9307      	str	r3, [sp, #28]
 8010d66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010d6a:	9306      	str	r3, [sp, #24]
 8010d6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d70:	9304      	str	r3, [sp, #16]
 8010d72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d74:	9302      	str	r3, [sp, #8]
 8010d76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	ee18 3a90 	vmov	r3, s17
 8010d80:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8010d84:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8010d88:	f8d7 5160 	ldr.w	r5, [r7, #352]	; 0x160
 8010d8c:	47a8      	blx	r5
 8010d8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d90:	1ab3      	subs	r3, r6, r2
 8010d92:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d9a:	3a01      	subs	r2, #1
 8010d9c:	b21b      	sxth	r3, r3
 8010d9e:	b292      	uxth	r2, r2
 8010da0:	653b      	str	r3, [r7, #80]	; 0x50
 8010da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010da4:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8010da8:	42a3      	cmp	r3, r4
 8010daa:	dca1      	bgt.n	8010cf0 <forward_lite_conv2d_if32of32wf32_pool+0x190>
 8010dac:	37cc      	adds	r7, #204	; 0xcc
 8010dae:	46bd      	mov	sp, r7
 8010db0:	ecbd 8b04 	vpop	{d8-d9}
 8010db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010db8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010dba:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010dbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010dc2:	440a      	add	r2, r1
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8010dca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	1a52      	subs	r2, r2, r1
 8010dd2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010dd8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010ddc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010de2:	440a      	add	r2, r1
 8010de4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8010de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010dea:	4293      	cmp	r3, r2
 8010dec:	ddde      	ble.n	8010dac <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8010dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010df2:	3301      	adds	r3, #1
 8010df4:	b21b      	sxth	r3, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	dd80      	ble.n	8010cfc <forward_lite_conv2d_if32of32wf32_pool+0x19c>
 8010dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f2c0 8150 	blt.w	80110a4 <forward_lite_conv2d_if32of32wf32_pool+0x544>
 8010e04:	2300      	movs	r3, #0
 8010e06:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010e0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e0e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e16:	4413      	add	r3, r2
 8010e18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e1c:	4283      	cmp	r3, r0
 8010e1e:	bfd4      	ite	le
 8010e20:	ebc2 0203 	rsble	r2, r2, r3
 8010e24:	ebc2 0200 	rsbgt	r2, r2, r0
 8010e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010e2e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010e32:	f080 80b4 	bcs.w	8010f9e <forward_lite_conv2d_if32of32wf32_pool+0x43e>
 8010e36:	f1b8 0f00 	cmp.w	r8, #0
 8010e3a:	dd3b      	ble.n	8010eb4 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8010e3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f000 8143 	beq.w	80110cc <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 8010e46:	461d      	mov	r5, r3
 8010e48:	464e      	mov	r6, r9
 8010e4a:	f8c7 a08c 	str.w	sl, [r7, #140]	; 0x8c
 8010e4e:	ee19 3a10 	vmov	r3, s18
 8010e52:	f8c7 b080 	str.w	fp, [r7, #128]	; 0x80
 8010e56:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8010e58:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
 8010e5c:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8010e60:	f8c7 9084 	str.w	r9, [r7, #132]	; 0x84
 8010e64:	f8d7 907c 	ldr.w	r9, [r7, #124]	; 0x7c
 8010e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	ecb5 0a01 	vldmia	r5!, {s0}
 8010e72:	3604      	adds	r6, #4
 8010e74:	9207      	str	r2, [sp, #28]
 8010e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010e7a:	e9cd b205 	strd	fp, r2, [sp, #20]
 8010e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e82:	9204      	str	r2, [sp, #16]
 8010e84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010e88:	9203      	str	r2, [sp, #12]
 8010e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e8e:	9202      	str	r2, [sp, #8]
 8010e90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010e94:	e9cd 8200 	strd	r8, r2, [sp]
 8010e98:	4622      	mov	r2, r4
 8010e9a:	444c      	add	r4, r9
 8010e9c:	e9c7 3124 	strd	r3, r1, [r7, #144]	; 0x90
 8010ea0:	f7ff fbec 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8010ea4:	45aa      	cmp	sl, r5
 8010ea6:	e9d7 3124 	ldrd	r3, r1, [r7, #144]	; 0x90
 8010eaa:	d1dd      	bne.n	8010e68 <forward_lite_conv2d_if32of32wf32_pool+0x308>
 8010eac:	f8d7 a08c 	ldr.w	sl, [r7, #140]	; 0x8c
 8010eb0:	e9d7 b920 	ldrd	fp, r9, [r7, #128]	; 0x80
 8010eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	dd29      	ble.n	8010f10 <forward_lite_conv2d_if32of32wf32_pool+0x3b0>
 8010ebc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 80f5 	beq.w	80110b0 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 8010ec6:	464e      	mov	r6, r9
 8010ec8:	2400      	movs	r4, #0
 8010eca:	f8d7 9158 	ldr.w	r9, [r7, #344]	; 0x158
 8010ece:	4653      	mov	r3, sl
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4642      	mov	r2, r8
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f8d7 5150 	ldr.w	r5, [r7, #336]	; 0x150
 8010eda:	44ca      	add	sl, r9
 8010edc:	47a8      	blx	r5
 8010ede:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010ee2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010ee6:	3401      	adds	r4, #1
 8010ee8:	4416      	add	r6, r2
 8010eea:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8010eee:	ebaa 0303 	sub.w	r3, sl, r3
 8010ef2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8010ef6:	b224      	sxth	r4, r4
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	bfa8      	it	ge
 8010efc:	468a      	movge	sl, r1
 8010efe:	455e      	cmp	r6, fp
 8010f00:	d301      	bcc.n	8010f06 <forward_lite_conv2d_if32of32wf32_pool+0x3a6>
 8010f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f04:	441e      	add	r6, r3
 8010f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f0a:	42a3      	cmp	r3, r4
 8010f0c:	d1df      	bne.n	8010ece <forward_lite_conv2d_if32of32wf32_pool+0x36e>
 8010f0e:	46b1      	mov	r9, r6
 8010f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f14:	3301      	adds	r3, #1
 8010f16:	b21b      	sxth	r3, r3
 8010f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010f1c:	e6f3      	b.n	8010d06 <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8010f1e:	bf00      	nop
 8010f20:	00000000 	.word	0x00000000
 8010f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f2a:	fb02 f203 	mul.w	r2, r2, r3
 8010f2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f32:	eba9 0282 	sub.w	r2, r9, r2, lsl #2
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d901      	bls.n	8010f3e <forward_lite_conv2d_if32of32wf32_pool+0x3de>
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	441a      	add	r2, r3
 8010f3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d214      	bcs.n	8010f70 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 8010f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f48:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8010f4c:	428b      	cmp	r3, r1
 8010f4e:	d00f      	beq.n	8010f70 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 8010f50:	4593      	cmp	fp, r2
 8010f52:	d90d      	bls.n	8010f70 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 8010f54:	4649      	mov	r1, r9
 8010f56:	4613      	mov	r3, r2
 8010f58:	f853 0b04 	ldr.w	r0, [r3], #4
 8010f5c:	459b      	cmp	fp, r3
 8010f5e:	f841 0b04 	str.w	r0, [r1], #4
 8010f62:	d8f9      	bhi.n	8010f58 <forward_lite_conv2d_if32of32wf32_pool+0x3f8>
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	1a9b      	subs	r3, r3, r2
 8010f68:	f023 0303 	bic.w	r3, r3, #3
 8010f6c:	3304      	adds	r3, #4
 8010f6e:	4499      	add	r9, r3
 8010f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f72:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010f74:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8010f78:	440a      	add	r2, r1
 8010f7a:	6a39      	ldr	r1, [r7, #32]
 8010f7c:	4489      	add	r9, r1
 8010f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f80:	1ad2      	subs	r2, r2, r3
 8010f82:	440b      	add	r3, r1
 8010f84:	45cb      	cmp	fp, r9
 8010f86:	b212      	sxth	r2, r2
 8010f88:	b21b      	sxth	r3, r3
 8010f8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010f90:	f63f aeb9 	bhi.w	8010d06 <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8010f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f96:	4499      	add	r9, r3
 8010f98:	45cb      	cmp	fp, r9
 8010f9a:	d9fc      	bls.n	8010f96 <forward_lite_conv2d_if32of32wf32_pool+0x436>
 8010f9c:	e6b3      	b.n	8010d06 <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8010f9e:	466b      	mov	r3, sp
 8010fa0:	f1b8 0f00 	cmp.w	r8, #0
 8010fa4:	ee09 3a90 	vmov	s19, r3
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	ebad 0d03 	sub.w	sp, sp, r3
 8010fae:	aa0a      	add	r2, sp, #40	; 0x28
 8010fb0:	dd74      	ble.n	801109c <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	464e      	mov	r6, r9
 8010fb6:	f8c7 9018 	str.w	r9, [r7, #24]
 8010fba:	444b      	add	r3, r9
 8010fbc:	693c      	ldr	r4, [r7, #16]
 8010fbe:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8010fc2:	677b      	str	r3, [r7, #116]	; 0x74
 8010fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc6:	4699      	mov	r9, r3
 8010fc8:	ee19 3a10 	vmov	r3, s18
 8010fcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010fce:	b138      	cbz	r0, 8010fe0 <forward_lite_conv2d_if32of32wf32_pool+0x480>
 8010fd0:	4648      	mov	r0, r9
 8010fd2:	4694      	mov	ip, r2
 8010fd4:	f850 eb04 	ldr.w	lr, [r0], #4
 8010fd8:	4284      	cmp	r4, r0
 8010fda:	f84c eb04 	str.w	lr, [ip], #4
 8010fde:	d1f9      	bne.n	8010fd4 <forward_lite_conv2d_if32of32wf32_pool+0x474>
 8010fe0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8010fe4:	b370      	cbz	r0, 8011044 <forward_lite_conv2d_if32of32wf32_pool+0x4e4>
 8010fe6:	ecb5 0a01 	vldmia	r5!, {s0}
 8010fea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010fec:	f8c7 5080 	str.w	r5, [r7, #128]	; 0x80
 8010ff0:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8010ff4:	4481      	add	r9, r0
 8010ff6:	4404      	add	r4, r0
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	9507      	str	r5, [sp, #28]
 8010ffc:	3604      	adds	r6, #4
 8010ffe:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8011002:	9506      	str	r5, [sp, #24]
 8011004:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
 8011008:	9505      	str	r5, [sp, #20]
 801100a:	f8d7 50b8 	ldr.w	r5, [r7, #184]	; 0xb8
 801100e:	9504      	str	r5, [sp, #16]
 8011010:	f8d7 50b0 	ldr.w	r5, [r7, #176]	; 0xb0
 8011014:	9503      	str	r5, [sp, #12]
 8011016:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 801101a:	9502      	str	r5, [sp, #8]
 801101c:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 8011020:	e9cd 8500 	strd	r8, r5, [sp]
 8011024:	e9c7 3223 	strd	r3, r2, [r7, #140]	; 0x8c
 8011028:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 801102c:	f7ff fb26 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8011030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011032:	42b3      	cmp	r3, r6
 8011034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011038:	e9d7 2124 	ldrd	r2, r1, [r7, #144]	; 0x90
 801103c:	d02c      	beq.n	8011098 <forward_lite_conv2d_if32of32wf32_pool+0x538>
 801103e:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 8011042:	e7c3      	b.n	8010fcc <forward_lite_conv2d_if32of32wf32_pool+0x46c>
 8011044:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011048:	eeb0 0a48 	vmov.f32	s0, s16
 801104c:	9007      	str	r0, [sp, #28]
 801104e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8011052:	9006      	str	r0, [sp, #24]
 8011054:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8011058:	9005      	str	r0, [sp, #20]
 801105a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801105e:	9004      	str	r0, [sp, #16]
 8011060:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8011064:	9003      	str	r0, [sp, #12]
 8011066:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801106a:	9002      	str	r0, [sp, #8]
 801106c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8011070:	e9cd 8000 	strd	r8, r0, [sp]
 8011074:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8011076:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 801107a:	4481      	add	r9, r0
 801107c:	4404      	add	r4, r0
 801107e:	4630      	mov	r0, r6
 8011080:	3604      	adds	r6, #4
 8011082:	e9c7 3223 	strd	r3, r2, [r7, #140]	; 0x8c
 8011086:	f7ff faf9 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801108a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801108c:	42b3      	cmp	r3, r6
 801108e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011092:	e9d7 2124 	ldrd	r2, r1, [r7, #144]	; 0x90
 8011096:	d199      	bne.n	8010fcc <forward_lite_conv2d_if32of32wf32_pool+0x46c>
 8011098:	f8d7 9018 	ldr.w	r9, [r7, #24]
 801109c:	ee19 3a90 	vmov	r3, s19
 80110a0:	469d      	mov	sp, r3
 80110a2:	e707      	b.n	8010eb4 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 80110a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80110a8:	68f9      	ldr	r1, [r7, #12]
 80110aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80110ae:	e6ae      	b.n	8010e0e <forward_lite_conv2d_if32of32wf32_pool+0x2ae>
 80110b0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80110b4:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80110b6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80110ba:	4489      	add	r9, r1
 80110bc:	3301      	adds	r3, #1
 80110be:	45cb      	cmp	fp, r9
 80110c0:	b21a      	sxth	r2, r3
 80110c2:	bf98      	it	ls
 80110c4:	44a1      	addls	r9, r4
 80110c6:	4282      	cmp	r2, r0
 80110c8:	dbf7      	blt.n	80110ba <forward_lite_conv2d_if32of32wf32_pool+0x55a>
 80110ca:	e721      	b.n	8010f10 <forward_lite_conv2d_if32of32wf32_pool+0x3b0>
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	464c      	mov	r4, r9
 80110d0:	f8c7 a090 	str.w	sl, [r7, #144]	; 0x90
 80110d4:	eb09 0603 	add.w	r6, r9, r3
 80110d8:	f8c7 b08c 	str.w	fp, [r7, #140]	; 0x8c
 80110dc:	f8c7 9084 	str.w	r9, [r7, #132]	; 0x84
 80110e0:	4693      	mov	fp, r2
 80110e2:	46b2      	mov	sl, r6
 80110e4:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80110e6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80110ea:	ee19 3a10 	vmov	r3, s18
 80110ee:	f8d7 907c 	ldr.w	r9, [r7, #124]	; 0x7c
 80110f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80110f6:	4620      	mov	r0, r4
 80110f8:	3404      	adds	r4, #4
 80110fa:	eeb0 0a48 	vmov.f32	s0, s16
 80110fe:	9207      	str	r2, [sp, #28]
 8011100:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011104:	9604      	str	r6, [sp, #16]
 8011106:	e9cd b205 	strd	fp, r2, [sp, #20]
 801110a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801110e:	9203      	str	r2, [sp, #12]
 8011110:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011114:	9202      	str	r2, [sp, #8]
 8011116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801111a:	e9cd 8200 	strd	r8, r2, [sp]
 801111e:	462a      	mov	r2, r5
 8011120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011124:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8011128:	444d      	add	r5, r9
 801112a:	f7ff faa7 	bl	801067c <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 801112e:	45a2      	cmp	sl, r4
 8011130:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8011134:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011138:	d1db      	bne.n	80110f2 <forward_lite_conv2d_if32of32wf32_pool+0x592>
 801113a:	f8d7 9084 	ldr.w	r9, [r7, #132]	; 0x84
 801113e:	e9d7 ba23 	ldrd	fp, sl, [r7, #140]	; 0x8c
 8011142:	e6b7      	b.n	8010eb4 <forward_lite_conv2d_if32of32wf32_pool+0x354>

08011144 <forward_lite_nl_softmax_if32of32_kernel>:
 8011144:	2a01      	cmp	r2, #1
 8011146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114a:	4617      	mov	r7, r2
 801114c:	ed2d 8b02 	vpush	{d8}
 8011150:	ed91 8a00 	vldr	s16, [r1]
 8011154:	d932      	bls.n	80111bc <forward_lite_nl_softmax_if32of32_kernel+0x78>
 8011156:	1d0b      	adds	r3, r1, #4
 8011158:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801115c:	ecf3 7a01 	vldmia	r3!, {s15}
 8011160:	429a      	cmp	r2, r3
 8011162:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8011166:	d1f9      	bne.n	801115c <forward_lite_nl_softmax_if32of32_kernel+0x18>
 8011168:	4606      	mov	r6, r0
 801116a:	460d      	mov	r5, r1
 801116c:	2400      	movs	r4, #0
 801116e:	eddf 8a16 	vldr	s17, [pc, #88]	; 80111c8 <forward_lite_nl_softmax_if32of32_kernel+0x84>
 8011172:	4680      	mov	r8, r0
 8011174:	ecb5 0a01 	vldmia	r5!, {s0}
 8011178:	3401      	adds	r4, #1
 801117a:	ee30 0a48 	vsub.f32	s0, s0, s16
 801117e:	f005 fa11 	bl	80165a4 <expf>
 8011182:	42a7      	cmp	r7, r4
 8011184:	ee78 8a80 	vadd.f32	s17, s17, s0
 8011188:	eca8 0a01 	vstmia	r8!, {s0}
 801118c:	d8f2      	bhi.n	8011174 <forward_lite_nl_softmax_if32of32_kernel+0x30>
 801118e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011196:	d00d      	beq.n	80111b4 <forward_lite_nl_softmax_if32of32_kernel+0x70>
 8011198:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801119c:	2300      	movs	r3, #0
 801119e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 80111a2:	edd6 7a00 	vldr	s15, [r6]
 80111a6:	3301      	adds	r3, #1
 80111a8:	429f      	cmp	r7, r3
 80111aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111ae:	ece6 7a01 	vstmia	r6!, {s15}
 80111b2:	d8f6      	bhi.n	80111a2 <forward_lite_nl_softmax_if32of32_kernel+0x5e>
 80111b4:	ecbd 8b02 	vpop	{d8}
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	2a00      	cmp	r2, #0
 80111be:	d1d3      	bne.n	8011168 <forward_lite_nl_softmax_if32of32_kernel+0x24>
 80111c0:	ecbd 8b02 	vpop	{d8}
 80111c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c8:	00000000 	.word	0x00000000

080111cc <forward_lite_nl_relu_generic_if32of32_kernel>:
 80111cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80111d0:	ed93 7a00 	vldr	s14, [r3]
 80111d4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80111d8:	ed93 6a01 	vldr	s12, [r3, #4]
 80111dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e0:	d42b      	bmi.n	801123a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80111e2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80111e6:	4413      	add	r3, r2
 80111e8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80111ec:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80111f0:	4291      	cmp	r1, r2
 80111f2:	d821      	bhi.n	8011238 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80111f4:	f10c 0104 	add.w	r1, ip, #4
 80111f8:	1d13      	adds	r3, r2, #4
 80111fa:	eba2 020c 	sub.w	r2, r2, ip
 80111fe:	4408      	add	r0, r1
 8011200:	e00c      	b.n	801121c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011206:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120e:	db01      	blt.n	8011214 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8011210:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011214:	4293      	cmp	r3, r2
 8011216:	ed60 7a01 	vstmdb	r0!, {s15}
 801121a:	d00c      	beq.n	8011236 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 801121c:	ed73 7a01 	vldmdb	r3!, {s15}
 8011220:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011228:	daeb      	bge.n	8011202 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 801122a:	eef0 7a66 	vmov.f32	s15, s13
 801122e:	4293      	cmp	r3, r2
 8011230:	ed60 7a01 	vstmdb	r0!, {s15}
 8011234:	d1f2      	bne.n	801121c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011236:	4770      	bx	lr
 8011238:	4770      	bx	lr
 801123a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801123e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011242:	4413      	add	r3, r2
 8011244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011248:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 801124c:	b500      	push	{lr}
 801124e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8011252:	d019      	beq.n	8011288 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8011254:	4561      	cmp	r1, ip
 8011256:	d815      	bhi.n	8011284 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011258:	f10e 0204 	add.w	r2, lr, #4
 801125c:	f10c 0304 	add.w	r3, ip, #4
 8011260:	ebac 010e 	sub.w	r1, ip, lr
 8011264:	4402      	add	r2, r0
 8011266:	ed73 7a01 	vldmdb	r3!, {s15}
 801126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801126e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011276:	ee66 6a86 	vmul.f32	s13, s13, s12
 801127a:	d827      	bhi.n	80112cc <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 801127c:	428b      	cmp	r3, r1
 801127e:	ed62 6a01 	vstmdb	r2!, {s13}
 8011282:	d1f0      	bne.n	8011266 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011284:	f85d fb04 	ldr.w	pc, [sp], #4
 8011288:	4561      	cmp	r1, ip
 801128a:	d8fb      	bhi.n	8011284 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801128c:	f10e 0204 	add.w	r2, lr, #4
 8011290:	f10c 0304 	add.w	r3, ip, #4
 8011294:	ebac 010e 	sub.w	r1, ip, lr
 8011298:	f04f 0c00 	mov.w	ip, #0
 801129c:	4402      	add	r2, r0
 801129e:	ed73 7a01 	vldmdb	r3!, {s15}
 80112a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112aa:	d40a      	bmi.n	80112c2 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80112ac:	428b      	cmp	r3, r1
 80112ae:	f842 cd04 	str.w	ip, [r2, #-4]!
 80112b2:	d0e7      	beq.n	8011284 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112b4:	ed73 7a01 	vldmdb	r3!, {s15}
 80112b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c0:	d5f4      	bpl.n	80112ac <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80112c2:	428b      	cmp	r3, r1
 80112c4:	ed62 7a01 	vstmdb	r2!, {s15}
 80112c8:	d1e9      	bne.n	801129e <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80112ca:	e7db      	b.n	8011284 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112cc:	428b      	cmp	r3, r1
 80112ce:	ed62 7a01 	vstmdb	r2!, {s15}
 80112d2:	d1c8      	bne.n	8011266 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80112d4:	e7d6      	b.n	8011284 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80112d6:	bf00      	nop

080112d8 <pool_func_mp_array_f32>:
 80112d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112dc:	b091      	sub	sp, #68	; 0x44
 80112de:	468b      	mov	fp, r1
 80112e0:	469c      	mov	ip, r3
 80112e2:	4690      	mov	r8, r2
 80112e4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 80112e8:	4681      	mov	r9, r0
 80112ea:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80112ee:	9101      	str	r1, [sp, #4]
 80112f0:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
 80112f4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 80112f8:	9105      	str	r1, [sp, #20]
 80112fa:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 80112fe:	9304      	str	r3, [sp, #16]
 8011300:	9106      	str	r1, [sp, #24]
 8011302:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8011306:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 801130a:	ea52 0403 	orrs.w	r4, r2, r3
 801130e:	9102      	str	r1, [sp, #8]
 8011310:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 8011314:	9103      	str	r1, [sp, #12]
 8011316:	d173      	bne.n	8011400 <pool_func_mp_array_f32+0x128>
 8011318:	9904      	ldr	r1, [sp, #16]
 801131a:	9d02      	ldr	r5, [sp, #8]
 801131c:	eba1 000b 	sub.w	r0, r1, fp
 8011320:	9e05      	ldr	r6, [sp, #20]
 8011322:	1e69      	subs	r1, r5, #1
 8011324:	3801      	subs	r0, #1
 8011326:	fb11 0106 	smlabb	r1, r1, r6, r0
 801132a:	0409      	lsls	r1, r1, #16
 801132c:	d568      	bpl.n	8011400 <pool_func_mp_array_f32+0x128>
 801132e:	9901      	ldr	r1, [sp, #4]
 8011330:	9e03      	ldr	r6, [sp, #12]
 8011332:	eba1 0008 	sub.w	r0, r1, r8
 8011336:	9f06      	ldr	r7, [sp, #24]
 8011338:	1e71      	subs	r1, r6, #1
 801133a:	3801      	subs	r0, #1
 801133c:	fb11 0107 	smlabb	r1, r1, r7, r0
 8011340:	040f      	lsls	r7, r1, #16
 8011342:	d55d      	bpl.n	8011400 <pool_func_mp_array_f32+0x128>
 8011344:	2e00      	cmp	r6, #0
 8011346:	d058      	beq.n	80113fa <pool_func_mp_array_f32+0x122>
 8011348:	2d00      	cmp	r5, #0
 801134a:	d056      	beq.n	80113fa <pool_func_mp_array_f32+0x122>
 801134c:	4663      	mov	r3, ip
 801134e:	2b00      	cmp	r3, #0
 8011350:	d053      	beq.n	80113fa <pool_func_mp_array_f32+0x122>
 8011352:	2b01      	cmp	r3, #1
 8011354:	f040 814a 	bne.w	80115ec <pool_func_mp_array_f32+0x314>
 8011358:	46a2      	mov	sl, r4
 801135a:	4623      	mov	r3, r4
 801135c:	9407      	str	r4, [sp, #28]
 801135e:	9a02      	ldr	r2, [sp, #8]
 8011360:	2700      	movs	r7, #0
 8011362:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8011366:	fb02 f303 	mul.w	r3, r2, r3
 801136a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801136e:	46be      	mov	lr, r7
 8011370:	46bc      	mov	ip, r7
 8011372:	9308      	str	r3, [sp, #32]
 8011374:	fa0f f38a 	sxth.w	r3, sl
 8011378:	9309      	str	r3, [sp, #36]	; 0x24
 801137a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801137c:	b23d      	sxth	r5, r7
 801137e:	9b08      	ldr	r3, [sp, #32]
 8011380:	fa0f f088 	sxth.w	r0, r8
 8011384:	42b4      	cmp	r4, r6
 8011386:	eddf 7a98 	vldr	s15, [pc, #608]	; 80115e8 <pool_func_mp_array_f32+0x310>
 801138a:	449c      	add	ip, r3
 801138c:	da12      	bge.n	80113b4 <pool_func_mp_array_f32+0xdc>
 801138e:	4285      	cmp	r5, r0
 8011390:	da0c      	bge.n	80113ac <pool_func_mp_array_f32+0xd4>
 8011392:	fb04 520b 	mla	r2, r4, fp, r5
 8011396:	462b      	mov	r3, r5
 8011398:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801139c:	3301      	adds	r3, #1
 801139e:	ecb2 7a01 	vldmia	r2!, {s14}
 80113a2:	b219      	sxth	r1, r3
 80113a4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80113a8:	4281      	cmp	r1, r0
 80113aa:	dbf7      	blt.n	801139c <pool_func_mp_array_f32+0xc4>
 80113ac:	3401      	adds	r4, #1
 80113ae:	b224      	sxth	r4, r4
 80113b0:	42b4      	cmp	r4, r6
 80113b2:	dbec      	blt.n	801138e <pool_func_mp_array_f32+0xb6>
 80113b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80113b6:	f10e 0e01 	add.w	lr, lr, #1
 80113ba:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80113be:	9b05      	ldr	r3, [sp, #20]
 80113c0:	fa0f fe8e 	sxth.w	lr, lr
 80113c4:	4498      	add	r8, r3
 80113c6:	441f      	add	r7, r3
 80113c8:	9b02      	ldr	r3, [sp, #8]
 80113ca:	edcc 7a00 	vstr	s15, [ip]
 80113ce:	fa1f f888 	uxth.w	r8, r8
 80113d2:	4573      	cmp	r3, lr
 80113d4:	b2bf      	uxth	r7, r7
 80113d6:	46f4      	mov	ip, lr
 80113d8:	dccf      	bgt.n	801137a <pool_func_mp_array_f32+0xa2>
 80113da:	9a07      	ldr	r2, [sp, #28]
 80113dc:	9906      	ldr	r1, [sp, #24]
 80113de:	9b01      	ldr	r3, [sp, #4]
 80113e0:	3201      	adds	r2, #1
 80113e2:	448a      	add	sl, r1
 80113e4:	b212      	sxth	r2, r2
 80113e6:	440b      	add	r3, r1
 80113e8:	9903      	ldr	r1, [sp, #12]
 80113ea:	fa1f fa8a 	uxth.w	sl, sl
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	9207      	str	r2, [sp, #28]
 80113f2:	4291      	cmp	r1, r2
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	4613      	mov	r3, r2
 80113f8:	dcb1      	bgt.n	801135e <pool_func_mp_array_f32+0x86>
 80113fa:	b011      	add	sp, #68	; 0x44
 80113fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011400:	9903      	ldr	r1, [sp, #12]
 8011402:	2900      	cmp	r1, #0
 8011404:	d0f9      	beq.n	80113fa <pool_func_mp_array_f32+0x122>
 8011406:	9902      	ldr	r1, [sp, #8]
 8011408:	2900      	cmp	r1, #0
 801140a:	d0f6      	beq.n	80113fa <pool_func_mp_array_f32+0x122>
 801140c:	4661      	mov	r1, ip
 801140e:	2900      	cmp	r1, #0
 8011410:	d0f3      	beq.n	80113fa <pool_func_mp_array_f32+0x122>
 8011412:	2901      	cmp	r1, #1
 8011414:	9901      	ldr	r1, [sp, #4]
 8011416:	d163      	bne.n	80114e0 <pool_func_mp_array_f32+0x208>
 8011418:	1a8a      	subs	r2, r1, r2
 801141a:	9904      	ldr	r1, [sp, #16]
 801141c:	1ac9      	subs	r1, r1, r3
 801141e:	425b      	negs	r3, r3
 8011420:	b292      	uxth	r2, r2
 8011422:	b29b      	uxth	r3, r3
 8011424:	9204      	str	r2, [sp, #16]
 8011426:	b28a      	uxth	r2, r1
 8011428:	930b      	str	r3, [sp, #44]	; 0x2c
 801142a:	2300      	movs	r3, #0
 801142c:	920a      	str	r2, [sp, #40]	; 0x28
 801142e:	9307      	str	r3, [sp, #28]
 8011430:	9a02      	ldr	r2, [sp, #8]
 8011432:	2700      	movs	r7, #0
 8011434:	fb02 f303 	mul.w	r3, r2, r3
 8011438:	9a04      	ldr	r2, [sp, #16]
 801143a:	46bc      	mov	ip, r7
 801143c:	9308      	str	r3, [sp, #32]
 801143e:	b216      	sxth	r6, r2
 8011440:	9b01      	ldr	r3, [sp, #4]
 8011442:	1ad3      	subs	r3, r2, r3
 8011444:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	; 0x28
 8011448:	b21b      	sxth	r3, r3
 801144a:	9309      	str	r3, [sp, #36]	; 0x24
 801144c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801144e:	fa0f f58e 	sxth.w	r5, lr
 8011452:	9b08      	ldr	r3, [sp, #32]
 8011454:	fa0f f48a 	sxth.w	r4, sl
 8011458:	428e      	cmp	r6, r1
 801145a:	eddf 7a63 	vldr	s15, [pc, #396]	; 80115e8 <pool_func_mp_array_f32+0x310>
 801145e:	449c      	add	ip, r3
 8011460:	dd1c      	ble.n	801149c <pool_func_mp_array_f32+0x1c4>
 8011462:	42a5      	cmp	r5, r4
 8011464:	da16      	bge.n	8011494 <pool_func_mp_array_f32+0x1bc>
 8011466:	4588      	cmp	r8, r1
 8011468:	fb01 f20b 	mul.w	r2, r1, fp
 801146c:	dd12      	ble.n	8011494 <pool_func_mp_array_f32+0x1bc>
 801146e:	442a      	add	r2, r5
 8011470:	462b      	mov	r3, r5
 8011472:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011476:	ea41 0003 	orr.w	r0, r1, r3
 801147a:	0400      	lsls	r0, r0, #16
 801147c:	d405      	bmi.n	801148a <pool_func_mp_array_f32+0x1b2>
 801147e:	459b      	cmp	fp, r3
 8011480:	dd03      	ble.n	801148a <pool_func_mp_array_f32+0x1b2>
 8011482:	ed92 7a00 	vldr	s14, [r2]
 8011486:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801148a:	3301      	adds	r3, #1
 801148c:	3204      	adds	r2, #4
 801148e:	b218      	sxth	r0, r3
 8011490:	42a0      	cmp	r0, r4
 8011492:	dbf0      	blt.n	8011476 <pool_func_mp_array_f32+0x19e>
 8011494:	3101      	adds	r1, #1
 8011496:	b209      	sxth	r1, r1
 8011498:	42b1      	cmp	r1, r6
 801149a:	dbe2      	blt.n	8011462 <pool_func_mp_array_f32+0x18a>
 801149c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801149e:	3701      	adds	r7, #1
 80114a0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80114a4:	9b05      	ldr	r3, [sp, #20]
 80114a6:	b23f      	sxth	r7, r7
 80114a8:	449a      	add	sl, r3
 80114aa:	449e      	add	lr, r3
 80114ac:	9b02      	ldr	r3, [sp, #8]
 80114ae:	edcc 7a00 	vstr	s15, [ip]
 80114b2:	fa1f fa8a 	uxth.w	sl, sl
 80114b6:	42bb      	cmp	r3, r7
 80114b8:	fa1f fe8e 	uxth.w	lr, lr
 80114bc:	46bc      	mov	ip, r7
 80114be:	dcc5      	bgt.n	801144c <pool_func_mp_array_f32+0x174>
 80114c0:	9a07      	ldr	r2, [sp, #28]
 80114c2:	9b04      	ldr	r3, [sp, #16]
 80114c4:	9906      	ldr	r1, [sp, #24]
 80114c6:	3201      	adds	r2, #1
 80114c8:	440b      	add	r3, r1
 80114ca:	b212      	sxth	r2, r2
 80114cc:	9903      	ldr	r1, [sp, #12]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	9207      	str	r2, [sp, #28]
 80114d2:	4291      	cmp	r1, r2
 80114d4:	9304      	str	r3, [sp, #16]
 80114d6:	4613      	mov	r3, r2
 80114d8:	dcaa      	bgt.n	8011430 <pool_func_mp_array_f32+0x158>
 80114da:	b011      	add	sp, #68	; 0x44
 80114dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114e0:	1a88      	subs	r0, r1, r2
 80114e2:	9904      	ldr	r1, [sp, #16]
 80114e4:	4252      	negs	r2, r2
 80114e6:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80114ea:	1ac9      	subs	r1, r1, r3
 80114ec:	425b      	negs	r3, r3
 80114ee:	b292      	uxth	r2, r2
 80114f0:	46e6      	mov	lr, ip
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	b280      	uxth	r0, r0
 80114f6:	9208      	str	r2, [sp, #32]
 80114f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80114fa:	b28a      	uxth	r2, r1
 80114fc:	2300      	movs	r3, #0
 80114fe:	9007      	str	r0, [sp, #28]
 8011500:	920e      	str	r2, [sp, #56]	; 0x38
 8011502:	930b      	str	r3, [sp, #44]	; 0x2c
 8011504:	9a02      	ldr	r2, [sp, #8]
 8011506:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 801150a:	fb02 f303 	mul.w	r3, r2, r3
 801150e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011512:	920a      	str	r2, [sp, #40]	; 0x28
 8011514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011516:	930d      	str	r3, [sp, #52]	; 0x34
 8011518:	2300      	movs	r3, #0
 801151a:	9201      	str	r2, [sp, #4]
 801151c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801151e:	930c      	str	r3, [sp, #48]	; 0x30
 8011520:	9204      	str	r2, [sp, #16]
 8011522:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011524:	f04f 0c00 	mov.w	ip, #0
 8011528:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801152c:	4413      	add	r3, r2
 801152e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8011532:	4667      	mov	r7, ip
 8011534:	fb0e f303 	mul.w	r3, lr, r3
 8011538:	9309      	str	r3, [sp, #36]	; 0x24
 801153a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801153c:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80115e8 <pool_func_mp_array_f32+0x310>
 8011540:	42b1      	cmp	r1, r6
 8011542:	da1e      	bge.n	8011582 <pool_func_mp_array_f32+0x2aa>
 8011544:	42a5      	cmp	r5, r4
 8011546:	da18      	bge.n	801157a <pool_func_mp_array_f32+0x2a2>
 8011548:	4541      	cmp	r1, r8
 801154a:	fb01 f30b 	mul.w	r3, r1, fp
 801154e:	da14      	bge.n	801157a <pool_func_mp_array_f32+0x2a2>
 8011550:	195a      	adds	r2, r3, r5
 8011552:	462b      	mov	r3, r5
 8011554:	fb0e 7202 	mla	r2, lr, r2, r7
 8011558:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801155c:	ea41 0003 	orr.w	r0, r1, r3
 8011560:	0400      	lsls	r0, r0, #16
 8011562:	d405      	bmi.n	8011570 <pool_func_mp_array_f32+0x298>
 8011564:	459b      	cmp	fp, r3
 8011566:	dd03      	ble.n	8011570 <pool_func_mp_array_f32+0x298>
 8011568:	ed92 7a00 	vldr	s14, [r2]
 801156c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011570:	3301      	adds	r3, #1
 8011572:	4452      	add	r2, sl
 8011574:	b218      	sxth	r0, r3
 8011576:	42a0      	cmp	r0, r4
 8011578:	dbf0      	blt.n	801155c <pool_func_mp_array_f32+0x284>
 801157a:	3101      	adds	r1, #1
 801157c:	b209      	sxth	r1, r1
 801157e:	42b1      	cmp	r1, r6
 8011580:	dbe0      	blt.n	8011544 <pool_func_mp_array_f32+0x26c>
 8011582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011584:	f10c 0c01 	add.w	ip, ip, #1
 8011588:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801158a:	443b      	add	r3, r7
 801158c:	fa0f fc8c 	sxth.w	ip, ip
 8011590:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011594:	45f4      	cmp	ip, lr
 8011596:	4667      	mov	r7, ip
 8011598:	edc3 7a00 	vstr	s15, [r3]
 801159c:	dbcd      	blt.n	801153a <pool_func_mp_array_f32+0x262>
 801159e:	9a01      	ldr	r2, [sp, #4]
 80115a0:	9805      	ldr	r0, [sp, #20]
 80115a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115a4:	4402      	add	r2, r0
 80115a6:	9b04      	ldr	r3, [sp, #16]
 80115a8:	3101      	adds	r1, #1
 80115aa:	b292      	uxth	r2, r2
 80115ac:	4403      	add	r3, r0
 80115ae:	b209      	sxth	r1, r1
 80115b0:	9201      	str	r2, [sp, #4]
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	9a02      	ldr	r2, [sp, #8]
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	460b      	mov	r3, r1
 80115ba:	428a      	cmp	r2, r1
 80115bc:	910c      	str	r1, [sp, #48]	; 0x30
 80115be:	dcb0      	bgt.n	8011522 <pool_func_mp_array_f32+0x24a>
 80115c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80115c2:	9b08      	ldr	r3, [sp, #32]
 80115c4:	3101      	adds	r1, #1
 80115c6:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80115ca:	b209      	sxth	r1, r1
 80115cc:	4402      	add	r2, r0
 80115ce:	4403      	add	r3, r0
 80115d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80115d2:	b292      	uxth	r2, r2
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	9207      	str	r2, [sp, #28]
 80115d8:	9a03      	ldr	r2, [sp, #12]
 80115da:	9308      	str	r3, [sp, #32]
 80115dc:	460b      	mov	r3, r1
 80115de:	428a      	cmp	r2, r1
 80115e0:	dc90      	bgt.n	8011504 <pool_func_mp_array_f32+0x22c>
 80115e2:	b011      	add	sp, #68	; 0x44
 80115e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e8:	cf000000 	.word	0xcf000000
 80115ec:	4623      	mov	r3, r4
 80115ee:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80115f2:	46e0      	mov	r8, ip
 80115f4:	9408      	str	r4, [sp, #32]
 80115f6:	9409      	str	r4, [sp, #36]	; 0x24
 80115f8:	9a02      	ldr	r2, [sp, #8]
 80115fa:	f04f 0c00 	mov.w	ip, #0
 80115fe:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8011602:	fb02 f303 	mul.w	r3, r2, r3
 8011606:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 801160a:	930c      	str	r3, [sp, #48]	; 0x30
 801160c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011610:	930d      	str	r3, [sp, #52]	; 0x34
 8011612:	9b04      	ldr	r3, [sp, #16]
 8011614:	9307      	str	r3, [sp, #28]
 8011616:	4663      	mov	r3, ip
 8011618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801161a:	f04f 0e00 	mov.w	lr, #0
 801161e:	fa0f f58c 	sxth.w	r5, ip
 8011622:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011626:	4413      	add	r3, r2
 8011628:	4676      	mov	r6, lr
 801162a:	fb08 f303 	mul.w	r3, r8, r3
 801162e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011630:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8011632:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80115e8 <pool_func_mp_array_f32+0x310>
 8011636:	42bc      	cmp	r4, r7
 8011638:	da15      	bge.n	8011666 <pool_func_mp_array_f32+0x38e>
 801163a:	4285      	cmp	r5, r0
 801163c:	da0f      	bge.n	801165e <pool_func_mp_array_f32+0x386>
 801163e:	fb0b 5304 	mla	r3, fp, r4, r5
 8011642:	462a      	mov	r2, r5
 8011644:	fb08 6303 	mla	r3, r8, r3, r6
 8011648:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801164c:	3201      	adds	r2, #1
 801164e:	ed93 7a00 	vldr	s14, [r3]
 8011652:	4453      	add	r3, sl
 8011654:	b211      	sxth	r1, r2
 8011656:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801165a:	4281      	cmp	r1, r0
 801165c:	dbf6      	blt.n	801164c <pool_func_mp_array_f32+0x374>
 801165e:	3401      	adds	r4, #1
 8011660:	b224      	sxth	r4, r4
 8011662:	42bc      	cmp	r4, r7
 8011664:	dbe9      	blt.n	801163a <pool_func_mp_array_f32+0x362>
 8011666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011668:	f10e 0e01 	add.w	lr, lr, #1
 801166c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801166e:	4433      	add	r3, r6
 8011670:	fa0f fe8e 	sxth.w	lr, lr
 8011674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011678:	45c6      	cmp	lr, r8
 801167a:	4676      	mov	r6, lr
 801167c:	edc3 7a00 	vstr	s15, [r3]
 8011680:	dbd6      	blt.n	8011630 <pool_func_mp_array_f32+0x358>
 8011682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011684:	9905      	ldr	r1, [sp, #20]
 8011686:	9b07      	ldr	r3, [sp, #28]
 8011688:	3201      	adds	r2, #1
 801168a:	448c      	add	ip, r1
 801168c:	b212      	sxth	r2, r2
 801168e:	440b      	add	r3, r1
 8011690:	9902      	ldr	r1, [sp, #8]
 8011692:	fa1f fc8c 	uxth.w	ip, ip
 8011696:	b29b      	uxth	r3, r3
 8011698:	920a      	str	r2, [sp, #40]	; 0x28
 801169a:	4291      	cmp	r1, r2
 801169c:	9307      	str	r3, [sp, #28]
 801169e:	4613      	mov	r3, r2
 80116a0:	dcba      	bgt.n	8011618 <pool_func_mp_array_f32+0x340>
 80116a2:	9a01      	ldr	r2, [sp, #4]
 80116a4:	9806      	ldr	r0, [sp, #24]
 80116a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116a8:	4402      	add	r2, r0
 80116aa:	9b08      	ldr	r3, [sp, #32]
 80116ac:	3101      	adds	r1, #1
 80116ae:	b292      	uxth	r2, r2
 80116b0:	4403      	add	r3, r0
 80116b2:	b209      	sxth	r1, r1
 80116b4:	9201      	str	r2, [sp, #4]
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	9a03      	ldr	r2, [sp, #12]
 80116ba:	9308      	str	r3, [sp, #32]
 80116bc:	460b      	mov	r3, r1
 80116be:	428a      	cmp	r2, r1
 80116c0:	9109      	str	r1, [sp, #36]	; 0x24
 80116c2:	dc99      	bgt.n	80115f8 <pool_func_mp_array_f32+0x320>
 80116c4:	e699      	b.n	80113fa <pool_func_mp_array_f32+0x122>
 80116c6:	bf00      	nop

080116c8 <forward_lite_dense_if32of32wf32>:
 80116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	ed2d 8b0c 	vpush	{d8-d13}
 80116d0:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80116d4:	6801      	ldr	r1, [r0, #0]
 80116d6:	b083      	sub	sp, #12
 80116d8:	fb02 f303 	mul.w	r3, r2, r3
 80116dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80116e0:	9100      	str	r1, [sp, #0]
 80116e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80116e6:	4299      	cmp	r1, r3
 80116e8:	9301      	str	r3, [sp, #4]
 80116ea:	f080 811c 	bcs.w	8011926 <forward_lite_dense_if32of32wf32+0x25e>
 80116ee:	4607      	mov	r7, r0
 80116f0:	6904      	ldr	r4, [r0, #16]
 80116f2:	0096      	lsls	r6, r2, #2
 80116f4:	9b00      	ldr	r3, [sp, #0]
 80116f6:	68bd      	ldr	r5, [r7, #8]
 80116f8:	eb03 0e06 	add.w	lr, r3, r6
 80116fc:	461e      	mov	r6, r3
 80116fe:	459e      	cmp	lr, r3
 8011700:	f240 8103 	bls.w	801190a <forward_lite_dense_if32of32wf32+0x242>
 8011704:	f1a4 0c10 	sub.w	ip, r4, #16
 8011708:	ea4f 0984 	mov.w	r9, r4, lsl #2
 801170c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8011710:	f10c 0c01 	add.w	ip, ip, #1
 8011714:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8011718:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 801171c:	2c0f      	cmp	r4, #15
 801171e:	f240 8107 	bls.w	8011930 <forward_lite_dense_if32of32wf32+0x268>
 8011722:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8011726:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801172a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8011980 <forward_lite_dense_if32of32wf32+0x2b8>
 801172e:	4621      	mov	r1, r4
 8011730:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8011734:	3910      	subs	r1, #16
 8011736:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 801173a:	3340      	adds	r3, #64	; 0x40
 801173c:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8011740:	290f      	cmp	r1, #15
 8011742:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011746:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 801174a:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 801174e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8011752:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8011756:	eee4 7a85 	vfma.f32	s15, s9, s10
 801175a:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 801175e:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 8011762:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 8011766:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 801176a:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 801176e:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 8011772:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011776:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 801177a:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 801177e:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 8011782:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 8011786:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 801178a:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 801178e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8011792:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8011796:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 801179a:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 801179e:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80117a2:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80117a6:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80117aa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80117ae:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80117b2:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80117b6:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80117ba:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80117be:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80117c2:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80117c6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80117ca:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80117ce:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80117d2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80117d6:	eee9 7a89 	vfma.f32	s15, s19, s18
 80117da:	eee8 7a88 	vfma.f32	s15, s17, s16
 80117de:	eee0 7a20 	vfma.f32	s15, s0, s1
 80117e2:	eee1 7a21 	vfma.f32	s15, s2, s3
 80117e6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80117ea:	eee3 7a23 	vfma.f32	s15, s6, s7
 80117ee:	eee4 7a24 	vfma.f32	s15, s8, s9
 80117f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80117f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80117fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117fe:	d897      	bhi.n	8011730 <forward_lite_dense_if32of32wf32+0x68>
 8011800:	eb05 020b 	add.w	r2, r5, fp
 8011804:	f004 010f 	and.w	r1, r4, #15
 8011808:	4663      	mov	r3, ip
 801180a:	2903      	cmp	r1, #3
 801180c:	d95f      	bls.n	80118ce <forward_lite_dense_if32of32wf32+0x206>
 801180e:	edd2 6a01 	vldr	s13, [r2, #4]
 8011812:	1f08      	subs	r0, r1, #4
 8011814:	edd3 7a01 	vldr	s15, [r3, #4]
 8011818:	ed93 4a00 	vldr	s8, [r3]
 801181c:	2803      	cmp	r0, #3
 801181e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011822:	edd2 4a00 	vldr	s9, [r2]
 8011826:	ed93 5a02 	vldr	s10, [r3, #8]
 801182a:	edd2 5a02 	vldr	s11, [r2, #8]
 801182e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011832:	ed93 6a03 	vldr	s12, [r3, #12]
 8011836:	edd2 6a03 	vldr	s13, [r2, #12]
 801183a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801183e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011842:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011846:	eeb0 7a67 	vmov.f32	s14, s15
 801184a:	d938      	bls.n	80118be <forward_lite_dense_if32of32wf32+0x1f6>
 801184c:	edd2 6a05 	vldr	s13, [r2, #20]
 8011850:	f1a1 0a08 	sub.w	sl, r1, #8
 8011854:	edd3 7a05 	vldr	s15, [r3, #20]
 8011858:	ed93 4a04 	vldr	s8, [r3, #16]
 801185c:	f1ba 0f03 	cmp.w	sl, #3
 8011860:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011864:	edd2 4a04 	vldr	s9, [r2, #16]
 8011868:	ed93 5a06 	vldr	s10, [r3, #24]
 801186c:	edd2 5a06 	vldr	s11, [r2, #24]
 8011870:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011874:	ed93 6a07 	vldr	s12, [r3, #28]
 8011878:	edd2 6a07 	vldr	s13, [r2, #28]
 801187c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011880:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011888:	d919      	bls.n	80118be <forward_lite_dense_if32of32wf32+0x1f6>
 801188a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801188e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011892:	ed92 4a08 	vldr	s8, [r2, #32]
 8011896:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801189a:	edd3 4a08 	vldr	s9, [r3, #32]
 801189e:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 80118a2:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 80118a6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80118aa:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 80118ae:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80118b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80118b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80118ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118be:	0880      	lsrs	r0, r0, #2
 80118c0:	f001 0103 	and.w	r1, r1, #3
 80118c4:	3001      	adds	r0, #1
 80118c6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80118ca:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80118ce:	b1a9      	cbz	r1, 80118fc <forward_lite_dense_if32of32wf32+0x234>
 80118d0:	edd3 6a00 	vldr	s13, [r3]
 80118d4:	3901      	subs	r1, #1
 80118d6:	edd2 7a00 	vldr	s15, [r2]
 80118da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118de:	d00d      	beq.n	80118fc <forward_lite_dense_if32of32wf32+0x234>
 80118e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80118e4:	2901      	cmp	r1, #1
 80118e6:	edd2 7a01 	vldr	s15, [r2, #4]
 80118ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118ee:	d005      	beq.n	80118fc <forward_lite_dense_if32of32wf32+0x234>
 80118f0:	edd2 6a02 	vldr	s13, [r2, #8]
 80118f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80118f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80118fc:	eca6 7a01 	vstmia	r6!, {s14}
 8011900:	45b6      	cmp	lr, r6
 8011902:	444d      	add	r5, r9
 8011904:	f63f af0a 	bhi.w	801171c <forward_lite_dense_if32of32wf32+0x54>
 8011908:	697a      	ldr	r2, [r7, #20]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	b9b3      	cbnz	r3, 801193c <forward_lite_dense_if32of32wf32+0x274>
 801190e:	9b00      	ldr	r3, [sp, #0]
 8011910:	0096      	lsls	r6, r2, #2
 8011912:	9901      	ldr	r1, [sp, #4]
 8011914:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011918:	693c      	ldr	r4, [r7, #16]
 801191a:	4299      	cmp	r1, r3
 801191c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8011920:	9300      	str	r3, [sp, #0]
 8011922:	f63f aee7 	bhi.w	80116f4 <forward_lite_dense_if32of32wf32+0x2c>
 8011926:	b003      	add	sp, #12
 8011928:	ecbd 8b0c 	vpop	{d8-d13}
 801192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011930:	4621      	mov	r1, r4
 8011932:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011980 <forward_lite_dense_if32of32wf32+0x2b8>
 8011936:	462a      	mov	r2, r5
 8011938:	4643      	mov	r3, r8
 801193a:	e766      	b.n	801180a <forward_lite_dense_if32of32wf32+0x142>
 801193c:	2a00      	cmp	r2, #0
 801193e:	d0e6      	beq.n	801190e <forward_lite_dense_if32of32wf32+0x246>
 8011940:	9a00      	ldr	r2, [sp, #0]
 8011942:	ed93 7a00 	vldr	s14, [r3]
 8011946:	edd2 7a00 	vldr	s15, [r2]
 801194a:	4613      	mov	r3, r2
 801194c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011950:	edc2 7a00 	vstr	s15, [r2]
 8011954:	697a      	ldr	r2, [r7, #20]
 8011956:	2a01      	cmp	r2, #1
 8011958:	d9d9      	bls.n	801190e <forward_lite_dense_if32of32wf32+0x246>
 801195a:	1d19      	adds	r1, r3, #4
 801195c:	2301      	movs	r3, #1
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	ed91 7a00 	vldr	s14, [r1]
 8011964:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011968:	3301      	adds	r3, #1
 801196a:	edd2 7a00 	vldr	s15, [r2]
 801196e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011972:	ece1 7a01 	vstmia	r1!, {s15}
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	429a      	cmp	r2, r3
 801197a:	d8f0      	bhi.n	801195e <forward_lite_dense_if32of32wf32+0x296>
 801197c:	e7c7      	b.n	801190e <forward_lite_dense_if32of32wf32+0x246>
 801197e:	bf00      	nop
 8011980:	00000000 	.word	0x00000000

08011984 <forward_lite_nl_relu_if32of32>:
 8011984:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011988:	4413      	add	r3, r2
 801198a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801198e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8011992:	4291      	cmp	r1, r2
 8011994:	d80f      	bhi.n	80119b6 <forward_lite_nl_relu_if32of32+0x32>
 8011996:	f10c 0104 	add.w	r1, ip, #4
 801199a:	1d13      	adds	r3, r2, #4
 801199c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80119b8 <forward_lite_nl_relu_if32of32+0x34>
 80119a0:	eba2 020c 	sub.w	r2, r2, ip
 80119a4:	4408      	add	r0, r1
 80119a6:	ed73 7a01 	vldmdb	r3!, {s15}
 80119aa:	4293      	cmp	r3, r2
 80119ac:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80119b0:	ed60 7a01 	vstmdb	r0!, {s15}
 80119b4:	d1f7      	bne.n	80119a6 <forward_lite_nl_relu_if32of32+0x22>
 80119b6:	4770      	bx	lr
 80119b8:	00000000 	.word	0x00000000

080119bc <st_int8_copy>:
 80119bc:	4288      	cmp	r0, r1
 80119be:	d010      	beq.n	80119e2 <st_int8_copy+0x26>
 80119c0:	b17a      	cbz	r2, 80119e2 <st_int8_copy+0x26>
 80119c2:	4288      	cmp	r0, r1
 80119c4:	eb00 0302 	add.w	r3, r0, r2
 80119c8:	d20c      	bcs.n	80119e4 <st_int8_copy+0x28>
 80119ca:	428b      	cmp	r3, r1
 80119cc:	d90a      	bls.n	80119e4 <st_int8_copy+0x28>
 80119ce:	4283      	cmp	r3, r0
 80119d0:	440a      	add	r2, r1
 80119d2:	d906      	bls.n	80119e2 <st_int8_copy+0x26>
 80119d4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80119d8:	4283      	cmp	r3, r0
 80119da:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80119de:	d1f9      	bne.n	80119d4 <st_int8_copy+0x18>
 80119e0:	4770      	bx	lr
 80119e2:	4770      	bx	lr
 80119e4:	078b      	lsls	r3, r1, #30
 80119e6:	d102      	bne.n	80119ee <st_int8_copy+0x32>
 80119e8:	e008      	b.n	80119fc <st_int8_copy+0x40>
 80119ea:	2a00      	cmp	r2, #0
 80119ec:	d04c      	beq.n	8011a88 <st_int8_copy+0xcc>
 80119ee:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80119f2:	3a01      	subs	r2, #1
 80119f4:	f801 3b01 	strb.w	r3, [r1], #1
 80119f8:	078b      	lsls	r3, r1, #30
 80119fa:	d1f6      	bne.n	80119ea <st_int8_copy+0x2e>
 80119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a00:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8011a04:	d05d      	beq.n	8011ac2 <st_int8_copy+0x106>
 8011a06:	ea41 0300 	orr.w	r3, r1, r0
 8011a0a:	075b      	lsls	r3, r3, #29
 8011a0c:	d13d      	bne.n	8011a8a <st_int8_copy+0xce>
 8011a0e:	f1be 0f01 	cmp.w	lr, #1
 8011a12:	d03a      	beq.n	8011a8a <st_int8_copy+0xce>
 8011a14:	f100 0310 	add.w	r3, r0, #16
 8011a18:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011a1c:	f101 0c10 	add.w	ip, r1, #16
 8011a20:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8011a24:	3310      	adds	r3, #16
 8011a26:	f10c 0c10 	add.w	ip, ip, #16
 8011a2a:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8011a2e:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8011a32:	4573      	cmp	r3, lr
 8011a34:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8011a38:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8011a3c:	d1f2      	bne.n	8011a24 <st_int8_copy+0x68>
 8011a3e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8011a42:	4421      	add	r1, r4
 8011a44:	4420      	add	r0, r4
 8011a46:	f002 0203 	and.w	r2, r2, #3
 8011a4a:	b16b      	cbz	r3, 8011a68 <st_int8_copy+0xac>
 8011a4c:	6804      	ldr	r4, [r0, #0]
 8011a4e:	600c      	str	r4, [r1, #0]
 8011a50:	1e5c      	subs	r4, r3, #1
 8011a52:	d005      	beq.n	8011a60 <st_int8_copy+0xa4>
 8011a54:	6845      	ldr	r5, [r0, #4]
 8011a56:	2c01      	cmp	r4, #1
 8011a58:	604d      	str	r5, [r1, #4]
 8011a5a:	d001      	beq.n	8011a60 <st_int8_copy+0xa4>
 8011a5c:	6884      	ldr	r4, [r0, #8]
 8011a5e:	608c      	str	r4, [r1, #8]
 8011a60:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011a64:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011a68:	b162      	cbz	r2, 8011a84 <st_int8_copy+0xc8>
 8011a6a:	f990 3000 	ldrsb.w	r3, [r0]
 8011a6e:	3a01      	subs	r2, #1
 8011a70:	700b      	strb	r3, [r1, #0]
 8011a72:	d007      	beq.n	8011a84 <st_int8_copy+0xc8>
 8011a74:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011a78:	2a01      	cmp	r2, #1
 8011a7a:	704b      	strb	r3, [r1, #1]
 8011a7c:	d002      	beq.n	8011a84 <st_int8_copy+0xc8>
 8011a7e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8011a82:	708b      	strb	r3, [r1, #2]
 8011a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a88:	4770      	bx	lr
 8011a8a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011a8e:	460b      	mov	r3, r1
 8011a90:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8011a94:	4684      	mov	ip, r0
 8011a96:	f8dc 8000 	ldr.w	r8, [ip]
 8011a9a:	3310      	adds	r3, #16
 8011a9c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8011aa0:	f10c 0c10 	add.w	ip, ip, #16
 8011aa4:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8011aa8:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8011aac:	f843 8c10 	str.w	r8, [r3, #-16]
 8011ab0:	f843 7c0c 	str.w	r7, [r3, #-12]
 8011ab4:	f843 6c08 	str.w	r6, [r3, #-8]
 8011ab8:	f843 5c04 	str.w	r5, [r3, #-4]
 8011abc:	459e      	cmp	lr, r3
 8011abe:	d1ea      	bne.n	8011a96 <st_int8_copy+0xda>
 8011ac0:	e7bd      	b.n	8011a3e <st_int8_copy+0x82>
 8011ac2:	0893      	lsrs	r3, r2, #2
 8011ac4:	f002 0203 	and.w	r2, r2, #3
 8011ac8:	e7bf      	b.n	8011a4a <st_int8_copy+0x8e>
 8011aca:	bf00      	nop

08011acc <ai_array_to_buffer_fmt>:
 8011acc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	d053      	beq.n	8011b7c <ai_array_to_buffer_fmt+0xb0>
 8011ad4:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8011ad8:	4a2b      	ldr	r2, [pc, #172]	; (8011b88 <ai_array_to_buffer_fmt+0xbc>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d010      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011ade:	dc21      	bgt.n	8011b24 <ai_array_to_buffer_fmt+0x58>
 8011ae0:	4a2a      	ldr	r2, [pc, #168]	; (8011b8c <ai_array_to_buffer_fmt+0xc0>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d00c      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011ae6:	dd0f      	ble.n	8011b08 <ai_array_to_buffer_fmt+0x3c>
 8011ae8:	4a29      	ldr	r2, [pc, #164]	; (8011b90 <ai_array_to_buffer_fmt+0xc4>)
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d008      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011aee:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d004      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011af6:	4a27      	ldr	r2, [pc, #156]	; (8011b94 <ai_array_to_buffer_fmt+0xc8>)
 8011af8:	4293      	cmp	r3, r2
 8011afa:	bf0c      	ite	eq
 8011afc:	4613      	moveq	r3, r2
 8011afe:	2340      	movne	r3, #64	; 0x40
 8011b00:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011b04:	4318      	orrs	r0, r3
 8011b06:	4770      	bx	lr
 8011b08:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d0f7      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b10:	dd2a      	ble.n	8011b68 <ai_array_to_buffer_fmt+0x9c>
 8011b12:	4a21      	ldr	r2, [pc, #132]	; (8011b98 <ai_array_to_buffer_fmt+0xcc>)
 8011b14:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	bf0c      	ite	eq
 8011b1c:	4613      	moveq	r3, r2
 8011b1e:	2340      	movne	r3, #64	; 0x40
 8011b20:	4318      	orrs	r0, r3
 8011b22:	4770      	bx	lr
 8011b24:	4a1d      	ldr	r2, [pc, #116]	; (8011b9c <ai_array_to_buffer_fmt+0xd0>)
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d0ea      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b2a:	dd0f      	ble.n	8011b4c <ai_array_to_buffer_fmt+0x80>
 8011b2c:	4a1c      	ldr	r2, [pc, #112]	; (8011ba0 <ai_array_to_buffer_fmt+0xd4>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d0e6      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b32:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d0e2      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b3a:	4a1a      	ldr	r2, [pc, #104]	; (8011ba4 <ai_array_to_buffer_fmt+0xd8>)
 8011b3c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011b40:	4293      	cmp	r3, r2
 8011b42:	bf0c      	ite	eq
 8011b44:	4613      	moveq	r3, r2
 8011b46:	2340      	movne	r3, #64	; 0x40
 8011b48:	4318      	orrs	r0, r3
 8011b4a:	4770      	bx	lr
 8011b4c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d0d5      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b54:	3207      	adds	r2, #7
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d0d2      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b5a:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	bf0c      	ite	eq
 8011b62:	4613      	moveq	r3, r2
 8011b64:	2340      	movne	r3, #64	; 0x40
 8011b66:	e7cb      	b.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b68:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d0c7      	beq.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b70:	3280      	adds	r2, #128	; 0x80
 8011b72:	4293      	cmp	r3, r2
 8011b74:	bf0c      	ite	eq
 8011b76:	4613      	moveq	r3, r2
 8011b78:	2340      	movne	r3, #64	; 0x40
 8011b7a:	e7c1      	b.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ba8 <ai_array_to_buffer_fmt+0xdc>)
 8011b7e:	4003      	ands	r3, r0
 8011b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011b84:	e7bc      	b.n	8011b00 <ai_array_to_buffer_fmt+0x34>
 8011b86:	bf00      	nop
 8011b88:	00840040 	.word	0x00840040
 8011b8c:	00040840 	.word	0x00040840
 8011b90:	00041040 	.word	0x00041040
 8011b94:	0004084f 	.word	0x0004084f
 8011b98:	00040447 	.word	0x00040447
 8011b9c:	00840840 	.word	0x00840840
 8011ba0:	00841040 	.word	0x00841040
 8011ba4:	0084084f 	.word	0x0084084f
 8011ba8:	00803fff 	.word	0x00803fff

08011bac <ai_array_get_byte_size>:
 8011bac:	b319      	cbz	r1, 8011bf6 <ai_array_get_byte_size+0x4a>
 8011bae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011bb2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8011bb6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8011bba:	11c0      	asrs	r0, r0, #7
 8011bbc:	fb01 f303 	mul.w	r3, r1, r3
 8011bc0:	2a04      	cmp	r2, #4
 8011bc2:	f103 0307 	add.w	r3, r3, #7
 8011bc6:	f023 0307 	bic.w	r3, r3, #7
 8011bca:	fa23 f10c 	lsr.w	r1, r3, ip
 8011bce:	d00b      	beq.n	8011be8 <ai_array_get_byte_size+0x3c>
 8011bd0:	2a08      	cmp	r2, #8
 8011bd2:	d002      	beq.n	8011bda <ai_array_get_byte_size+0x2e>
 8011bd4:	3107      	adds	r1, #7
 8011bd6:	08c8      	lsrs	r0, r1, #3
 8011bd8:	4770      	bx	lr
 8011bda:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011bde:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8011be2:	3107      	adds	r1, #7
 8011be4:	08c8      	lsrs	r0, r1, #3
 8011be6:	4770      	bx	lr
 8011be8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011bec:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8011bf0:	3107      	adds	r1, #7
 8011bf2:	08c8      	lsrs	r0, r1, #3
 8011bf4:	4770      	bx	lr
 8011bf6:	4608      	mov	r0, r1
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop

08011bfc <ai_array_get_data_byte_size>:
 8011bfc:	b169      	cbz	r1, 8011c1a <ai_array_get_data_byte_size+0x1e>
 8011bfe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8011c02:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8011c06:	fb03 f101 	mul.w	r1, r3, r1
 8011c0a:	1dcb      	adds	r3, r1, #7
 8011c0c:	f023 0307 	bic.w	r3, r3, #7
 8011c10:	fa23 f000 	lsr.w	r0, r3, r0
 8011c14:	3007      	adds	r0, #7
 8011c16:	08c0      	lsrs	r0, r0, #3
 8011c18:	4770      	bx	lr
 8011c1a:	4608      	mov	r0, r1
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop

08011c20 <ai_version_get>:
 8011c20:	0212      	lsls	r2, r2, #8
 8011c22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011c26:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8011c2a:	4770      	bx	lr

08011c2c <get_tensor_byte_size>:
 8011c2c:	b430      	push	{r4, r5}
 8011c2e:	6985      	ldr	r5, [r0, #24]
 8011c30:	68c4      	ldr	r4, [r0, #12]
 8011c32:	6941      	ldr	r1, [r0, #20]
 8011c34:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <get_tensor_byte_size+0x24>)
 8011c36:	6828      	ldr	r0, [r5, #0]
 8011c38:	4a06      	ldr	r2, [pc, #24]	; (8011c54 <get_tensor_byte_size+0x28>)
 8011c3a:	4003      	ands	r3, r0
 8011c3c:	68c9      	ldr	r1, [r1, #12]
 8011c3e:	68e0      	ldr	r0, [r4, #12]
 8011c40:	4293      	cmp	r3, r2
 8011c42:	fb01 f000 	mul.w	r0, r1, r0
 8011c46:	d101      	bne.n	8011c4c <get_tensor_byte_size+0x20>
 8011c48:	3007      	adds	r0, #7
 8011c4a:	08c0      	lsrs	r0, r0, #3
 8011c4c:	bc30      	pop	{r4, r5}
 8011c4e:	4770      	bx	lr
 8011c50:	017fffff 	.word	0x017fffff
 8011c54:	000400c0 	.word	0x000400c0

08011c58 <__errno>:
 8011c58:	4b01      	ldr	r3, [pc, #4]	; (8011c60 <__errno+0x8>)
 8011c5a:	6818      	ldr	r0, [r3, #0]
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	24000bac 	.word	0x24000bac

08011c64 <__libc_init_array>:
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	4d0d      	ldr	r5, [pc, #52]	; (8011c9c <__libc_init_array+0x38>)
 8011c68:	4c0d      	ldr	r4, [pc, #52]	; (8011ca0 <__libc_init_array+0x3c>)
 8011c6a:	1b64      	subs	r4, r4, r5
 8011c6c:	10a4      	asrs	r4, r4, #2
 8011c6e:	2600      	movs	r6, #0
 8011c70:	42a6      	cmp	r6, r4
 8011c72:	d109      	bne.n	8011c88 <__libc_init_array+0x24>
 8011c74:	4d0b      	ldr	r5, [pc, #44]	; (8011ca4 <__libc_init_array+0x40>)
 8011c76:	4c0c      	ldr	r4, [pc, #48]	; (8011ca8 <__libc_init_array+0x44>)
 8011c78:	f004 fd10 	bl	801669c <_init>
 8011c7c:	1b64      	subs	r4, r4, r5
 8011c7e:	10a4      	asrs	r4, r4, #2
 8011c80:	2600      	movs	r6, #0
 8011c82:	42a6      	cmp	r6, r4
 8011c84:	d105      	bne.n	8011c92 <__libc_init_array+0x2e>
 8011c86:	bd70      	pop	{r4, r5, r6, pc}
 8011c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c8c:	4798      	blx	r3
 8011c8e:	3601      	adds	r6, #1
 8011c90:	e7ee      	b.n	8011c70 <__libc_init_array+0xc>
 8011c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c96:	4798      	blx	r3
 8011c98:	3601      	adds	r6, #1
 8011c9a:	e7f2      	b.n	8011c82 <__libc_init_array+0x1e>
 8011c9c:	08018a28 	.word	0x08018a28
 8011ca0:	08018a28 	.word	0x08018a28
 8011ca4:	08018a28 	.word	0x08018a28
 8011ca8:	08018a2c 	.word	0x08018a2c

08011cac <malloc>:
 8011cac:	4b02      	ldr	r3, [pc, #8]	; (8011cb8 <malloc+0xc>)
 8011cae:	4601      	mov	r1, r0
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f000 b885 	b.w	8011dc0 <_malloc_r>
 8011cb6:	bf00      	nop
 8011cb8:	24000bac 	.word	0x24000bac

08011cbc <memcpy>:
 8011cbc:	440a      	add	r2, r1
 8011cbe:	4291      	cmp	r1, r2
 8011cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cc4:	d100      	bne.n	8011cc8 <memcpy+0xc>
 8011cc6:	4770      	bx	lr
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cd2:	4291      	cmp	r1, r2
 8011cd4:	d1f9      	bne.n	8011cca <memcpy+0xe>
 8011cd6:	bd10      	pop	{r4, pc}

08011cd8 <memset>:
 8011cd8:	4402      	add	r2, r0
 8011cda:	4603      	mov	r3, r0
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d100      	bne.n	8011ce2 <memset+0xa>
 8011ce0:	4770      	bx	lr
 8011ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8011ce6:	e7f9      	b.n	8011cdc <memset+0x4>

08011ce8 <_free_r>:
 8011ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cea:	2900      	cmp	r1, #0
 8011cec:	d044      	beq.n	8011d78 <_free_r+0x90>
 8011cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cf2:	9001      	str	r0, [sp, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8011cfa:	bfb8      	it	lt
 8011cfc:	18e4      	addlt	r4, r4, r3
 8011cfe:	f003 fb21 	bl	8015344 <__malloc_lock>
 8011d02:	4a1e      	ldr	r2, [pc, #120]	; (8011d7c <_free_r+0x94>)
 8011d04:	9801      	ldr	r0, [sp, #4]
 8011d06:	6813      	ldr	r3, [r2, #0]
 8011d08:	b933      	cbnz	r3, 8011d18 <_free_r+0x30>
 8011d0a:	6063      	str	r3, [r4, #4]
 8011d0c:	6014      	str	r4, [r2, #0]
 8011d0e:	b003      	add	sp, #12
 8011d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d14:	f003 bb1c 	b.w	8015350 <__malloc_unlock>
 8011d18:	42a3      	cmp	r3, r4
 8011d1a:	d908      	bls.n	8011d2e <_free_r+0x46>
 8011d1c:	6825      	ldr	r5, [r4, #0]
 8011d1e:	1961      	adds	r1, r4, r5
 8011d20:	428b      	cmp	r3, r1
 8011d22:	bf01      	itttt	eq
 8011d24:	6819      	ldreq	r1, [r3, #0]
 8011d26:	685b      	ldreq	r3, [r3, #4]
 8011d28:	1949      	addeq	r1, r1, r5
 8011d2a:	6021      	streq	r1, [r4, #0]
 8011d2c:	e7ed      	b.n	8011d0a <_free_r+0x22>
 8011d2e:	461a      	mov	r2, r3
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	b10b      	cbz	r3, 8011d38 <_free_r+0x50>
 8011d34:	42a3      	cmp	r3, r4
 8011d36:	d9fa      	bls.n	8011d2e <_free_r+0x46>
 8011d38:	6811      	ldr	r1, [r2, #0]
 8011d3a:	1855      	adds	r5, r2, r1
 8011d3c:	42a5      	cmp	r5, r4
 8011d3e:	d10b      	bne.n	8011d58 <_free_r+0x70>
 8011d40:	6824      	ldr	r4, [r4, #0]
 8011d42:	4421      	add	r1, r4
 8011d44:	1854      	adds	r4, r2, r1
 8011d46:	42a3      	cmp	r3, r4
 8011d48:	6011      	str	r1, [r2, #0]
 8011d4a:	d1e0      	bne.n	8011d0e <_free_r+0x26>
 8011d4c:	681c      	ldr	r4, [r3, #0]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	6053      	str	r3, [r2, #4]
 8011d52:	4421      	add	r1, r4
 8011d54:	6011      	str	r1, [r2, #0]
 8011d56:	e7da      	b.n	8011d0e <_free_r+0x26>
 8011d58:	d902      	bls.n	8011d60 <_free_r+0x78>
 8011d5a:	230c      	movs	r3, #12
 8011d5c:	6003      	str	r3, [r0, #0]
 8011d5e:	e7d6      	b.n	8011d0e <_free_r+0x26>
 8011d60:	6825      	ldr	r5, [r4, #0]
 8011d62:	1961      	adds	r1, r4, r5
 8011d64:	428b      	cmp	r3, r1
 8011d66:	bf04      	itt	eq
 8011d68:	6819      	ldreq	r1, [r3, #0]
 8011d6a:	685b      	ldreq	r3, [r3, #4]
 8011d6c:	6063      	str	r3, [r4, #4]
 8011d6e:	bf04      	itt	eq
 8011d70:	1949      	addeq	r1, r1, r5
 8011d72:	6021      	streq	r1, [r4, #0]
 8011d74:	6054      	str	r4, [r2, #4]
 8011d76:	e7ca      	b.n	8011d0e <_free_r+0x26>
 8011d78:	b003      	add	sp, #12
 8011d7a:	bd30      	pop	{r4, r5, pc}
 8011d7c:	24009e10 	.word	0x24009e10

08011d80 <sbrk_aligned>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	4e0e      	ldr	r6, [pc, #56]	; (8011dbc <sbrk_aligned+0x3c>)
 8011d84:	460c      	mov	r4, r1
 8011d86:	6831      	ldr	r1, [r6, #0]
 8011d88:	4605      	mov	r5, r0
 8011d8a:	b911      	cbnz	r1, 8011d92 <sbrk_aligned+0x12>
 8011d8c:	f000 ff90 	bl	8012cb0 <_sbrk_r>
 8011d90:	6030      	str	r0, [r6, #0]
 8011d92:	4621      	mov	r1, r4
 8011d94:	4628      	mov	r0, r5
 8011d96:	f000 ff8b 	bl	8012cb0 <_sbrk_r>
 8011d9a:	1c43      	adds	r3, r0, #1
 8011d9c:	d00a      	beq.n	8011db4 <sbrk_aligned+0x34>
 8011d9e:	1cc4      	adds	r4, r0, #3
 8011da0:	f024 0403 	bic.w	r4, r4, #3
 8011da4:	42a0      	cmp	r0, r4
 8011da6:	d007      	beq.n	8011db8 <sbrk_aligned+0x38>
 8011da8:	1a21      	subs	r1, r4, r0
 8011daa:	4628      	mov	r0, r5
 8011dac:	f000 ff80 	bl	8012cb0 <_sbrk_r>
 8011db0:	3001      	adds	r0, #1
 8011db2:	d101      	bne.n	8011db8 <sbrk_aligned+0x38>
 8011db4:	f04f 34ff 	mov.w	r4, #4294967295
 8011db8:	4620      	mov	r0, r4
 8011dba:	bd70      	pop	{r4, r5, r6, pc}
 8011dbc:	24009e14 	.word	0x24009e14

08011dc0 <_malloc_r>:
 8011dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc4:	1ccd      	adds	r5, r1, #3
 8011dc6:	f025 0503 	bic.w	r5, r5, #3
 8011dca:	3508      	adds	r5, #8
 8011dcc:	2d0c      	cmp	r5, #12
 8011dce:	bf38      	it	cc
 8011dd0:	250c      	movcc	r5, #12
 8011dd2:	2d00      	cmp	r5, #0
 8011dd4:	4607      	mov	r7, r0
 8011dd6:	db01      	blt.n	8011ddc <_malloc_r+0x1c>
 8011dd8:	42a9      	cmp	r1, r5
 8011dda:	d905      	bls.n	8011de8 <_malloc_r+0x28>
 8011ddc:	230c      	movs	r3, #12
 8011dde:	603b      	str	r3, [r7, #0]
 8011de0:	2600      	movs	r6, #0
 8011de2:	4630      	mov	r0, r6
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	4e2e      	ldr	r6, [pc, #184]	; (8011ea4 <_malloc_r+0xe4>)
 8011dea:	f003 faab 	bl	8015344 <__malloc_lock>
 8011dee:	6833      	ldr	r3, [r6, #0]
 8011df0:	461c      	mov	r4, r3
 8011df2:	bb34      	cbnz	r4, 8011e42 <_malloc_r+0x82>
 8011df4:	4629      	mov	r1, r5
 8011df6:	4638      	mov	r0, r7
 8011df8:	f7ff ffc2 	bl	8011d80 <sbrk_aligned>
 8011dfc:	1c43      	adds	r3, r0, #1
 8011dfe:	4604      	mov	r4, r0
 8011e00:	d14d      	bne.n	8011e9e <_malloc_r+0xde>
 8011e02:	6834      	ldr	r4, [r6, #0]
 8011e04:	4626      	mov	r6, r4
 8011e06:	2e00      	cmp	r6, #0
 8011e08:	d140      	bne.n	8011e8c <_malloc_r+0xcc>
 8011e0a:	6823      	ldr	r3, [r4, #0]
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4638      	mov	r0, r7
 8011e10:	eb04 0803 	add.w	r8, r4, r3
 8011e14:	f000 ff4c 	bl	8012cb0 <_sbrk_r>
 8011e18:	4580      	cmp	r8, r0
 8011e1a:	d13a      	bne.n	8011e92 <_malloc_r+0xd2>
 8011e1c:	6821      	ldr	r1, [r4, #0]
 8011e1e:	3503      	adds	r5, #3
 8011e20:	1a6d      	subs	r5, r5, r1
 8011e22:	f025 0503 	bic.w	r5, r5, #3
 8011e26:	3508      	adds	r5, #8
 8011e28:	2d0c      	cmp	r5, #12
 8011e2a:	bf38      	it	cc
 8011e2c:	250c      	movcc	r5, #12
 8011e2e:	4629      	mov	r1, r5
 8011e30:	4638      	mov	r0, r7
 8011e32:	f7ff ffa5 	bl	8011d80 <sbrk_aligned>
 8011e36:	3001      	adds	r0, #1
 8011e38:	d02b      	beq.n	8011e92 <_malloc_r+0xd2>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	442b      	add	r3, r5
 8011e3e:	6023      	str	r3, [r4, #0]
 8011e40:	e00e      	b.n	8011e60 <_malloc_r+0xa0>
 8011e42:	6822      	ldr	r2, [r4, #0]
 8011e44:	1b52      	subs	r2, r2, r5
 8011e46:	d41e      	bmi.n	8011e86 <_malloc_r+0xc6>
 8011e48:	2a0b      	cmp	r2, #11
 8011e4a:	d916      	bls.n	8011e7a <_malloc_r+0xba>
 8011e4c:	1961      	adds	r1, r4, r5
 8011e4e:	42a3      	cmp	r3, r4
 8011e50:	6025      	str	r5, [r4, #0]
 8011e52:	bf18      	it	ne
 8011e54:	6059      	strne	r1, [r3, #4]
 8011e56:	6863      	ldr	r3, [r4, #4]
 8011e58:	bf08      	it	eq
 8011e5a:	6031      	streq	r1, [r6, #0]
 8011e5c:	5162      	str	r2, [r4, r5]
 8011e5e:	604b      	str	r3, [r1, #4]
 8011e60:	4638      	mov	r0, r7
 8011e62:	f104 060b 	add.w	r6, r4, #11
 8011e66:	f003 fa73 	bl	8015350 <__malloc_unlock>
 8011e6a:	f026 0607 	bic.w	r6, r6, #7
 8011e6e:	1d23      	adds	r3, r4, #4
 8011e70:	1af2      	subs	r2, r6, r3
 8011e72:	d0b6      	beq.n	8011de2 <_malloc_r+0x22>
 8011e74:	1b9b      	subs	r3, r3, r6
 8011e76:	50a3      	str	r3, [r4, r2]
 8011e78:	e7b3      	b.n	8011de2 <_malloc_r+0x22>
 8011e7a:	6862      	ldr	r2, [r4, #4]
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	bf0c      	ite	eq
 8011e80:	6032      	streq	r2, [r6, #0]
 8011e82:	605a      	strne	r2, [r3, #4]
 8011e84:	e7ec      	b.n	8011e60 <_malloc_r+0xa0>
 8011e86:	4623      	mov	r3, r4
 8011e88:	6864      	ldr	r4, [r4, #4]
 8011e8a:	e7b2      	b.n	8011df2 <_malloc_r+0x32>
 8011e8c:	4634      	mov	r4, r6
 8011e8e:	6876      	ldr	r6, [r6, #4]
 8011e90:	e7b9      	b.n	8011e06 <_malloc_r+0x46>
 8011e92:	230c      	movs	r3, #12
 8011e94:	603b      	str	r3, [r7, #0]
 8011e96:	4638      	mov	r0, r7
 8011e98:	f003 fa5a 	bl	8015350 <__malloc_unlock>
 8011e9c:	e7a1      	b.n	8011de2 <_malloc_r+0x22>
 8011e9e:	6025      	str	r5, [r4, #0]
 8011ea0:	e7de      	b.n	8011e60 <_malloc_r+0xa0>
 8011ea2:	bf00      	nop
 8011ea4:	24009e10 	.word	0x24009e10

08011ea8 <__cvt>:
 8011ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eaa:	ed2d 8b02 	vpush	{d8}
 8011eae:	eeb0 8b40 	vmov.f64	d8, d0
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	4617      	mov	r7, r2
 8011eb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011eb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011eba:	ee18 2a90 	vmov	r2, s17
 8011ebe:	f025 0520 	bic.w	r5, r5, #32
 8011ec2:	2a00      	cmp	r2, #0
 8011ec4:	bfb6      	itet	lt
 8011ec6:	222d      	movlt	r2, #45	; 0x2d
 8011ec8:	2200      	movge	r2, #0
 8011eca:	eeb1 8b40 	vneglt.f64	d8, d0
 8011ece:	2d46      	cmp	r5, #70	; 0x46
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	701a      	strb	r2, [r3, #0]
 8011ed4:	d004      	beq.n	8011ee0 <__cvt+0x38>
 8011ed6:	2d45      	cmp	r5, #69	; 0x45
 8011ed8:	d100      	bne.n	8011edc <__cvt+0x34>
 8011eda:	3401      	adds	r4, #1
 8011edc:	2102      	movs	r1, #2
 8011ede:	e000      	b.n	8011ee2 <__cvt+0x3a>
 8011ee0:	2103      	movs	r1, #3
 8011ee2:	ab03      	add	r3, sp, #12
 8011ee4:	9301      	str	r3, [sp, #4]
 8011ee6:	ab02      	add	r3, sp, #8
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	4622      	mov	r2, r4
 8011eec:	4633      	mov	r3, r6
 8011eee:	eeb0 0b48 	vmov.f64	d0, d8
 8011ef2:	f001 fef1 	bl	8013cd8 <_dtoa_r>
 8011ef6:	2d47      	cmp	r5, #71	; 0x47
 8011ef8:	d101      	bne.n	8011efe <__cvt+0x56>
 8011efa:	07fb      	lsls	r3, r7, #31
 8011efc:	d51a      	bpl.n	8011f34 <__cvt+0x8c>
 8011efe:	2d46      	cmp	r5, #70	; 0x46
 8011f00:	eb00 0204 	add.w	r2, r0, r4
 8011f04:	d10c      	bne.n	8011f20 <__cvt+0x78>
 8011f06:	7803      	ldrb	r3, [r0, #0]
 8011f08:	2b30      	cmp	r3, #48	; 0x30
 8011f0a:	d107      	bne.n	8011f1c <__cvt+0x74>
 8011f0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f14:	bf1c      	itt	ne
 8011f16:	f1c4 0401 	rsbne	r4, r4, #1
 8011f1a:	6034      	strne	r4, [r6, #0]
 8011f1c:	6833      	ldr	r3, [r6, #0]
 8011f1e:	441a      	add	r2, r3
 8011f20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f28:	bf08      	it	eq
 8011f2a:	9203      	streq	r2, [sp, #12]
 8011f2c:	2130      	movs	r1, #48	; 0x30
 8011f2e:	9b03      	ldr	r3, [sp, #12]
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d307      	bcc.n	8011f44 <__cvt+0x9c>
 8011f34:	9b03      	ldr	r3, [sp, #12]
 8011f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f38:	1a1b      	subs	r3, r3, r0
 8011f3a:	6013      	str	r3, [r2, #0]
 8011f3c:	b005      	add	sp, #20
 8011f3e:	ecbd 8b02 	vpop	{d8}
 8011f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f44:	1c5c      	adds	r4, r3, #1
 8011f46:	9403      	str	r4, [sp, #12]
 8011f48:	7019      	strb	r1, [r3, #0]
 8011f4a:	e7f0      	b.n	8011f2e <__cvt+0x86>

08011f4c <__exponent>:
 8011f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2900      	cmp	r1, #0
 8011f52:	bfb8      	it	lt
 8011f54:	4249      	neglt	r1, r1
 8011f56:	f803 2b02 	strb.w	r2, [r3], #2
 8011f5a:	bfb4      	ite	lt
 8011f5c:	222d      	movlt	r2, #45	; 0x2d
 8011f5e:	222b      	movge	r2, #43	; 0x2b
 8011f60:	2909      	cmp	r1, #9
 8011f62:	7042      	strb	r2, [r0, #1]
 8011f64:	dd2a      	ble.n	8011fbc <__exponent+0x70>
 8011f66:	f10d 0407 	add.w	r4, sp, #7
 8011f6a:	46a4      	mov	ip, r4
 8011f6c:	270a      	movs	r7, #10
 8011f6e:	46a6      	mov	lr, r4
 8011f70:	460a      	mov	r2, r1
 8011f72:	fb91 f6f7 	sdiv	r6, r1, r7
 8011f76:	fb07 1516 	mls	r5, r7, r6, r1
 8011f7a:	3530      	adds	r5, #48	; 0x30
 8011f7c:	2a63      	cmp	r2, #99	; 0x63
 8011f7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011f82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011f86:	4631      	mov	r1, r6
 8011f88:	dcf1      	bgt.n	8011f6e <__exponent+0x22>
 8011f8a:	3130      	adds	r1, #48	; 0x30
 8011f8c:	f1ae 0502 	sub.w	r5, lr, #2
 8011f90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011f94:	1c44      	adds	r4, r0, #1
 8011f96:	4629      	mov	r1, r5
 8011f98:	4561      	cmp	r1, ip
 8011f9a:	d30a      	bcc.n	8011fb2 <__exponent+0x66>
 8011f9c:	f10d 0209 	add.w	r2, sp, #9
 8011fa0:	eba2 020e 	sub.w	r2, r2, lr
 8011fa4:	4565      	cmp	r5, ip
 8011fa6:	bf88      	it	hi
 8011fa8:	2200      	movhi	r2, #0
 8011faa:	4413      	add	r3, r2
 8011fac:	1a18      	subs	r0, r3, r0
 8011fae:	b003      	add	sp, #12
 8011fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011fba:	e7ed      	b.n	8011f98 <__exponent+0x4c>
 8011fbc:	2330      	movs	r3, #48	; 0x30
 8011fbe:	3130      	adds	r1, #48	; 0x30
 8011fc0:	7083      	strb	r3, [r0, #2]
 8011fc2:	70c1      	strb	r1, [r0, #3]
 8011fc4:	1d03      	adds	r3, r0, #4
 8011fc6:	e7f1      	b.n	8011fac <__exponent+0x60>

08011fc8 <_printf_float>:
 8011fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fcc:	b08b      	sub	sp, #44	; 0x2c
 8011fce:	460c      	mov	r4, r1
 8011fd0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	461f      	mov	r7, r3
 8011fd8:	4605      	mov	r5, r0
 8011fda:	f003 f935 	bl	8015248 <_localeconv_r>
 8011fde:	f8d0 b000 	ldr.w	fp, [r0]
 8011fe2:	4658      	mov	r0, fp
 8011fe4:	f7ee f97c 	bl	80002e0 <strlen>
 8011fe8:	2300      	movs	r3, #0
 8011fea:	9308      	str	r3, [sp, #32]
 8011fec:	f8d8 3000 	ldr.w	r3, [r8]
 8011ff0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011ff4:	6822      	ldr	r2, [r4, #0]
 8011ff6:	3307      	adds	r3, #7
 8011ff8:	f023 0307 	bic.w	r3, r3, #7
 8011ffc:	f103 0108 	add.w	r1, r3, #8
 8012000:	f8c8 1000 	str.w	r1, [r8]
 8012004:	4682      	mov	sl, r0
 8012006:	e9d3 0100 	ldrd	r0, r1, [r3]
 801200a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801200e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012270 <_printf_float+0x2a8>
 8012012:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012016:	eeb0 6bc0 	vabs.f64	d6, d0
 801201a:	eeb4 6b47 	vcmp.f64	d6, d7
 801201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012022:	dd24      	ble.n	801206e <_printf_float+0xa6>
 8012024:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202c:	d502      	bpl.n	8012034 <_printf_float+0x6c>
 801202e:	232d      	movs	r3, #45	; 0x2d
 8012030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012034:	4b90      	ldr	r3, [pc, #576]	; (8012278 <_printf_float+0x2b0>)
 8012036:	4891      	ldr	r0, [pc, #580]	; (801227c <_printf_float+0x2b4>)
 8012038:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801203c:	bf94      	ite	ls
 801203e:	4698      	movls	r8, r3
 8012040:	4680      	movhi	r8, r0
 8012042:	2303      	movs	r3, #3
 8012044:	6123      	str	r3, [r4, #16]
 8012046:	f022 0204 	bic.w	r2, r2, #4
 801204a:	2300      	movs	r3, #0
 801204c:	6022      	str	r2, [r4, #0]
 801204e:	9304      	str	r3, [sp, #16]
 8012050:	9700      	str	r7, [sp, #0]
 8012052:	4633      	mov	r3, r6
 8012054:	aa09      	add	r2, sp, #36	; 0x24
 8012056:	4621      	mov	r1, r4
 8012058:	4628      	mov	r0, r5
 801205a:	f000 f9d3 	bl	8012404 <_printf_common>
 801205e:	3001      	adds	r0, #1
 8012060:	f040 808a 	bne.w	8012178 <_printf_float+0x1b0>
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	b00b      	add	sp, #44	; 0x2c
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	eeb4 0b40 	vcmp.f64	d0, d0
 8012072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012076:	d709      	bvc.n	801208c <_printf_float+0xc4>
 8012078:	ee10 3a90 	vmov	r3, s1
 801207c:	2b00      	cmp	r3, #0
 801207e:	bfbc      	itt	lt
 8012080:	232d      	movlt	r3, #45	; 0x2d
 8012082:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012086:	487e      	ldr	r0, [pc, #504]	; (8012280 <_printf_float+0x2b8>)
 8012088:	4b7e      	ldr	r3, [pc, #504]	; (8012284 <_printf_float+0x2bc>)
 801208a:	e7d5      	b.n	8012038 <_printf_float+0x70>
 801208c:	6863      	ldr	r3, [r4, #4]
 801208e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012092:	9104      	str	r1, [sp, #16]
 8012094:	1c59      	adds	r1, r3, #1
 8012096:	d13c      	bne.n	8012112 <_printf_float+0x14a>
 8012098:	2306      	movs	r3, #6
 801209a:	6063      	str	r3, [r4, #4]
 801209c:	2300      	movs	r3, #0
 801209e:	9303      	str	r3, [sp, #12]
 80120a0:	ab08      	add	r3, sp, #32
 80120a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80120a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80120aa:	ab07      	add	r3, sp, #28
 80120ac:	6861      	ldr	r1, [r4, #4]
 80120ae:	9300      	str	r3, [sp, #0]
 80120b0:	6022      	str	r2, [r4, #0]
 80120b2:	f10d 031b 	add.w	r3, sp, #27
 80120b6:	4628      	mov	r0, r5
 80120b8:	f7ff fef6 	bl	8011ea8 <__cvt>
 80120bc:	9b04      	ldr	r3, [sp, #16]
 80120be:	9907      	ldr	r1, [sp, #28]
 80120c0:	2b47      	cmp	r3, #71	; 0x47
 80120c2:	4680      	mov	r8, r0
 80120c4:	d108      	bne.n	80120d8 <_printf_float+0x110>
 80120c6:	1cc8      	adds	r0, r1, #3
 80120c8:	db02      	blt.n	80120d0 <_printf_float+0x108>
 80120ca:	6863      	ldr	r3, [r4, #4]
 80120cc:	4299      	cmp	r1, r3
 80120ce:	dd41      	ble.n	8012154 <_printf_float+0x18c>
 80120d0:	f1a9 0902 	sub.w	r9, r9, #2
 80120d4:	fa5f f989 	uxtb.w	r9, r9
 80120d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80120dc:	d820      	bhi.n	8012120 <_printf_float+0x158>
 80120de:	3901      	subs	r1, #1
 80120e0:	464a      	mov	r2, r9
 80120e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80120e6:	9107      	str	r1, [sp, #28]
 80120e8:	f7ff ff30 	bl	8011f4c <__exponent>
 80120ec:	9a08      	ldr	r2, [sp, #32]
 80120ee:	9004      	str	r0, [sp, #16]
 80120f0:	1813      	adds	r3, r2, r0
 80120f2:	2a01      	cmp	r2, #1
 80120f4:	6123      	str	r3, [r4, #16]
 80120f6:	dc02      	bgt.n	80120fe <_printf_float+0x136>
 80120f8:	6822      	ldr	r2, [r4, #0]
 80120fa:	07d2      	lsls	r2, r2, #31
 80120fc:	d501      	bpl.n	8012102 <_printf_float+0x13a>
 80120fe:	3301      	adds	r3, #1
 8012100:	6123      	str	r3, [r4, #16]
 8012102:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d0a2      	beq.n	8012050 <_printf_float+0x88>
 801210a:	232d      	movs	r3, #45	; 0x2d
 801210c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012110:	e79e      	b.n	8012050 <_printf_float+0x88>
 8012112:	9904      	ldr	r1, [sp, #16]
 8012114:	2947      	cmp	r1, #71	; 0x47
 8012116:	d1c1      	bne.n	801209c <_printf_float+0xd4>
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1bf      	bne.n	801209c <_printf_float+0xd4>
 801211c:	2301      	movs	r3, #1
 801211e:	e7bc      	b.n	801209a <_printf_float+0xd2>
 8012120:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012124:	d118      	bne.n	8012158 <_printf_float+0x190>
 8012126:	2900      	cmp	r1, #0
 8012128:	6863      	ldr	r3, [r4, #4]
 801212a:	dd0b      	ble.n	8012144 <_printf_float+0x17c>
 801212c:	6121      	str	r1, [r4, #16]
 801212e:	b913      	cbnz	r3, 8012136 <_printf_float+0x16e>
 8012130:	6822      	ldr	r2, [r4, #0]
 8012132:	07d0      	lsls	r0, r2, #31
 8012134:	d502      	bpl.n	801213c <_printf_float+0x174>
 8012136:	3301      	adds	r3, #1
 8012138:	440b      	add	r3, r1
 801213a:	6123      	str	r3, [r4, #16]
 801213c:	2300      	movs	r3, #0
 801213e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012140:	9304      	str	r3, [sp, #16]
 8012142:	e7de      	b.n	8012102 <_printf_float+0x13a>
 8012144:	b913      	cbnz	r3, 801214c <_printf_float+0x184>
 8012146:	6822      	ldr	r2, [r4, #0]
 8012148:	07d2      	lsls	r2, r2, #31
 801214a:	d501      	bpl.n	8012150 <_printf_float+0x188>
 801214c:	3302      	adds	r3, #2
 801214e:	e7f4      	b.n	801213a <_printf_float+0x172>
 8012150:	2301      	movs	r3, #1
 8012152:	e7f2      	b.n	801213a <_printf_float+0x172>
 8012154:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012158:	9b08      	ldr	r3, [sp, #32]
 801215a:	4299      	cmp	r1, r3
 801215c:	db05      	blt.n	801216a <_printf_float+0x1a2>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	6121      	str	r1, [r4, #16]
 8012162:	07d8      	lsls	r0, r3, #31
 8012164:	d5ea      	bpl.n	801213c <_printf_float+0x174>
 8012166:	1c4b      	adds	r3, r1, #1
 8012168:	e7e7      	b.n	801213a <_printf_float+0x172>
 801216a:	2900      	cmp	r1, #0
 801216c:	bfd4      	ite	le
 801216e:	f1c1 0202 	rsble	r2, r1, #2
 8012172:	2201      	movgt	r2, #1
 8012174:	4413      	add	r3, r2
 8012176:	e7e0      	b.n	801213a <_printf_float+0x172>
 8012178:	6823      	ldr	r3, [r4, #0]
 801217a:	055a      	lsls	r2, r3, #21
 801217c:	d407      	bmi.n	801218e <_printf_float+0x1c6>
 801217e:	6923      	ldr	r3, [r4, #16]
 8012180:	4642      	mov	r2, r8
 8012182:	4631      	mov	r1, r6
 8012184:	4628      	mov	r0, r5
 8012186:	47b8      	blx	r7
 8012188:	3001      	adds	r0, #1
 801218a:	d12a      	bne.n	80121e2 <_printf_float+0x21a>
 801218c:	e76a      	b.n	8012064 <_printf_float+0x9c>
 801218e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012192:	f240 80e2 	bls.w	801235a <_printf_float+0x392>
 8012196:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801219a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a2:	d133      	bne.n	801220c <_printf_float+0x244>
 80121a4:	4a38      	ldr	r2, [pc, #224]	; (8012288 <_printf_float+0x2c0>)
 80121a6:	2301      	movs	r3, #1
 80121a8:	4631      	mov	r1, r6
 80121aa:	4628      	mov	r0, r5
 80121ac:	47b8      	blx	r7
 80121ae:	3001      	adds	r0, #1
 80121b0:	f43f af58 	beq.w	8012064 <_printf_float+0x9c>
 80121b4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	db02      	blt.n	80121c2 <_printf_float+0x1fa>
 80121bc:	6823      	ldr	r3, [r4, #0]
 80121be:	07d8      	lsls	r0, r3, #31
 80121c0:	d50f      	bpl.n	80121e2 <_printf_float+0x21a>
 80121c2:	4653      	mov	r3, sl
 80121c4:	465a      	mov	r2, fp
 80121c6:	4631      	mov	r1, r6
 80121c8:	4628      	mov	r0, r5
 80121ca:	47b8      	blx	r7
 80121cc:	3001      	adds	r0, #1
 80121ce:	f43f af49 	beq.w	8012064 <_printf_float+0x9c>
 80121d2:	f04f 0800 	mov.w	r8, #0
 80121d6:	f104 091a 	add.w	r9, r4, #26
 80121da:	9b08      	ldr	r3, [sp, #32]
 80121dc:	3b01      	subs	r3, #1
 80121de:	4543      	cmp	r3, r8
 80121e0:	dc09      	bgt.n	80121f6 <_printf_float+0x22e>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	079b      	lsls	r3, r3, #30
 80121e6:	f100 8108 	bmi.w	80123fa <_printf_float+0x432>
 80121ea:	68e0      	ldr	r0, [r4, #12]
 80121ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ee:	4298      	cmp	r0, r3
 80121f0:	bfb8      	it	lt
 80121f2:	4618      	movlt	r0, r3
 80121f4:	e738      	b.n	8012068 <_printf_float+0xa0>
 80121f6:	2301      	movs	r3, #1
 80121f8:	464a      	mov	r2, r9
 80121fa:	4631      	mov	r1, r6
 80121fc:	4628      	mov	r0, r5
 80121fe:	47b8      	blx	r7
 8012200:	3001      	adds	r0, #1
 8012202:	f43f af2f 	beq.w	8012064 <_printf_float+0x9c>
 8012206:	f108 0801 	add.w	r8, r8, #1
 801220a:	e7e6      	b.n	80121da <_printf_float+0x212>
 801220c:	9b07      	ldr	r3, [sp, #28]
 801220e:	2b00      	cmp	r3, #0
 8012210:	dc3c      	bgt.n	801228c <_printf_float+0x2c4>
 8012212:	4a1d      	ldr	r2, [pc, #116]	; (8012288 <_printf_float+0x2c0>)
 8012214:	2301      	movs	r3, #1
 8012216:	4631      	mov	r1, r6
 8012218:	4628      	mov	r0, r5
 801221a:	47b8      	blx	r7
 801221c:	3001      	adds	r0, #1
 801221e:	f43f af21 	beq.w	8012064 <_printf_float+0x9c>
 8012222:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012226:	4313      	orrs	r3, r2
 8012228:	d102      	bne.n	8012230 <_printf_float+0x268>
 801222a:	6823      	ldr	r3, [r4, #0]
 801222c:	07d9      	lsls	r1, r3, #31
 801222e:	d5d8      	bpl.n	80121e2 <_printf_float+0x21a>
 8012230:	4653      	mov	r3, sl
 8012232:	465a      	mov	r2, fp
 8012234:	4631      	mov	r1, r6
 8012236:	4628      	mov	r0, r5
 8012238:	47b8      	blx	r7
 801223a:	3001      	adds	r0, #1
 801223c:	f43f af12 	beq.w	8012064 <_printf_float+0x9c>
 8012240:	f04f 0900 	mov.w	r9, #0
 8012244:	f104 0a1a 	add.w	sl, r4, #26
 8012248:	9b07      	ldr	r3, [sp, #28]
 801224a:	425b      	negs	r3, r3
 801224c:	454b      	cmp	r3, r9
 801224e:	dc01      	bgt.n	8012254 <_printf_float+0x28c>
 8012250:	9b08      	ldr	r3, [sp, #32]
 8012252:	e795      	b.n	8012180 <_printf_float+0x1b8>
 8012254:	2301      	movs	r3, #1
 8012256:	4652      	mov	r2, sl
 8012258:	4631      	mov	r1, r6
 801225a:	4628      	mov	r0, r5
 801225c:	47b8      	blx	r7
 801225e:	3001      	adds	r0, #1
 8012260:	f43f af00 	beq.w	8012064 <_printf_float+0x9c>
 8012264:	f109 0901 	add.w	r9, r9, #1
 8012268:	e7ee      	b.n	8012248 <_printf_float+0x280>
 801226a:	bf00      	nop
 801226c:	f3af 8000 	nop.w
 8012270:	ffffffff 	.word	0xffffffff
 8012274:	7fefffff 	.word	0x7fefffff
 8012278:	080183e0 	.word	0x080183e0
 801227c:	080183e4 	.word	0x080183e4
 8012280:	080183ec 	.word	0x080183ec
 8012284:	080183e8 	.word	0x080183e8
 8012288:	080183f0 	.word	0x080183f0
 801228c:	9a08      	ldr	r2, [sp, #32]
 801228e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012290:	429a      	cmp	r2, r3
 8012292:	bfa8      	it	ge
 8012294:	461a      	movge	r2, r3
 8012296:	2a00      	cmp	r2, #0
 8012298:	4691      	mov	r9, r2
 801229a:	dc38      	bgt.n	801230e <_printf_float+0x346>
 801229c:	2300      	movs	r3, #0
 801229e:	9305      	str	r3, [sp, #20]
 80122a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122a4:	f104 021a 	add.w	r2, r4, #26
 80122a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122aa:	9905      	ldr	r1, [sp, #20]
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	eba3 0309 	sub.w	r3, r3, r9
 80122b2:	428b      	cmp	r3, r1
 80122b4:	dc33      	bgt.n	801231e <_printf_float+0x356>
 80122b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	db3c      	blt.n	8012338 <_printf_float+0x370>
 80122be:	6823      	ldr	r3, [r4, #0]
 80122c0:	07da      	lsls	r2, r3, #31
 80122c2:	d439      	bmi.n	8012338 <_printf_float+0x370>
 80122c4:	9b08      	ldr	r3, [sp, #32]
 80122c6:	9a04      	ldr	r2, [sp, #16]
 80122c8:	9907      	ldr	r1, [sp, #28]
 80122ca:	1a9a      	subs	r2, r3, r2
 80122cc:	eba3 0901 	sub.w	r9, r3, r1
 80122d0:	4591      	cmp	r9, r2
 80122d2:	bfa8      	it	ge
 80122d4:	4691      	movge	r9, r2
 80122d6:	f1b9 0f00 	cmp.w	r9, #0
 80122da:	dc35      	bgt.n	8012348 <_printf_float+0x380>
 80122dc:	f04f 0800 	mov.w	r8, #0
 80122e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122e4:	f104 0a1a 	add.w	sl, r4, #26
 80122e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80122ec:	1a9b      	subs	r3, r3, r2
 80122ee:	eba3 0309 	sub.w	r3, r3, r9
 80122f2:	4543      	cmp	r3, r8
 80122f4:	f77f af75 	ble.w	80121e2 <_printf_float+0x21a>
 80122f8:	2301      	movs	r3, #1
 80122fa:	4652      	mov	r2, sl
 80122fc:	4631      	mov	r1, r6
 80122fe:	4628      	mov	r0, r5
 8012300:	47b8      	blx	r7
 8012302:	3001      	adds	r0, #1
 8012304:	f43f aeae 	beq.w	8012064 <_printf_float+0x9c>
 8012308:	f108 0801 	add.w	r8, r8, #1
 801230c:	e7ec      	b.n	80122e8 <_printf_float+0x320>
 801230e:	4613      	mov	r3, r2
 8012310:	4631      	mov	r1, r6
 8012312:	4642      	mov	r2, r8
 8012314:	4628      	mov	r0, r5
 8012316:	47b8      	blx	r7
 8012318:	3001      	adds	r0, #1
 801231a:	d1bf      	bne.n	801229c <_printf_float+0x2d4>
 801231c:	e6a2      	b.n	8012064 <_printf_float+0x9c>
 801231e:	2301      	movs	r3, #1
 8012320:	4631      	mov	r1, r6
 8012322:	4628      	mov	r0, r5
 8012324:	9204      	str	r2, [sp, #16]
 8012326:	47b8      	blx	r7
 8012328:	3001      	adds	r0, #1
 801232a:	f43f ae9b 	beq.w	8012064 <_printf_float+0x9c>
 801232e:	9b05      	ldr	r3, [sp, #20]
 8012330:	9a04      	ldr	r2, [sp, #16]
 8012332:	3301      	adds	r3, #1
 8012334:	9305      	str	r3, [sp, #20]
 8012336:	e7b7      	b.n	80122a8 <_printf_float+0x2e0>
 8012338:	4653      	mov	r3, sl
 801233a:	465a      	mov	r2, fp
 801233c:	4631      	mov	r1, r6
 801233e:	4628      	mov	r0, r5
 8012340:	47b8      	blx	r7
 8012342:	3001      	adds	r0, #1
 8012344:	d1be      	bne.n	80122c4 <_printf_float+0x2fc>
 8012346:	e68d      	b.n	8012064 <_printf_float+0x9c>
 8012348:	9a04      	ldr	r2, [sp, #16]
 801234a:	464b      	mov	r3, r9
 801234c:	4442      	add	r2, r8
 801234e:	4631      	mov	r1, r6
 8012350:	4628      	mov	r0, r5
 8012352:	47b8      	blx	r7
 8012354:	3001      	adds	r0, #1
 8012356:	d1c1      	bne.n	80122dc <_printf_float+0x314>
 8012358:	e684      	b.n	8012064 <_printf_float+0x9c>
 801235a:	9a08      	ldr	r2, [sp, #32]
 801235c:	2a01      	cmp	r2, #1
 801235e:	dc01      	bgt.n	8012364 <_printf_float+0x39c>
 8012360:	07db      	lsls	r3, r3, #31
 8012362:	d537      	bpl.n	80123d4 <_printf_float+0x40c>
 8012364:	2301      	movs	r3, #1
 8012366:	4642      	mov	r2, r8
 8012368:	4631      	mov	r1, r6
 801236a:	4628      	mov	r0, r5
 801236c:	47b8      	blx	r7
 801236e:	3001      	adds	r0, #1
 8012370:	f43f ae78 	beq.w	8012064 <_printf_float+0x9c>
 8012374:	4653      	mov	r3, sl
 8012376:	465a      	mov	r2, fp
 8012378:	4631      	mov	r1, r6
 801237a:	4628      	mov	r0, r5
 801237c:	47b8      	blx	r7
 801237e:	3001      	adds	r0, #1
 8012380:	f43f ae70 	beq.w	8012064 <_printf_float+0x9c>
 8012384:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012388:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012390:	d01b      	beq.n	80123ca <_printf_float+0x402>
 8012392:	9b08      	ldr	r3, [sp, #32]
 8012394:	f108 0201 	add.w	r2, r8, #1
 8012398:	3b01      	subs	r3, #1
 801239a:	4631      	mov	r1, r6
 801239c:	4628      	mov	r0, r5
 801239e:	47b8      	blx	r7
 80123a0:	3001      	adds	r0, #1
 80123a2:	d10e      	bne.n	80123c2 <_printf_float+0x3fa>
 80123a4:	e65e      	b.n	8012064 <_printf_float+0x9c>
 80123a6:	2301      	movs	r3, #1
 80123a8:	464a      	mov	r2, r9
 80123aa:	4631      	mov	r1, r6
 80123ac:	4628      	mov	r0, r5
 80123ae:	47b8      	blx	r7
 80123b0:	3001      	adds	r0, #1
 80123b2:	f43f ae57 	beq.w	8012064 <_printf_float+0x9c>
 80123b6:	f108 0801 	add.w	r8, r8, #1
 80123ba:	9b08      	ldr	r3, [sp, #32]
 80123bc:	3b01      	subs	r3, #1
 80123be:	4543      	cmp	r3, r8
 80123c0:	dcf1      	bgt.n	80123a6 <_printf_float+0x3de>
 80123c2:	9b04      	ldr	r3, [sp, #16]
 80123c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80123c8:	e6db      	b.n	8012182 <_printf_float+0x1ba>
 80123ca:	f04f 0800 	mov.w	r8, #0
 80123ce:	f104 091a 	add.w	r9, r4, #26
 80123d2:	e7f2      	b.n	80123ba <_printf_float+0x3f2>
 80123d4:	2301      	movs	r3, #1
 80123d6:	4642      	mov	r2, r8
 80123d8:	e7df      	b.n	801239a <_printf_float+0x3d2>
 80123da:	2301      	movs	r3, #1
 80123dc:	464a      	mov	r2, r9
 80123de:	4631      	mov	r1, r6
 80123e0:	4628      	mov	r0, r5
 80123e2:	47b8      	blx	r7
 80123e4:	3001      	adds	r0, #1
 80123e6:	f43f ae3d 	beq.w	8012064 <_printf_float+0x9c>
 80123ea:	f108 0801 	add.w	r8, r8, #1
 80123ee:	68e3      	ldr	r3, [r4, #12]
 80123f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123f2:	1a5b      	subs	r3, r3, r1
 80123f4:	4543      	cmp	r3, r8
 80123f6:	dcf0      	bgt.n	80123da <_printf_float+0x412>
 80123f8:	e6f7      	b.n	80121ea <_printf_float+0x222>
 80123fa:	f04f 0800 	mov.w	r8, #0
 80123fe:	f104 0919 	add.w	r9, r4, #25
 8012402:	e7f4      	b.n	80123ee <_printf_float+0x426>

08012404 <_printf_common>:
 8012404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012408:	4616      	mov	r6, r2
 801240a:	4699      	mov	r9, r3
 801240c:	688a      	ldr	r2, [r1, #8]
 801240e:	690b      	ldr	r3, [r1, #16]
 8012410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012414:	4293      	cmp	r3, r2
 8012416:	bfb8      	it	lt
 8012418:	4613      	movlt	r3, r2
 801241a:	6033      	str	r3, [r6, #0]
 801241c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012420:	4607      	mov	r7, r0
 8012422:	460c      	mov	r4, r1
 8012424:	b10a      	cbz	r2, 801242a <_printf_common+0x26>
 8012426:	3301      	adds	r3, #1
 8012428:	6033      	str	r3, [r6, #0]
 801242a:	6823      	ldr	r3, [r4, #0]
 801242c:	0699      	lsls	r1, r3, #26
 801242e:	bf42      	ittt	mi
 8012430:	6833      	ldrmi	r3, [r6, #0]
 8012432:	3302      	addmi	r3, #2
 8012434:	6033      	strmi	r3, [r6, #0]
 8012436:	6825      	ldr	r5, [r4, #0]
 8012438:	f015 0506 	ands.w	r5, r5, #6
 801243c:	d106      	bne.n	801244c <_printf_common+0x48>
 801243e:	f104 0a19 	add.w	sl, r4, #25
 8012442:	68e3      	ldr	r3, [r4, #12]
 8012444:	6832      	ldr	r2, [r6, #0]
 8012446:	1a9b      	subs	r3, r3, r2
 8012448:	42ab      	cmp	r3, r5
 801244a:	dc26      	bgt.n	801249a <_printf_common+0x96>
 801244c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012450:	1e13      	subs	r3, r2, #0
 8012452:	6822      	ldr	r2, [r4, #0]
 8012454:	bf18      	it	ne
 8012456:	2301      	movne	r3, #1
 8012458:	0692      	lsls	r2, r2, #26
 801245a:	d42b      	bmi.n	80124b4 <_printf_common+0xb0>
 801245c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012460:	4649      	mov	r1, r9
 8012462:	4638      	mov	r0, r7
 8012464:	47c0      	blx	r8
 8012466:	3001      	adds	r0, #1
 8012468:	d01e      	beq.n	80124a8 <_printf_common+0xa4>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	68e5      	ldr	r5, [r4, #12]
 801246e:	6832      	ldr	r2, [r6, #0]
 8012470:	f003 0306 	and.w	r3, r3, #6
 8012474:	2b04      	cmp	r3, #4
 8012476:	bf08      	it	eq
 8012478:	1aad      	subeq	r5, r5, r2
 801247a:	68a3      	ldr	r3, [r4, #8]
 801247c:	6922      	ldr	r2, [r4, #16]
 801247e:	bf0c      	ite	eq
 8012480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012484:	2500      	movne	r5, #0
 8012486:	4293      	cmp	r3, r2
 8012488:	bfc4      	itt	gt
 801248a:	1a9b      	subgt	r3, r3, r2
 801248c:	18ed      	addgt	r5, r5, r3
 801248e:	2600      	movs	r6, #0
 8012490:	341a      	adds	r4, #26
 8012492:	42b5      	cmp	r5, r6
 8012494:	d11a      	bne.n	80124cc <_printf_common+0xc8>
 8012496:	2000      	movs	r0, #0
 8012498:	e008      	b.n	80124ac <_printf_common+0xa8>
 801249a:	2301      	movs	r3, #1
 801249c:	4652      	mov	r2, sl
 801249e:	4649      	mov	r1, r9
 80124a0:	4638      	mov	r0, r7
 80124a2:	47c0      	blx	r8
 80124a4:	3001      	adds	r0, #1
 80124a6:	d103      	bne.n	80124b0 <_printf_common+0xac>
 80124a8:	f04f 30ff 	mov.w	r0, #4294967295
 80124ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b0:	3501      	adds	r5, #1
 80124b2:	e7c6      	b.n	8012442 <_printf_common+0x3e>
 80124b4:	18e1      	adds	r1, r4, r3
 80124b6:	1c5a      	adds	r2, r3, #1
 80124b8:	2030      	movs	r0, #48	; 0x30
 80124ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124be:	4422      	add	r2, r4
 80124c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80124c8:	3302      	adds	r3, #2
 80124ca:	e7c7      	b.n	801245c <_printf_common+0x58>
 80124cc:	2301      	movs	r3, #1
 80124ce:	4622      	mov	r2, r4
 80124d0:	4649      	mov	r1, r9
 80124d2:	4638      	mov	r0, r7
 80124d4:	47c0      	blx	r8
 80124d6:	3001      	adds	r0, #1
 80124d8:	d0e6      	beq.n	80124a8 <_printf_common+0xa4>
 80124da:	3601      	adds	r6, #1
 80124dc:	e7d9      	b.n	8012492 <_printf_common+0x8e>
	...

080124e0 <_printf_i>:
 80124e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80124e4:	7e0f      	ldrb	r7, [r1, #24]
 80124e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80124e8:	2f78      	cmp	r7, #120	; 0x78
 80124ea:	4691      	mov	r9, r2
 80124ec:	4680      	mov	r8, r0
 80124ee:	460c      	mov	r4, r1
 80124f0:	469a      	mov	sl, r3
 80124f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80124f6:	d807      	bhi.n	8012508 <_printf_i+0x28>
 80124f8:	2f62      	cmp	r7, #98	; 0x62
 80124fa:	d80a      	bhi.n	8012512 <_printf_i+0x32>
 80124fc:	2f00      	cmp	r7, #0
 80124fe:	f000 80d8 	beq.w	80126b2 <_printf_i+0x1d2>
 8012502:	2f58      	cmp	r7, #88	; 0x58
 8012504:	f000 80a3 	beq.w	801264e <_printf_i+0x16e>
 8012508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801250c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012510:	e03a      	b.n	8012588 <_printf_i+0xa8>
 8012512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012516:	2b15      	cmp	r3, #21
 8012518:	d8f6      	bhi.n	8012508 <_printf_i+0x28>
 801251a:	a101      	add	r1, pc, #4	; (adr r1, 8012520 <_printf_i+0x40>)
 801251c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012520:	08012579 	.word	0x08012579
 8012524:	0801258d 	.word	0x0801258d
 8012528:	08012509 	.word	0x08012509
 801252c:	08012509 	.word	0x08012509
 8012530:	08012509 	.word	0x08012509
 8012534:	08012509 	.word	0x08012509
 8012538:	0801258d 	.word	0x0801258d
 801253c:	08012509 	.word	0x08012509
 8012540:	08012509 	.word	0x08012509
 8012544:	08012509 	.word	0x08012509
 8012548:	08012509 	.word	0x08012509
 801254c:	08012699 	.word	0x08012699
 8012550:	080125bd 	.word	0x080125bd
 8012554:	0801267b 	.word	0x0801267b
 8012558:	08012509 	.word	0x08012509
 801255c:	08012509 	.word	0x08012509
 8012560:	080126bb 	.word	0x080126bb
 8012564:	08012509 	.word	0x08012509
 8012568:	080125bd 	.word	0x080125bd
 801256c:	08012509 	.word	0x08012509
 8012570:	08012509 	.word	0x08012509
 8012574:	08012683 	.word	0x08012683
 8012578:	682b      	ldr	r3, [r5, #0]
 801257a:	1d1a      	adds	r2, r3, #4
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	602a      	str	r2, [r5, #0]
 8012580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012588:	2301      	movs	r3, #1
 801258a:	e0a3      	b.n	80126d4 <_printf_i+0x1f4>
 801258c:	6820      	ldr	r0, [r4, #0]
 801258e:	6829      	ldr	r1, [r5, #0]
 8012590:	0606      	lsls	r6, r0, #24
 8012592:	f101 0304 	add.w	r3, r1, #4
 8012596:	d50a      	bpl.n	80125ae <_printf_i+0xce>
 8012598:	680e      	ldr	r6, [r1, #0]
 801259a:	602b      	str	r3, [r5, #0]
 801259c:	2e00      	cmp	r6, #0
 801259e:	da03      	bge.n	80125a8 <_printf_i+0xc8>
 80125a0:	232d      	movs	r3, #45	; 0x2d
 80125a2:	4276      	negs	r6, r6
 80125a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125a8:	485e      	ldr	r0, [pc, #376]	; (8012724 <_printf_i+0x244>)
 80125aa:	230a      	movs	r3, #10
 80125ac:	e019      	b.n	80125e2 <_printf_i+0x102>
 80125ae:	680e      	ldr	r6, [r1, #0]
 80125b0:	602b      	str	r3, [r5, #0]
 80125b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80125b6:	bf18      	it	ne
 80125b8:	b236      	sxthne	r6, r6
 80125ba:	e7ef      	b.n	801259c <_printf_i+0xbc>
 80125bc:	682b      	ldr	r3, [r5, #0]
 80125be:	6820      	ldr	r0, [r4, #0]
 80125c0:	1d19      	adds	r1, r3, #4
 80125c2:	6029      	str	r1, [r5, #0]
 80125c4:	0601      	lsls	r1, r0, #24
 80125c6:	d501      	bpl.n	80125cc <_printf_i+0xec>
 80125c8:	681e      	ldr	r6, [r3, #0]
 80125ca:	e002      	b.n	80125d2 <_printf_i+0xf2>
 80125cc:	0646      	lsls	r6, r0, #25
 80125ce:	d5fb      	bpl.n	80125c8 <_printf_i+0xe8>
 80125d0:	881e      	ldrh	r6, [r3, #0]
 80125d2:	4854      	ldr	r0, [pc, #336]	; (8012724 <_printf_i+0x244>)
 80125d4:	2f6f      	cmp	r7, #111	; 0x6f
 80125d6:	bf0c      	ite	eq
 80125d8:	2308      	moveq	r3, #8
 80125da:	230a      	movne	r3, #10
 80125dc:	2100      	movs	r1, #0
 80125de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125e2:	6865      	ldr	r5, [r4, #4]
 80125e4:	60a5      	str	r5, [r4, #8]
 80125e6:	2d00      	cmp	r5, #0
 80125e8:	bfa2      	ittt	ge
 80125ea:	6821      	ldrge	r1, [r4, #0]
 80125ec:	f021 0104 	bicge.w	r1, r1, #4
 80125f0:	6021      	strge	r1, [r4, #0]
 80125f2:	b90e      	cbnz	r6, 80125f8 <_printf_i+0x118>
 80125f4:	2d00      	cmp	r5, #0
 80125f6:	d04d      	beq.n	8012694 <_printf_i+0x1b4>
 80125f8:	4615      	mov	r5, r2
 80125fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80125fe:	fb03 6711 	mls	r7, r3, r1, r6
 8012602:	5dc7      	ldrb	r7, [r0, r7]
 8012604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012608:	4637      	mov	r7, r6
 801260a:	42bb      	cmp	r3, r7
 801260c:	460e      	mov	r6, r1
 801260e:	d9f4      	bls.n	80125fa <_printf_i+0x11a>
 8012610:	2b08      	cmp	r3, #8
 8012612:	d10b      	bne.n	801262c <_printf_i+0x14c>
 8012614:	6823      	ldr	r3, [r4, #0]
 8012616:	07de      	lsls	r6, r3, #31
 8012618:	d508      	bpl.n	801262c <_printf_i+0x14c>
 801261a:	6923      	ldr	r3, [r4, #16]
 801261c:	6861      	ldr	r1, [r4, #4]
 801261e:	4299      	cmp	r1, r3
 8012620:	bfde      	ittt	le
 8012622:	2330      	movle	r3, #48	; 0x30
 8012624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012628:	f105 35ff 	addle.w	r5, r5, #4294967295
 801262c:	1b52      	subs	r2, r2, r5
 801262e:	6122      	str	r2, [r4, #16]
 8012630:	f8cd a000 	str.w	sl, [sp]
 8012634:	464b      	mov	r3, r9
 8012636:	aa03      	add	r2, sp, #12
 8012638:	4621      	mov	r1, r4
 801263a:	4640      	mov	r0, r8
 801263c:	f7ff fee2 	bl	8012404 <_printf_common>
 8012640:	3001      	adds	r0, #1
 8012642:	d14c      	bne.n	80126de <_printf_i+0x1fe>
 8012644:	f04f 30ff 	mov.w	r0, #4294967295
 8012648:	b004      	add	sp, #16
 801264a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801264e:	4835      	ldr	r0, [pc, #212]	; (8012724 <_printf_i+0x244>)
 8012650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012654:	6829      	ldr	r1, [r5, #0]
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	f851 6b04 	ldr.w	r6, [r1], #4
 801265c:	6029      	str	r1, [r5, #0]
 801265e:	061d      	lsls	r5, r3, #24
 8012660:	d514      	bpl.n	801268c <_printf_i+0x1ac>
 8012662:	07df      	lsls	r7, r3, #31
 8012664:	bf44      	itt	mi
 8012666:	f043 0320 	orrmi.w	r3, r3, #32
 801266a:	6023      	strmi	r3, [r4, #0]
 801266c:	b91e      	cbnz	r6, 8012676 <_printf_i+0x196>
 801266e:	6823      	ldr	r3, [r4, #0]
 8012670:	f023 0320 	bic.w	r3, r3, #32
 8012674:	6023      	str	r3, [r4, #0]
 8012676:	2310      	movs	r3, #16
 8012678:	e7b0      	b.n	80125dc <_printf_i+0xfc>
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	f043 0320 	orr.w	r3, r3, #32
 8012680:	6023      	str	r3, [r4, #0]
 8012682:	2378      	movs	r3, #120	; 0x78
 8012684:	4828      	ldr	r0, [pc, #160]	; (8012728 <_printf_i+0x248>)
 8012686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801268a:	e7e3      	b.n	8012654 <_printf_i+0x174>
 801268c:	0659      	lsls	r1, r3, #25
 801268e:	bf48      	it	mi
 8012690:	b2b6      	uxthmi	r6, r6
 8012692:	e7e6      	b.n	8012662 <_printf_i+0x182>
 8012694:	4615      	mov	r5, r2
 8012696:	e7bb      	b.n	8012610 <_printf_i+0x130>
 8012698:	682b      	ldr	r3, [r5, #0]
 801269a:	6826      	ldr	r6, [r4, #0]
 801269c:	6961      	ldr	r1, [r4, #20]
 801269e:	1d18      	adds	r0, r3, #4
 80126a0:	6028      	str	r0, [r5, #0]
 80126a2:	0635      	lsls	r5, r6, #24
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	d501      	bpl.n	80126ac <_printf_i+0x1cc>
 80126a8:	6019      	str	r1, [r3, #0]
 80126aa:	e002      	b.n	80126b2 <_printf_i+0x1d2>
 80126ac:	0670      	lsls	r0, r6, #25
 80126ae:	d5fb      	bpl.n	80126a8 <_printf_i+0x1c8>
 80126b0:	8019      	strh	r1, [r3, #0]
 80126b2:	2300      	movs	r3, #0
 80126b4:	6123      	str	r3, [r4, #16]
 80126b6:	4615      	mov	r5, r2
 80126b8:	e7ba      	b.n	8012630 <_printf_i+0x150>
 80126ba:	682b      	ldr	r3, [r5, #0]
 80126bc:	1d1a      	adds	r2, r3, #4
 80126be:	602a      	str	r2, [r5, #0]
 80126c0:	681d      	ldr	r5, [r3, #0]
 80126c2:	6862      	ldr	r2, [r4, #4]
 80126c4:	2100      	movs	r1, #0
 80126c6:	4628      	mov	r0, r5
 80126c8:	f7ed fe12 	bl	80002f0 <memchr>
 80126cc:	b108      	cbz	r0, 80126d2 <_printf_i+0x1f2>
 80126ce:	1b40      	subs	r0, r0, r5
 80126d0:	6060      	str	r0, [r4, #4]
 80126d2:	6863      	ldr	r3, [r4, #4]
 80126d4:	6123      	str	r3, [r4, #16]
 80126d6:	2300      	movs	r3, #0
 80126d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126dc:	e7a8      	b.n	8012630 <_printf_i+0x150>
 80126de:	6923      	ldr	r3, [r4, #16]
 80126e0:	462a      	mov	r2, r5
 80126e2:	4649      	mov	r1, r9
 80126e4:	4640      	mov	r0, r8
 80126e6:	47d0      	blx	sl
 80126e8:	3001      	adds	r0, #1
 80126ea:	d0ab      	beq.n	8012644 <_printf_i+0x164>
 80126ec:	6823      	ldr	r3, [r4, #0]
 80126ee:	079b      	lsls	r3, r3, #30
 80126f0:	d413      	bmi.n	801271a <_printf_i+0x23a>
 80126f2:	68e0      	ldr	r0, [r4, #12]
 80126f4:	9b03      	ldr	r3, [sp, #12]
 80126f6:	4298      	cmp	r0, r3
 80126f8:	bfb8      	it	lt
 80126fa:	4618      	movlt	r0, r3
 80126fc:	e7a4      	b.n	8012648 <_printf_i+0x168>
 80126fe:	2301      	movs	r3, #1
 8012700:	4632      	mov	r2, r6
 8012702:	4649      	mov	r1, r9
 8012704:	4640      	mov	r0, r8
 8012706:	47d0      	blx	sl
 8012708:	3001      	adds	r0, #1
 801270a:	d09b      	beq.n	8012644 <_printf_i+0x164>
 801270c:	3501      	adds	r5, #1
 801270e:	68e3      	ldr	r3, [r4, #12]
 8012710:	9903      	ldr	r1, [sp, #12]
 8012712:	1a5b      	subs	r3, r3, r1
 8012714:	42ab      	cmp	r3, r5
 8012716:	dcf2      	bgt.n	80126fe <_printf_i+0x21e>
 8012718:	e7eb      	b.n	80126f2 <_printf_i+0x212>
 801271a:	2500      	movs	r5, #0
 801271c:	f104 0619 	add.w	r6, r4, #25
 8012720:	e7f5      	b.n	801270e <_printf_i+0x22e>
 8012722:	bf00      	nop
 8012724:	080183f2 	.word	0x080183f2
 8012728:	08018403 	.word	0x08018403

0801272c <_scanf_float>:
 801272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012730:	b087      	sub	sp, #28
 8012732:	4617      	mov	r7, r2
 8012734:	9303      	str	r3, [sp, #12]
 8012736:	688b      	ldr	r3, [r1, #8]
 8012738:	1e5a      	subs	r2, r3, #1
 801273a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801273e:	bf83      	ittte	hi
 8012740:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012744:	195b      	addhi	r3, r3, r5
 8012746:	9302      	strhi	r3, [sp, #8]
 8012748:	2300      	movls	r3, #0
 801274a:	bf86      	itte	hi
 801274c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012750:	608b      	strhi	r3, [r1, #8]
 8012752:	9302      	strls	r3, [sp, #8]
 8012754:	680b      	ldr	r3, [r1, #0]
 8012756:	468b      	mov	fp, r1
 8012758:	2500      	movs	r5, #0
 801275a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801275e:	f84b 3b1c 	str.w	r3, [fp], #28
 8012762:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012766:	4680      	mov	r8, r0
 8012768:	460c      	mov	r4, r1
 801276a:	465e      	mov	r6, fp
 801276c:	46aa      	mov	sl, r5
 801276e:	46a9      	mov	r9, r5
 8012770:	9501      	str	r5, [sp, #4]
 8012772:	68a2      	ldr	r2, [r4, #8]
 8012774:	b152      	cbz	r2, 801278c <_scanf_float+0x60>
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	2b4e      	cmp	r3, #78	; 0x4e
 801277c:	d864      	bhi.n	8012848 <_scanf_float+0x11c>
 801277e:	2b40      	cmp	r3, #64	; 0x40
 8012780:	d83c      	bhi.n	80127fc <_scanf_float+0xd0>
 8012782:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012786:	b2c8      	uxtb	r0, r1
 8012788:	280e      	cmp	r0, #14
 801278a:	d93a      	bls.n	8012802 <_scanf_float+0xd6>
 801278c:	f1b9 0f00 	cmp.w	r9, #0
 8012790:	d003      	beq.n	801279a <_scanf_float+0x6e>
 8012792:	6823      	ldr	r3, [r4, #0]
 8012794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012798:	6023      	str	r3, [r4, #0]
 801279a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801279e:	f1ba 0f01 	cmp.w	sl, #1
 80127a2:	f200 8113 	bhi.w	80129cc <_scanf_float+0x2a0>
 80127a6:	455e      	cmp	r6, fp
 80127a8:	f200 8105 	bhi.w	80129b6 <_scanf_float+0x28a>
 80127ac:	2501      	movs	r5, #1
 80127ae:	4628      	mov	r0, r5
 80127b0:	b007      	add	sp, #28
 80127b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80127ba:	2a0d      	cmp	r2, #13
 80127bc:	d8e6      	bhi.n	801278c <_scanf_float+0x60>
 80127be:	a101      	add	r1, pc, #4	; (adr r1, 80127c4 <_scanf_float+0x98>)
 80127c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80127c4:	08012903 	.word	0x08012903
 80127c8:	0801278d 	.word	0x0801278d
 80127cc:	0801278d 	.word	0x0801278d
 80127d0:	0801278d 	.word	0x0801278d
 80127d4:	08012963 	.word	0x08012963
 80127d8:	0801293b 	.word	0x0801293b
 80127dc:	0801278d 	.word	0x0801278d
 80127e0:	0801278d 	.word	0x0801278d
 80127e4:	08012911 	.word	0x08012911
 80127e8:	0801278d 	.word	0x0801278d
 80127ec:	0801278d 	.word	0x0801278d
 80127f0:	0801278d 	.word	0x0801278d
 80127f4:	0801278d 	.word	0x0801278d
 80127f8:	080128c9 	.word	0x080128c9
 80127fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012800:	e7db      	b.n	80127ba <_scanf_float+0x8e>
 8012802:	290e      	cmp	r1, #14
 8012804:	d8c2      	bhi.n	801278c <_scanf_float+0x60>
 8012806:	a001      	add	r0, pc, #4	; (adr r0, 801280c <_scanf_float+0xe0>)
 8012808:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801280c:	080128bb 	.word	0x080128bb
 8012810:	0801278d 	.word	0x0801278d
 8012814:	080128bb 	.word	0x080128bb
 8012818:	0801294f 	.word	0x0801294f
 801281c:	0801278d 	.word	0x0801278d
 8012820:	08012869 	.word	0x08012869
 8012824:	080128a5 	.word	0x080128a5
 8012828:	080128a5 	.word	0x080128a5
 801282c:	080128a5 	.word	0x080128a5
 8012830:	080128a5 	.word	0x080128a5
 8012834:	080128a5 	.word	0x080128a5
 8012838:	080128a5 	.word	0x080128a5
 801283c:	080128a5 	.word	0x080128a5
 8012840:	080128a5 	.word	0x080128a5
 8012844:	080128a5 	.word	0x080128a5
 8012848:	2b6e      	cmp	r3, #110	; 0x6e
 801284a:	d809      	bhi.n	8012860 <_scanf_float+0x134>
 801284c:	2b60      	cmp	r3, #96	; 0x60
 801284e:	d8b2      	bhi.n	80127b6 <_scanf_float+0x8a>
 8012850:	2b54      	cmp	r3, #84	; 0x54
 8012852:	d077      	beq.n	8012944 <_scanf_float+0x218>
 8012854:	2b59      	cmp	r3, #89	; 0x59
 8012856:	d199      	bne.n	801278c <_scanf_float+0x60>
 8012858:	2d07      	cmp	r5, #7
 801285a:	d197      	bne.n	801278c <_scanf_float+0x60>
 801285c:	2508      	movs	r5, #8
 801285e:	e029      	b.n	80128b4 <_scanf_float+0x188>
 8012860:	2b74      	cmp	r3, #116	; 0x74
 8012862:	d06f      	beq.n	8012944 <_scanf_float+0x218>
 8012864:	2b79      	cmp	r3, #121	; 0x79
 8012866:	e7f6      	b.n	8012856 <_scanf_float+0x12a>
 8012868:	6821      	ldr	r1, [r4, #0]
 801286a:	05c8      	lsls	r0, r1, #23
 801286c:	d51a      	bpl.n	80128a4 <_scanf_float+0x178>
 801286e:	9b02      	ldr	r3, [sp, #8]
 8012870:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012874:	6021      	str	r1, [r4, #0]
 8012876:	f109 0901 	add.w	r9, r9, #1
 801287a:	b11b      	cbz	r3, 8012884 <_scanf_float+0x158>
 801287c:	3b01      	subs	r3, #1
 801287e:	3201      	adds	r2, #1
 8012880:	9302      	str	r3, [sp, #8]
 8012882:	60a2      	str	r2, [r4, #8]
 8012884:	68a3      	ldr	r3, [r4, #8]
 8012886:	3b01      	subs	r3, #1
 8012888:	60a3      	str	r3, [r4, #8]
 801288a:	6923      	ldr	r3, [r4, #16]
 801288c:	3301      	adds	r3, #1
 801288e:	6123      	str	r3, [r4, #16]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	3b01      	subs	r3, #1
 8012894:	2b00      	cmp	r3, #0
 8012896:	607b      	str	r3, [r7, #4]
 8012898:	f340 8084 	ble.w	80129a4 <_scanf_float+0x278>
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	3301      	adds	r3, #1
 80128a0:	603b      	str	r3, [r7, #0]
 80128a2:	e766      	b.n	8012772 <_scanf_float+0x46>
 80128a4:	eb1a 0f05 	cmn.w	sl, r5
 80128a8:	f47f af70 	bne.w	801278c <_scanf_float+0x60>
 80128ac:	6822      	ldr	r2, [r4, #0]
 80128ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80128b2:	6022      	str	r2, [r4, #0]
 80128b4:	f806 3b01 	strb.w	r3, [r6], #1
 80128b8:	e7e4      	b.n	8012884 <_scanf_float+0x158>
 80128ba:	6822      	ldr	r2, [r4, #0]
 80128bc:	0610      	lsls	r0, r2, #24
 80128be:	f57f af65 	bpl.w	801278c <_scanf_float+0x60>
 80128c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80128c6:	e7f4      	b.n	80128b2 <_scanf_float+0x186>
 80128c8:	f1ba 0f00 	cmp.w	sl, #0
 80128cc:	d10e      	bne.n	80128ec <_scanf_float+0x1c0>
 80128ce:	f1b9 0f00 	cmp.w	r9, #0
 80128d2:	d10e      	bne.n	80128f2 <_scanf_float+0x1c6>
 80128d4:	6822      	ldr	r2, [r4, #0]
 80128d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80128da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80128de:	d108      	bne.n	80128f2 <_scanf_float+0x1c6>
 80128e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80128e4:	6022      	str	r2, [r4, #0]
 80128e6:	f04f 0a01 	mov.w	sl, #1
 80128ea:	e7e3      	b.n	80128b4 <_scanf_float+0x188>
 80128ec:	f1ba 0f02 	cmp.w	sl, #2
 80128f0:	d055      	beq.n	801299e <_scanf_float+0x272>
 80128f2:	2d01      	cmp	r5, #1
 80128f4:	d002      	beq.n	80128fc <_scanf_float+0x1d0>
 80128f6:	2d04      	cmp	r5, #4
 80128f8:	f47f af48 	bne.w	801278c <_scanf_float+0x60>
 80128fc:	3501      	adds	r5, #1
 80128fe:	b2ed      	uxtb	r5, r5
 8012900:	e7d8      	b.n	80128b4 <_scanf_float+0x188>
 8012902:	f1ba 0f01 	cmp.w	sl, #1
 8012906:	f47f af41 	bne.w	801278c <_scanf_float+0x60>
 801290a:	f04f 0a02 	mov.w	sl, #2
 801290e:	e7d1      	b.n	80128b4 <_scanf_float+0x188>
 8012910:	b97d      	cbnz	r5, 8012932 <_scanf_float+0x206>
 8012912:	f1b9 0f00 	cmp.w	r9, #0
 8012916:	f47f af3c 	bne.w	8012792 <_scanf_float+0x66>
 801291a:	6822      	ldr	r2, [r4, #0]
 801291c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012920:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012924:	f47f af39 	bne.w	801279a <_scanf_float+0x6e>
 8012928:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801292c:	6022      	str	r2, [r4, #0]
 801292e:	2501      	movs	r5, #1
 8012930:	e7c0      	b.n	80128b4 <_scanf_float+0x188>
 8012932:	2d03      	cmp	r5, #3
 8012934:	d0e2      	beq.n	80128fc <_scanf_float+0x1d0>
 8012936:	2d05      	cmp	r5, #5
 8012938:	e7de      	b.n	80128f8 <_scanf_float+0x1cc>
 801293a:	2d02      	cmp	r5, #2
 801293c:	f47f af26 	bne.w	801278c <_scanf_float+0x60>
 8012940:	2503      	movs	r5, #3
 8012942:	e7b7      	b.n	80128b4 <_scanf_float+0x188>
 8012944:	2d06      	cmp	r5, #6
 8012946:	f47f af21 	bne.w	801278c <_scanf_float+0x60>
 801294a:	2507      	movs	r5, #7
 801294c:	e7b2      	b.n	80128b4 <_scanf_float+0x188>
 801294e:	6822      	ldr	r2, [r4, #0]
 8012950:	0591      	lsls	r1, r2, #22
 8012952:	f57f af1b 	bpl.w	801278c <_scanf_float+0x60>
 8012956:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801295a:	6022      	str	r2, [r4, #0]
 801295c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012960:	e7a8      	b.n	80128b4 <_scanf_float+0x188>
 8012962:	6822      	ldr	r2, [r4, #0]
 8012964:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012968:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801296c:	d006      	beq.n	801297c <_scanf_float+0x250>
 801296e:	0550      	lsls	r0, r2, #21
 8012970:	f57f af0c 	bpl.w	801278c <_scanf_float+0x60>
 8012974:	f1b9 0f00 	cmp.w	r9, #0
 8012978:	f43f af0f 	beq.w	801279a <_scanf_float+0x6e>
 801297c:	0591      	lsls	r1, r2, #22
 801297e:	bf58      	it	pl
 8012980:	9901      	ldrpl	r1, [sp, #4]
 8012982:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012986:	bf58      	it	pl
 8012988:	eba9 0101 	subpl.w	r1, r9, r1
 801298c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012990:	bf58      	it	pl
 8012992:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012996:	6022      	str	r2, [r4, #0]
 8012998:	f04f 0900 	mov.w	r9, #0
 801299c:	e78a      	b.n	80128b4 <_scanf_float+0x188>
 801299e:	f04f 0a03 	mov.w	sl, #3
 80129a2:	e787      	b.n	80128b4 <_scanf_float+0x188>
 80129a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80129a8:	4639      	mov	r1, r7
 80129aa:	4640      	mov	r0, r8
 80129ac:	4798      	blx	r3
 80129ae:	2800      	cmp	r0, #0
 80129b0:	f43f aedf 	beq.w	8012772 <_scanf_float+0x46>
 80129b4:	e6ea      	b.n	801278c <_scanf_float+0x60>
 80129b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80129be:	463a      	mov	r2, r7
 80129c0:	4640      	mov	r0, r8
 80129c2:	4798      	blx	r3
 80129c4:	6923      	ldr	r3, [r4, #16]
 80129c6:	3b01      	subs	r3, #1
 80129c8:	6123      	str	r3, [r4, #16]
 80129ca:	e6ec      	b.n	80127a6 <_scanf_float+0x7a>
 80129cc:	1e6b      	subs	r3, r5, #1
 80129ce:	2b06      	cmp	r3, #6
 80129d0:	d825      	bhi.n	8012a1e <_scanf_float+0x2f2>
 80129d2:	2d02      	cmp	r5, #2
 80129d4:	d836      	bhi.n	8012a44 <_scanf_float+0x318>
 80129d6:	455e      	cmp	r6, fp
 80129d8:	f67f aee8 	bls.w	80127ac <_scanf_float+0x80>
 80129dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80129e4:	463a      	mov	r2, r7
 80129e6:	4640      	mov	r0, r8
 80129e8:	4798      	blx	r3
 80129ea:	6923      	ldr	r3, [r4, #16]
 80129ec:	3b01      	subs	r3, #1
 80129ee:	6123      	str	r3, [r4, #16]
 80129f0:	e7f1      	b.n	80129d6 <_scanf_float+0x2aa>
 80129f2:	9802      	ldr	r0, [sp, #8]
 80129f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80129fc:	9002      	str	r0, [sp, #8]
 80129fe:	463a      	mov	r2, r7
 8012a00:	4640      	mov	r0, r8
 8012a02:	4798      	blx	r3
 8012a04:	6923      	ldr	r3, [r4, #16]
 8012a06:	3b01      	subs	r3, #1
 8012a08:	6123      	str	r3, [r4, #16]
 8012a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a0e:	fa5f fa8a 	uxtb.w	sl, sl
 8012a12:	f1ba 0f02 	cmp.w	sl, #2
 8012a16:	d1ec      	bne.n	80129f2 <_scanf_float+0x2c6>
 8012a18:	3d03      	subs	r5, #3
 8012a1a:	b2ed      	uxtb	r5, r5
 8012a1c:	1b76      	subs	r6, r6, r5
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	05da      	lsls	r2, r3, #23
 8012a22:	d52f      	bpl.n	8012a84 <_scanf_float+0x358>
 8012a24:	055b      	lsls	r3, r3, #21
 8012a26:	d510      	bpl.n	8012a4a <_scanf_float+0x31e>
 8012a28:	455e      	cmp	r6, fp
 8012a2a:	f67f aebf 	bls.w	80127ac <_scanf_float+0x80>
 8012a2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a36:	463a      	mov	r2, r7
 8012a38:	4640      	mov	r0, r8
 8012a3a:	4798      	blx	r3
 8012a3c:	6923      	ldr	r3, [r4, #16]
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	6123      	str	r3, [r4, #16]
 8012a42:	e7f1      	b.n	8012a28 <_scanf_float+0x2fc>
 8012a44:	46aa      	mov	sl, r5
 8012a46:	9602      	str	r6, [sp, #8]
 8012a48:	e7df      	b.n	8012a0a <_scanf_float+0x2de>
 8012a4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012a4e:	6923      	ldr	r3, [r4, #16]
 8012a50:	2965      	cmp	r1, #101	; 0x65
 8012a52:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a56:	f106 35ff 	add.w	r5, r6, #4294967295
 8012a5a:	6123      	str	r3, [r4, #16]
 8012a5c:	d00c      	beq.n	8012a78 <_scanf_float+0x34c>
 8012a5e:	2945      	cmp	r1, #69	; 0x45
 8012a60:	d00a      	beq.n	8012a78 <_scanf_float+0x34c>
 8012a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a66:	463a      	mov	r2, r7
 8012a68:	4640      	mov	r0, r8
 8012a6a:	4798      	blx	r3
 8012a6c:	6923      	ldr	r3, [r4, #16]
 8012a6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012a72:	3b01      	subs	r3, #1
 8012a74:	1eb5      	subs	r5, r6, #2
 8012a76:	6123      	str	r3, [r4, #16]
 8012a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a7c:	463a      	mov	r2, r7
 8012a7e:	4640      	mov	r0, r8
 8012a80:	4798      	blx	r3
 8012a82:	462e      	mov	r6, r5
 8012a84:	6825      	ldr	r5, [r4, #0]
 8012a86:	f015 0510 	ands.w	r5, r5, #16
 8012a8a:	d14e      	bne.n	8012b2a <_scanf_float+0x3fe>
 8012a8c:	7035      	strb	r5, [r6, #0]
 8012a8e:	6823      	ldr	r3, [r4, #0]
 8012a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012a98:	d119      	bne.n	8012ace <_scanf_float+0x3a2>
 8012a9a:	9b01      	ldr	r3, [sp, #4]
 8012a9c:	454b      	cmp	r3, r9
 8012a9e:	eba3 0209 	sub.w	r2, r3, r9
 8012aa2:	d121      	bne.n	8012ae8 <_scanf_float+0x3bc>
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	4659      	mov	r1, fp
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	f000 ff07 	bl	80138bc <_strtod_r>
 8012aae:	6822      	ldr	r2, [r4, #0]
 8012ab0:	9b03      	ldr	r3, [sp, #12]
 8012ab2:	f012 0f02 	tst.w	r2, #2
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	d021      	beq.n	8012afe <_scanf_float+0x3d2>
 8012aba:	9903      	ldr	r1, [sp, #12]
 8012abc:	1d1a      	adds	r2, r3, #4
 8012abe:	600a      	str	r2, [r1, #0]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	ed83 0b00 	vstr	d0, [r3]
 8012ac6:	68e3      	ldr	r3, [r4, #12]
 8012ac8:	3301      	adds	r3, #1
 8012aca:	60e3      	str	r3, [r4, #12]
 8012acc:	e66f      	b.n	80127ae <_scanf_float+0x82>
 8012ace:	9b04      	ldr	r3, [sp, #16]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d0e7      	beq.n	8012aa4 <_scanf_float+0x378>
 8012ad4:	9905      	ldr	r1, [sp, #20]
 8012ad6:	230a      	movs	r3, #10
 8012ad8:	462a      	mov	r2, r5
 8012ada:	3101      	adds	r1, #1
 8012adc:	4640      	mov	r0, r8
 8012ade:	f000 ff75 	bl	80139cc <_strtol_r>
 8012ae2:	9b04      	ldr	r3, [sp, #16]
 8012ae4:	9e05      	ldr	r6, [sp, #20]
 8012ae6:	1ac2      	subs	r2, r0, r3
 8012ae8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012aec:	429e      	cmp	r6, r3
 8012aee:	bf28      	it	cs
 8012af0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012af4:	490e      	ldr	r1, [pc, #56]	; (8012b30 <_scanf_float+0x404>)
 8012af6:	4630      	mov	r0, r6
 8012af8:	f000 f8f0 	bl	8012cdc <siprintf>
 8012afc:	e7d2      	b.n	8012aa4 <_scanf_float+0x378>
 8012afe:	9903      	ldr	r1, [sp, #12]
 8012b00:	f012 0f04 	tst.w	r2, #4
 8012b04:	f103 0204 	add.w	r2, r3, #4
 8012b08:	600a      	str	r2, [r1, #0]
 8012b0a:	d1d9      	bne.n	8012ac0 <_scanf_float+0x394>
 8012b0c:	eeb4 0b40 	vcmp.f64	d0, d0
 8012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b14:	681e      	ldr	r6, [r3, #0]
 8012b16:	d705      	bvc.n	8012b24 <_scanf_float+0x3f8>
 8012b18:	4806      	ldr	r0, [pc, #24]	; (8012b34 <_scanf_float+0x408>)
 8012b1a:	f000 f8d9 	bl	8012cd0 <nanf>
 8012b1e:	ed86 0a00 	vstr	s0, [r6]
 8012b22:	e7d0      	b.n	8012ac6 <_scanf_float+0x39a>
 8012b24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012b28:	e7f9      	b.n	8012b1e <_scanf_float+0x3f2>
 8012b2a:	2500      	movs	r5, #0
 8012b2c:	e63f      	b.n	80127ae <_scanf_float+0x82>
 8012b2e:	bf00      	nop
 8012b30:	08018414 	.word	0x08018414
 8012b34:	0801851b 	.word	0x0801851b

08012b38 <iprintf>:
 8012b38:	b40f      	push	{r0, r1, r2, r3}
 8012b3a:	4b0a      	ldr	r3, [pc, #40]	; (8012b64 <iprintf+0x2c>)
 8012b3c:	b513      	push	{r0, r1, r4, lr}
 8012b3e:	681c      	ldr	r4, [r3, #0]
 8012b40:	b124      	cbz	r4, 8012b4c <iprintf+0x14>
 8012b42:	69a3      	ldr	r3, [r4, #24]
 8012b44:	b913      	cbnz	r3, 8012b4c <iprintf+0x14>
 8012b46:	4620      	mov	r0, r4
 8012b48:	f001 ff4e 	bl	80149e8 <__sinit>
 8012b4c:	ab05      	add	r3, sp, #20
 8012b4e:	9a04      	ldr	r2, [sp, #16]
 8012b50:	68a1      	ldr	r1, [r4, #8]
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	4620      	mov	r0, r4
 8012b56:	f003 fa89 	bl	801606c <_vfiprintf_r>
 8012b5a:	b002      	add	sp, #8
 8012b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b60:	b004      	add	sp, #16
 8012b62:	4770      	bx	lr
 8012b64:	24000bac 	.word	0x24000bac

08012b68 <_puts_r>:
 8012b68:	b570      	push	{r4, r5, r6, lr}
 8012b6a:	460e      	mov	r6, r1
 8012b6c:	4605      	mov	r5, r0
 8012b6e:	b118      	cbz	r0, 8012b78 <_puts_r+0x10>
 8012b70:	6983      	ldr	r3, [r0, #24]
 8012b72:	b90b      	cbnz	r3, 8012b78 <_puts_r+0x10>
 8012b74:	f001 ff38 	bl	80149e8 <__sinit>
 8012b78:	69ab      	ldr	r3, [r5, #24]
 8012b7a:	68ac      	ldr	r4, [r5, #8]
 8012b7c:	b913      	cbnz	r3, 8012b84 <_puts_r+0x1c>
 8012b7e:	4628      	mov	r0, r5
 8012b80:	f001 ff32 	bl	80149e8 <__sinit>
 8012b84:	4b2c      	ldr	r3, [pc, #176]	; (8012c38 <_puts_r+0xd0>)
 8012b86:	429c      	cmp	r4, r3
 8012b88:	d120      	bne.n	8012bcc <_puts_r+0x64>
 8012b8a:	686c      	ldr	r4, [r5, #4]
 8012b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b8e:	07db      	lsls	r3, r3, #31
 8012b90:	d405      	bmi.n	8012b9e <_puts_r+0x36>
 8012b92:	89a3      	ldrh	r3, [r4, #12]
 8012b94:	0598      	lsls	r0, r3, #22
 8012b96:	d402      	bmi.n	8012b9e <_puts_r+0x36>
 8012b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b9a:	f002 fb5a 	bl	8015252 <__retarget_lock_acquire_recursive>
 8012b9e:	89a3      	ldrh	r3, [r4, #12]
 8012ba0:	0719      	lsls	r1, r3, #28
 8012ba2:	d51d      	bpl.n	8012be0 <_puts_r+0x78>
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	b1db      	cbz	r3, 8012be0 <_puts_r+0x78>
 8012ba8:	3e01      	subs	r6, #1
 8012baa:	68a3      	ldr	r3, [r4, #8]
 8012bac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	60a3      	str	r3, [r4, #8]
 8012bb4:	bb39      	cbnz	r1, 8012c06 <_puts_r+0x9e>
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	da38      	bge.n	8012c2c <_puts_r+0xc4>
 8012bba:	4622      	mov	r2, r4
 8012bbc:	210a      	movs	r1, #10
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	f000 ff20 	bl	8013a04 <__swbuf_r>
 8012bc4:	3001      	adds	r0, #1
 8012bc6:	d011      	beq.n	8012bec <_puts_r+0x84>
 8012bc8:	250a      	movs	r5, #10
 8012bca:	e011      	b.n	8012bf0 <_puts_r+0x88>
 8012bcc:	4b1b      	ldr	r3, [pc, #108]	; (8012c3c <_puts_r+0xd4>)
 8012bce:	429c      	cmp	r4, r3
 8012bd0:	d101      	bne.n	8012bd6 <_puts_r+0x6e>
 8012bd2:	68ac      	ldr	r4, [r5, #8]
 8012bd4:	e7da      	b.n	8012b8c <_puts_r+0x24>
 8012bd6:	4b1a      	ldr	r3, [pc, #104]	; (8012c40 <_puts_r+0xd8>)
 8012bd8:	429c      	cmp	r4, r3
 8012bda:	bf08      	it	eq
 8012bdc:	68ec      	ldreq	r4, [r5, #12]
 8012bde:	e7d5      	b.n	8012b8c <_puts_r+0x24>
 8012be0:	4621      	mov	r1, r4
 8012be2:	4628      	mov	r0, r5
 8012be4:	f000 ff60 	bl	8013aa8 <__swsetup_r>
 8012be8:	2800      	cmp	r0, #0
 8012bea:	d0dd      	beq.n	8012ba8 <_puts_r+0x40>
 8012bec:	f04f 35ff 	mov.w	r5, #4294967295
 8012bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bf2:	07da      	lsls	r2, r3, #31
 8012bf4:	d405      	bmi.n	8012c02 <_puts_r+0x9a>
 8012bf6:	89a3      	ldrh	r3, [r4, #12]
 8012bf8:	059b      	lsls	r3, r3, #22
 8012bfa:	d402      	bmi.n	8012c02 <_puts_r+0x9a>
 8012bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bfe:	f002 fb29 	bl	8015254 <__retarget_lock_release_recursive>
 8012c02:	4628      	mov	r0, r5
 8012c04:	bd70      	pop	{r4, r5, r6, pc}
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	da04      	bge.n	8012c14 <_puts_r+0xac>
 8012c0a:	69a2      	ldr	r2, [r4, #24]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	dc06      	bgt.n	8012c1e <_puts_r+0xb6>
 8012c10:	290a      	cmp	r1, #10
 8012c12:	d004      	beq.n	8012c1e <_puts_r+0xb6>
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	1c5a      	adds	r2, r3, #1
 8012c18:	6022      	str	r2, [r4, #0]
 8012c1a:	7019      	strb	r1, [r3, #0]
 8012c1c:	e7c5      	b.n	8012baa <_puts_r+0x42>
 8012c1e:	4622      	mov	r2, r4
 8012c20:	4628      	mov	r0, r5
 8012c22:	f000 feef 	bl	8013a04 <__swbuf_r>
 8012c26:	3001      	adds	r0, #1
 8012c28:	d1bf      	bne.n	8012baa <_puts_r+0x42>
 8012c2a:	e7df      	b.n	8012bec <_puts_r+0x84>
 8012c2c:	6823      	ldr	r3, [r4, #0]
 8012c2e:	250a      	movs	r5, #10
 8012c30:	1c5a      	adds	r2, r3, #1
 8012c32:	6022      	str	r2, [r4, #0]
 8012c34:	701d      	strb	r5, [r3, #0]
 8012c36:	e7db      	b.n	8012bf0 <_puts_r+0x88>
 8012c38:	080186b8 	.word	0x080186b8
 8012c3c:	080186d8 	.word	0x080186d8
 8012c40:	08018698 	.word	0x08018698

08012c44 <puts>:
 8012c44:	4b02      	ldr	r3, [pc, #8]	; (8012c50 <puts+0xc>)
 8012c46:	4601      	mov	r1, r0
 8012c48:	6818      	ldr	r0, [r3, #0]
 8012c4a:	f7ff bf8d 	b.w	8012b68 <_puts_r>
 8012c4e:	bf00      	nop
 8012c50:	24000bac 	.word	0x24000bac

08012c54 <srand>:
 8012c54:	b538      	push	{r3, r4, r5, lr}
 8012c56:	4b10      	ldr	r3, [pc, #64]	; (8012c98 <srand+0x44>)
 8012c58:	681d      	ldr	r5, [r3, #0]
 8012c5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	b9b3      	cbnz	r3, 8012c8e <srand+0x3a>
 8012c60:	2018      	movs	r0, #24
 8012c62:	f7ff f823 	bl	8011cac <malloc>
 8012c66:	4602      	mov	r2, r0
 8012c68:	63a8      	str	r0, [r5, #56]	; 0x38
 8012c6a:	b920      	cbnz	r0, 8012c76 <srand+0x22>
 8012c6c:	4b0b      	ldr	r3, [pc, #44]	; (8012c9c <srand+0x48>)
 8012c6e:	480c      	ldr	r0, [pc, #48]	; (8012ca0 <srand+0x4c>)
 8012c70:	2142      	movs	r1, #66	; 0x42
 8012c72:	f000 ff87 	bl	8013b84 <__assert_func>
 8012c76:	490b      	ldr	r1, [pc, #44]	; (8012ca4 <srand+0x50>)
 8012c78:	4b0b      	ldr	r3, [pc, #44]	; (8012ca8 <srand+0x54>)
 8012c7a:	e9c0 1300 	strd	r1, r3, [r0]
 8012c7e:	4b0b      	ldr	r3, [pc, #44]	; (8012cac <srand+0x58>)
 8012c80:	6083      	str	r3, [r0, #8]
 8012c82:	230b      	movs	r3, #11
 8012c84:	8183      	strh	r3, [r0, #12]
 8012c86:	2100      	movs	r1, #0
 8012c88:	2001      	movs	r0, #1
 8012c8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012c8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012c90:	2200      	movs	r2, #0
 8012c92:	611c      	str	r4, [r3, #16]
 8012c94:	615a      	str	r2, [r3, #20]
 8012c96:	bd38      	pop	{r3, r4, r5, pc}
 8012c98:	24000bac 	.word	0x24000bac
 8012c9c:	08018419 	.word	0x08018419
 8012ca0:	08018430 	.word	0x08018430
 8012ca4:	abcd330e 	.word	0xabcd330e
 8012ca8:	e66d1234 	.word	0xe66d1234
 8012cac:	0005deec 	.word	0x0005deec

08012cb0 <_sbrk_r>:
 8012cb0:	b538      	push	{r3, r4, r5, lr}
 8012cb2:	4d06      	ldr	r5, [pc, #24]	; (8012ccc <_sbrk_r+0x1c>)
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	4608      	mov	r0, r1
 8012cba:	602b      	str	r3, [r5, #0]
 8012cbc:	f7ef fb8e 	bl	80023dc <_sbrk>
 8012cc0:	1c43      	adds	r3, r0, #1
 8012cc2:	d102      	bne.n	8012cca <_sbrk_r+0x1a>
 8012cc4:	682b      	ldr	r3, [r5, #0]
 8012cc6:	b103      	cbz	r3, 8012cca <_sbrk_r+0x1a>
 8012cc8:	6023      	str	r3, [r4, #0]
 8012cca:	bd38      	pop	{r3, r4, r5, pc}
 8012ccc:	24009e1c 	.word	0x24009e1c

08012cd0 <nanf>:
 8012cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012cd8 <nanf+0x8>
 8012cd4:	4770      	bx	lr
 8012cd6:	bf00      	nop
 8012cd8:	7fc00000 	.word	0x7fc00000

08012cdc <siprintf>:
 8012cdc:	b40e      	push	{r1, r2, r3}
 8012cde:	b500      	push	{lr}
 8012ce0:	b09c      	sub	sp, #112	; 0x70
 8012ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8012ce4:	9002      	str	r0, [sp, #8]
 8012ce6:	9006      	str	r0, [sp, #24]
 8012ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012cec:	4809      	ldr	r0, [pc, #36]	; (8012d14 <siprintf+0x38>)
 8012cee:	9107      	str	r1, [sp, #28]
 8012cf0:	9104      	str	r1, [sp, #16]
 8012cf2:	4909      	ldr	r1, [pc, #36]	; (8012d18 <siprintf+0x3c>)
 8012cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cf8:	9105      	str	r1, [sp, #20]
 8012cfa:	6800      	ldr	r0, [r0, #0]
 8012cfc:	9301      	str	r3, [sp, #4]
 8012cfe:	a902      	add	r1, sp, #8
 8012d00:	f003 f88a 	bl	8015e18 <_svfiprintf_r>
 8012d04:	9b02      	ldr	r3, [sp, #8]
 8012d06:	2200      	movs	r2, #0
 8012d08:	701a      	strb	r2, [r3, #0]
 8012d0a:	b01c      	add	sp, #112	; 0x70
 8012d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d10:	b003      	add	sp, #12
 8012d12:	4770      	bx	lr
 8012d14:	24000bac 	.word	0x24000bac
 8012d18:	ffff0208 	.word	0xffff0208

08012d1c <sulp>:
 8012d1c:	b570      	push	{r4, r5, r6, lr}
 8012d1e:	4604      	mov	r4, r0
 8012d20:	460d      	mov	r5, r1
 8012d22:	4616      	mov	r6, r2
 8012d24:	ec45 4b10 	vmov	d0, r4, r5
 8012d28:	f002 fe8a 	bl	8015a40 <__ulp>
 8012d2c:	b17e      	cbz	r6, 8012d4e <sulp+0x32>
 8012d2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012d32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	dd09      	ble.n	8012d4e <sulp+0x32>
 8012d3a:	051b      	lsls	r3, r3, #20
 8012d3c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012d40:	2000      	movs	r0, #0
 8012d42:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012d46:	ec41 0b17 	vmov	d7, r0, r1
 8012d4a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012d4e:	bd70      	pop	{r4, r5, r6, pc}

08012d50 <_strtod_l>:
 8012d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	ed2d 8b0e 	vpush	{d8-d14}
 8012d58:	b097      	sub	sp, #92	; 0x5c
 8012d5a:	461f      	mov	r7, r3
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	9312      	str	r3, [sp, #72]	; 0x48
 8012d60:	4ba1      	ldr	r3, [pc, #644]	; (8012fe8 <_strtod_l+0x298>)
 8012d62:	920d      	str	r2, [sp, #52]	; 0x34
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	9307      	str	r3, [sp, #28]
 8012d68:	4604      	mov	r4, r0
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	468b      	mov	fp, r1
 8012d6e:	f7ed fab7 	bl	80002e0 <strlen>
 8012d72:	f04f 0800 	mov.w	r8, #0
 8012d76:	4605      	mov	r5, r0
 8012d78:	f04f 0900 	mov.w	r9, #0
 8012d7c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012d82:	7813      	ldrb	r3, [r2, #0]
 8012d84:	2b2b      	cmp	r3, #43	; 0x2b
 8012d86:	d04d      	beq.n	8012e24 <_strtod_l+0xd4>
 8012d88:	d83a      	bhi.n	8012e00 <_strtod_l+0xb0>
 8012d8a:	2b0d      	cmp	r3, #13
 8012d8c:	d833      	bhi.n	8012df6 <_strtod_l+0xa6>
 8012d8e:	2b08      	cmp	r3, #8
 8012d90:	d833      	bhi.n	8012dfa <_strtod_l+0xaa>
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d03d      	beq.n	8012e12 <_strtod_l+0xc2>
 8012d96:	2300      	movs	r3, #0
 8012d98:	9308      	str	r3, [sp, #32]
 8012d9a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012d9c:	7833      	ldrb	r3, [r6, #0]
 8012d9e:	2b30      	cmp	r3, #48	; 0x30
 8012da0:	f040 80b0 	bne.w	8012f04 <_strtod_l+0x1b4>
 8012da4:	7873      	ldrb	r3, [r6, #1]
 8012da6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012daa:	2b58      	cmp	r3, #88	; 0x58
 8012dac:	d167      	bne.n	8012e7e <_strtod_l+0x12e>
 8012dae:	9b08      	ldr	r3, [sp, #32]
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	ab12      	add	r3, sp, #72	; 0x48
 8012db4:	9702      	str	r7, [sp, #8]
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	4a8c      	ldr	r2, [pc, #560]	; (8012fec <_strtod_l+0x29c>)
 8012dba:	ab13      	add	r3, sp, #76	; 0x4c
 8012dbc:	a911      	add	r1, sp, #68	; 0x44
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f001 ff28 	bl	8014c14 <__gethex>
 8012dc4:	f010 0507 	ands.w	r5, r0, #7
 8012dc8:	4607      	mov	r7, r0
 8012dca:	d005      	beq.n	8012dd8 <_strtod_l+0x88>
 8012dcc:	2d06      	cmp	r5, #6
 8012dce:	d12b      	bne.n	8012e28 <_strtod_l+0xd8>
 8012dd0:	3601      	adds	r6, #1
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	9611      	str	r6, [sp, #68]	; 0x44
 8012dd6:	9308      	str	r3, [sp, #32]
 8012dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f040 854e 	bne.w	801387c <_strtod_l+0xb2c>
 8012de0:	9b08      	ldr	r3, [sp, #32]
 8012de2:	b1e3      	cbz	r3, 8012e1e <_strtod_l+0xce>
 8012de4:	ec49 8b17 	vmov	d7, r8, r9
 8012de8:	eeb1 0b47 	vneg.f64	d0, d7
 8012dec:	b017      	add	sp, #92	; 0x5c
 8012dee:	ecbd 8b0e 	vpop	{d8-d14}
 8012df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df6:	2b20      	cmp	r3, #32
 8012df8:	d1cd      	bne.n	8012d96 <_strtod_l+0x46>
 8012dfa:	3201      	adds	r2, #1
 8012dfc:	9211      	str	r2, [sp, #68]	; 0x44
 8012dfe:	e7bf      	b.n	8012d80 <_strtod_l+0x30>
 8012e00:	2b2d      	cmp	r3, #45	; 0x2d
 8012e02:	d1c8      	bne.n	8012d96 <_strtod_l+0x46>
 8012e04:	2301      	movs	r3, #1
 8012e06:	9308      	str	r3, [sp, #32]
 8012e08:	1c53      	adds	r3, r2, #1
 8012e0a:	9311      	str	r3, [sp, #68]	; 0x44
 8012e0c:	7853      	ldrb	r3, [r2, #1]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1c3      	bne.n	8012d9a <_strtod_l+0x4a>
 8012e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f040 852d 	bne.w	8013878 <_strtod_l+0xb28>
 8012e1e:	ec49 8b10 	vmov	d0, r8, r9
 8012e22:	e7e3      	b.n	8012dec <_strtod_l+0x9c>
 8012e24:	2300      	movs	r3, #0
 8012e26:	e7ee      	b.n	8012e06 <_strtod_l+0xb6>
 8012e28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012e2a:	b13a      	cbz	r2, 8012e3c <_strtod_l+0xec>
 8012e2c:	2135      	movs	r1, #53	; 0x35
 8012e2e:	a814      	add	r0, sp, #80	; 0x50
 8012e30:	f002 ff0e 	bl	8015c50 <__copybits>
 8012e34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e36:	4620      	mov	r0, r4
 8012e38:	f002 fad0 	bl	80153dc <_Bfree>
 8012e3c:	3d01      	subs	r5, #1
 8012e3e:	2d04      	cmp	r5, #4
 8012e40:	d806      	bhi.n	8012e50 <_strtod_l+0x100>
 8012e42:	e8df f005 	tbb	[pc, r5]
 8012e46:	030a      	.short	0x030a
 8012e48:	1714      	.short	0x1714
 8012e4a:	0a          	.byte	0x0a
 8012e4b:	00          	.byte	0x00
 8012e4c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8012e50:	073f      	lsls	r7, r7, #28
 8012e52:	d5c1      	bpl.n	8012dd8 <_strtod_l+0x88>
 8012e54:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8012e58:	e7be      	b.n	8012dd8 <_strtod_l+0x88>
 8012e5a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8012e5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012e64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012e68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012e6c:	e7f0      	b.n	8012e50 <_strtod_l+0x100>
 8012e6e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8012ff0 <_strtod_l+0x2a0>
 8012e72:	e7ed      	b.n	8012e50 <_strtod_l+0x100>
 8012e74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012e78:	f04f 38ff 	mov.w	r8, #4294967295
 8012e7c:	e7e8      	b.n	8012e50 <_strtod_l+0x100>
 8012e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e80:	1c5a      	adds	r2, r3, #1
 8012e82:	9211      	str	r2, [sp, #68]	; 0x44
 8012e84:	785b      	ldrb	r3, [r3, #1]
 8012e86:	2b30      	cmp	r3, #48	; 0x30
 8012e88:	d0f9      	beq.n	8012e7e <_strtod_l+0x12e>
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d0a4      	beq.n	8012dd8 <_strtod_l+0x88>
 8012e8e:	2301      	movs	r3, #1
 8012e90:	f04f 0a00 	mov.w	sl, #0
 8012e94:	9304      	str	r3, [sp, #16]
 8012e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e98:	930a      	str	r3, [sp, #40]	; 0x28
 8012e9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012e9e:	f8cd a018 	str.w	sl, [sp, #24]
 8012ea2:	220a      	movs	r2, #10
 8012ea4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012ea6:	7807      	ldrb	r7, [r0, #0]
 8012ea8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012eac:	b2d9      	uxtb	r1, r3
 8012eae:	2909      	cmp	r1, #9
 8012eb0:	d92a      	bls.n	8012f08 <_strtod_l+0x1b8>
 8012eb2:	9907      	ldr	r1, [sp, #28]
 8012eb4:	462a      	mov	r2, r5
 8012eb6:	f003 fa56 	bl	8016366 <strncmp>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d033      	beq.n	8012f26 <_strtod_l+0x1d6>
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	9b06      	ldr	r3, [sp, #24]
 8012ec2:	463a      	mov	r2, r7
 8012ec4:	4601      	mov	r1, r0
 8012ec6:	4607      	mov	r7, r0
 8012ec8:	2a65      	cmp	r2, #101	; 0x65
 8012eca:	d001      	beq.n	8012ed0 <_strtod_l+0x180>
 8012ecc:	2a45      	cmp	r2, #69	; 0x45
 8012ece:	d117      	bne.n	8012f00 <_strtod_l+0x1b0>
 8012ed0:	b91b      	cbnz	r3, 8012eda <_strtod_l+0x18a>
 8012ed2:	9b04      	ldr	r3, [sp, #16]
 8012ed4:	4303      	orrs	r3, r0
 8012ed6:	d09c      	beq.n	8012e12 <_strtod_l+0xc2>
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8012ede:	f10b 0201 	add.w	r2, fp, #1
 8012ee2:	9211      	str	r2, [sp, #68]	; 0x44
 8012ee4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8012ee8:	2a2b      	cmp	r2, #43	; 0x2b
 8012eea:	d071      	beq.n	8012fd0 <_strtod_l+0x280>
 8012eec:	2a2d      	cmp	r2, #45	; 0x2d
 8012eee:	d077      	beq.n	8012fe0 <_strtod_l+0x290>
 8012ef0:	f04f 0e00 	mov.w	lr, #0
 8012ef4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8012ef8:	2d09      	cmp	r5, #9
 8012efa:	d97f      	bls.n	8012ffc <_strtod_l+0x2ac>
 8012efc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8012f00:	2500      	movs	r5, #0
 8012f02:	e09b      	b.n	801303c <_strtod_l+0x2ec>
 8012f04:	2300      	movs	r3, #0
 8012f06:	e7c3      	b.n	8012e90 <_strtod_l+0x140>
 8012f08:	9906      	ldr	r1, [sp, #24]
 8012f0a:	2908      	cmp	r1, #8
 8012f0c:	bfdd      	ittte	le
 8012f0e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012f10:	fb02 3301 	mlale	r3, r2, r1, r3
 8012f14:	9309      	strle	r3, [sp, #36]	; 0x24
 8012f16:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012f1a:	9b06      	ldr	r3, [sp, #24]
 8012f1c:	3001      	adds	r0, #1
 8012f1e:	3301      	adds	r3, #1
 8012f20:	9306      	str	r3, [sp, #24]
 8012f22:	9011      	str	r0, [sp, #68]	; 0x44
 8012f24:	e7be      	b.n	8012ea4 <_strtod_l+0x154>
 8012f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f28:	195a      	adds	r2, r3, r5
 8012f2a:	9211      	str	r2, [sp, #68]	; 0x44
 8012f2c:	5d5a      	ldrb	r2, [r3, r5]
 8012f2e:	9b06      	ldr	r3, [sp, #24]
 8012f30:	b3a3      	cbz	r3, 8012f9c <_strtod_l+0x24c>
 8012f32:	4607      	mov	r7, r0
 8012f34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012f38:	2909      	cmp	r1, #9
 8012f3a:	d912      	bls.n	8012f62 <_strtod_l+0x212>
 8012f3c:	2101      	movs	r1, #1
 8012f3e:	e7c3      	b.n	8012ec8 <_strtod_l+0x178>
 8012f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	9211      	str	r2, [sp, #68]	; 0x44
 8012f46:	785a      	ldrb	r2, [r3, #1]
 8012f48:	3001      	adds	r0, #1
 8012f4a:	2a30      	cmp	r2, #48	; 0x30
 8012f4c:	d0f8      	beq.n	8012f40 <_strtod_l+0x1f0>
 8012f4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012f52:	2b08      	cmp	r3, #8
 8012f54:	f200 8497 	bhi.w	8013886 <_strtod_l+0xb36>
 8012f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f5c:	4607      	mov	r7, r0
 8012f5e:	2000      	movs	r0, #0
 8012f60:	4603      	mov	r3, r0
 8012f62:	3a30      	subs	r2, #48	; 0x30
 8012f64:	f100 0101 	add.w	r1, r0, #1
 8012f68:	d012      	beq.n	8012f90 <_strtod_l+0x240>
 8012f6a:	440f      	add	r7, r1
 8012f6c:	eb00 0c03 	add.w	ip, r0, r3
 8012f70:	4619      	mov	r1, r3
 8012f72:	250a      	movs	r5, #10
 8012f74:	4561      	cmp	r1, ip
 8012f76:	d113      	bne.n	8012fa0 <_strtod_l+0x250>
 8012f78:	1819      	adds	r1, r3, r0
 8012f7a:	2908      	cmp	r1, #8
 8012f7c:	f103 0301 	add.w	r3, r3, #1
 8012f80:	4403      	add	r3, r0
 8012f82:	dc1c      	bgt.n	8012fbe <_strtod_l+0x26e>
 8012f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f86:	210a      	movs	r1, #10
 8012f88:	fb01 2200 	mla	r2, r1, r0, r2
 8012f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8012f8e:	2100      	movs	r1, #0
 8012f90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012f92:	1c50      	adds	r0, r2, #1
 8012f94:	9011      	str	r0, [sp, #68]	; 0x44
 8012f96:	7852      	ldrb	r2, [r2, #1]
 8012f98:	4608      	mov	r0, r1
 8012f9a:	e7cb      	b.n	8012f34 <_strtod_l+0x1e4>
 8012f9c:	9806      	ldr	r0, [sp, #24]
 8012f9e:	e7d4      	b.n	8012f4a <_strtod_l+0x1fa>
 8012fa0:	2908      	cmp	r1, #8
 8012fa2:	dc04      	bgt.n	8012fae <_strtod_l+0x25e>
 8012fa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012fa6:	436e      	muls	r6, r5
 8012fa8:	9609      	str	r6, [sp, #36]	; 0x24
 8012faa:	3101      	adds	r1, #1
 8012fac:	e7e2      	b.n	8012f74 <_strtod_l+0x224>
 8012fae:	f101 0e01 	add.w	lr, r1, #1
 8012fb2:	f1be 0f10 	cmp.w	lr, #16
 8012fb6:	bfd8      	it	le
 8012fb8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8012fbc:	e7f5      	b.n	8012faa <_strtod_l+0x25a>
 8012fbe:	2b10      	cmp	r3, #16
 8012fc0:	bfdc      	itt	le
 8012fc2:	210a      	movle	r1, #10
 8012fc4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8012fc8:	e7e1      	b.n	8012f8e <_strtod_l+0x23e>
 8012fca:	2700      	movs	r7, #0
 8012fcc:	2101      	movs	r1, #1
 8012fce:	e780      	b.n	8012ed2 <_strtod_l+0x182>
 8012fd0:	f04f 0e00 	mov.w	lr, #0
 8012fd4:	f10b 0202 	add.w	r2, fp, #2
 8012fd8:	9211      	str	r2, [sp, #68]	; 0x44
 8012fda:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8012fde:	e789      	b.n	8012ef4 <_strtod_l+0x1a4>
 8012fe0:	f04f 0e01 	mov.w	lr, #1
 8012fe4:	e7f6      	b.n	8012fd4 <_strtod_l+0x284>
 8012fe6:	bf00      	nop
 8012fe8:	08018760 	.word	0x08018760
 8012fec:	0801848c 	.word	0x0801848c
 8012ff0:	7ff00000 	.word	0x7ff00000
 8012ff4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012ff6:	1c55      	adds	r5, r2, #1
 8012ff8:	9511      	str	r5, [sp, #68]	; 0x44
 8012ffa:	7852      	ldrb	r2, [r2, #1]
 8012ffc:	2a30      	cmp	r2, #48	; 0x30
 8012ffe:	d0f9      	beq.n	8012ff4 <_strtod_l+0x2a4>
 8013000:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8013004:	2d08      	cmp	r5, #8
 8013006:	f63f af7b 	bhi.w	8012f00 <_strtod_l+0x1b0>
 801300a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801300e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013010:	9207      	str	r2, [sp, #28]
 8013012:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013014:	1c55      	adds	r5, r2, #1
 8013016:	9511      	str	r5, [sp, #68]	; 0x44
 8013018:	7852      	ldrb	r2, [r2, #1]
 801301a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801301e:	2e09      	cmp	r6, #9
 8013020:	d937      	bls.n	8013092 <_strtod_l+0x342>
 8013022:	9e07      	ldr	r6, [sp, #28]
 8013024:	1bad      	subs	r5, r5, r6
 8013026:	2d08      	cmp	r5, #8
 8013028:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801302c:	dc02      	bgt.n	8013034 <_strtod_l+0x2e4>
 801302e:	4565      	cmp	r5, ip
 8013030:	bfa8      	it	ge
 8013032:	4665      	movge	r5, ip
 8013034:	f1be 0f00 	cmp.w	lr, #0
 8013038:	d000      	beq.n	801303c <_strtod_l+0x2ec>
 801303a:	426d      	negs	r5, r5
 801303c:	2b00      	cmp	r3, #0
 801303e:	d14d      	bne.n	80130dc <_strtod_l+0x38c>
 8013040:	9b04      	ldr	r3, [sp, #16]
 8013042:	4303      	orrs	r3, r0
 8013044:	f47f aec8 	bne.w	8012dd8 <_strtod_l+0x88>
 8013048:	2900      	cmp	r1, #0
 801304a:	f47f aee2 	bne.w	8012e12 <_strtod_l+0xc2>
 801304e:	2a69      	cmp	r2, #105	; 0x69
 8013050:	d027      	beq.n	80130a2 <_strtod_l+0x352>
 8013052:	dc24      	bgt.n	801309e <_strtod_l+0x34e>
 8013054:	2a49      	cmp	r2, #73	; 0x49
 8013056:	d024      	beq.n	80130a2 <_strtod_l+0x352>
 8013058:	2a4e      	cmp	r2, #78	; 0x4e
 801305a:	f47f aeda 	bne.w	8012e12 <_strtod_l+0xc2>
 801305e:	4996      	ldr	r1, [pc, #600]	; (80132b8 <_strtod_l+0x568>)
 8013060:	a811      	add	r0, sp, #68	; 0x44
 8013062:	f002 f82f 	bl	80150c4 <__match>
 8013066:	2800      	cmp	r0, #0
 8013068:	f43f aed3 	beq.w	8012e12 <_strtod_l+0xc2>
 801306c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	2b28      	cmp	r3, #40	; 0x28
 8013072:	d12d      	bne.n	80130d0 <_strtod_l+0x380>
 8013074:	4991      	ldr	r1, [pc, #580]	; (80132bc <_strtod_l+0x56c>)
 8013076:	aa14      	add	r2, sp, #80	; 0x50
 8013078:	a811      	add	r0, sp, #68	; 0x44
 801307a:	f002 f837 	bl	80150ec <__hexnan>
 801307e:	2805      	cmp	r0, #5
 8013080:	d126      	bne.n	80130d0 <_strtod_l+0x380>
 8013082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013084:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013088:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801308c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013090:	e6a2      	b.n	8012dd8 <_strtod_l+0x88>
 8013092:	250a      	movs	r5, #10
 8013094:	fb05 250c 	mla	r5, r5, ip, r2
 8013098:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801309c:	e7b9      	b.n	8013012 <_strtod_l+0x2c2>
 801309e:	2a6e      	cmp	r2, #110	; 0x6e
 80130a0:	e7db      	b.n	801305a <_strtod_l+0x30a>
 80130a2:	4987      	ldr	r1, [pc, #540]	; (80132c0 <_strtod_l+0x570>)
 80130a4:	a811      	add	r0, sp, #68	; 0x44
 80130a6:	f002 f80d 	bl	80150c4 <__match>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	f43f aeb1 	beq.w	8012e12 <_strtod_l+0xc2>
 80130b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130b2:	4984      	ldr	r1, [pc, #528]	; (80132c4 <_strtod_l+0x574>)
 80130b4:	3b01      	subs	r3, #1
 80130b6:	a811      	add	r0, sp, #68	; 0x44
 80130b8:	9311      	str	r3, [sp, #68]	; 0x44
 80130ba:	f002 f803 	bl	80150c4 <__match>
 80130be:	b910      	cbnz	r0, 80130c6 <_strtod_l+0x376>
 80130c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130c2:	3301      	adds	r3, #1
 80130c4:	9311      	str	r3, [sp, #68]	; 0x44
 80130c6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80132d8 <_strtod_l+0x588>
 80130ca:	f04f 0800 	mov.w	r8, #0
 80130ce:	e683      	b.n	8012dd8 <_strtod_l+0x88>
 80130d0:	487d      	ldr	r0, [pc, #500]	; (80132c8 <_strtod_l+0x578>)
 80130d2:	f003 f8fd 	bl	80162d0 <nan>
 80130d6:	ec59 8b10 	vmov	r8, r9, d0
 80130da:	e67d      	b.n	8012dd8 <_strtod_l+0x88>
 80130dc:	1bea      	subs	r2, r5, r7
 80130de:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80130e2:	9207      	str	r2, [sp, #28]
 80130e4:	9a06      	ldr	r2, [sp, #24]
 80130e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80130ea:	2a00      	cmp	r2, #0
 80130ec:	bf08      	it	eq
 80130ee:	461a      	moveq	r2, r3
 80130f0:	2b10      	cmp	r3, #16
 80130f2:	9206      	str	r2, [sp, #24]
 80130f4:	461a      	mov	r2, r3
 80130f6:	bfa8      	it	ge
 80130f8:	2210      	movge	r2, #16
 80130fa:	2b09      	cmp	r3, #9
 80130fc:	ec59 8b17 	vmov	r8, r9, d7
 8013100:	dd0c      	ble.n	801311c <_strtod_l+0x3cc>
 8013102:	4972      	ldr	r1, [pc, #456]	; (80132cc <_strtod_l+0x57c>)
 8013104:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013108:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801310c:	ee06 aa90 	vmov	s13, sl
 8013110:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8013114:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013118:	ec59 8b16 	vmov	r8, r9, d6
 801311c:	2b0f      	cmp	r3, #15
 801311e:	dc36      	bgt.n	801318e <_strtod_l+0x43e>
 8013120:	9907      	ldr	r1, [sp, #28]
 8013122:	2900      	cmp	r1, #0
 8013124:	f43f ae58 	beq.w	8012dd8 <_strtod_l+0x88>
 8013128:	dd23      	ble.n	8013172 <_strtod_l+0x422>
 801312a:	2916      	cmp	r1, #22
 801312c:	dc0b      	bgt.n	8013146 <_strtod_l+0x3f6>
 801312e:	4b67      	ldr	r3, [pc, #412]	; (80132cc <_strtod_l+0x57c>)
 8013130:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013134:	ed93 7b00 	vldr	d7, [r3]
 8013138:	ec49 8b16 	vmov	d6, r8, r9
 801313c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013140:	ec59 8b17 	vmov	r8, r9, d7
 8013144:	e648      	b.n	8012dd8 <_strtod_l+0x88>
 8013146:	9807      	ldr	r0, [sp, #28]
 8013148:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801314c:	4281      	cmp	r1, r0
 801314e:	db1e      	blt.n	801318e <_strtod_l+0x43e>
 8013150:	4a5e      	ldr	r2, [pc, #376]	; (80132cc <_strtod_l+0x57c>)
 8013152:	f1c3 030f 	rsb	r3, r3, #15
 8013156:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801315a:	ed91 7b00 	vldr	d7, [r1]
 801315e:	ec49 8b16 	vmov	d6, r8, r9
 8013162:	1ac3      	subs	r3, r0, r3
 8013164:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013168:	ee27 7b06 	vmul.f64	d7, d7, d6
 801316c:	ed92 6b00 	vldr	d6, [r2]
 8013170:	e7e4      	b.n	801313c <_strtod_l+0x3ec>
 8013172:	9907      	ldr	r1, [sp, #28]
 8013174:	3116      	adds	r1, #22
 8013176:	db0a      	blt.n	801318e <_strtod_l+0x43e>
 8013178:	4b54      	ldr	r3, [pc, #336]	; (80132cc <_strtod_l+0x57c>)
 801317a:	1b7d      	subs	r5, r7, r5
 801317c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013180:	ed95 7b00 	vldr	d7, [r5]
 8013184:	ec49 8b16 	vmov	d6, r8, r9
 8013188:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801318c:	e7d8      	b.n	8013140 <_strtod_l+0x3f0>
 801318e:	9907      	ldr	r1, [sp, #28]
 8013190:	1a9a      	subs	r2, r3, r2
 8013192:	440a      	add	r2, r1
 8013194:	2a00      	cmp	r2, #0
 8013196:	dd6f      	ble.n	8013278 <_strtod_l+0x528>
 8013198:	f012 000f 	ands.w	r0, r2, #15
 801319c:	d00a      	beq.n	80131b4 <_strtod_l+0x464>
 801319e:	494b      	ldr	r1, [pc, #300]	; (80132cc <_strtod_l+0x57c>)
 80131a0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80131a4:	ed91 7b00 	vldr	d7, [r1]
 80131a8:	ec49 8b16 	vmov	d6, r8, r9
 80131ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131b0:	ec59 8b17 	vmov	r8, r9, d7
 80131b4:	f032 020f 	bics.w	r2, r2, #15
 80131b8:	d04f      	beq.n	801325a <_strtod_l+0x50a>
 80131ba:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80131be:	dd22      	ble.n	8013206 <_strtod_l+0x4b6>
 80131c0:	2500      	movs	r5, #0
 80131c2:	462e      	mov	r6, r5
 80131c4:	9506      	str	r5, [sp, #24]
 80131c6:	462f      	mov	r7, r5
 80131c8:	2322      	movs	r3, #34	; 0x22
 80131ca:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80132d8 <_strtod_l+0x588>
 80131ce:	6023      	str	r3, [r4, #0]
 80131d0:	f04f 0800 	mov.w	r8, #0
 80131d4:	9b06      	ldr	r3, [sp, #24]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	f43f adfe 	beq.w	8012dd8 <_strtod_l+0x88>
 80131dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80131de:	4620      	mov	r0, r4
 80131e0:	f002 f8fc 	bl	80153dc <_Bfree>
 80131e4:	4639      	mov	r1, r7
 80131e6:	4620      	mov	r0, r4
 80131e8:	f002 f8f8 	bl	80153dc <_Bfree>
 80131ec:	4631      	mov	r1, r6
 80131ee:	4620      	mov	r0, r4
 80131f0:	f002 f8f4 	bl	80153dc <_Bfree>
 80131f4:	9906      	ldr	r1, [sp, #24]
 80131f6:	4620      	mov	r0, r4
 80131f8:	f002 f8f0 	bl	80153dc <_Bfree>
 80131fc:	4629      	mov	r1, r5
 80131fe:	4620      	mov	r0, r4
 8013200:	f002 f8ec 	bl	80153dc <_Bfree>
 8013204:	e5e8      	b.n	8012dd8 <_strtod_l+0x88>
 8013206:	2000      	movs	r0, #0
 8013208:	ec49 8b17 	vmov	d7, r8, r9
 801320c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80132d0 <_strtod_l+0x580>
 8013210:	1112      	asrs	r2, r2, #4
 8013212:	4601      	mov	r1, r0
 8013214:	2a01      	cmp	r2, #1
 8013216:	dc23      	bgt.n	8013260 <_strtod_l+0x510>
 8013218:	b108      	cbz	r0, 801321e <_strtod_l+0x4ce>
 801321a:	ec59 8b17 	vmov	r8, r9, d7
 801321e:	4a2c      	ldr	r2, [pc, #176]	; (80132d0 <_strtod_l+0x580>)
 8013220:	482c      	ldr	r0, [pc, #176]	; (80132d4 <_strtod_l+0x584>)
 8013222:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013226:	ed92 7b00 	vldr	d7, [r2]
 801322a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801322e:	ec49 8b16 	vmov	d6, r8, r9
 8013232:	4a29      	ldr	r2, [pc, #164]	; (80132d8 <_strtod_l+0x588>)
 8013234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013238:	ee17 1a90 	vmov	r1, s15
 801323c:	400a      	ands	r2, r1
 801323e:	4282      	cmp	r2, r0
 8013240:	ec59 8b17 	vmov	r8, r9, d7
 8013244:	d8bc      	bhi.n	80131c0 <_strtod_l+0x470>
 8013246:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801324a:	4282      	cmp	r2, r0
 801324c:	bf86      	itte	hi
 801324e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80132dc <_strtod_l+0x58c>
 8013252:	f04f 38ff 	movhi.w	r8, #4294967295
 8013256:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801325a:	2200      	movs	r2, #0
 801325c:	9204      	str	r2, [sp, #16]
 801325e:	e078      	b.n	8013352 <_strtod_l+0x602>
 8013260:	07d6      	lsls	r6, r2, #31
 8013262:	d504      	bpl.n	801326e <_strtod_l+0x51e>
 8013264:	ed9c 6b00 	vldr	d6, [ip]
 8013268:	2001      	movs	r0, #1
 801326a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801326e:	3101      	adds	r1, #1
 8013270:	1052      	asrs	r2, r2, #1
 8013272:	f10c 0c08 	add.w	ip, ip, #8
 8013276:	e7cd      	b.n	8013214 <_strtod_l+0x4c4>
 8013278:	d0ef      	beq.n	801325a <_strtod_l+0x50a>
 801327a:	4252      	negs	r2, r2
 801327c:	f012 000f 	ands.w	r0, r2, #15
 8013280:	d00a      	beq.n	8013298 <_strtod_l+0x548>
 8013282:	4912      	ldr	r1, [pc, #72]	; (80132cc <_strtod_l+0x57c>)
 8013284:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013288:	ed91 7b00 	vldr	d7, [r1]
 801328c:	ec49 8b16 	vmov	d6, r8, r9
 8013290:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013294:	ec59 8b17 	vmov	r8, r9, d7
 8013298:	1112      	asrs	r2, r2, #4
 801329a:	d0de      	beq.n	801325a <_strtod_l+0x50a>
 801329c:	2a1f      	cmp	r2, #31
 801329e:	dd1f      	ble.n	80132e0 <_strtod_l+0x590>
 80132a0:	2500      	movs	r5, #0
 80132a2:	462e      	mov	r6, r5
 80132a4:	9506      	str	r5, [sp, #24]
 80132a6:	462f      	mov	r7, r5
 80132a8:	2322      	movs	r3, #34	; 0x22
 80132aa:	f04f 0800 	mov.w	r8, #0
 80132ae:	f04f 0900 	mov.w	r9, #0
 80132b2:	6023      	str	r3, [r4, #0]
 80132b4:	e78e      	b.n	80131d4 <_strtod_l+0x484>
 80132b6:	bf00      	nop
 80132b8:	080183ed 	.word	0x080183ed
 80132bc:	080184a0 	.word	0x080184a0
 80132c0:	080183e5 	.word	0x080183e5
 80132c4:	08018620 	.word	0x08018620
 80132c8:	0801851b 	.word	0x0801851b
 80132cc:	080187f8 	.word	0x080187f8
 80132d0:	080187d0 	.word	0x080187d0
 80132d4:	7ca00000 	.word	0x7ca00000
 80132d8:	7ff00000 	.word	0x7ff00000
 80132dc:	7fefffff 	.word	0x7fefffff
 80132e0:	f012 0110 	ands.w	r1, r2, #16
 80132e4:	bf18      	it	ne
 80132e6:	216a      	movne	r1, #106	; 0x6a
 80132e8:	9104      	str	r1, [sp, #16]
 80132ea:	ec49 8b17 	vmov	d7, r8, r9
 80132ee:	49be      	ldr	r1, [pc, #760]	; (80135e8 <_strtod_l+0x898>)
 80132f0:	2000      	movs	r0, #0
 80132f2:	07d6      	lsls	r6, r2, #31
 80132f4:	d504      	bpl.n	8013300 <_strtod_l+0x5b0>
 80132f6:	ed91 6b00 	vldr	d6, [r1]
 80132fa:	2001      	movs	r0, #1
 80132fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013300:	1052      	asrs	r2, r2, #1
 8013302:	f101 0108 	add.w	r1, r1, #8
 8013306:	d1f4      	bne.n	80132f2 <_strtod_l+0x5a2>
 8013308:	b108      	cbz	r0, 801330e <_strtod_l+0x5be>
 801330a:	ec59 8b17 	vmov	r8, r9, d7
 801330e:	9a04      	ldr	r2, [sp, #16]
 8013310:	b1c2      	cbz	r2, 8013344 <_strtod_l+0x5f4>
 8013312:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8013316:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801331a:	2a00      	cmp	r2, #0
 801331c:	4648      	mov	r0, r9
 801331e:	dd11      	ble.n	8013344 <_strtod_l+0x5f4>
 8013320:	2a1f      	cmp	r2, #31
 8013322:	f340 812e 	ble.w	8013582 <_strtod_l+0x832>
 8013326:	2a34      	cmp	r2, #52	; 0x34
 8013328:	bfde      	ittt	le
 801332a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801332e:	f04f 32ff 	movle.w	r2, #4294967295
 8013332:	fa02 f101 	lslle.w	r1, r2, r1
 8013336:	f04f 0800 	mov.w	r8, #0
 801333a:	bfcc      	ite	gt
 801333c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013340:	ea01 0900 	andle.w	r9, r1, r0
 8013344:	ec49 8b17 	vmov	d7, r8, r9
 8013348:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013350:	d0a6      	beq.n	80132a0 <_strtod_l+0x550>
 8013352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013354:	9200      	str	r2, [sp, #0]
 8013356:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013358:	9a06      	ldr	r2, [sp, #24]
 801335a:	4620      	mov	r0, r4
 801335c:	f002 f8a6 	bl	80154ac <__s2b>
 8013360:	9006      	str	r0, [sp, #24]
 8013362:	2800      	cmp	r0, #0
 8013364:	f43f af2c 	beq.w	80131c0 <_strtod_l+0x470>
 8013368:	9b07      	ldr	r3, [sp, #28]
 801336a:	1b7d      	subs	r5, r7, r5
 801336c:	2b00      	cmp	r3, #0
 801336e:	bfb4      	ite	lt
 8013370:	462b      	movlt	r3, r5
 8013372:	2300      	movge	r3, #0
 8013374:	9309      	str	r3, [sp, #36]	; 0x24
 8013376:	9b07      	ldr	r3, [sp, #28]
 8013378:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80135c8 <_strtod_l+0x878>
 801337c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80135d0 <_strtod_l+0x880>
 8013380:	ed9f bb95 	vldr	d11, [pc, #596]	; 80135d8 <_strtod_l+0x888>
 8013384:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013388:	2500      	movs	r5, #0
 801338a:	930c      	str	r3, [sp, #48]	; 0x30
 801338c:	462e      	mov	r6, r5
 801338e:	9b06      	ldr	r3, [sp, #24]
 8013390:	4620      	mov	r0, r4
 8013392:	6859      	ldr	r1, [r3, #4]
 8013394:	f001 ffe2 	bl	801535c <_Balloc>
 8013398:	4607      	mov	r7, r0
 801339a:	2800      	cmp	r0, #0
 801339c:	f43f af14 	beq.w	80131c8 <_strtod_l+0x478>
 80133a0:	9b06      	ldr	r3, [sp, #24]
 80133a2:	691a      	ldr	r2, [r3, #16]
 80133a4:	3202      	adds	r2, #2
 80133a6:	f103 010c 	add.w	r1, r3, #12
 80133aa:	0092      	lsls	r2, r2, #2
 80133ac:	300c      	adds	r0, #12
 80133ae:	f7fe fc85 	bl	8011cbc <memcpy>
 80133b2:	ec49 8b10 	vmov	d0, r8, r9
 80133b6:	aa14      	add	r2, sp, #80	; 0x50
 80133b8:	a913      	add	r1, sp, #76	; 0x4c
 80133ba:	4620      	mov	r0, r4
 80133bc:	f002 fbbc 	bl	8015b38 <__d2b>
 80133c0:	ec49 8b18 	vmov	d8, r8, r9
 80133c4:	9012      	str	r0, [sp, #72]	; 0x48
 80133c6:	2800      	cmp	r0, #0
 80133c8:	f43f aefe 	beq.w	80131c8 <_strtod_l+0x478>
 80133cc:	2101      	movs	r1, #1
 80133ce:	4620      	mov	r0, r4
 80133d0:	f002 f906 	bl	80155e0 <__i2b>
 80133d4:	4606      	mov	r6, r0
 80133d6:	2800      	cmp	r0, #0
 80133d8:	f43f aef6 	beq.w	80131c8 <_strtod_l+0x478>
 80133dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133de:	9914      	ldr	r1, [sp, #80]	; 0x50
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	bfab      	itete	ge
 80133e4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80133e6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80133e8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80133ec:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80133f0:	bfac      	ite	ge
 80133f2:	eb03 0b02 	addge.w	fp, r3, r2
 80133f6:	eba2 0a03 	sublt.w	sl, r2, r3
 80133fa:	9a04      	ldr	r2, [sp, #16]
 80133fc:	1a9b      	subs	r3, r3, r2
 80133fe:	440b      	add	r3, r1
 8013400:	4a7a      	ldr	r2, [pc, #488]	; (80135ec <_strtod_l+0x89c>)
 8013402:	3b01      	subs	r3, #1
 8013404:	4293      	cmp	r3, r2
 8013406:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801340a:	f280 80cd 	bge.w	80135a8 <_strtod_l+0x858>
 801340e:	1ad2      	subs	r2, r2, r3
 8013410:	2a1f      	cmp	r2, #31
 8013412:	eba1 0102 	sub.w	r1, r1, r2
 8013416:	f04f 0001 	mov.w	r0, #1
 801341a:	f300 80b9 	bgt.w	8013590 <_strtod_l+0x840>
 801341e:	fa00 f302 	lsl.w	r3, r0, r2
 8013422:	930b      	str	r3, [sp, #44]	; 0x2c
 8013424:	2300      	movs	r3, #0
 8013426:	930a      	str	r3, [sp, #40]	; 0x28
 8013428:	eb0b 0301 	add.w	r3, fp, r1
 801342c:	9a04      	ldr	r2, [sp, #16]
 801342e:	459b      	cmp	fp, r3
 8013430:	448a      	add	sl, r1
 8013432:	4492      	add	sl, r2
 8013434:	465a      	mov	r2, fp
 8013436:	bfa8      	it	ge
 8013438:	461a      	movge	r2, r3
 801343a:	4552      	cmp	r2, sl
 801343c:	bfa8      	it	ge
 801343e:	4652      	movge	r2, sl
 8013440:	2a00      	cmp	r2, #0
 8013442:	bfc2      	ittt	gt
 8013444:	1a9b      	subgt	r3, r3, r2
 8013446:	ebaa 0a02 	subgt.w	sl, sl, r2
 801344a:	ebab 0b02 	subgt.w	fp, fp, r2
 801344e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013450:	2a00      	cmp	r2, #0
 8013452:	dd18      	ble.n	8013486 <_strtod_l+0x736>
 8013454:	4631      	mov	r1, r6
 8013456:	4620      	mov	r0, r4
 8013458:	930f      	str	r3, [sp, #60]	; 0x3c
 801345a:	f002 f981 	bl	8015760 <__pow5mult>
 801345e:	4606      	mov	r6, r0
 8013460:	2800      	cmp	r0, #0
 8013462:	f43f aeb1 	beq.w	80131c8 <_strtod_l+0x478>
 8013466:	4601      	mov	r1, r0
 8013468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801346a:	4620      	mov	r0, r4
 801346c:	f002 f8ce 	bl	801560c <__multiply>
 8013470:	900e      	str	r0, [sp, #56]	; 0x38
 8013472:	2800      	cmp	r0, #0
 8013474:	f43f aea8 	beq.w	80131c8 <_strtod_l+0x478>
 8013478:	9912      	ldr	r1, [sp, #72]	; 0x48
 801347a:	4620      	mov	r0, r4
 801347c:	f001 ffae 	bl	80153dc <_Bfree>
 8013480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013484:	9212      	str	r2, [sp, #72]	; 0x48
 8013486:	2b00      	cmp	r3, #0
 8013488:	f300 8093 	bgt.w	80135b2 <_strtod_l+0x862>
 801348c:	9b07      	ldr	r3, [sp, #28]
 801348e:	2b00      	cmp	r3, #0
 8013490:	dd08      	ble.n	80134a4 <_strtod_l+0x754>
 8013492:	4639      	mov	r1, r7
 8013494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013496:	4620      	mov	r0, r4
 8013498:	f002 f962 	bl	8015760 <__pow5mult>
 801349c:	4607      	mov	r7, r0
 801349e:	2800      	cmp	r0, #0
 80134a0:	f43f ae92 	beq.w	80131c8 <_strtod_l+0x478>
 80134a4:	f1ba 0f00 	cmp.w	sl, #0
 80134a8:	dd08      	ble.n	80134bc <_strtod_l+0x76c>
 80134aa:	4639      	mov	r1, r7
 80134ac:	4652      	mov	r2, sl
 80134ae:	4620      	mov	r0, r4
 80134b0:	f002 f9b0 	bl	8015814 <__lshift>
 80134b4:	4607      	mov	r7, r0
 80134b6:	2800      	cmp	r0, #0
 80134b8:	f43f ae86 	beq.w	80131c8 <_strtod_l+0x478>
 80134bc:	f1bb 0f00 	cmp.w	fp, #0
 80134c0:	dd08      	ble.n	80134d4 <_strtod_l+0x784>
 80134c2:	4631      	mov	r1, r6
 80134c4:	465a      	mov	r2, fp
 80134c6:	4620      	mov	r0, r4
 80134c8:	f002 f9a4 	bl	8015814 <__lshift>
 80134cc:	4606      	mov	r6, r0
 80134ce:	2800      	cmp	r0, #0
 80134d0:	f43f ae7a 	beq.w	80131c8 <_strtod_l+0x478>
 80134d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80134d6:	463a      	mov	r2, r7
 80134d8:	4620      	mov	r0, r4
 80134da:	f002 fa27 	bl	801592c <__mdiff>
 80134de:	4605      	mov	r5, r0
 80134e0:	2800      	cmp	r0, #0
 80134e2:	f43f ae71 	beq.w	80131c8 <_strtod_l+0x478>
 80134e6:	2300      	movs	r3, #0
 80134e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80134ec:	60c3      	str	r3, [r0, #12]
 80134ee:	4631      	mov	r1, r6
 80134f0:	f002 fa00 	bl	80158f4 <__mcmp>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	da7d      	bge.n	80135f4 <_strtod_l+0x8a4>
 80134f8:	ea5a 0308 	orrs.w	r3, sl, r8
 80134fc:	f040 80a3 	bne.w	8013646 <_strtod_l+0x8f6>
 8013500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013504:	2b00      	cmp	r3, #0
 8013506:	f040 809e 	bne.w	8013646 <_strtod_l+0x8f6>
 801350a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801350e:	0d1b      	lsrs	r3, r3, #20
 8013510:	051b      	lsls	r3, r3, #20
 8013512:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013516:	f240 8096 	bls.w	8013646 <_strtod_l+0x8f6>
 801351a:	696b      	ldr	r3, [r5, #20]
 801351c:	b91b      	cbnz	r3, 8013526 <_strtod_l+0x7d6>
 801351e:	692b      	ldr	r3, [r5, #16]
 8013520:	2b01      	cmp	r3, #1
 8013522:	f340 8090 	ble.w	8013646 <_strtod_l+0x8f6>
 8013526:	4629      	mov	r1, r5
 8013528:	2201      	movs	r2, #1
 801352a:	4620      	mov	r0, r4
 801352c:	f002 f972 	bl	8015814 <__lshift>
 8013530:	4631      	mov	r1, r6
 8013532:	4605      	mov	r5, r0
 8013534:	f002 f9de 	bl	80158f4 <__mcmp>
 8013538:	2800      	cmp	r0, #0
 801353a:	f340 8084 	ble.w	8013646 <_strtod_l+0x8f6>
 801353e:	9904      	ldr	r1, [sp, #16]
 8013540:	4a2b      	ldr	r2, [pc, #172]	; (80135f0 <_strtod_l+0x8a0>)
 8013542:	464b      	mov	r3, r9
 8013544:	2900      	cmp	r1, #0
 8013546:	f000 809d 	beq.w	8013684 <_strtod_l+0x934>
 801354a:	ea02 0109 	and.w	r1, r2, r9
 801354e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013552:	f300 8097 	bgt.w	8013684 <_strtod_l+0x934>
 8013556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801355a:	f77f aea5 	ble.w	80132a8 <_strtod_l+0x558>
 801355e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80135e0 <_strtod_l+0x890>
 8013562:	ec49 8b16 	vmov	d6, r8, r9
 8013566:	ee26 7b07 	vmul.f64	d7, d6, d7
 801356a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801356e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013572:	4313      	orrs	r3, r2
 8013574:	bf08      	it	eq
 8013576:	2322      	moveq	r3, #34	; 0x22
 8013578:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801357c:	bf08      	it	eq
 801357e:	6023      	streq	r3, [r4, #0]
 8013580:	e62c      	b.n	80131dc <_strtod_l+0x48c>
 8013582:	f04f 31ff 	mov.w	r1, #4294967295
 8013586:	fa01 f202 	lsl.w	r2, r1, r2
 801358a:	ea02 0808 	and.w	r8, r2, r8
 801358e:	e6d9      	b.n	8013344 <_strtod_l+0x5f4>
 8013590:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013594:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013598:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801359c:	33e2      	adds	r3, #226	; 0xe2
 801359e:	fa00 f303 	lsl.w	r3, r0, r3
 80135a2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80135a6:	e73f      	b.n	8013428 <_strtod_l+0x6d8>
 80135a8:	2200      	movs	r2, #0
 80135aa:	2301      	movs	r3, #1
 80135ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80135b0:	e73a      	b.n	8013428 <_strtod_l+0x6d8>
 80135b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80135b4:	461a      	mov	r2, r3
 80135b6:	4620      	mov	r0, r4
 80135b8:	f002 f92c 	bl	8015814 <__lshift>
 80135bc:	9012      	str	r0, [sp, #72]	; 0x48
 80135be:	2800      	cmp	r0, #0
 80135c0:	f47f af64 	bne.w	801348c <_strtod_l+0x73c>
 80135c4:	e600      	b.n	80131c8 <_strtod_l+0x478>
 80135c6:	bf00      	nop
 80135c8:	94a03595 	.word	0x94a03595
 80135cc:	3fcfffff 	.word	0x3fcfffff
 80135d0:	94a03595 	.word	0x94a03595
 80135d4:	3fdfffff 	.word	0x3fdfffff
 80135d8:	35afe535 	.word	0x35afe535
 80135dc:	3fe00000 	.word	0x3fe00000
 80135e0:	00000000 	.word	0x00000000
 80135e4:	39500000 	.word	0x39500000
 80135e8:	080184b8 	.word	0x080184b8
 80135ec:	fffffc02 	.word	0xfffffc02
 80135f0:	7ff00000 	.word	0x7ff00000
 80135f4:	46cb      	mov	fp, r9
 80135f6:	d15f      	bne.n	80136b8 <_strtod_l+0x968>
 80135f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80135fc:	f1ba 0f00 	cmp.w	sl, #0
 8013600:	d02a      	beq.n	8013658 <_strtod_l+0x908>
 8013602:	4aa7      	ldr	r2, [pc, #668]	; (80138a0 <_strtod_l+0xb50>)
 8013604:	4293      	cmp	r3, r2
 8013606:	d12b      	bne.n	8013660 <_strtod_l+0x910>
 8013608:	9b04      	ldr	r3, [sp, #16]
 801360a:	4642      	mov	r2, r8
 801360c:	b1fb      	cbz	r3, 801364e <_strtod_l+0x8fe>
 801360e:	4ba5      	ldr	r3, [pc, #660]	; (80138a4 <_strtod_l+0xb54>)
 8013610:	ea09 0303 	and.w	r3, r9, r3
 8013614:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013618:	f04f 31ff 	mov.w	r1, #4294967295
 801361c:	d81a      	bhi.n	8013654 <_strtod_l+0x904>
 801361e:	0d1b      	lsrs	r3, r3, #20
 8013620:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013624:	fa01 f303 	lsl.w	r3, r1, r3
 8013628:	429a      	cmp	r2, r3
 801362a:	d119      	bne.n	8013660 <_strtod_l+0x910>
 801362c:	4b9e      	ldr	r3, [pc, #632]	; (80138a8 <_strtod_l+0xb58>)
 801362e:	459b      	cmp	fp, r3
 8013630:	d102      	bne.n	8013638 <_strtod_l+0x8e8>
 8013632:	3201      	adds	r2, #1
 8013634:	f43f adc8 	beq.w	80131c8 <_strtod_l+0x478>
 8013638:	4b9a      	ldr	r3, [pc, #616]	; (80138a4 <_strtod_l+0xb54>)
 801363a:	ea0b 0303 	and.w	r3, fp, r3
 801363e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013642:	f04f 0800 	mov.w	r8, #0
 8013646:	9b04      	ldr	r3, [sp, #16]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d188      	bne.n	801355e <_strtod_l+0x80e>
 801364c:	e5c6      	b.n	80131dc <_strtod_l+0x48c>
 801364e:	f04f 33ff 	mov.w	r3, #4294967295
 8013652:	e7e9      	b.n	8013628 <_strtod_l+0x8d8>
 8013654:	460b      	mov	r3, r1
 8013656:	e7e7      	b.n	8013628 <_strtod_l+0x8d8>
 8013658:	ea53 0308 	orrs.w	r3, r3, r8
 801365c:	f43f af6f 	beq.w	801353e <_strtod_l+0x7ee>
 8013660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013662:	b1cb      	cbz	r3, 8013698 <_strtod_l+0x948>
 8013664:	ea13 0f0b 	tst.w	r3, fp
 8013668:	d0ed      	beq.n	8013646 <_strtod_l+0x8f6>
 801366a:	9a04      	ldr	r2, [sp, #16]
 801366c:	4640      	mov	r0, r8
 801366e:	4649      	mov	r1, r9
 8013670:	f1ba 0f00 	cmp.w	sl, #0
 8013674:	d014      	beq.n	80136a0 <_strtod_l+0x950>
 8013676:	f7ff fb51 	bl	8012d1c <sulp>
 801367a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801367e:	ec59 8b17 	vmov	r8, r9, d7
 8013682:	e7e0      	b.n	8013646 <_strtod_l+0x8f6>
 8013684:	4013      	ands	r3, r2
 8013686:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801368a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801368e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013692:	f04f 38ff 	mov.w	r8, #4294967295
 8013696:	e7d6      	b.n	8013646 <_strtod_l+0x8f6>
 8013698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801369a:	ea13 0f08 	tst.w	r3, r8
 801369e:	e7e3      	b.n	8013668 <_strtod_l+0x918>
 80136a0:	f7ff fb3c 	bl	8012d1c <sulp>
 80136a4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80136a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80136ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b0:	ec59 8b10 	vmov	r8, r9, d0
 80136b4:	d1c7      	bne.n	8013646 <_strtod_l+0x8f6>
 80136b6:	e5f7      	b.n	80132a8 <_strtod_l+0x558>
 80136b8:	4631      	mov	r1, r6
 80136ba:	4628      	mov	r0, r5
 80136bc:	f002 fa98 	bl	8015bf0 <__ratio>
 80136c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80136c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80136c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136cc:	d865      	bhi.n	801379a <_strtod_l+0xa4a>
 80136ce:	f1ba 0f00 	cmp.w	sl, #0
 80136d2:	d042      	beq.n	801375a <_strtod_l+0xa0a>
 80136d4:	4b75      	ldr	r3, [pc, #468]	; (80138ac <_strtod_l+0xb5c>)
 80136d6:	2200      	movs	r2, #0
 80136d8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80136dc:	4871      	ldr	r0, [pc, #452]	; (80138a4 <_strtod_l+0xb54>)
 80136de:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80138b8 <_strtod_l+0xb68>
 80136e2:	ea0b 0100 	and.w	r1, fp, r0
 80136e6:	4561      	cmp	r1, ip
 80136e8:	f040 808e 	bne.w	8013808 <_strtod_l+0xab8>
 80136ec:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80136f0:	ec49 8b10 	vmov	d0, r8, r9
 80136f4:	ec43 2b1c 	vmov	d12, r2, r3
 80136f8:	910a      	str	r1, [sp, #40]	; 0x28
 80136fa:	f002 f9a1 	bl	8015a40 <__ulp>
 80136fe:	ec49 8b1e 	vmov	d14, r8, r9
 8013702:	4868      	ldr	r0, [pc, #416]	; (80138a4 <_strtod_l+0xb54>)
 8013704:	eeac eb00 	vfma.f64	d14, d12, d0
 8013708:	ee1e 3a90 	vmov	r3, s29
 801370c:	4a68      	ldr	r2, [pc, #416]	; (80138b0 <_strtod_l+0xb60>)
 801370e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013710:	4018      	ands	r0, r3
 8013712:	4290      	cmp	r0, r2
 8013714:	ec59 8b1e 	vmov	r8, r9, d14
 8013718:	d94e      	bls.n	80137b8 <_strtod_l+0xa68>
 801371a:	ee18 3a90 	vmov	r3, s17
 801371e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013722:	4293      	cmp	r3, r2
 8013724:	d104      	bne.n	8013730 <_strtod_l+0x9e0>
 8013726:	ee18 3a10 	vmov	r3, s16
 801372a:	3301      	adds	r3, #1
 801372c:	f43f ad4c 	beq.w	80131c8 <_strtod_l+0x478>
 8013730:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80138a8 <_strtod_l+0xb58>
 8013734:	f04f 38ff 	mov.w	r8, #4294967295
 8013738:	9912      	ldr	r1, [sp, #72]	; 0x48
 801373a:	4620      	mov	r0, r4
 801373c:	f001 fe4e 	bl	80153dc <_Bfree>
 8013740:	4639      	mov	r1, r7
 8013742:	4620      	mov	r0, r4
 8013744:	f001 fe4a 	bl	80153dc <_Bfree>
 8013748:	4631      	mov	r1, r6
 801374a:	4620      	mov	r0, r4
 801374c:	f001 fe46 	bl	80153dc <_Bfree>
 8013750:	4629      	mov	r1, r5
 8013752:	4620      	mov	r0, r4
 8013754:	f001 fe42 	bl	80153dc <_Bfree>
 8013758:	e619      	b.n	801338e <_strtod_l+0x63e>
 801375a:	f1b8 0f00 	cmp.w	r8, #0
 801375e:	d112      	bne.n	8013786 <_strtod_l+0xa36>
 8013760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013764:	b9b3      	cbnz	r3, 8013794 <_strtod_l+0xa44>
 8013766:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801376a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013772:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8013776:	bf58      	it	pl
 8013778:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801377c:	eeb1 7b4d 	vneg.f64	d7, d13
 8013780:	ec53 2b17 	vmov	r2, r3, d7
 8013784:	e7aa      	b.n	80136dc <_strtod_l+0x98c>
 8013786:	f1b8 0f01 	cmp.w	r8, #1
 801378a:	d103      	bne.n	8013794 <_strtod_l+0xa44>
 801378c:	f1b9 0f00 	cmp.w	r9, #0
 8013790:	f43f ad8a 	beq.w	80132a8 <_strtod_l+0x558>
 8013794:	4b47      	ldr	r3, [pc, #284]	; (80138b4 <_strtod_l+0xb64>)
 8013796:	2200      	movs	r2, #0
 8013798:	e79e      	b.n	80136d8 <_strtod_l+0x988>
 801379a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801379e:	ee20 db0d 	vmul.f64	d13, d0, d13
 80137a2:	f1ba 0f00 	cmp.w	sl, #0
 80137a6:	d104      	bne.n	80137b2 <_strtod_l+0xa62>
 80137a8:	eeb1 7b4d 	vneg.f64	d7, d13
 80137ac:	ec53 2b17 	vmov	r2, r3, d7
 80137b0:	e794      	b.n	80136dc <_strtod_l+0x98c>
 80137b2:	eeb0 7b4d 	vmov.f64	d7, d13
 80137b6:	e7f9      	b.n	80137ac <_strtod_l+0xa5c>
 80137b8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80137bc:	9b04      	ldr	r3, [sp, #16]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d1ba      	bne.n	8013738 <_strtod_l+0x9e8>
 80137c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80137c6:	0d1b      	lsrs	r3, r3, #20
 80137c8:	051b      	lsls	r3, r3, #20
 80137ca:	4299      	cmp	r1, r3
 80137cc:	d1b4      	bne.n	8013738 <_strtod_l+0x9e8>
 80137ce:	ec51 0b1d 	vmov	r0, r1, d13
 80137d2:	f7ec ff99 	bl	8000708 <__aeabi_d2lz>
 80137d6:	f7ec ff69 	bl	80006ac <__aeabi_l2d>
 80137da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80137de:	ec41 0b17 	vmov	d7, r0, r1
 80137e2:	ea43 0308 	orr.w	r3, r3, r8
 80137e6:	ea53 030a 	orrs.w	r3, r3, sl
 80137ea:	ee3d db47 	vsub.f64	d13, d13, d7
 80137ee:	d03c      	beq.n	801386a <_strtod_l+0xb1a>
 80137f0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80137f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137f8:	f53f acf0 	bmi.w	80131dc <_strtod_l+0x48c>
 80137fc:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8013800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013804:	dd98      	ble.n	8013738 <_strtod_l+0x9e8>
 8013806:	e4e9      	b.n	80131dc <_strtod_l+0x48c>
 8013808:	9804      	ldr	r0, [sp, #16]
 801380a:	b1f0      	cbz	r0, 801384a <_strtod_l+0xafa>
 801380c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8013810:	d81b      	bhi.n	801384a <_strtod_l+0xafa>
 8013812:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013898 <_strtod_l+0xb48>
 8013816:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801381e:	d811      	bhi.n	8013844 <_strtod_l+0xaf4>
 8013820:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8013824:	ee1d 3a10 	vmov	r3, s26
 8013828:	2b01      	cmp	r3, #1
 801382a:	bf38      	it	cc
 801382c:	2301      	movcc	r3, #1
 801382e:	ee0d 3a10 	vmov	s26, r3
 8013832:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8013836:	f1ba 0f00 	cmp.w	sl, #0
 801383a:	d113      	bne.n	8013864 <_strtod_l+0xb14>
 801383c:	eeb1 7b4d 	vneg.f64	d7, d13
 8013840:	ec53 2b17 	vmov	r2, r3, d7
 8013844:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8013848:	1a43      	subs	r3, r0, r1
 801384a:	eeb0 0b48 	vmov.f64	d0, d8
 801384e:	ec43 2b1c 	vmov	d12, r2, r3
 8013852:	910a      	str	r1, [sp, #40]	; 0x28
 8013854:	f002 f8f4 	bl	8015a40 <__ulp>
 8013858:	990a      	ldr	r1, [sp, #40]	; 0x28
 801385a:	eeac 8b00 	vfma.f64	d8, d12, d0
 801385e:	ec59 8b18 	vmov	r8, r9, d8
 8013862:	e7ab      	b.n	80137bc <_strtod_l+0xa6c>
 8013864:	eeb0 7b4d 	vmov.f64	d7, d13
 8013868:	e7ea      	b.n	8013840 <_strtod_l+0xaf0>
 801386a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801386e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013872:	f57f af61 	bpl.w	8013738 <_strtod_l+0x9e8>
 8013876:	e4b1      	b.n	80131dc <_strtod_l+0x48c>
 8013878:	2300      	movs	r3, #0
 801387a:	9308      	str	r3, [sp, #32]
 801387c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801387e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013880:	6013      	str	r3, [r2, #0]
 8013882:	f7ff baad 	b.w	8012de0 <_strtod_l+0x90>
 8013886:	2a65      	cmp	r2, #101	; 0x65
 8013888:	f43f ab9f 	beq.w	8012fca <_strtod_l+0x27a>
 801388c:	2a45      	cmp	r2, #69	; 0x45
 801388e:	f43f ab9c 	beq.w	8012fca <_strtod_l+0x27a>
 8013892:	2101      	movs	r1, #1
 8013894:	f7ff bbd4 	b.w	8013040 <_strtod_l+0x2f0>
 8013898:	ffc00000 	.word	0xffc00000
 801389c:	41dfffff 	.word	0x41dfffff
 80138a0:	000fffff 	.word	0x000fffff
 80138a4:	7ff00000 	.word	0x7ff00000
 80138a8:	7fefffff 	.word	0x7fefffff
 80138ac:	3ff00000 	.word	0x3ff00000
 80138b0:	7c9fffff 	.word	0x7c9fffff
 80138b4:	bff00000 	.word	0xbff00000
 80138b8:	7fe00000 	.word	0x7fe00000

080138bc <_strtod_r>:
 80138bc:	4b01      	ldr	r3, [pc, #4]	; (80138c4 <_strtod_r+0x8>)
 80138be:	f7ff ba47 	b.w	8012d50 <_strtod_l>
 80138c2:	bf00      	nop
 80138c4:	24000c14 	.word	0x24000c14

080138c8 <_strtol_l.constprop.0>:
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138ce:	d001      	beq.n	80138d4 <_strtol_l.constprop.0+0xc>
 80138d0:	2b24      	cmp	r3, #36	; 0x24
 80138d2:	d906      	bls.n	80138e2 <_strtol_l.constprop.0+0x1a>
 80138d4:	f7fe f9c0 	bl	8011c58 <__errno>
 80138d8:	2316      	movs	r3, #22
 80138da:	6003      	str	r3, [r0, #0]
 80138dc:	2000      	movs	r0, #0
 80138de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80139c8 <_strtol_l.constprop.0+0x100>
 80138e6:	460d      	mov	r5, r1
 80138e8:	462e      	mov	r6, r5
 80138ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80138f2:	f017 0708 	ands.w	r7, r7, #8
 80138f6:	d1f7      	bne.n	80138e8 <_strtol_l.constprop.0+0x20>
 80138f8:	2c2d      	cmp	r4, #45	; 0x2d
 80138fa:	d132      	bne.n	8013962 <_strtol_l.constprop.0+0x9a>
 80138fc:	782c      	ldrb	r4, [r5, #0]
 80138fe:	2701      	movs	r7, #1
 8013900:	1cb5      	adds	r5, r6, #2
 8013902:	2b00      	cmp	r3, #0
 8013904:	d05b      	beq.n	80139be <_strtol_l.constprop.0+0xf6>
 8013906:	2b10      	cmp	r3, #16
 8013908:	d109      	bne.n	801391e <_strtol_l.constprop.0+0x56>
 801390a:	2c30      	cmp	r4, #48	; 0x30
 801390c:	d107      	bne.n	801391e <_strtol_l.constprop.0+0x56>
 801390e:	782c      	ldrb	r4, [r5, #0]
 8013910:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013914:	2c58      	cmp	r4, #88	; 0x58
 8013916:	d14d      	bne.n	80139b4 <_strtol_l.constprop.0+0xec>
 8013918:	786c      	ldrb	r4, [r5, #1]
 801391a:	2310      	movs	r3, #16
 801391c:	3502      	adds	r5, #2
 801391e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013922:	f108 38ff 	add.w	r8, r8, #4294967295
 8013926:	f04f 0c00 	mov.w	ip, #0
 801392a:	fbb8 f9f3 	udiv	r9, r8, r3
 801392e:	4666      	mov	r6, ip
 8013930:	fb03 8a19 	mls	sl, r3, r9, r8
 8013934:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8013938:	f1be 0f09 	cmp.w	lr, #9
 801393c:	d816      	bhi.n	801396c <_strtol_l.constprop.0+0xa4>
 801393e:	4674      	mov	r4, lr
 8013940:	42a3      	cmp	r3, r4
 8013942:	dd24      	ble.n	801398e <_strtol_l.constprop.0+0xc6>
 8013944:	f1bc 0f00 	cmp.w	ip, #0
 8013948:	db1e      	blt.n	8013988 <_strtol_l.constprop.0+0xc0>
 801394a:	45b1      	cmp	r9, r6
 801394c:	d31c      	bcc.n	8013988 <_strtol_l.constprop.0+0xc0>
 801394e:	d101      	bne.n	8013954 <_strtol_l.constprop.0+0x8c>
 8013950:	45a2      	cmp	sl, r4
 8013952:	db19      	blt.n	8013988 <_strtol_l.constprop.0+0xc0>
 8013954:	fb06 4603 	mla	r6, r6, r3, r4
 8013958:	f04f 0c01 	mov.w	ip, #1
 801395c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013960:	e7e8      	b.n	8013934 <_strtol_l.constprop.0+0x6c>
 8013962:	2c2b      	cmp	r4, #43	; 0x2b
 8013964:	bf04      	itt	eq
 8013966:	782c      	ldrbeq	r4, [r5, #0]
 8013968:	1cb5      	addeq	r5, r6, #2
 801396a:	e7ca      	b.n	8013902 <_strtol_l.constprop.0+0x3a>
 801396c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8013970:	f1be 0f19 	cmp.w	lr, #25
 8013974:	d801      	bhi.n	801397a <_strtol_l.constprop.0+0xb2>
 8013976:	3c37      	subs	r4, #55	; 0x37
 8013978:	e7e2      	b.n	8013940 <_strtol_l.constprop.0+0x78>
 801397a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801397e:	f1be 0f19 	cmp.w	lr, #25
 8013982:	d804      	bhi.n	801398e <_strtol_l.constprop.0+0xc6>
 8013984:	3c57      	subs	r4, #87	; 0x57
 8013986:	e7db      	b.n	8013940 <_strtol_l.constprop.0+0x78>
 8013988:	f04f 3cff 	mov.w	ip, #4294967295
 801398c:	e7e6      	b.n	801395c <_strtol_l.constprop.0+0x94>
 801398e:	f1bc 0f00 	cmp.w	ip, #0
 8013992:	da05      	bge.n	80139a0 <_strtol_l.constprop.0+0xd8>
 8013994:	2322      	movs	r3, #34	; 0x22
 8013996:	6003      	str	r3, [r0, #0]
 8013998:	4646      	mov	r6, r8
 801399a:	b942      	cbnz	r2, 80139ae <_strtol_l.constprop.0+0xe6>
 801399c:	4630      	mov	r0, r6
 801399e:	e79e      	b.n	80138de <_strtol_l.constprop.0+0x16>
 80139a0:	b107      	cbz	r7, 80139a4 <_strtol_l.constprop.0+0xdc>
 80139a2:	4276      	negs	r6, r6
 80139a4:	2a00      	cmp	r2, #0
 80139a6:	d0f9      	beq.n	801399c <_strtol_l.constprop.0+0xd4>
 80139a8:	f1bc 0f00 	cmp.w	ip, #0
 80139ac:	d000      	beq.n	80139b0 <_strtol_l.constprop.0+0xe8>
 80139ae:	1e69      	subs	r1, r5, #1
 80139b0:	6011      	str	r1, [r2, #0]
 80139b2:	e7f3      	b.n	801399c <_strtol_l.constprop.0+0xd4>
 80139b4:	2430      	movs	r4, #48	; 0x30
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d1b1      	bne.n	801391e <_strtol_l.constprop.0+0x56>
 80139ba:	2308      	movs	r3, #8
 80139bc:	e7af      	b.n	801391e <_strtol_l.constprop.0+0x56>
 80139be:	2c30      	cmp	r4, #48	; 0x30
 80139c0:	d0a5      	beq.n	801390e <_strtol_l.constprop.0+0x46>
 80139c2:	230a      	movs	r3, #10
 80139c4:	e7ab      	b.n	801391e <_strtol_l.constprop.0+0x56>
 80139c6:	bf00      	nop
 80139c8:	0801851d 	.word	0x0801851d

080139cc <_strtol_r>:
 80139cc:	f7ff bf7c 	b.w	80138c8 <_strtol_l.constprop.0>

080139d0 <time>:
 80139d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139d2:	4b0b      	ldr	r3, [pc, #44]	; (8013a00 <time+0x30>)
 80139d4:	2200      	movs	r2, #0
 80139d6:	4669      	mov	r1, sp
 80139d8:	4604      	mov	r4, r0
 80139da:	6818      	ldr	r0, [r3, #0]
 80139dc:	f001 fc22 	bl	8015224 <_gettimeofday_r>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	bfbe      	ittt	lt
 80139e4:	f04f 32ff 	movlt.w	r2, #4294967295
 80139e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80139ec:	e9cd 2300 	strdlt	r2, r3, [sp]
 80139f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80139f4:	b10c      	cbz	r4, 80139fa <time+0x2a>
 80139f6:	e9c4 0100 	strd	r0, r1, [r4]
 80139fa:	b004      	add	sp, #16
 80139fc:	bd10      	pop	{r4, pc}
 80139fe:	bf00      	nop
 8013a00:	24000bac 	.word	0x24000bac

08013a04 <__swbuf_r>:
 8013a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a06:	460e      	mov	r6, r1
 8013a08:	4614      	mov	r4, r2
 8013a0a:	4605      	mov	r5, r0
 8013a0c:	b118      	cbz	r0, 8013a16 <__swbuf_r+0x12>
 8013a0e:	6983      	ldr	r3, [r0, #24]
 8013a10:	b90b      	cbnz	r3, 8013a16 <__swbuf_r+0x12>
 8013a12:	f000 ffe9 	bl	80149e8 <__sinit>
 8013a16:	4b21      	ldr	r3, [pc, #132]	; (8013a9c <__swbuf_r+0x98>)
 8013a18:	429c      	cmp	r4, r3
 8013a1a:	d12b      	bne.n	8013a74 <__swbuf_r+0x70>
 8013a1c:	686c      	ldr	r4, [r5, #4]
 8013a1e:	69a3      	ldr	r3, [r4, #24]
 8013a20:	60a3      	str	r3, [r4, #8]
 8013a22:	89a3      	ldrh	r3, [r4, #12]
 8013a24:	071a      	lsls	r2, r3, #28
 8013a26:	d52f      	bpl.n	8013a88 <__swbuf_r+0x84>
 8013a28:	6923      	ldr	r3, [r4, #16]
 8013a2a:	b36b      	cbz	r3, 8013a88 <__swbuf_r+0x84>
 8013a2c:	6923      	ldr	r3, [r4, #16]
 8013a2e:	6820      	ldr	r0, [r4, #0]
 8013a30:	1ac0      	subs	r0, r0, r3
 8013a32:	6963      	ldr	r3, [r4, #20]
 8013a34:	b2f6      	uxtb	r6, r6
 8013a36:	4283      	cmp	r3, r0
 8013a38:	4637      	mov	r7, r6
 8013a3a:	dc04      	bgt.n	8013a46 <__swbuf_r+0x42>
 8013a3c:	4621      	mov	r1, r4
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f000 ff3e 	bl	80148c0 <_fflush_r>
 8013a44:	bb30      	cbnz	r0, 8013a94 <__swbuf_r+0x90>
 8013a46:	68a3      	ldr	r3, [r4, #8]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	60a3      	str	r3, [r4, #8]
 8013a4c:	6823      	ldr	r3, [r4, #0]
 8013a4e:	1c5a      	adds	r2, r3, #1
 8013a50:	6022      	str	r2, [r4, #0]
 8013a52:	701e      	strb	r6, [r3, #0]
 8013a54:	6963      	ldr	r3, [r4, #20]
 8013a56:	3001      	adds	r0, #1
 8013a58:	4283      	cmp	r3, r0
 8013a5a:	d004      	beq.n	8013a66 <__swbuf_r+0x62>
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	07db      	lsls	r3, r3, #31
 8013a60:	d506      	bpl.n	8013a70 <__swbuf_r+0x6c>
 8013a62:	2e0a      	cmp	r6, #10
 8013a64:	d104      	bne.n	8013a70 <__swbuf_r+0x6c>
 8013a66:	4621      	mov	r1, r4
 8013a68:	4628      	mov	r0, r5
 8013a6a:	f000 ff29 	bl	80148c0 <_fflush_r>
 8013a6e:	b988      	cbnz	r0, 8013a94 <__swbuf_r+0x90>
 8013a70:	4638      	mov	r0, r7
 8013a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a74:	4b0a      	ldr	r3, [pc, #40]	; (8013aa0 <__swbuf_r+0x9c>)
 8013a76:	429c      	cmp	r4, r3
 8013a78:	d101      	bne.n	8013a7e <__swbuf_r+0x7a>
 8013a7a:	68ac      	ldr	r4, [r5, #8]
 8013a7c:	e7cf      	b.n	8013a1e <__swbuf_r+0x1a>
 8013a7e:	4b09      	ldr	r3, [pc, #36]	; (8013aa4 <__swbuf_r+0xa0>)
 8013a80:	429c      	cmp	r4, r3
 8013a82:	bf08      	it	eq
 8013a84:	68ec      	ldreq	r4, [r5, #12]
 8013a86:	e7ca      	b.n	8013a1e <__swbuf_r+0x1a>
 8013a88:	4621      	mov	r1, r4
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f000 f80c 	bl	8013aa8 <__swsetup_r>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d0cb      	beq.n	8013a2c <__swbuf_r+0x28>
 8013a94:	f04f 37ff 	mov.w	r7, #4294967295
 8013a98:	e7ea      	b.n	8013a70 <__swbuf_r+0x6c>
 8013a9a:	bf00      	nop
 8013a9c:	080186b8 	.word	0x080186b8
 8013aa0:	080186d8 	.word	0x080186d8
 8013aa4:	08018698 	.word	0x08018698

08013aa8 <__swsetup_r>:
 8013aa8:	4b32      	ldr	r3, [pc, #200]	; (8013b74 <__swsetup_r+0xcc>)
 8013aaa:	b570      	push	{r4, r5, r6, lr}
 8013aac:	681d      	ldr	r5, [r3, #0]
 8013aae:	4606      	mov	r6, r0
 8013ab0:	460c      	mov	r4, r1
 8013ab2:	b125      	cbz	r5, 8013abe <__swsetup_r+0x16>
 8013ab4:	69ab      	ldr	r3, [r5, #24]
 8013ab6:	b913      	cbnz	r3, 8013abe <__swsetup_r+0x16>
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f000 ff95 	bl	80149e8 <__sinit>
 8013abe:	4b2e      	ldr	r3, [pc, #184]	; (8013b78 <__swsetup_r+0xd0>)
 8013ac0:	429c      	cmp	r4, r3
 8013ac2:	d10f      	bne.n	8013ae4 <__swsetup_r+0x3c>
 8013ac4:	686c      	ldr	r4, [r5, #4]
 8013ac6:	89a3      	ldrh	r3, [r4, #12]
 8013ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013acc:	0719      	lsls	r1, r3, #28
 8013ace:	d42c      	bmi.n	8013b2a <__swsetup_r+0x82>
 8013ad0:	06dd      	lsls	r5, r3, #27
 8013ad2:	d411      	bmi.n	8013af8 <__swsetup_r+0x50>
 8013ad4:	2309      	movs	r3, #9
 8013ad6:	6033      	str	r3, [r6, #0]
 8013ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013adc:	81a3      	strh	r3, [r4, #12]
 8013ade:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae2:	e03e      	b.n	8013b62 <__swsetup_r+0xba>
 8013ae4:	4b25      	ldr	r3, [pc, #148]	; (8013b7c <__swsetup_r+0xd4>)
 8013ae6:	429c      	cmp	r4, r3
 8013ae8:	d101      	bne.n	8013aee <__swsetup_r+0x46>
 8013aea:	68ac      	ldr	r4, [r5, #8]
 8013aec:	e7eb      	b.n	8013ac6 <__swsetup_r+0x1e>
 8013aee:	4b24      	ldr	r3, [pc, #144]	; (8013b80 <__swsetup_r+0xd8>)
 8013af0:	429c      	cmp	r4, r3
 8013af2:	bf08      	it	eq
 8013af4:	68ec      	ldreq	r4, [r5, #12]
 8013af6:	e7e6      	b.n	8013ac6 <__swsetup_r+0x1e>
 8013af8:	0758      	lsls	r0, r3, #29
 8013afa:	d512      	bpl.n	8013b22 <__swsetup_r+0x7a>
 8013afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013afe:	b141      	cbz	r1, 8013b12 <__swsetup_r+0x6a>
 8013b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b04:	4299      	cmp	r1, r3
 8013b06:	d002      	beq.n	8013b0e <__swsetup_r+0x66>
 8013b08:	4630      	mov	r0, r6
 8013b0a:	f7fe f8ed 	bl	8011ce8 <_free_r>
 8013b0e:	2300      	movs	r3, #0
 8013b10:	6363      	str	r3, [r4, #52]	; 0x34
 8013b12:	89a3      	ldrh	r3, [r4, #12]
 8013b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b18:	81a3      	strh	r3, [r4, #12]
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	6063      	str	r3, [r4, #4]
 8013b1e:	6923      	ldr	r3, [r4, #16]
 8013b20:	6023      	str	r3, [r4, #0]
 8013b22:	89a3      	ldrh	r3, [r4, #12]
 8013b24:	f043 0308 	orr.w	r3, r3, #8
 8013b28:	81a3      	strh	r3, [r4, #12]
 8013b2a:	6923      	ldr	r3, [r4, #16]
 8013b2c:	b94b      	cbnz	r3, 8013b42 <__swsetup_r+0x9a>
 8013b2e:	89a3      	ldrh	r3, [r4, #12]
 8013b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b38:	d003      	beq.n	8013b42 <__swsetup_r+0x9a>
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f001 fbaf 	bl	80152a0 <__smakebuf_r>
 8013b42:	89a0      	ldrh	r0, [r4, #12]
 8013b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b48:	f010 0301 	ands.w	r3, r0, #1
 8013b4c:	d00a      	beq.n	8013b64 <__swsetup_r+0xbc>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60a3      	str	r3, [r4, #8]
 8013b52:	6963      	ldr	r3, [r4, #20]
 8013b54:	425b      	negs	r3, r3
 8013b56:	61a3      	str	r3, [r4, #24]
 8013b58:	6923      	ldr	r3, [r4, #16]
 8013b5a:	b943      	cbnz	r3, 8013b6e <__swsetup_r+0xc6>
 8013b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b60:	d1ba      	bne.n	8013ad8 <__swsetup_r+0x30>
 8013b62:	bd70      	pop	{r4, r5, r6, pc}
 8013b64:	0781      	lsls	r1, r0, #30
 8013b66:	bf58      	it	pl
 8013b68:	6963      	ldrpl	r3, [r4, #20]
 8013b6a:	60a3      	str	r3, [r4, #8]
 8013b6c:	e7f4      	b.n	8013b58 <__swsetup_r+0xb0>
 8013b6e:	2000      	movs	r0, #0
 8013b70:	e7f7      	b.n	8013b62 <__swsetup_r+0xba>
 8013b72:	bf00      	nop
 8013b74:	24000bac 	.word	0x24000bac
 8013b78:	080186b8 	.word	0x080186b8
 8013b7c:	080186d8 	.word	0x080186d8
 8013b80:	08018698 	.word	0x08018698

08013b84 <__assert_func>:
 8013b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b86:	4614      	mov	r4, r2
 8013b88:	461a      	mov	r2, r3
 8013b8a:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <__assert_func+0x2c>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	4605      	mov	r5, r0
 8013b90:	68d8      	ldr	r0, [r3, #12]
 8013b92:	b14c      	cbz	r4, 8013ba8 <__assert_func+0x24>
 8013b94:	4b07      	ldr	r3, [pc, #28]	; (8013bb4 <__assert_func+0x30>)
 8013b96:	9100      	str	r1, [sp, #0]
 8013b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b9c:	4906      	ldr	r1, [pc, #24]	; (8013bb8 <__assert_func+0x34>)
 8013b9e:	462b      	mov	r3, r5
 8013ba0:	f000 ffa0 	bl	8014ae4 <fiprintf>
 8013ba4:	f002 fc12 	bl	80163cc <abort>
 8013ba8:	4b04      	ldr	r3, [pc, #16]	; (8013bbc <__assert_func+0x38>)
 8013baa:	461c      	mov	r4, r3
 8013bac:	e7f3      	b.n	8013b96 <__assert_func+0x12>
 8013bae:	bf00      	nop
 8013bb0:	24000bac 	.word	0x24000bac
 8013bb4:	080184e0 	.word	0x080184e0
 8013bb8:	080184ed 	.word	0x080184ed
 8013bbc:	0801851b 	.word	0x0801851b

08013bc0 <quorem>:
 8013bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc4:	6903      	ldr	r3, [r0, #16]
 8013bc6:	690c      	ldr	r4, [r1, #16]
 8013bc8:	42a3      	cmp	r3, r4
 8013bca:	4607      	mov	r7, r0
 8013bcc:	f2c0 8081 	blt.w	8013cd2 <quorem+0x112>
 8013bd0:	3c01      	subs	r4, #1
 8013bd2:	f101 0814 	add.w	r8, r1, #20
 8013bd6:	f100 0514 	add.w	r5, r0, #20
 8013bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013be8:	3301      	adds	r3, #1
 8013bea:	429a      	cmp	r2, r3
 8013bec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013bf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8013bf8:	d331      	bcc.n	8013c5e <quorem+0x9e>
 8013bfa:	f04f 0e00 	mov.w	lr, #0
 8013bfe:	4640      	mov	r0, r8
 8013c00:	46ac      	mov	ip, r5
 8013c02:	46f2      	mov	sl, lr
 8013c04:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c08:	b293      	uxth	r3, r2
 8013c0a:	fb06 e303 	mla	r3, r6, r3, lr
 8013c0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	ebaa 0303 	sub.w	r3, sl, r3
 8013c18:	f8dc a000 	ldr.w	sl, [ip]
 8013c1c:	0c12      	lsrs	r2, r2, #16
 8013c1e:	fa13 f38a 	uxtah	r3, r3, sl
 8013c22:	fb06 e202 	mla	r2, r6, r2, lr
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	9b00      	ldr	r3, [sp, #0]
 8013c2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013c2e:	b292      	uxth	r2, r2
 8013c30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013c34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c38:	f8bd 3000 	ldrh.w	r3, [sp]
 8013c3c:	4581      	cmp	r9, r0
 8013c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c42:	f84c 3b04 	str.w	r3, [ip], #4
 8013c46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013c4a:	d2db      	bcs.n	8013c04 <quorem+0x44>
 8013c4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013c50:	b92b      	cbnz	r3, 8013c5e <quorem+0x9e>
 8013c52:	9b01      	ldr	r3, [sp, #4]
 8013c54:	3b04      	subs	r3, #4
 8013c56:	429d      	cmp	r5, r3
 8013c58:	461a      	mov	r2, r3
 8013c5a:	d32e      	bcc.n	8013cba <quorem+0xfa>
 8013c5c:	613c      	str	r4, [r7, #16]
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f001 fe48 	bl	80158f4 <__mcmp>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	db24      	blt.n	8013cb2 <quorem+0xf2>
 8013c68:	3601      	adds	r6, #1
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	f04f 0c00 	mov.w	ip, #0
 8013c70:	f858 2b04 	ldr.w	r2, [r8], #4
 8013c74:	f8d0 e000 	ldr.w	lr, [r0]
 8013c78:	b293      	uxth	r3, r2
 8013c7a:	ebac 0303 	sub.w	r3, ip, r3
 8013c7e:	0c12      	lsrs	r2, r2, #16
 8013c80:	fa13 f38e 	uxtah	r3, r3, lr
 8013c84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c8c:	b29b      	uxth	r3, r3
 8013c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c92:	45c1      	cmp	r9, r8
 8013c94:	f840 3b04 	str.w	r3, [r0], #4
 8013c98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013c9c:	d2e8      	bcs.n	8013c70 <quorem+0xb0>
 8013c9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013ca6:	b922      	cbnz	r2, 8013cb2 <quorem+0xf2>
 8013ca8:	3b04      	subs	r3, #4
 8013caa:	429d      	cmp	r5, r3
 8013cac:	461a      	mov	r2, r3
 8013cae:	d30a      	bcc.n	8013cc6 <quorem+0x106>
 8013cb0:	613c      	str	r4, [r7, #16]
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	b003      	add	sp, #12
 8013cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cba:	6812      	ldr	r2, [r2, #0]
 8013cbc:	3b04      	subs	r3, #4
 8013cbe:	2a00      	cmp	r2, #0
 8013cc0:	d1cc      	bne.n	8013c5c <quorem+0x9c>
 8013cc2:	3c01      	subs	r4, #1
 8013cc4:	e7c7      	b.n	8013c56 <quorem+0x96>
 8013cc6:	6812      	ldr	r2, [r2, #0]
 8013cc8:	3b04      	subs	r3, #4
 8013cca:	2a00      	cmp	r2, #0
 8013ccc:	d1f0      	bne.n	8013cb0 <quorem+0xf0>
 8013cce:	3c01      	subs	r4, #1
 8013cd0:	e7eb      	b.n	8013caa <quorem+0xea>
 8013cd2:	2000      	movs	r0, #0
 8013cd4:	e7ee      	b.n	8013cb4 <quorem+0xf4>
	...

08013cd8 <_dtoa_r>:
 8013cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cdc:	ed2d 8b02 	vpush	{d8}
 8013ce0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013ce2:	b091      	sub	sp, #68	; 0x44
 8013ce4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013ce8:	ec59 8b10 	vmov	r8, r9, d0
 8013cec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013cee:	9106      	str	r1, [sp, #24]
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	9208      	str	r2, [sp, #32]
 8013cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8013cf6:	b975      	cbnz	r5, 8013d16 <_dtoa_r+0x3e>
 8013cf8:	2010      	movs	r0, #16
 8013cfa:	f7fd ffd7 	bl	8011cac <malloc>
 8013cfe:	4602      	mov	r2, r0
 8013d00:	6270      	str	r0, [r6, #36]	; 0x24
 8013d02:	b920      	cbnz	r0, 8013d0e <_dtoa_r+0x36>
 8013d04:	4baa      	ldr	r3, [pc, #680]	; (8013fb0 <_dtoa_r+0x2d8>)
 8013d06:	21ea      	movs	r1, #234	; 0xea
 8013d08:	48aa      	ldr	r0, [pc, #680]	; (8013fb4 <_dtoa_r+0x2dc>)
 8013d0a:	f7ff ff3b 	bl	8013b84 <__assert_func>
 8013d0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d12:	6005      	str	r5, [r0, #0]
 8013d14:	60c5      	str	r5, [r0, #12]
 8013d16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013d18:	6819      	ldr	r1, [r3, #0]
 8013d1a:	b151      	cbz	r1, 8013d32 <_dtoa_r+0x5a>
 8013d1c:	685a      	ldr	r2, [r3, #4]
 8013d1e:	604a      	str	r2, [r1, #4]
 8013d20:	2301      	movs	r3, #1
 8013d22:	4093      	lsls	r3, r2
 8013d24:	608b      	str	r3, [r1, #8]
 8013d26:	4630      	mov	r0, r6
 8013d28:	f001 fb58 	bl	80153dc <_Bfree>
 8013d2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013d2e:	2200      	movs	r2, #0
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	f1b9 0300 	subs.w	r3, r9, #0
 8013d36:	bfbb      	ittet	lt
 8013d38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013d3c:	9303      	strlt	r3, [sp, #12]
 8013d3e:	2300      	movge	r3, #0
 8013d40:	2201      	movlt	r2, #1
 8013d42:	bfac      	ite	ge
 8013d44:	6023      	strge	r3, [r4, #0]
 8013d46:	6022      	strlt	r2, [r4, #0]
 8013d48:	4b9b      	ldr	r3, [pc, #620]	; (8013fb8 <_dtoa_r+0x2e0>)
 8013d4a:	9c03      	ldr	r4, [sp, #12]
 8013d4c:	43a3      	bics	r3, r4
 8013d4e:	d11c      	bne.n	8013d8a <_dtoa_r+0xb2>
 8013d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d52:	f242 730f 	movw	r3, #9999	; 0x270f
 8013d56:	6013      	str	r3, [r2, #0]
 8013d58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013d5c:	ea53 0308 	orrs.w	r3, r3, r8
 8013d60:	f000 84fd 	beq.w	801475e <_dtoa_r+0xa86>
 8013d64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d66:	b963      	cbnz	r3, 8013d82 <_dtoa_r+0xaa>
 8013d68:	4b94      	ldr	r3, [pc, #592]	; (8013fbc <_dtoa_r+0x2e4>)
 8013d6a:	e01f      	b.n	8013dac <_dtoa_r+0xd4>
 8013d6c:	4b94      	ldr	r3, [pc, #592]	; (8013fc0 <_dtoa_r+0x2e8>)
 8013d6e:	9301      	str	r3, [sp, #4]
 8013d70:	3308      	adds	r3, #8
 8013d72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013d74:	6013      	str	r3, [r2, #0]
 8013d76:	9801      	ldr	r0, [sp, #4]
 8013d78:	b011      	add	sp, #68	; 0x44
 8013d7a:	ecbd 8b02 	vpop	{d8}
 8013d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d82:	4b8e      	ldr	r3, [pc, #568]	; (8013fbc <_dtoa_r+0x2e4>)
 8013d84:	9301      	str	r3, [sp, #4]
 8013d86:	3303      	adds	r3, #3
 8013d88:	e7f3      	b.n	8013d72 <_dtoa_r+0x9a>
 8013d8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013d8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d96:	d10b      	bne.n	8013db0 <_dtoa_r+0xd8>
 8013d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	6013      	str	r3, [r2, #0]
 8013d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	f000 84d9 	beq.w	8014758 <_dtoa_r+0xa80>
 8013da6:	4887      	ldr	r0, [pc, #540]	; (8013fc4 <_dtoa_r+0x2ec>)
 8013da8:	6018      	str	r0, [r3, #0]
 8013daa:	1e43      	subs	r3, r0, #1
 8013dac:	9301      	str	r3, [sp, #4]
 8013dae:	e7e2      	b.n	8013d76 <_dtoa_r+0x9e>
 8013db0:	a90f      	add	r1, sp, #60	; 0x3c
 8013db2:	aa0e      	add	r2, sp, #56	; 0x38
 8013db4:	4630      	mov	r0, r6
 8013db6:	eeb0 0b48 	vmov.f64	d0, d8
 8013dba:	f001 febd 	bl	8015b38 <__d2b>
 8013dbe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013dc6:	2900      	cmp	r1, #0
 8013dc8:	d046      	beq.n	8013e58 <_dtoa_r+0x180>
 8013dca:	ee18 4a90 	vmov	r4, s17
 8013dce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013dd2:	ec53 2b18 	vmov	r2, r3, d8
 8013dd6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013dda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013dde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013de2:	2400      	movs	r4, #0
 8013de4:	ec43 2b16 	vmov	d6, r2, r3
 8013de8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013dec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013f98 <_dtoa_r+0x2c0>
 8013df0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013df4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013fa0 <_dtoa_r+0x2c8>
 8013df8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013dfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013fa8 <_dtoa_r+0x2d0>
 8013e00:	ee07 1a90 	vmov	s15, r1
 8013e04:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013e08:	eeb0 7b46 	vmov.f64	d7, d6
 8013e0c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013e10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013e14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	ee16 ba90 	vmov	fp, s13
 8013e20:	940a      	str	r4, [sp, #40]	; 0x28
 8013e22:	d508      	bpl.n	8013e36 <_dtoa_r+0x15e>
 8013e24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013e28:	eeb4 6b47 	vcmp.f64	d6, d7
 8013e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e30:	bf18      	it	ne
 8013e32:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013e36:	f1bb 0f16 	cmp.w	fp, #22
 8013e3a:	d82f      	bhi.n	8013e9c <_dtoa_r+0x1c4>
 8013e3c:	4b62      	ldr	r3, [pc, #392]	; (8013fc8 <_dtoa_r+0x2f0>)
 8013e3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013e42:	ed93 7b00 	vldr	d7, [r3]
 8013e46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4e:	d501      	bpl.n	8013e54 <_dtoa_r+0x17c>
 8013e50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013e54:	2300      	movs	r3, #0
 8013e56:	e022      	b.n	8013e9e <_dtoa_r+0x1c6>
 8013e58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e5a:	4401      	add	r1, r0
 8013e5c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013e60:	2b20      	cmp	r3, #32
 8013e62:	bfc1      	itttt	gt
 8013e64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013e68:	fa04 f303 	lslgt.w	r3, r4, r3
 8013e6c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013e70:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013e74:	bfd6      	itet	le
 8013e76:	f1c3 0320 	rsble	r3, r3, #32
 8013e7a:	ea43 0808 	orrgt.w	r8, r3, r8
 8013e7e:	fa08 f803 	lslle.w	r8, r8, r3
 8013e82:	ee07 8a90 	vmov	s15, r8
 8013e86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013e8a:	3901      	subs	r1, #1
 8013e8c:	ee17 4a90 	vmov	r4, s15
 8013e90:	ec53 2b17 	vmov	r2, r3, d7
 8013e94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013e98:	2401      	movs	r4, #1
 8013e9a:	e7a3      	b.n	8013de4 <_dtoa_r+0x10c>
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ea0:	1a43      	subs	r3, r0, r1
 8013ea2:	1e5a      	subs	r2, r3, #1
 8013ea4:	bf45      	ittet	mi
 8013ea6:	f1c3 0301 	rsbmi	r3, r3, #1
 8013eaa:	9304      	strmi	r3, [sp, #16]
 8013eac:	2300      	movpl	r3, #0
 8013eae:	2300      	movmi	r3, #0
 8013eb0:	9205      	str	r2, [sp, #20]
 8013eb2:	bf54      	ite	pl
 8013eb4:	9304      	strpl	r3, [sp, #16]
 8013eb6:	9305      	strmi	r3, [sp, #20]
 8013eb8:	f1bb 0f00 	cmp.w	fp, #0
 8013ebc:	db18      	blt.n	8013ef0 <_dtoa_r+0x218>
 8013ebe:	9b05      	ldr	r3, [sp, #20]
 8013ec0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8013ec4:	445b      	add	r3, fp
 8013ec6:	9305      	str	r3, [sp, #20]
 8013ec8:	2300      	movs	r3, #0
 8013eca:	9a06      	ldr	r2, [sp, #24]
 8013ecc:	2a09      	cmp	r2, #9
 8013ece:	d849      	bhi.n	8013f64 <_dtoa_r+0x28c>
 8013ed0:	2a05      	cmp	r2, #5
 8013ed2:	bfc4      	itt	gt
 8013ed4:	3a04      	subgt	r2, #4
 8013ed6:	9206      	strgt	r2, [sp, #24]
 8013ed8:	9a06      	ldr	r2, [sp, #24]
 8013eda:	f1a2 0202 	sub.w	r2, r2, #2
 8013ede:	bfcc      	ite	gt
 8013ee0:	2400      	movgt	r4, #0
 8013ee2:	2401      	movle	r4, #1
 8013ee4:	2a03      	cmp	r2, #3
 8013ee6:	d848      	bhi.n	8013f7a <_dtoa_r+0x2a2>
 8013ee8:	e8df f002 	tbb	[pc, r2]
 8013eec:	3a2c2e0b 	.word	0x3a2c2e0b
 8013ef0:	9b04      	ldr	r3, [sp, #16]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	eba3 030b 	sub.w	r3, r3, fp
 8013ef8:	9304      	str	r3, [sp, #16]
 8013efa:	9209      	str	r2, [sp, #36]	; 0x24
 8013efc:	f1cb 0300 	rsb	r3, fp, #0
 8013f00:	e7e3      	b.n	8013eca <_dtoa_r+0x1f2>
 8013f02:	2200      	movs	r2, #0
 8013f04:	9207      	str	r2, [sp, #28]
 8013f06:	9a08      	ldr	r2, [sp, #32]
 8013f08:	2a00      	cmp	r2, #0
 8013f0a:	dc39      	bgt.n	8013f80 <_dtoa_r+0x2a8>
 8013f0c:	f04f 0a01 	mov.w	sl, #1
 8013f10:	46d1      	mov	r9, sl
 8013f12:	4652      	mov	r2, sl
 8013f14:	f8cd a020 	str.w	sl, [sp, #32]
 8013f18:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	6079      	str	r1, [r7, #4]
 8013f1e:	2004      	movs	r0, #4
 8013f20:	f100 0c14 	add.w	ip, r0, #20
 8013f24:	4594      	cmp	ip, r2
 8013f26:	6879      	ldr	r1, [r7, #4]
 8013f28:	d92f      	bls.n	8013f8a <_dtoa_r+0x2b2>
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8013f2e:	f001 fa15 	bl	801535c <_Balloc>
 8013f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f34:	9001      	str	r0, [sp, #4]
 8013f36:	4602      	mov	r2, r0
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	d149      	bne.n	8013fd0 <_dtoa_r+0x2f8>
 8013f3c:	4b23      	ldr	r3, [pc, #140]	; (8013fcc <_dtoa_r+0x2f4>)
 8013f3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013f42:	e6e1      	b.n	8013d08 <_dtoa_r+0x30>
 8013f44:	2201      	movs	r2, #1
 8013f46:	e7dd      	b.n	8013f04 <_dtoa_r+0x22c>
 8013f48:	2200      	movs	r2, #0
 8013f4a:	9207      	str	r2, [sp, #28]
 8013f4c:	9a08      	ldr	r2, [sp, #32]
 8013f4e:	eb0b 0a02 	add.w	sl, fp, r2
 8013f52:	f10a 0901 	add.w	r9, sl, #1
 8013f56:	464a      	mov	r2, r9
 8013f58:	2a01      	cmp	r2, #1
 8013f5a:	bfb8      	it	lt
 8013f5c:	2201      	movlt	r2, #1
 8013f5e:	e7db      	b.n	8013f18 <_dtoa_r+0x240>
 8013f60:	2201      	movs	r2, #1
 8013f62:	e7f2      	b.n	8013f4a <_dtoa_r+0x272>
 8013f64:	2401      	movs	r4, #1
 8013f66:	2200      	movs	r2, #0
 8013f68:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013f6c:	f04f 3aff 	mov.w	sl, #4294967295
 8013f70:	2100      	movs	r1, #0
 8013f72:	46d1      	mov	r9, sl
 8013f74:	2212      	movs	r2, #18
 8013f76:	9108      	str	r1, [sp, #32]
 8013f78:	e7ce      	b.n	8013f18 <_dtoa_r+0x240>
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	9207      	str	r2, [sp, #28]
 8013f7e:	e7f5      	b.n	8013f6c <_dtoa_r+0x294>
 8013f80:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013f84:	46d1      	mov	r9, sl
 8013f86:	4652      	mov	r2, sl
 8013f88:	e7c6      	b.n	8013f18 <_dtoa_r+0x240>
 8013f8a:	3101      	adds	r1, #1
 8013f8c:	6079      	str	r1, [r7, #4]
 8013f8e:	0040      	lsls	r0, r0, #1
 8013f90:	e7c6      	b.n	8013f20 <_dtoa_r+0x248>
 8013f92:	bf00      	nop
 8013f94:	f3af 8000 	nop.w
 8013f98:	636f4361 	.word	0x636f4361
 8013f9c:	3fd287a7 	.word	0x3fd287a7
 8013fa0:	8b60c8b3 	.word	0x8b60c8b3
 8013fa4:	3fc68a28 	.word	0x3fc68a28
 8013fa8:	509f79fb 	.word	0x509f79fb
 8013fac:	3fd34413 	.word	0x3fd34413
 8013fb0:	08018419 	.word	0x08018419
 8013fb4:	0801862a 	.word	0x0801862a
 8013fb8:	7ff00000 	.word	0x7ff00000
 8013fbc:	08018626 	.word	0x08018626
 8013fc0:	0801861d 	.word	0x0801861d
 8013fc4:	080183f1 	.word	0x080183f1
 8013fc8:	080187f8 	.word	0x080187f8
 8013fcc:	08018685 	.word	0x08018685
 8013fd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013fd2:	9901      	ldr	r1, [sp, #4]
 8013fd4:	6011      	str	r1, [r2, #0]
 8013fd6:	f1b9 0f0e 	cmp.w	r9, #14
 8013fda:	d86c      	bhi.n	80140b6 <_dtoa_r+0x3de>
 8013fdc:	2c00      	cmp	r4, #0
 8013fde:	d06a      	beq.n	80140b6 <_dtoa_r+0x3de>
 8013fe0:	f1bb 0f00 	cmp.w	fp, #0
 8013fe4:	f340 80a0 	ble.w	8014128 <_dtoa_r+0x450>
 8013fe8:	49c1      	ldr	r1, [pc, #772]	; (80142f0 <_dtoa_r+0x618>)
 8013fea:	f00b 020f 	and.w	r2, fp, #15
 8013fee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013ff2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013ff6:	ed92 7b00 	vldr	d7, [r2]
 8013ffa:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013ffe:	f000 8087 	beq.w	8014110 <_dtoa_r+0x438>
 8014002:	4abc      	ldr	r2, [pc, #752]	; (80142f4 <_dtoa_r+0x61c>)
 8014004:	ed92 6b08 	vldr	d6, [r2, #32]
 8014008:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801400c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014010:	f001 010f 	and.w	r1, r1, #15
 8014014:	2203      	movs	r2, #3
 8014016:	48b7      	ldr	r0, [pc, #732]	; (80142f4 <_dtoa_r+0x61c>)
 8014018:	2900      	cmp	r1, #0
 801401a:	d17b      	bne.n	8014114 <_dtoa_r+0x43c>
 801401c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014020:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014024:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801402a:	2900      	cmp	r1, #0
 801402c:	f000 80a2 	beq.w	8014174 <_dtoa_r+0x49c>
 8014030:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014034:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014038:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014040:	f140 8098 	bpl.w	8014174 <_dtoa_r+0x49c>
 8014044:	f1b9 0f00 	cmp.w	r9, #0
 8014048:	f000 8094 	beq.w	8014174 <_dtoa_r+0x49c>
 801404c:	f1ba 0f00 	cmp.w	sl, #0
 8014050:	dd2f      	ble.n	80140b2 <_dtoa_r+0x3da>
 8014052:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014056:	ee27 7b06 	vmul.f64	d7, d7, d6
 801405a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801405e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014062:	3201      	adds	r2, #1
 8014064:	4650      	mov	r0, sl
 8014066:	ed9d 6b02 	vldr	d6, [sp, #8]
 801406a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801406e:	ee07 2a90 	vmov	s15, r2
 8014072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014076:	eea7 5b06 	vfma.f64	d5, d7, d6
 801407a:	ee15 4a90 	vmov	r4, s11
 801407e:	ec52 1b15 	vmov	r1, r2, d5
 8014082:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8014086:	2800      	cmp	r0, #0
 8014088:	d177      	bne.n	801417a <_dtoa_r+0x4a2>
 801408a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801408e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014092:	ec42 1b17 	vmov	d7, r1, r2
 8014096:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409e:	f300 8263 	bgt.w	8014568 <_dtoa_r+0x890>
 80140a2:	eeb1 7b47 	vneg.f64	d7, d7
 80140a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80140aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ae:	f100 8258 	bmi.w	8014562 <_dtoa_r+0x88a>
 80140b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80140b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140b8:	2a00      	cmp	r2, #0
 80140ba:	f2c0 811d 	blt.w	80142f8 <_dtoa_r+0x620>
 80140be:	f1bb 0f0e 	cmp.w	fp, #14
 80140c2:	f300 8119 	bgt.w	80142f8 <_dtoa_r+0x620>
 80140c6:	4b8a      	ldr	r3, [pc, #552]	; (80142f0 <_dtoa_r+0x618>)
 80140c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80140cc:	ed93 6b00 	vldr	d6, [r3]
 80140d0:	9b08      	ldr	r3, [sp, #32]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f280 80b7 	bge.w	8014246 <_dtoa_r+0x56e>
 80140d8:	f1b9 0f00 	cmp.w	r9, #0
 80140dc:	f300 80b3 	bgt.w	8014246 <_dtoa_r+0x56e>
 80140e0:	f040 823f 	bne.w	8014562 <_dtoa_r+0x88a>
 80140e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80140e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80140ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80140f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80140f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140f8:	464c      	mov	r4, r9
 80140fa:	464f      	mov	r7, r9
 80140fc:	f280 8215 	bge.w	801452a <_dtoa_r+0x852>
 8014100:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014104:	2331      	movs	r3, #49	; 0x31
 8014106:	f808 3b01 	strb.w	r3, [r8], #1
 801410a:	f10b 0b01 	add.w	fp, fp, #1
 801410e:	e211      	b.n	8014534 <_dtoa_r+0x85c>
 8014110:	2202      	movs	r2, #2
 8014112:	e780      	b.n	8014016 <_dtoa_r+0x33e>
 8014114:	07cc      	lsls	r4, r1, #31
 8014116:	d504      	bpl.n	8014122 <_dtoa_r+0x44a>
 8014118:	ed90 6b00 	vldr	d6, [r0]
 801411c:	3201      	adds	r2, #1
 801411e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014122:	1049      	asrs	r1, r1, #1
 8014124:	3008      	adds	r0, #8
 8014126:	e777      	b.n	8014018 <_dtoa_r+0x340>
 8014128:	d022      	beq.n	8014170 <_dtoa_r+0x498>
 801412a:	f1cb 0100 	rsb	r1, fp, #0
 801412e:	4a70      	ldr	r2, [pc, #448]	; (80142f0 <_dtoa_r+0x618>)
 8014130:	f001 000f 	and.w	r0, r1, #15
 8014134:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014138:	ed92 7b00 	vldr	d7, [r2]
 801413c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014140:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014144:	486b      	ldr	r0, [pc, #428]	; (80142f4 <_dtoa_r+0x61c>)
 8014146:	1109      	asrs	r1, r1, #4
 8014148:	2400      	movs	r4, #0
 801414a:	2202      	movs	r2, #2
 801414c:	b929      	cbnz	r1, 801415a <_dtoa_r+0x482>
 801414e:	2c00      	cmp	r4, #0
 8014150:	f43f af6a 	beq.w	8014028 <_dtoa_r+0x350>
 8014154:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014158:	e766      	b.n	8014028 <_dtoa_r+0x350>
 801415a:	07cf      	lsls	r7, r1, #31
 801415c:	d505      	bpl.n	801416a <_dtoa_r+0x492>
 801415e:	ed90 6b00 	vldr	d6, [r0]
 8014162:	3201      	adds	r2, #1
 8014164:	2401      	movs	r4, #1
 8014166:	ee27 7b06 	vmul.f64	d7, d7, d6
 801416a:	1049      	asrs	r1, r1, #1
 801416c:	3008      	adds	r0, #8
 801416e:	e7ed      	b.n	801414c <_dtoa_r+0x474>
 8014170:	2202      	movs	r2, #2
 8014172:	e759      	b.n	8014028 <_dtoa_r+0x350>
 8014174:	465f      	mov	r7, fp
 8014176:	4648      	mov	r0, r9
 8014178:	e775      	b.n	8014066 <_dtoa_r+0x38e>
 801417a:	ec42 1b17 	vmov	d7, r1, r2
 801417e:	4a5c      	ldr	r2, [pc, #368]	; (80142f0 <_dtoa_r+0x618>)
 8014180:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014184:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014188:	9a01      	ldr	r2, [sp, #4]
 801418a:	1814      	adds	r4, r2, r0
 801418c:	9a07      	ldr	r2, [sp, #28]
 801418e:	b352      	cbz	r2, 80141e6 <_dtoa_r+0x50e>
 8014190:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014194:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014198:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801419c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80141a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80141a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80141a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80141ac:	ee14 2a90 	vmov	r2, s9
 80141b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80141b4:	3230      	adds	r2, #48	; 0x30
 80141b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80141ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80141be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c2:	f808 2b01 	strb.w	r2, [r8], #1
 80141c6:	d439      	bmi.n	801423c <_dtoa_r+0x564>
 80141c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80141cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80141d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d4:	d472      	bmi.n	80142bc <_dtoa_r+0x5e4>
 80141d6:	45a0      	cmp	r8, r4
 80141d8:	f43f af6b 	beq.w	80140b2 <_dtoa_r+0x3da>
 80141dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80141e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80141e4:	e7e0      	b.n	80141a8 <_dtoa_r+0x4d0>
 80141e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80141ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80141ee:	4621      	mov	r1, r4
 80141f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80141f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80141f8:	ee14 2a90 	vmov	r2, s9
 80141fc:	3230      	adds	r2, #48	; 0x30
 80141fe:	f808 2b01 	strb.w	r2, [r8], #1
 8014202:	45a0      	cmp	r8, r4
 8014204:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014208:	ee36 6b45 	vsub.f64	d6, d6, d5
 801420c:	d118      	bne.n	8014240 <_dtoa_r+0x568>
 801420e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014212:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014216:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421e:	dc4d      	bgt.n	80142bc <_dtoa_r+0x5e4>
 8014220:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014224:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801422c:	f57f af41 	bpl.w	80140b2 <_dtoa_r+0x3da>
 8014230:	4688      	mov	r8, r1
 8014232:	3901      	subs	r1, #1
 8014234:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014238:	2b30      	cmp	r3, #48	; 0x30
 801423a:	d0f9      	beq.n	8014230 <_dtoa_r+0x558>
 801423c:	46bb      	mov	fp, r7
 801423e:	e02a      	b.n	8014296 <_dtoa_r+0x5be>
 8014240:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014244:	e7d6      	b.n	80141f4 <_dtoa_r+0x51c>
 8014246:	ed9d 7b02 	vldr	d7, [sp, #8]
 801424a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801424e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014252:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014256:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801425a:	ee15 3a10 	vmov	r3, s10
 801425e:	3330      	adds	r3, #48	; 0x30
 8014260:	f808 3b01 	strb.w	r3, [r8], #1
 8014264:	9b01      	ldr	r3, [sp, #4]
 8014266:	eba8 0303 	sub.w	r3, r8, r3
 801426a:	4599      	cmp	r9, r3
 801426c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014270:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014274:	d133      	bne.n	80142de <_dtoa_r+0x606>
 8014276:	ee37 7b07 	vadd.f64	d7, d7, d7
 801427a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014282:	dc1a      	bgt.n	80142ba <_dtoa_r+0x5e2>
 8014284:	eeb4 7b46 	vcmp.f64	d7, d6
 8014288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428c:	d103      	bne.n	8014296 <_dtoa_r+0x5be>
 801428e:	ee15 3a10 	vmov	r3, s10
 8014292:	07d9      	lsls	r1, r3, #31
 8014294:	d411      	bmi.n	80142ba <_dtoa_r+0x5e2>
 8014296:	4629      	mov	r1, r5
 8014298:	4630      	mov	r0, r6
 801429a:	f001 f89f 	bl	80153dc <_Bfree>
 801429e:	2300      	movs	r3, #0
 80142a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142a2:	f888 3000 	strb.w	r3, [r8]
 80142a6:	f10b 0301 	add.w	r3, fp, #1
 80142aa:	6013      	str	r3, [r2, #0]
 80142ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f43f ad61 	beq.w	8013d76 <_dtoa_r+0x9e>
 80142b4:	f8c3 8000 	str.w	r8, [r3]
 80142b8:	e55d      	b.n	8013d76 <_dtoa_r+0x9e>
 80142ba:	465f      	mov	r7, fp
 80142bc:	4643      	mov	r3, r8
 80142be:	4698      	mov	r8, r3
 80142c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142c4:	2a39      	cmp	r2, #57	; 0x39
 80142c6:	d106      	bne.n	80142d6 <_dtoa_r+0x5fe>
 80142c8:	9a01      	ldr	r2, [sp, #4]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d1f7      	bne.n	80142be <_dtoa_r+0x5e6>
 80142ce:	9901      	ldr	r1, [sp, #4]
 80142d0:	2230      	movs	r2, #48	; 0x30
 80142d2:	3701      	adds	r7, #1
 80142d4:	700a      	strb	r2, [r1, #0]
 80142d6:	781a      	ldrb	r2, [r3, #0]
 80142d8:	3201      	adds	r2, #1
 80142da:	701a      	strb	r2, [r3, #0]
 80142dc:	e7ae      	b.n	801423c <_dtoa_r+0x564>
 80142de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80142e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80142e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ea:	d1b2      	bne.n	8014252 <_dtoa_r+0x57a>
 80142ec:	e7d3      	b.n	8014296 <_dtoa_r+0x5be>
 80142ee:	bf00      	nop
 80142f0:	080187f8 	.word	0x080187f8
 80142f4:	080187d0 	.word	0x080187d0
 80142f8:	9907      	ldr	r1, [sp, #28]
 80142fa:	2900      	cmp	r1, #0
 80142fc:	f000 80d0 	beq.w	80144a0 <_dtoa_r+0x7c8>
 8014300:	9906      	ldr	r1, [sp, #24]
 8014302:	2901      	cmp	r1, #1
 8014304:	f300 80b4 	bgt.w	8014470 <_dtoa_r+0x798>
 8014308:	990a      	ldr	r1, [sp, #40]	; 0x28
 801430a:	2900      	cmp	r1, #0
 801430c:	f000 80ac 	beq.w	8014468 <_dtoa_r+0x790>
 8014310:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014314:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014318:	461c      	mov	r4, r3
 801431a:	930a      	str	r3, [sp, #40]	; 0x28
 801431c:	9b04      	ldr	r3, [sp, #16]
 801431e:	4413      	add	r3, r2
 8014320:	9304      	str	r3, [sp, #16]
 8014322:	9b05      	ldr	r3, [sp, #20]
 8014324:	2101      	movs	r1, #1
 8014326:	4413      	add	r3, r2
 8014328:	4630      	mov	r0, r6
 801432a:	9305      	str	r3, [sp, #20]
 801432c:	f001 f958 	bl	80155e0 <__i2b>
 8014330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014332:	4607      	mov	r7, r0
 8014334:	f1b8 0f00 	cmp.w	r8, #0
 8014338:	dd0d      	ble.n	8014356 <_dtoa_r+0x67e>
 801433a:	9a05      	ldr	r2, [sp, #20]
 801433c:	2a00      	cmp	r2, #0
 801433e:	dd0a      	ble.n	8014356 <_dtoa_r+0x67e>
 8014340:	4542      	cmp	r2, r8
 8014342:	9904      	ldr	r1, [sp, #16]
 8014344:	bfa8      	it	ge
 8014346:	4642      	movge	r2, r8
 8014348:	1a89      	subs	r1, r1, r2
 801434a:	9104      	str	r1, [sp, #16]
 801434c:	9905      	ldr	r1, [sp, #20]
 801434e:	eba8 0802 	sub.w	r8, r8, r2
 8014352:	1a8a      	subs	r2, r1, r2
 8014354:	9205      	str	r2, [sp, #20]
 8014356:	b303      	cbz	r3, 801439a <_dtoa_r+0x6c2>
 8014358:	9a07      	ldr	r2, [sp, #28]
 801435a:	2a00      	cmp	r2, #0
 801435c:	f000 80a5 	beq.w	80144aa <_dtoa_r+0x7d2>
 8014360:	2c00      	cmp	r4, #0
 8014362:	dd13      	ble.n	801438c <_dtoa_r+0x6b4>
 8014364:	4639      	mov	r1, r7
 8014366:	4622      	mov	r2, r4
 8014368:	4630      	mov	r0, r6
 801436a:	930d      	str	r3, [sp, #52]	; 0x34
 801436c:	f001 f9f8 	bl	8015760 <__pow5mult>
 8014370:	462a      	mov	r2, r5
 8014372:	4601      	mov	r1, r0
 8014374:	4607      	mov	r7, r0
 8014376:	4630      	mov	r0, r6
 8014378:	f001 f948 	bl	801560c <__multiply>
 801437c:	4629      	mov	r1, r5
 801437e:	900a      	str	r0, [sp, #40]	; 0x28
 8014380:	4630      	mov	r0, r6
 8014382:	f001 f82b 	bl	80153dc <_Bfree>
 8014386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801438a:	4615      	mov	r5, r2
 801438c:	1b1a      	subs	r2, r3, r4
 801438e:	d004      	beq.n	801439a <_dtoa_r+0x6c2>
 8014390:	4629      	mov	r1, r5
 8014392:	4630      	mov	r0, r6
 8014394:	f001 f9e4 	bl	8015760 <__pow5mult>
 8014398:	4605      	mov	r5, r0
 801439a:	2101      	movs	r1, #1
 801439c:	4630      	mov	r0, r6
 801439e:	f001 f91f 	bl	80155e0 <__i2b>
 80143a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	4604      	mov	r4, r0
 80143a8:	f340 8081 	ble.w	80144ae <_dtoa_r+0x7d6>
 80143ac:	461a      	mov	r2, r3
 80143ae:	4601      	mov	r1, r0
 80143b0:	4630      	mov	r0, r6
 80143b2:	f001 f9d5 	bl	8015760 <__pow5mult>
 80143b6:	9b06      	ldr	r3, [sp, #24]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	4604      	mov	r4, r0
 80143bc:	dd7a      	ble.n	80144b4 <_dtoa_r+0x7dc>
 80143be:	2300      	movs	r3, #0
 80143c0:	930a      	str	r3, [sp, #40]	; 0x28
 80143c2:	6922      	ldr	r2, [r4, #16]
 80143c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80143c8:	6910      	ldr	r0, [r2, #16]
 80143ca:	f001 f8b9 	bl	8015540 <__hi0bits>
 80143ce:	f1c0 0020 	rsb	r0, r0, #32
 80143d2:	9b05      	ldr	r3, [sp, #20]
 80143d4:	4418      	add	r0, r3
 80143d6:	f010 001f 	ands.w	r0, r0, #31
 80143da:	f000 808c 	beq.w	80144f6 <_dtoa_r+0x81e>
 80143de:	f1c0 0220 	rsb	r2, r0, #32
 80143e2:	2a04      	cmp	r2, #4
 80143e4:	f340 8085 	ble.w	80144f2 <_dtoa_r+0x81a>
 80143e8:	f1c0 001c 	rsb	r0, r0, #28
 80143ec:	9b04      	ldr	r3, [sp, #16]
 80143ee:	4403      	add	r3, r0
 80143f0:	9304      	str	r3, [sp, #16]
 80143f2:	9b05      	ldr	r3, [sp, #20]
 80143f4:	4403      	add	r3, r0
 80143f6:	4480      	add	r8, r0
 80143f8:	9305      	str	r3, [sp, #20]
 80143fa:	9b04      	ldr	r3, [sp, #16]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	dd05      	ble.n	801440c <_dtoa_r+0x734>
 8014400:	4629      	mov	r1, r5
 8014402:	461a      	mov	r2, r3
 8014404:	4630      	mov	r0, r6
 8014406:	f001 fa05 	bl	8015814 <__lshift>
 801440a:	4605      	mov	r5, r0
 801440c:	9b05      	ldr	r3, [sp, #20]
 801440e:	2b00      	cmp	r3, #0
 8014410:	dd05      	ble.n	801441e <_dtoa_r+0x746>
 8014412:	4621      	mov	r1, r4
 8014414:	461a      	mov	r2, r3
 8014416:	4630      	mov	r0, r6
 8014418:	f001 f9fc 	bl	8015814 <__lshift>
 801441c:	4604      	mov	r4, r0
 801441e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014420:	2b00      	cmp	r3, #0
 8014422:	d06a      	beq.n	80144fa <_dtoa_r+0x822>
 8014424:	4621      	mov	r1, r4
 8014426:	4628      	mov	r0, r5
 8014428:	f001 fa64 	bl	80158f4 <__mcmp>
 801442c:	2800      	cmp	r0, #0
 801442e:	da64      	bge.n	80144fa <_dtoa_r+0x822>
 8014430:	2300      	movs	r3, #0
 8014432:	4629      	mov	r1, r5
 8014434:	220a      	movs	r2, #10
 8014436:	4630      	mov	r0, r6
 8014438:	f000 fff2 	bl	8015420 <__multadd>
 801443c:	9b07      	ldr	r3, [sp, #28]
 801443e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014442:	4605      	mov	r5, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	f000 8191 	beq.w	801476c <_dtoa_r+0xa94>
 801444a:	4639      	mov	r1, r7
 801444c:	2300      	movs	r3, #0
 801444e:	220a      	movs	r2, #10
 8014450:	4630      	mov	r0, r6
 8014452:	f000 ffe5 	bl	8015420 <__multadd>
 8014456:	f1ba 0f00 	cmp.w	sl, #0
 801445a:	4607      	mov	r7, r0
 801445c:	f300 808d 	bgt.w	801457a <_dtoa_r+0x8a2>
 8014460:	9b06      	ldr	r3, [sp, #24]
 8014462:	2b02      	cmp	r3, #2
 8014464:	dc50      	bgt.n	8014508 <_dtoa_r+0x830>
 8014466:	e088      	b.n	801457a <_dtoa_r+0x8a2>
 8014468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801446a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801446e:	e751      	b.n	8014314 <_dtoa_r+0x63c>
 8014470:	f109 34ff 	add.w	r4, r9, #4294967295
 8014474:	42a3      	cmp	r3, r4
 8014476:	bfbf      	itttt	lt
 8014478:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801447a:	1ae3      	sublt	r3, r4, r3
 801447c:	18d2      	addlt	r2, r2, r3
 801447e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8014480:	bfb6      	itet	lt
 8014482:	4623      	movlt	r3, r4
 8014484:	1b1c      	subge	r4, r3, r4
 8014486:	2400      	movlt	r4, #0
 8014488:	f1b9 0f00 	cmp.w	r9, #0
 801448c:	bfb5      	itete	lt
 801448e:	9a04      	ldrlt	r2, [sp, #16]
 8014490:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014494:	eba2 0809 	sublt.w	r8, r2, r9
 8014498:	464a      	movge	r2, r9
 801449a:	bfb8      	it	lt
 801449c:	2200      	movlt	r2, #0
 801449e:	e73c      	b.n	801431a <_dtoa_r+0x642>
 80144a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80144a4:	9f07      	ldr	r7, [sp, #28]
 80144a6:	461c      	mov	r4, r3
 80144a8:	e744      	b.n	8014334 <_dtoa_r+0x65c>
 80144aa:	461a      	mov	r2, r3
 80144ac:	e770      	b.n	8014390 <_dtoa_r+0x6b8>
 80144ae:	9b06      	ldr	r3, [sp, #24]
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	dc18      	bgt.n	80144e6 <_dtoa_r+0x80e>
 80144b4:	9b02      	ldr	r3, [sp, #8]
 80144b6:	b9b3      	cbnz	r3, 80144e6 <_dtoa_r+0x80e>
 80144b8:	9b03      	ldr	r3, [sp, #12]
 80144ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80144be:	b9a2      	cbnz	r2, 80144ea <_dtoa_r+0x812>
 80144c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80144c4:	0d12      	lsrs	r2, r2, #20
 80144c6:	0512      	lsls	r2, r2, #20
 80144c8:	b18a      	cbz	r2, 80144ee <_dtoa_r+0x816>
 80144ca:	9b04      	ldr	r3, [sp, #16]
 80144cc:	3301      	adds	r3, #1
 80144ce:	9304      	str	r3, [sp, #16]
 80144d0:	9b05      	ldr	r3, [sp, #20]
 80144d2:	3301      	adds	r3, #1
 80144d4:	9305      	str	r3, [sp, #20]
 80144d6:	2301      	movs	r3, #1
 80144d8:	930a      	str	r3, [sp, #40]	; 0x28
 80144da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144dc:	2b00      	cmp	r3, #0
 80144de:	f47f af70 	bne.w	80143c2 <_dtoa_r+0x6ea>
 80144e2:	2001      	movs	r0, #1
 80144e4:	e775      	b.n	80143d2 <_dtoa_r+0x6fa>
 80144e6:	2300      	movs	r3, #0
 80144e8:	e7f6      	b.n	80144d8 <_dtoa_r+0x800>
 80144ea:	9b02      	ldr	r3, [sp, #8]
 80144ec:	e7f4      	b.n	80144d8 <_dtoa_r+0x800>
 80144ee:	920a      	str	r2, [sp, #40]	; 0x28
 80144f0:	e7f3      	b.n	80144da <_dtoa_r+0x802>
 80144f2:	d082      	beq.n	80143fa <_dtoa_r+0x722>
 80144f4:	4610      	mov	r0, r2
 80144f6:	301c      	adds	r0, #28
 80144f8:	e778      	b.n	80143ec <_dtoa_r+0x714>
 80144fa:	f1b9 0f00 	cmp.w	r9, #0
 80144fe:	dc37      	bgt.n	8014570 <_dtoa_r+0x898>
 8014500:	9b06      	ldr	r3, [sp, #24]
 8014502:	2b02      	cmp	r3, #2
 8014504:	dd34      	ble.n	8014570 <_dtoa_r+0x898>
 8014506:	46ca      	mov	sl, r9
 8014508:	f1ba 0f00 	cmp.w	sl, #0
 801450c:	d10d      	bne.n	801452a <_dtoa_r+0x852>
 801450e:	4621      	mov	r1, r4
 8014510:	4653      	mov	r3, sl
 8014512:	2205      	movs	r2, #5
 8014514:	4630      	mov	r0, r6
 8014516:	f000 ff83 	bl	8015420 <__multadd>
 801451a:	4601      	mov	r1, r0
 801451c:	4604      	mov	r4, r0
 801451e:	4628      	mov	r0, r5
 8014520:	f001 f9e8 	bl	80158f4 <__mcmp>
 8014524:	2800      	cmp	r0, #0
 8014526:	f73f adeb 	bgt.w	8014100 <_dtoa_r+0x428>
 801452a:	9b08      	ldr	r3, [sp, #32]
 801452c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014530:	ea6f 0b03 	mvn.w	fp, r3
 8014534:	f04f 0900 	mov.w	r9, #0
 8014538:	4621      	mov	r1, r4
 801453a:	4630      	mov	r0, r6
 801453c:	f000 ff4e 	bl	80153dc <_Bfree>
 8014540:	2f00      	cmp	r7, #0
 8014542:	f43f aea8 	beq.w	8014296 <_dtoa_r+0x5be>
 8014546:	f1b9 0f00 	cmp.w	r9, #0
 801454a:	d005      	beq.n	8014558 <_dtoa_r+0x880>
 801454c:	45b9      	cmp	r9, r7
 801454e:	d003      	beq.n	8014558 <_dtoa_r+0x880>
 8014550:	4649      	mov	r1, r9
 8014552:	4630      	mov	r0, r6
 8014554:	f000 ff42 	bl	80153dc <_Bfree>
 8014558:	4639      	mov	r1, r7
 801455a:	4630      	mov	r0, r6
 801455c:	f000 ff3e 	bl	80153dc <_Bfree>
 8014560:	e699      	b.n	8014296 <_dtoa_r+0x5be>
 8014562:	2400      	movs	r4, #0
 8014564:	4627      	mov	r7, r4
 8014566:	e7e0      	b.n	801452a <_dtoa_r+0x852>
 8014568:	46bb      	mov	fp, r7
 801456a:	4604      	mov	r4, r0
 801456c:	4607      	mov	r7, r0
 801456e:	e5c7      	b.n	8014100 <_dtoa_r+0x428>
 8014570:	9b07      	ldr	r3, [sp, #28]
 8014572:	46ca      	mov	sl, r9
 8014574:	2b00      	cmp	r3, #0
 8014576:	f000 8100 	beq.w	801477a <_dtoa_r+0xaa2>
 801457a:	f1b8 0f00 	cmp.w	r8, #0
 801457e:	dd05      	ble.n	801458c <_dtoa_r+0x8b4>
 8014580:	4639      	mov	r1, r7
 8014582:	4642      	mov	r2, r8
 8014584:	4630      	mov	r0, r6
 8014586:	f001 f945 	bl	8015814 <__lshift>
 801458a:	4607      	mov	r7, r0
 801458c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801458e:	2b00      	cmp	r3, #0
 8014590:	d05d      	beq.n	801464e <_dtoa_r+0x976>
 8014592:	6879      	ldr	r1, [r7, #4]
 8014594:	4630      	mov	r0, r6
 8014596:	f000 fee1 	bl	801535c <_Balloc>
 801459a:	4680      	mov	r8, r0
 801459c:	b928      	cbnz	r0, 80145aa <_dtoa_r+0x8d2>
 801459e:	4b82      	ldr	r3, [pc, #520]	; (80147a8 <_dtoa_r+0xad0>)
 80145a0:	4602      	mov	r2, r0
 80145a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80145a6:	f7ff bbaf 	b.w	8013d08 <_dtoa_r+0x30>
 80145aa:	693a      	ldr	r2, [r7, #16]
 80145ac:	3202      	adds	r2, #2
 80145ae:	0092      	lsls	r2, r2, #2
 80145b0:	f107 010c 	add.w	r1, r7, #12
 80145b4:	300c      	adds	r0, #12
 80145b6:	f7fd fb81 	bl	8011cbc <memcpy>
 80145ba:	2201      	movs	r2, #1
 80145bc:	4641      	mov	r1, r8
 80145be:	4630      	mov	r0, r6
 80145c0:	f001 f928 	bl	8015814 <__lshift>
 80145c4:	9b01      	ldr	r3, [sp, #4]
 80145c6:	3301      	adds	r3, #1
 80145c8:	9304      	str	r3, [sp, #16]
 80145ca:	9b01      	ldr	r3, [sp, #4]
 80145cc:	4453      	add	r3, sl
 80145ce:	9308      	str	r3, [sp, #32]
 80145d0:	9b02      	ldr	r3, [sp, #8]
 80145d2:	f003 0301 	and.w	r3, r3, #1
 80145d6:	46b9      	mov	r9, r7
 80145d8:	9307      	str	r3, [sp, #28]
 80145da:	4607      	mov	r7, r0
 80145dc:	9b04      	ldr	r3, [sp, #16]
 80145de:	4621      	mov	r1, r4
 80145e0:	3b01      	subs	r3, #1
 80145e2:	4628      	mov	r0, r5
 80145e4:	9302      	str	r3, [sp, #8]
 80145e6:	f7ff faeb 	bl	8013bc0 <quorem>
 80145ea:	4603      	mov	r3, r0
 80145ec:	3330      	adds	r3, #48	; 0x30
 80145ee:	9005      	str	r0, [sp, #20]
 80145f0:	4649      	mov	r1, r9
 80145f2:	4628      	mov	r0, r5
 80145f4:	9309      	str	r3, [sp, #36]	; 0x24
 80145f6:	f001 f97d 	bl	80158f4 <__mcmp>
 80145fa:	463a      	mov	r2, r7
 80145fc:	4682      	mov	sl, r0
 80145fe:	4621      	mov	r1, r4
 8014600:	4630      	mov	r0, r6
 8014602:	f001 f993 	bl	801592c <__mdiff>
 8014606:	68c2      	ldr	r2, [r0, #12]
 8014608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801460a:	4680      	mov	r8, r0
 801460c:	bb0a      	cbnz	r2, 8014652 <_dtoa_r+0x97a>
 801460e:	4601      	mov	r1, r0
 8014610:	4628      	mov	r0, r5
 8014612:	f001 f96f 	bl	80158f4 <__mcmp>
 8014616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014618:	4602      	mov	r2, r0
 801461a:	4641      	mov	r1, r8
 801461c:	4630      	mov	r0, r6
 801461e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8014622:	f000 fedb 	bl	80153dc <_Bfree>
 8014626:	9b06      	ldr	r3, [sp, #24]
 8014628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801462a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801462e:	ea43 0102 	orr.w	r1, r3, r2
 8014632:	9b07      	ldr	r3, [sp, #28]
 8014634:	430b      	orrs	r3, r1
 8014636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014638:	d10d      	bne.n	8014656 <_dtoa_r+0x97e>
 801463a:	2b39      	cmp	r3, #57	; 0x39
 801463c:	d029      	beq.n	8014692 <_dtoa_r+0x9ba>
 801463e:	f1ba 0f00 	cmp.w	sl, #0
 8014642:	dd01      	ble.n	8014648 <_dtoa_r+0x970>
 8014644:	9b05      	ldr	r3, [sp, #20]
 8014646:	3331      	adds	r3, #49	; 0x31
 8014648:	9a02      	ldr	r2, [sp, #8]
 801464a:	7013      	strb	r3, [r2, #0]
 801464c:	e774      	b.n	8014538 <_dtoa_r+0x860>
 801464e:	4638      	mov	r0, r7
 8014650:	e7b8      	b.n	80145c4 <_dtoa_r+0x8ec>
 8014652:	2201      	movs	r2, #1
 8014654:	e7e1      	b.n	801461a <_dtoa_r+0x942>
 8014656:	f1ba 0f00 	cmp.w	sl, #0
 801465a:	db06      	blt.n	801466a <_dtoa_r+0x992>
 801465c:	9906      	ldr	r1, [sp, #24]
 801465e:	ea41 0a0a 	orr.w	sl, r1, sl
 8014662:	9907      	ldr	r1, [sp, #28]
 8014664:	ea5a 0101 	orrs.w	r1, sl, r1
 8014668:	d120      	bne.n	80146ac <_dtoa_r+0x9d4>
 801466a:	2a00      	cmp	r2, #0
 801466c:	ddec      	ble.n	8014648 <_dtoa_r+0x970>
 801466e:	4629      	mov	r1, r5
 8014670:	2201      	movs	r2, #1
 8014672:	4630      	mov	r0, r6
 8014674:	9304      	str	r3, [sp, #16]
 8014676:	f001 f8cd 	bl	8015814 <__lshift>
 801467a:	4621      	mov	r1, r4
 801467c:	4605      	mov	r5, r0
 801467e:	f001 f939 	bl	80158f4 <__mcmp>
 8014682:	2800      	cmp	r0, #0
 8014684:	9b04      	ldr	r3, [sp, #16]
 8014686:	dc02      	bgt.n	801468e <_dtoa_r+0x9b6>
 8014688:	d1de      	bne.n	8014648 <_dtoa_r+0x970>
 801468a:	07da      	lsls	r2, r3, #31
 801468c:	d5dc      	bpl.n	8014648 <_dtoa_r+0x970>
 801468e:	2b39      	cmp	r3, #57	; 0x39
 8014690:	d1d8      	bne.n	8014644 <_dtoa_r+0x96c>
 8014692:	9a02      	ldr	r2, [sp, #8]
 8014694:	2339      	movs	r3, #57	; 0x39
 8014696:	7013      	strb	r3, [r2, #0]
 8014698:	4643      	mov	r3, r8
 801469a:	4698      	mov	r8, r3
 801469c:	3b01      	subs	r3, #1
 801469e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80146a2:	2a39      	cmp	r2, #57	; 0x39
 80146a4:	d051      	beq.n	801474a <_dtoa_r+0xa72>
 80146a6:	3201      	adds	r2, #1
 80146a8:	701a      	strb	r2, [r3, #0]
 80146aa:	e745      	b.n	8014538 <_dtoa_r+0x860>
 80146ac:	2a00      	cmp	r2, #0
 80146ae:	dd03      	ble.n	80146b8 <_dtoa_r+0x9e0>
 80146b0:	2b39      	cmp	r3, #57	; 0x39
 80146b2:	d0ee      	beq.n	8014692 <_dtoa_r+0x9ba>
 80146b4:	3301      	adds	r3, #1
 80146b6:	e7c7      	b.n	8014648 <_dtoa_r+0x970>
 80146b8:	9a04      	ldr	r2, [sp, #16]
 80146ba:	9908      	ldr	r1, [sp, #32]
 80146bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80146c0:	428a      	cmp	r2, r1
 80146c2:	d02b      	beq.n	801471c <_dtoa_r+0xa44>
 80146c4:	4629      	mov	r1, r5
 80146c6:	2300      	movs	r3, #0
 80146c8:	220a      	movs	r2, #10
 80146ca:	4630      	mov	r0, r6
 80146cc:	f000 fea8 	bl	8015420 <__multadd>
 80146d0:	45b9      	cmp	r9, r7
 80146d2:	4605      	mov	r5, r0
 80146d4:	f04f 0300 	mov.w	r3, #0
 80146d8:	f04f 020a 	mov.w	r2, #10
 80146dc:	4649      	mov	r1, r9
 80146de:	4630      	mov	r0, r6
 80146e0:	d107      	bne.n	80146f2 <_dtoa_r+0xa1a>
 80146e2:	f000 fe9d 	bl	8015420 <__multadd>
 80146e6:	4681      	mov	r9, r0
 80146e8:	4607      	mov	r7, r0
 80146ea:	9b04      	ldr	r3, [sp, #16]
 80146ec:	3301      	adds	r3, #1
 80146ee:	9304      	str	r3, [sp, #16]
 80146f0:	e774      	b.n	80145dc <_dtoa_r+0x904>
 80146f2:	f000 fe95 	bl	8015420 <__multadd>
 80146f6:	4639      	mov	r1, r7
 80146f8:	4681      	mov	r9, r0
 80146fa:	2300      	movs	r3, #0
 80146fc:	220a      	movs	r2, #10
 80146fe:	4630      	mov	r0, r6
 8014700:	f000 fe8e 	bl	8015420 <__multadd>
 8014704:	4607      	mov	r7, r0
 8014706:	e7f0      	b.n	80146ea <_dtoa_r+0xa12>
 8014708:	f1ba 0f00 	cmp.w	sl, #0
 801470c:	9a01      	ldr	r2, [sp, #4]
 801470e:	bfcc      	ite	gt
 8014710:	46d0      	movgt	r8, sl
 8014712:	f04f 0801 	movle.w	r8, #1
 8014716:	4490      	add	r8, r2
 8014718:	f04f 0900 	mov.w	r9, #0
 801471c:	4629      	mov	r1, r5
 801471e:	2201      	movs	r2, #1
 8014720:	4630      	mov	r0, r6
 8014722:	9302      	str	r3, [sp, #8]
 8014724:	f001 f876 	bl	8015814 <__lshift>
 8014728:	4621      	mov	r1, r4
 801472a:	4605      	mov	r5, r0
 801472c:	f001 f8e2 	bl	80158f4 <__mcmp>
 8014730:	2800      	cmp	r0, #0
 8014732:	dcb1      	bgt.n	8014698 <_dtoa_r+0x9c0>
 8014734:	d102      	bne.n	801473c <_dtoa_r+0xa64>
 8014736:	9b02      	ldr	r3, [sp, #8]
 8014738:	07db      	lsls	r3, r3, #31
 801473a:	d4ad      	bmi.n	8014698 <_dtoa_r+0x9c0>
 801473c:	4643      	mov	r3, r8
 801473e:	4698      	mov	r8, r3
 8014740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014744:	2a30      	cmp	r2, #48	; 0x30
 8014746:	d0fa      	beq.n	801473e <_dtoa_r+0xa66>
 8014748:	e6f6      	b.n	8014538 <_dtoa_r+0x860>
 801474a:	9a01      	ldr	r2, [sp, #4]
 801474c:	429a      	cmp	r2, r3
 801474e:	d1a4      	bne.n	801469a <_dtoa_r+0x9c2>
 8014750:	f10b 0b01 	add.w	fp, fp, #1
 8014754:	2331      	movs	r3, #49	; 0x31
 8014756:	e778      	b.n	801464a <_dtoa_r+0x972>
 8014758:	4b14      	ldr	r3, [pc, #80]	; (80147ac <_dtoa_r+0xad4>)
 801475a:	f7ff bb27 	b.w	8013dac <_dtoa_r+0xd4>
 801475e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014760:	2b00      	cmp	r3, #0
 8014762:	f47f ab03 	bne.w	8013d6c <_dtoa_r+0x94>
 8014766:	4b12      	ldr	r3, [pc, #72]	; (80147b0 <_dtoa_r+0xad8>)
 8014768:	f7ff bb20 	b.w	8013dac <_dtoa_r+0xd4>
 801476c:	f1ba 0f00 	cmp.w	sl, #0
 8014770:	dc03      	bgt.n	801477a <_dtoa_r+0xaa2>
 8014772:	9b06      	ldr	r3, [sp, #24]
 8014774:	2b02      	cmp	r3, #2
 8014776:	f73f aec7 	bgt.w	8014508 <_dtoa_r+0x830>
 801477a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801477e:	4621      	mov	r1, r4
 8014780:	4628      	mov	r0, r5
 8014782:	f7ff fa1d 	bl	8013bc0 <quorem>
 8014786:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801478a:	f808 3b01 	strb.w	r3, [r8], #1
 801478e:	9a01      	ldr	r2, [sp, #4]
 8014790:	eba8 0202 	sub.w	r2, r8, r2
 8014794:	4592      	cmp	sl, r2
 8014796:	ddb7      	ble.n	8014708 <_dtoa_r+0xa30>
 8014798:	4629      	mov	r1, r5
 801479a:	2300      	movs	r3, #0
 801479c:	220a      	movs	r2, #10
 801479e:	4630      	mov	r0, r6
 80147a0:	f000 fe3e 	bl	8015420 <__multadd>
 80147a4:	4605      	mov	r5, r0
 80147a6:	e7ea      	b.n	801477e <_dtoa_r+0xaa6>
 80147a8:	08018685 	.word	0x08018685
 80147ac:	080183f0 	.word	0x080183f0
 80147b0:	0801861d 	.word	0x0801861d

080147b4 <__sflush_r>:
 80147b4:	898a      	ldrh	r2, [r1, #12]
 80147b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ba:	4605      	mov	r5, r0
 80147bc:	0710      	lsls	r0, r2, #28
 80147be:	460c      	mov	r4, r1
 80147c0:	d458      	bmi.n	8014874 <__sflush_r+0xc0>
 80147c2:	684b      	ldr	r3, [r1, #4]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	dc05      	bgt.n	80147d4 <__sflush_r+0x20>
 80147c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	dc02      	bgt.n	80147d4 <__sflush_r+0x20>
 80147ce:	2000      	movs	r0, #0
 80147d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147d6:	2e00      	cmp	r6, #0
 80147d8:	d0f9      	beq.n	80147ce <__sflush_r+0x1a>
 80147da:	2300      	movs	r3, #0
 80147dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80147e0:	682f      	ldr	r7, [r5, #0]
 80147e2:	602b      	str	r3, [r5, #0]
 80147e4:	d032      	beq.n	801484c <__sflush_r+0x98>
 80147e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80147e8:	89a3      	ldrh	r3, [r4, #12]
 80147ea:	075a      	lsls	r2, r3, #29
 80147ec:	d505      	bpl.n	80147fa <__sflush_r+0x46>
 80147ee:	6863      	ldr	r3, [r4, #4]
 80147f0:	1ac0      	subs	r0, r0, r3
 80147f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80147f4:	b10b      	cbz	r3, 80147fa <__sflush_r+0x46>
 80147f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80147f8:	1ac0      	subs	r0, r0, r3
 80147fa:	2300      	movs	r3, #0
 80147fc:	4602      	mov	r2, r0
 80147fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014800:	6a21      	ldr	r1, [r4, #32]
 8014802:	4628      	mov	r0, r5
 8014804:	47b0      	blx	r6
 8014806:	1c43      	adds	r3, r0, #1
 8014808:	89a3      	ldrh	r3, [r4, #12]
 801480a:	d106      	bne.n	801481a <__sflush_r+0x66>
 801480c:	6829      	ldr	r1, [r5, #0]
 801480e:	291d      	cmp	r1, #29
 8014810:	d82c      	bhi.n	801486c <__sflush_r+0xb8>
 8014812:	4a2a      	ldr	r2, [pc, #168]	; (80148bc <__sflush_r+0x108>)
 8014814:	40ca      	lsrs	r2, r1
 8014816:	07d6      	lsls	r6, r2, #31
 8014818:	d528      	bpl.n	801486c <__sflush_r+0xb8>
 801481a:	2200      	movs	r2, #0
 801481c:	6062      	str	r2, [r4, #4]
 801481e:	04d9      	lsls	r1, r3, #19
 8014820:	6922      	ldr	r2, [r4, #16]
 8014822:	6022      	str	r2, [r4, #0]
 8014824:	d504      	bpl.n	8014830 <__sflush_r+0x7c>
 8014826:	1c42      	adds	r2, r0, #1
 8014828:	d101      	bne.n	801482e <__sflush_r+0x7a>
 801482a:	682b      	ldr	r3, [r5, #0]
 801482c:	b903      	cbnz	r3, 8014830 <__sflush_r+0x7c>
 801482e:	6560      	str	r0, [r4, #84]	; 0x54
 8014830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014832:	602f      	str	r7, [r5, #0]
 8014834:	2900      	cmp	r1, #0
 8014836:	d0ca      	beq.n	80147ce <__sflush_r+0x1a>
 8014838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801483c:	4299      	cmp	r1, r3
 801483e:	d002      	beq.n	8014846 <__sflush_r+0x92>
 8014840:	4628      	mov	r0, r5
 8014842:	f7fd fa51 	bl	8011ce8 <_free_r>
 8014846:	2000      	movs	r0, #0
 8014848:	6360      	str	r0, [r4, #52]	; 0x34
 801484a:	e7c1      	b.n	80147d0 <__sflush_r+0x1c>
 801484c:	6a21      	ldr	r1, [r4, #32]
 801484e:	2301      	movs	r3, #1
 8014850:	4628      	mov	r0, r5
 8014852:	47b0      	blx	r6
 8014854:	1c41      	adds	r1, r0, #1
 8014856:	d1c7      	bne.n	80147e8 <__sflush_r+0x34>
 8014858:	682b      	ldr	r3, [r5, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d0c4      	beq.n	80147e8 <__sflush_r+0x34>
 801485e:	2b1d      	cmp	r3, #29
 8014860:	d001      	beq.n	8014866 <__sflush_r+0xb2>
 8014862:	2b16      	cmp	r3, #22
 8014864:	d101      	bne.n	801486a <__sflush_r+0xb6>
 8014866:	602f      	str	r7, [r5, #0]
 8014868:	e7b1      	b.n	80147ce <__sflush_r+0x1a>
 801486a:	89a3      	ldrh	r3, [r4, #12]
 801486c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014870:	81a3      	strh	r3, [r4, #12]
 8014872:	e7ad      	b.n	80147d0 <__sflush_r+0x1c>
 8014874:	690f      	ldr	r7, [r1, #16]
 8014876:	2f00      	cmp	r7, #0
 8014878:	d0a9      	beq.n	80147ce <__sflush_r+0x1a>
 801487a:	0793      	lsls	r3, r2, #30
 801487c:	680e      	ldr	r6, [r1, #0]
 801487e:	bf08      	it	eq
 8014880:	694b      	ldreq	r3, [r1, #20]
 8014882:	600f      	str	r7, [r1, #0]
 8014884:	bf18      	it	ne
 8014886:	2300      	movne	r3, #0
 8014888:	eba6 0807 	sub.w	r8, r6, r7
 801488c:	608b      	str	r3, [r1, #8]
 801488e:	f1b8 0f00 	cmp.w	r8, #0
 8014892:	dd9c      	ble.n	80147ce <__sflush_r+0x1a>
 8014894:	6a21      	ldr	r1, [r4, #32]
 8014896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014898:	4643      	mov	r3, r8
 801489a:	463a      	mov	r2, r7
 801489c:	4628      	mov	r0, r5
 801489e:	47b0      	blx	r6
 80148a0:	2800      	cmp	r0, #0
 80148a2:	dc06      	bgt.n	80148b2 <__sflush_r+0xfe>
 80148a4:	89a3      	ldrh	r3, [r4, #12]
 80148a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148aa:	81a3      	strh	r3, [r4, #12]
 80148ac:	f04f 30ff 	mov.w	r0, #4294967295
 80148b0:	e78e      	b.n	80147d0 <__sflush_r+0x1c>
 80148b2:	4407      	add	r7, r0
 80148b4:	eba8 0800 	sub.w	r8, r8, r0
 80148b8:	e7e9      	b.n	801488e <__sflush_r+0xda>
 80148ba:	bf00      	nop
 80148bc:	20400001 	.word	0x20400001

080148c0 <_fflush_r>:
 80148c0:	b538      	push	{r3, r4, r5, lr}
 80148c2:	690b      	ldr	r3, [r1, #16]
 80148c4:	4605      	mov	r5, r0
 80148c6:	460c      	mov	r4, r1
 80148c8:	b913      	cbnz	r3, 80148d0 <_fflush_r+0x10>
 80148ca:	2500      	movs	r5, #0
 80148cc:	4628      	mov	r0, r5
 80148ce:	bd38      	pop	{r3, r4, r5, pc}
 80148d0:	b118      	cbz	r0, 80148da <_fflush_r+0x1a>
 80148d2:	6983      	ldr	r3, [r0, #24]
 80148d4:	b90b      	cbnz	r3, 80148da <_fflush_r+0x1a>
 80148d6:	f000 f887 	bl	80149e8 <__sinit>
 80148da:	4b14      	ldr	r3, [pc, #80]	; (801492c <_fflush_r+0x6c>)
 80148dc:	429c      	cmp	r4, r3
 80148de:	d11b      	bne.n	8014918 <_fflush_r+0x58>
 80148e0:	686c      	ldr	r4, [r5, #4]
 80148e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d0ef      	beq.n	80148ca <_fflush_r+0xa>
 80148ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80148ec:	07d0      	lsls	r0, r2, #31
 80148ee:	d404      	bmi.n	80148fa <_fflush_r+0x3a>
 80148f0:	0599      	lsls	r1, r3, #22
 80148f2:	d402      	bmi.n	80148fa <_fflush_r+0x3a>
 80148f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148f6:	f000 fcac 	bl	8015252 <__retarget_lock_acquire_recursive>
 80148fa:	4628      	mov	r0, r5
 80148fc:	4621      	mov	r1, r4
 80148fe:	f7ff ff59 	bl	80147b4 <__sflush_r>
 8014902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014904:	07da      	lsls	r2, r3, #31
 8014906:	4605      	mov	r5, r0
 8014908:	d4e0      	bmi.n	80148cc <_fflush_r+0xc>
 801490a:	89a3      	ldrh	r3, [r4, #12]
 801490c:	059b      	lsls	r3, r3, #22
 801490e:	d4dd      	bmi.n	80148cc <_fflush_r+0xc>
 8014910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014912:	f000 fc9f 	bl	8015254 <__retarget_lock_release_recursive>
 8014916:	e7d9      	b.n	80148cc <_fflush_r+0xc>
 8014918:	4b05      	ldr	r3, [pc, #20]	; (8014930 <_fflush_r+0x70>)
 801491a:	429c      	cmp	r4, r3
 801491c:	d101      	bne.n	8014922 <_fflush_r+0x62>
 801491e:	68ac      	ldr	r4, [r5, #8]
 8014920:	e7df      	b.n	80148e2 <_fflush_r+0x22>
 8014922:	4b04      	ldr	r3, [pc, #16]	; (8014934 <_fflush_r+0x74>)
 8014924:	429c      	cmp	r4, r3
 8014926:	bf08      	it	eq
 8014928:	68ec      	ldreq	r4, [r5, #12]
 801492a:	e7da      	b.n	80148e2 <_fflush_r+0x22>
 801492c:	080186b8 	.word	0x080186b8
 8014930:	080186d8 	.word	0x080186d8
 8014934:	08018698 	.word	0x08018698

08014938 <std>:
 8014938:	2300      	movs	r3, #0
 801493a:	b510      	push	{r4, lr}
 801493c:	4604      	mov	r4, r0
 801493e:	e9c0 3300 	strd	r3, r3, [r0]
 8014942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014946:	6083      	str	r3, [r0, #8]
 8014948:	8181      	strh	r1, [r0, #12]
 801494a:	6643      	str	r3, [r0, #100]	; 0x64
 801494c:	81c2      	strh	r2, [r0, #14]
 801494e:	6183      	str	r3, [r0, #24]
 8014950:	4619      	mov	r1, r3
 8014952:	2208      	movs	r2, #8
 8014954:	305c      	adds	r0, #92	; 0x5c
 8014956:	f7fd f9bf 	bl	8011cd8 <memset>
 801495a:	4b05      	ldr	r3, [pc, #20]	; (8014970 <std+0x38>)
 801495c:	6263      	str	r3, [r4, #36]	; 0x24
 801495e:	4b05      	ldr	r3, [pc, #20]	; (8014974 <std+0x3c>)
 8014960:	62a3      	str	r3, [r4, #40]	; 0x28
 8014962:	4b05      	ldr	r3, [pc, #20]	; (8014978 <std+0x40>)
 8014964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014966:	4b05      	ldr	r3, [pc, #20]	; (801497c <std+0x44>)
 8014968:	6224      	str	r4, [r4, #32]
 801496a:	6323      	str	r3, [r4, #48]	; 0x30
 801496c:	bd10      	pop	{r4, pc}
 801496e:	bf00      	nop
 8014970:	080162e1 	.word	0x080162e1
 8014974:	08016303 	.word	0x08016303
 8014978:	0801633b 	.word	0x0801633b
 801497c:	0801635f 	.word	0x0801635f

08014980 <_cleanup_r>:
 8014980:	4901      	ldr	r1, [pc, #4]	; (8014988 <_cleanup_r+0x8>)
 8014982:	f000 b8c1 	b.w	8014b08 <_fwalk_reent>
 8014986:	bf00      	nop
 8014988:	080148c1 	.word	0x080148c1

0801498c <__sfmoreglue>:
 801498c:	b570      	push	{r4, r5, r6, lr}
 801498e:	2268      	movs	r2, #104	; 0x68
 8014990:	1e4d      	subs	r5, r1, #1
 8014992:	4355      	muls	r5, r2
 8014994:	460e      	mov	r6, r1
 8014996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801499a:	f7fd fa11 	bl	8011dc0 <_malloc_r>
 801499e:	4604      	mov	r4, r0
 80149a0:	b140      	cbz	r0, 80149b4 <__sfmoreglue+0x28>
 80149a2:	2100      	movs	r1, #0
 80149a4:	e9c0 1600 	strd	r1, r6, [r0]
 80149a8:	300c      	adds	r0, #12
 80149aa:	60a0      	str	r0, [r4, #8]
 80149ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80149b0:	f7fd f992 	bl	8011cd8 <memset>
 80149b4:	4620      	mov	r0, r4
 80149b6:	bd70      	pop	{r4, r5, r6, pc}

080149b8 <__sfp_lock_acquire>:
 80149b8:	4801      	ldr	r0, [pc, #4]	; (80149c0 <__sfp_lock_acquire+0x8>)
 80149ba:	f000 bc4a 	b.w	8015252 <__retarget_lock_acquire_recursive>
 80149be:	bf00      	nop
 80149c0:	24009e19 	.word	0x24009e19

080149c4 <__sfp_lock_release>:
 80149c4:	4801      	ldr	r0, [pc, #4]	; (80149cc <__sfp_lock_release+0x8>)
 80149c6:	f000 bc45 	b.w	8015254 <__retarget_lock_release_recursive>
 80149ca:	bf00      	nop
 80149cc:	24009e19 	.word	0x24009e19

080149d0 <__sinit_lock_acquire>:
 80149d0:	4801      	ldr	r0, [pc, #4]	; (80149d8 <__sinit_lock_acquire+0x8>)
 80149d2:	f000 bc3e 	b.w	8015252 <__retarget_lock_acquire_recursive>
 80149d6:	bf00      	nop
 80149d8:	24009e1a 	.word	0x24009e1a

080149dc <__sinit_lock_release>:
 80149dc:	4801      	ldr	r0, [pc, #4]	; (80149e4 <__sinit_lock_release+0x8>)
 80149de:	f000 bc39 	b.w	8015254 <__retarget_lock_release_recursive>
 80149e2:	bf00      	nop
 80149e4:	24009e1a 	.word	0x24009e1a

080149e8 <__sinit>:
 80149e8:	b510      	push	{r4, lr}
 80149ea:	4604      	mov	r4, r0
 80149ec:	f7ff fff0 	bl	80149d0 <__sinit_lock_acquire>
 80149f0:	69a3      	ldr	r3, [r4, #24]
 80149f2:	b11b      	cbz	r3, 80149fc <__sinit+0x14>
 80149f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149f8:	f7ff bff0 	b.w	80149dc <__sinit_lock_release>
 80149fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014a00:	6523      	str	r3, [r4, #80]	; 0x50
 8014a02:	4b13      	ldr	r3, [pc, #76]	; (8014a50 <__sinit+0x68>)
 8014a04:	4a13      	ldr	r2, [pc, #76]	; (8014a54 <__sinit+0x6c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	62a2      	str	r2, [r4, #40]	; 0x28
 8014a0a:	42a3      	cmp	r3, r4
 8014a0c:	bf04      	itt	eq
 8014a0e:	2301      	moveq	r3, #1
 8014a10:	61a3      	streq	r3, [r4, #24]
 8014a12:	4620      	mov	r0, r4
 8014a14:	f000 f820 	bl	8014a58 <__sfp>
 8014a18:	6060      	str	r0, [r4, #4]
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	f000 f81c 	bl	8014a58 <__sfp>
 8014a20:	60a0      	str	r0, [r4, #8]
 8014a22:	4620      	mov	r0, r4
 8014a24:	f000 f818 	bl	8014a58 <__sfp>
 8014a28:	2200      	movs	r2, #0
 8014a2a:	60e0      	str	r0, [r4, #12]
 8014a2c:	2104      	movs	r1, #4
 8014a2e:	6860      	ldr	r0, [r4, #4]
 8014a30:	f7ff ff82 	bl	8014938 <std>
 8014a34:	68a0      	ldr	r0, [r4, #8]
 8014a36:	2201      	movs	r2, #1
 8014a38:	2109      	movs	r1, #9
 8014a3a:	f7ff ff7d 	bl	8014938 <std>
 8014a3e:	68e0      	ldr	r0, [r4, #12]
 8014a40:	2202      	movs	r2, #2
 8014a42:	2112      	movs	r1, #18
 8014a44:	f7ff ff78 	bl	8014938 <std>
 8014a48:	2301      	movs	r3, #1
 8014a4a:	61a3      	str	r3, [r4, #24]
 8014a4c:	e7d2      	b.n	80149f4 <__sinit+0xc>
 8014a4e:	bf00      	nop
 8014a50:	080183dc 	.word	0x080183dc
 8014a54:	08014981 	.word	0x08014981

08014a58 <__sfp>:
 8014a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a5a:	4607      	mov	r7, r0
 8014a5c:	f7ff ffac 	bl	80149b8 <__sfp_lock_acquire>
 8014a60:	4b1e      	ldr	r3, [pc, #120]	; (8014adc <__sfp+0x84>)
 8014a62:	681e      	ldr	r6, [r3, #0]
 8014a64:	69b3      	ldr	r3, [r6, #24]
 8014a66:	b913      	cbnz	r3, 8014a6e <__sfp+0x16>
 8014a68:	4630      	mov	r0, r6
 8014a6a:	f7ff ffbd 	bl	80149e8 <__sinit>
 8014a6e:	3648      	adds	r6, #72	; 0x48
 8014a70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a74:	3b01      	subs	r3, #1
 8014a76:	d503      	bpl.n	8014a80 <__sfp+0x28>
 8014a78:	6833      	ldr	r3, [r6, #0]
 8014a7a:	b30b      	cbz	r3, 8014ac0 <__sfp+0x68>
 8014a7c:	6836      	ldr	r6, [r6, #0]
 8014a7e:	e7f7      	b.n	8014a70 <__sfp+0x18>
 8014a80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a84:	b9d5      	cbnz	r5, 8014abc <__sfp+0x64>
 8014a86:	4b16      	ldr	r3, [pc, #88]	; (8014ae0 <__sfp+0x88>)
 8014a88:	60e3      	str	r3, [r4, #12]
 8014a8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a8e:	6665      	str	r5, [r4, #100]	; 0x64
 8014a90:	f000 fbde 	bl	8015250 <__retarget_lock_init_recursive>
 8014a94:	f7ff ff96 	bl	80149c4 <__sfp_lock_release>
 8014a98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014aa0:	6025      	str	r5, [r4, #0]
 8014aa2:	61a5      	str	r5, [r4, #24]
 8014aa4:	2208      	movs	r2, #8
 8014aa6:	4629      	mov	r1, r5
 8014aa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014aac:	f7fd f914 	bl	8011cd8 <memset>
 8014ab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014ab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014ab8:	4620      	mov	r0, r4
 8014aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014abc:	3468      	adds	r4, #104	; 0x68
 8014abe:	e7d9      	b.n	8014a74 <__sfp+0x1c>
 8014ac0:	2104      	movs	r1, #4
 8014ac2:	4638      	mov	r0, r7
 8014ac4:	f7ff ff62 	bl	801498c <__sfmoreglue>
 8014ac8:	4604      	mov	r4, r0
 8014aca:	6030      	str	r0, [r6, #0]
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d1d5      	bne.n	8014a7c <__sfp+0x24>
 8014ad0:	f7ff ff78 	bl	80149c4 <__sfp_lock_release>
 8014ad4:	230c      	movs	r3, #12
 8014ad6:	603b      	str	r3, [r7, #0]
 8014ad8:	e7ee      	b.n	8014ab8 <__sfp+0x60>
 8014ada:	bf00      	nop
 8014adc:	080183dc 	.word	0x080183dc
 8014ae0:	ffff0001 	.word	0xffff0001

08014ae4 <fiprintf>:
 8014ae4:	b40e      	push	{r1, r2, r3}
 8014ae6:	b503      	push	{r0, r1, lr}
 8014ae8:	4601      	mov	r1, r0
 8014aea:	ab03      	add	r3, sp, #12
 8014aec:	4805      	ldr	r0, [pc, #20]	; (8014b04 <fiprintf+0x20>)
 8014aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014af2:	6800      	ldr	r0, [r0, #0]
 8014af4:	9301      	str	r3, [sp, #4]
 8014af6:	f001 fab9 	bl	801606c <_vfiprintf_r>
 8014afa:	b002      	add	sp, #8
 8014afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b00:	b003      	add	sp, #12
 8014b02:	4770      	bx	lr
 8014b04:	24000bac 	.word	0x24000bac

08014b08 <_fwalk_reent>:
 8014b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b0c:	4606      	mov	r6, r0
 8014b0e:	4688      	mov	r8, r1
 8014b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014b14:	2700      	movs	r7, #0
 8014b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8014b1e:	d505      	bpl.n	8014b2c <_fwalk_reent+0x24>
 8014b20:	6824      	ldr	r4, [r4, #0]
 8014b22:	2c00      	cmp	r4, #0
 8014b24:	d1f7      	bne.n	8014b16 <_fwalk_reent+0xe>
 8014b26:	4638      	mov	r0, r7
 8014b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b2c:	89ab      	ldrh	r3, [r5, #12]
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d907      	bls.n	8014b42 <_fwalk_reent+0x3a>
 8014b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b36:	3301      	adds	r3, #1
 8014b38:	d003      	beq.n	8014b42 <_fwalk_reent+0x3a>
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	47c0      	blx	r8
 8014b40:	4307      	orrs	r7, r0
 8014b42:	3568      	adds	r5, #104	; 0x68
 8014b44:	e7e9      	b.n	8014b1a <_fwalk_reent+0x12>

08014b46 <rshift>:
 8014b46:	6903      	ldr	r3, [r0, #16]
 8014b48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014b54:	f100 0414 	add.w	r4, r0, #20
 8014b58:	dd45      	ble.n	8014be6 <rshift+0xa0>
 8014b5a:	f011 011f 	ands.w	r1, r1, #31
 8014b5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014b62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014b66:	d10c      	bne.n	8014b82 <rshift+0x3c>
 8014b68:	f100 0710 	add.w	r7, r0, #16
 8014b6c:	4629      	mov	r1, r5
 8014b6e:	42b1      	cmp	r1, r6
 8014b70:	d334      	bcc.n	8014bdc <rshift+0x96>
 8014b72:	1a9b      	subs	r3, r3, r2
 8014b74:	009b      	lsls	r3, r3, #2
 8014b76:	1eea      	subs	r2, r5, #3
 8014b78:	4296      	cmp	r6, r2
 8014b7a:	bf38      	it	cc
 8014b7c:	2300      	movcc	r3, #0
 8014b7e:	4423      	add	r3, r4
 8014b80:	e015      	b.n	8014bae <rshift+0x68>
 8014b82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014b86:	f1c1 0820 	rsb	r8, r1, #32
 8014b8a:	40cf      	lsrs	r7, r1
 8014b8c:	f105 0e04 	add.w	lr, r5, #4
 8014b90:	46a1      	mov	r9, r4
 8014b92:	4576      	cmp	r6, lr
 8014b94:	46f4      	mov	ip, lr
 8014b96:	d815      	bhi.n	8014bc4 <rshift+0x7e>
 8014b98:	1a9a      	subs	r2, r3, r2
 8014b9a:	0092      	lsls	r2, r2, #2
 8014b9c:	3a04      	subs	r2, #4
 8014b9e:	3501      	adds	r5, #1
 8014ba0:	42ae      	cmp	r6, r5
 8014ba2:	bf38      	it	cc
 8014ba4:	2200      	movcc	r2, #0
 8014ba6:	18a3      	adds	r3, r4, r2
 8014ba8:	50a7      	str	r7, [r4, r2]
 8014baa:	b107      	cbz	r7, 8014bae <rshift+0x68>
 8014bac:	3304      	adds	r3, #4
 8014bae:	1b1a      	subs	r2, r3, r4
 8014bb0:	42a3      	cmp	r3, r4
 8014bb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014bb6:	bf08      	it	eq
 8014bb8:	2300      	moveq	r3, #0
 8014bba:	6102      	str	r2, [r0, #16]
 8014bbc:	bf08      	it	eq
 8014bbe:	6143      	streq	r3, [r0, #20]
 8014bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bc4:	f8dc c000 	ldr.w	ip, [ip]
 8014bc8:	fa0c fc08 	lsl.w	ip, ip, r8
 8014bcc:	ea4c 0707 	orr.w	r7, ip, r7
 8014bd0:	f849 7b04 	str.w	r7, [r9], #4
 8014bd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014bd8:	40cf      	lsrs	r7, r1
 8014bda:	e7da      	b.n	8014b92 <rshift+0x4c>
 8014bdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8014be0:	f847 cf04 	str.w	ip, [r7, #4]!
 8014be4:	e7c3      	b.n	8014b6e <rshift+0x28>
 8014be6:	4623      	mov	r3, r4
 8014be8:	e7e1      	b.n	8014bae <rshift+0x68>

08014bea <__hexdig_fun>:
 8014bea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014bee:	2b09      	cmp	r3, #9
 8014bf0:	d802      	bhi.n	8014bf8 <__hexdig_fun+0xe>
 8014bf2:	3820      	subs	r0, #32
 8014bf4:	b2c0      	uxtb	r0, r0
 8014bf6:	4770      	bx	lr
 8014bf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014bfc:	2b05      	cmp	r3, #5
 8014bfe:	d801      	bhi.n	8014c04 <__hexdig_fun+0x1a>
 8014c00:	3847      	subs	r0, #71	; 0x47
 8014c02:	e7f7      	b.n	8014bf4 <__hexdig_fun+0xa>
 8014c04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014c08:	2b05      	cmp	r3, #5
 8014c0a:	d801      	bhi.n	8014c10 <__hexdig_fun+0x26>
 8014c0c:	3827      	subs	r0, #39	; 0x27
 8014c0e:	e7f1      	b.n	8014bf4 <__hexdig_fun+0xa>
 8014c10:	2000      	movs	r0, #0
 8014c12:	4770      	bx	lr

08014c14 <__gethex>:
 8014c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c18:	ed2d 8b02 	vpush	{d8}
 8014c1c:	b089      	sub	sp, #36	; 0x24
 8014c1e:	ee08 0a10 	vmov	s16, r0
 8014c22:	9304      	str	r3, [sp, #16]
 8014c24:	4bb4      	ldr	r3, [pc, #720]	; (8014ef8 <__gethex+0x2e4>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	9301      	str	r3, [sp, #4]
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	468b      	mov	fp, r1
 8014c2e:	4690      	mov	r8, r2
 8014c30:	f7eb fb56 	bl	80002e0 <strlen>
 8014c34:	9b01      	ldr	r3, [sp, #4]
 8014c36:	f8db 2000 	ldr.w	r2, [fp]
 8014c3a:	4403      	add	r3, r0
 8014c3c:	4682      	mov	sl, r0
 8014c3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014c42:	9305      	str	r3, [sp, #20]
 8014c44:	1c93      	adds	r3, r2, #2
 8014c46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014c4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014c4e:	32fe      	adds	r2, #254	; 0xfe
 8014c50:	18d1      	adds	r1, r2, r3
 8014c52:	461f      	mov	r7, r3
 8014c54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014c58:	9100      	str	r1, [sp, #0]
 8014c5a:	2830      	cmp	r0, #48	; 0x30
 8014c5c:	d0f8      	beq.n	8014c50 <__gethex+0x3c>
 8014c5e:	f7ff ffc4 	bl	8014bea <__hexdig_fun>
 8014c62:	4604      	mov	r4, r0
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d13a      	bne.n	8014cde <__gethex+0xca>
 8014c68:	9901      	ldr	r1, [sp, #4]
 8014c6a:	4652      	mov	r2, sl
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f001 fb7a 	bl	8016366 <strncmp>
 8014c72:	4605      	mov	r5, r0
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d168      	bne.n	8014d4a <__gethex+0x136>
 8014c78:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014c7c:	eb07 060a 	add.w	r6, r7, sl
 8014c80:	f7ff ffb3 	bl	8014bea <__hexdig_fun>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d062      	beq.n	8014d4e <__gethex+0x13a>
 8014c88:	4633      	mov	r3, r6
 8014c8a:	7818      	ldrb	r0, [r3, #0]
 8014c8c:	2830      	cmp	r0, #48	; 0x30
 8014c8e:	461f      	mov	r7, r3
 8014c90:	f103 0301 	add.w	r3, r3, #1
 8014c94:	d0f9      	beq.n	8014c8a <__gethex+0x76>
 8014c96:	f7ff ffa8 	bl	8014bea <__hexdig_fun>
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	fab0 f480 	clz	r4, r0
 8014ca0:	0964      	lsrs	r4, r4, #5
 8014ca2:	4635      	mov	r5, r6
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	463a      	mov	r2, r7
 8014ca8:	4616      	mov	r6, r2
 8014caa:	3201      	adds	r2, #1
 8014cac:	7830      	ldrb	r0, [r6, #0]
 8014cae:	f7ff ff9c 	bl	8014bea <__hexdig_fun>
 8014cb2:	2800      	cmp	r0, #0
 8014cb4:	d1f8      	bne.n	8014ca8 <__gethex+0x94>
 8014cb6:	9901      	ldr	r1, [sp, #4]
 8014cb8:	4652      	mov	r2, sl
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f001 fb53 	bl	8016366 <strncmp>
 8014cc0:	b980      	cbnz	r0, 8014ce4 <__gethex+0xd0>
 8014cc2:	b94d      	cbnz	r5, 8014cd8 <__gethex+0xc4>
 8014cc4:	eb06 050a 	add.w	r5, r6, sl
 8014cc8:	462a      	mov	r2, r5
 8014cca:	4616      	mov	r6, r2
 8014ccc:	3201      	adds	r2, #1
 8014cce:	7830      	ldrb	r0, [r6, #0]
 8014cd0:	f7ff ff8b 	bl	8014bea <__hexdig_fun>
 8014cd4:	2800      	cmp	r0, #0
 8014cd6:	d1f8      	bne.n	8014cca <__gethex+0xb6>
 8014cd8:	1bad      	subs	r5, r5, r6
 8014cda:	00ad      	lsls	r5, r5, #2
 8014cdc:	e004      	b.n	8014ce8 <__gethex+0xd4>
 8014cde:	2400      	movs	r4, #0
 8014ce0:	4625      	mov	r5, r4
 8014ce2:	e7e0      	b.n	8014ca6 <__gethex+0x92>
 8014ce4:	2d00      	cmp	r5, #0
 8014ce6:	d1f7      	bne.n	8014cd8 <__gethex+0xc4>
 8014ce8:	7833      	ldrb	r3, [r6, #0]
 8014cea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014cee:	2b50      	cmp	r3, #80	; 0x50
 8014cf0:	d13b      	bne.n	8014d6a <__gethex+0x156>
 8014cf2:	7873      	ldrb	r3, [r6, #1]
 8014cf4:	2b2b      	cmp	r3, #43	; 0x2b
 8014cf6:	d02c      	beq.n	8014d52 <__gethex+0x13e>
 8014cf8:	2b2d      	cmp	r3, #45	; 0x2d
 8014cfa:	d02e      	beq.n	8014d5a <__gethex+0x146>
 8014cfc:	1c71      	adds	r1, r6, #1
 8014cfe:	f04f 0900 	mov.w	r9, #0
 8014d02:	7808      	ldrb	r0, [r1, #0]
 8014d04:	f7ff ff71 	bl	8014bea <__hexdig_fun>
 8014d08:	1e43      	subs	r3, r0, #1
 8014d0a:	b2db      	uxtb	r3, r3
 8014d0c:	2b18      	cmp	r3, #24
 8014d0e:	d82c      	bhi.n	8014d6a <__gethex+0x156>
 8014d10:	f1a0 0210 	sub.w	r2, r0, #16
 8014d14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014d18:	f7ff ff67 	bl	8014bea <__hexdig_fun>
 8014d1c:	1e43      	subs	r3, r0, #1
 8014d1e:	b2db      	uxtb	r3, r3
 8014d20:	2b18      	cmp	r3, #24
 8014d22:	d91d      	bls.n	8014d60 <__gethex+0x14c>
 8014d24:	f1b9 0f00 	cmp.w	r9, #0
 8014d28:	d000      	beq.n	8014d2c <__gethex+0x118>
 8014d2a:	4252      	negs	r2, r2
 8014d2c:	4415      	add	r5, r2
 8014d2e:	f8cb 1000 	str.w	r1, [fp]
 8014d32:	b1e4      	cbz	r4, 8014d6e <__gethex+0x15a>
 8014d34:	9b00      	ldr	r3, [sp, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	bf14      	ite	ne
 8014d3a:	2700      	movne	r7, #0
 8014d3c:	2706      	moveq	r7, #6
 8014d3e:	4638      	mov	r0, r7
 8014d40:	b009      	add	sp, #36	; 0x24
 8014d42:	ecbd 8b02 	vpop	{d8}
 8014d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4a:	463e      	mov	r6, r7
 8014d4c:	4625      	mov	r5, r4
 8014d4e:	2401      	movs	r4, #1
 8014d50:	e7ca      	b.n	8014ce8 <__gethex+0xd4>
 8014d52:	f04f 0900 	mov.w	r9, #0
 8014d56:	1cb1      	adds	r1, r6, #2
 8014d58:	e7d3      	b.n	8014d02 <__gethex+0xee>
 8014d5a:	f04f 0901 	mov.w	r9, #1
 8014d5e:	e7fa      	b.n	8014d56 <__gethex+0x142>
 8014d60:	230a      	movs	r3, #10
 8014d62:	fb03 0202 	mla	r2, r3, r2, r0
 8014d66:	3a10      	subs	r2, #16
 8014d68:	e7d4      	b.n	8014d14 <__gethex+0x100>
 8014d6a:	4631      	mov	r1, r6
 8014d6c:	e7df      	b.n	8014d2e <__gethex+0x11a>
 8014d6e:	1bf3      	subs	r3, r6, r7
 8014d70:	3b01      	subs	r3, #1
 8014d72:	4621      	mov	r1, r4
 8014d74:	2b07      	cmp	r3, #7
 8014d76:	dc0b      	bgt.n	8014d90 <__gethex+0x17c>
 8014d78:	ee18 0a10 	vmov	r0, s16
 8014d7c:	f000 faee 	bl	801535c <_Balloc>
 8014d80:	4604      	mov	r4, r0
 8014d82:	b940      	cbnz	r0, 8014d96 <__gethex+0x182>
 8014d84:	4b5d      	ldr	r3, [pc, #372]	; (8014efc <__gethex+0x2e8>)
 8014d86:	4602      	mov	r2, r0
 8014d88:	21de      	movs	r1, #222	; 0xde
 8014d8a:	485d      	ldr	r0, [pc, #372]	; (8014f00 <__gethex+0x2ec>)
 8014d8c:	f7fe fefa 	bl	8013b84 <__assert_func>
 8014d90:	3101      	adds	r1, #1
 8014d92:	105b      	asrs	r3, r3, #1
 8014d94:	e7ee      	b.n	8014d74 <__gethex+0x160>
 8014d96:	f100 0914 	add.w	r9, r0, #20
 8014d9a:	f04f 0b00 	mov.w	fp, #0
 8014d9e:	f1ca 0301 	rsb	r3, sl, #1
 8014da2:	f8cd 9008 	str.w	r9, [sp, #8]
 8014da6:	f8cd b000 	str.w	fp, [sp]
 8014daa:	9306      	str	r3, [sp, #24]
 8014dac:	42b7      	cmp	r7, r6
 8014dae:	d340      	bcc.n	8014e32 <__gethex+0x21e>
 8014db0:	9802      	ldr	r0, [sp, #8]
 8014db2:	9b00      	ldr	r3, [sp, #0]
 8014db4:	f840 3b04 	str.w	r3, [r0], #4
 8014db8:	eba0 0009 	sub.w	r0, r0, r9
 8014dbc:	1080      	asrs	r0, r0, #2
 8014dbe:	0146      	lsls	r6, r0, #5
 8014dc0:	6120      	str	r0, [r4, #16]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f000 fbbc 	bl	8015540 <__hi0bits>
 8014dc8:	1a30      	subs	r0, r6, r0
 8014dca:	f8d8 6000 	ldr.w	r6, [r8]
 8014dce:	42b0      	cmp	r0, r6
 8014dd0:	dd63      	ble.n	8014e9a <__gethex+0x286>
 8014dd2:	1b87      	subs	r7, r0, r6
 8014dd4:	4639      	mov	r1, r7
 8014dd6:	4620      	mov	r0, r4
 8014dd8:	f000 ff5d 	bl	8015c96 <__any_on>
 8014ddc:	4682      	mov	sl, r0
 8014dde:	b1a8      	cbz	r0, 8014e0c <__gethex+0x1f8>
 8014de0:	1e7b      	subs	r3, r7, #1
 8014de2:	1159      	asrs	r1, r3, #5
 8014de4:	f003 021f 	and.w	r2, r3, #31
 8014de8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014dec:	f04f 0a01 	mov.w	sl, #1
 8014df0:	fa0a f202 	lsl.w	r2, sl, r2
 8014df4:	420a      	tst	r2, r1
 8014df6:	d009      	beq.n	8014e0c <__gethex+0x1f8>
 8014df8:	4553      	cmp	r3, sl
 8014dfa:	dd05      	ble.n	8014e08 <__gethex+0x1f4>
 8014dfc:	1eb9      	subs	r1, r7, #2
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f000 ff49 	bl	8015c96 <__any_on>
 8014e04:	2800      	cmp	r0, #0
 8014e06:	d145      	bne.n	8014e94 <__gethex+0x280>
 8014e08:	f04f 0a02 	mov.w	sl, #2
 8014e0c:	4639      	mov	r1, r7
 8014e0e:	4620      	mov	r0, r4
 8014e10:	f7ff fe99 	bl	8014b46 <rshift>
 8014e14:	443d      	add	r5, r7
 8014e16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014e1a:	42ab      	cmp	r3, r5
 8014e1c:	da4c      	bge.n	8014eb8 <__gethex+0x2a4>
 8014e1e:	ee18 0a10 	vmov	r0, s16
 8014e22:	4621      	mov	r1, r4
 8014e24:	f000 fada 	bl	80153dc <_Bfree>
 8014e28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	6013      	str	r3, [r2, #0]
 8014e2e:	27a3      	movs	r7, #163	; 0xa3
 8014e30:	e785      	b.n	8014d3e <__gethex+0x12a>
 8014e32:	1e73      	subs	r3, r6, #1
 8014e34:	9a05      	ldr	r2, [sp, #20]
 8014e36:	9303      	str	r3, [sp, #12]
 8014e38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014e3c:	4293      	cmp	r3, r2
 8014e3e:	d019      	beq.n	8014e74 <__gethex+0x260>
 8014e40:	f1bb 0f20 	cmp.w	fp, #32
 8014e44:	d107      	bne.n	8014e56 <__gethex+0x242>
 8014e46:	9b02      	ldr	r3, [sp, #8]
 8014e48:	9a00      	ldr	r2, [sp, #0]
 8014e4a:	f843 2b04 	str.w	r2, [r3], #4
 8014e4e:	9302      	str	r3, [sp, #8]
 8014e50:	2300      	movs	r3, #0
 8014e52:	9300      	str	r3, [sp, #0]
 8014e54:	469b      	mov	fp, r3
 8014e56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014e5a:	f7ff fec6 	bl	8014bea <__hexdig_fun>
 8014e5e:	9b00      	ldr	r3, [sp, #0]
 8014e60:	f000 000f 	and.w	r0, r0, #15
 8014e64:	fa00 f00b 	lsl.w	r0, r0, fp
 8014e68:	4303      	orrs	r3, r0
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	f10b 0b04 	add.w	fp, fp, #4
 8014e70:	9b03      	ldr	r3, [sp, #12]
 8014e72:	e00d      	b.n	8014e90 <__gethex+0x27c>
 8014e74:	9b03      	ldr	r3, [sp, #12]
 8014e76:	9a06      	ldr	r2, [sp, #24]
 8014e78:	4413      	add	r3, r2
 8014e7a:	42bb      	cmp	r3, r7
 8014e7c:	d3e0      	bcc.n	8014e40 <__gethex+0x22c>
 8014e7e:	4618      	mov	r0, r3
 8014e80:	9901      	ldr	r1, [sp, #4]
 8014e82:	9307      	str	r3, [sp, #28]
 8014e84:	4652      	mov	r2, sl
 8014e86:	f001 fa6e 	bl	8016366 <strncmp>
 8014e8a:	9b07      	ldr	r3, [sp, #28]
 8014e8c:	2800      	cmp	r0, #0
 8014e8e:	d1d7      	bne.n	8014e40 <__gethex+0x22c>
 8014e90:	461e      	mov	r6, r3
 8014e92:	e78b      	b.n	8014dac <__gethex+0x198>
 8014e94:	f04f 0a03 	mov.w	sl, #3
 8014e98:	e7b8      	b.n	8014e0c <__gethex+0x1f8>
 8014e9a:	da0a      	bge.n	8014eb2 <__gethex+0x29e>
 8014e9c:	1a37      	subs	r7, r6, r0
 8014e9e:	4621      	mov	r1, r4
 8014ea0:	ee18 0a10 	vmov	r0, s16
 8014ea4:	463a      	mov	r2, r7
 8014ea6:	f000 fcb5 	bl	8015814 <__lshift>
 8014eaa:	1bed      	subs	r5, r5, r7
 8014eac:	4604      	mov	r4, r0
 8014eae:	f100 0914 	add.w	r9, r0, #20
 8014eb2:	f04f 0a00 	mov.w	sl, #0
 8014eb6:	e7ae      	b.n	8014e16 <__gethex+0x202>
 8014eb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014ebc:	42a8      	cmp	r0, r5
 8014ebe:	dd72      	ble.n	8014fa6 <__gethex+0x392>
 8014ec0:	1b45      	subs	r5, r0, r5
 8014ec2:	42ae      	cmp	r6, r5
 8014ec4:	dc36      	bgt.n	8014f34 <__gethex+0x320>
 8014ec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014eca:	2b02      	cmp	r3, #2
 8014ecc:	d02a      	beq.n	8014f24 <__gethex+0x310>
 8014ece:	2b03      	cmp	r3, #3
 8014ed0:	d02c      	beq.n	8014f2c <__gethex+0x318>
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d11c      	bne.n	8014f10 <__gethex+0x2fc>
 8014ed6:	42ae      	cmp	r6, r5
 8014ed8:	d11a      	bne.n	8014f10 <__gethex+0x2fc>
 8014eda:	2e01      	cmp	r6, #1
 8014edc:	d112      	bne.n	8014f04 <__gethex+0x2f0>
 8014ede:	9a04      	ldr	r2, [sp, #16]
 8014ee0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ee4:	6013      	str	r3, [r2, #0]
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	6123      	str	r3, [r4, #16]
 8014eea:	f8c9 3000 	str.w	r3, [r9]
 8014eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ef0:	2762      	movs	r7, #98	; 0x62
 8014ef2:	601c      	str	r4, [r3, #0]
 8014ef4:	e723      	b.n	8014d3e <__gethex+0x12a>
 8014ef6:	bf00      	nop
 8014ef8:	08018760 	.word	0x08018760
 8014efc:	08018685 	.word	0x08018685
 8014f00:	080186f8 	.word	0x080186f8
 8014f04:	1e71      	subs	r1, r6, #1
 8014f06:	4620      	mov	r0, r4
 8014f08:	f000 fec5 	bl	8015c96 <__any_on>
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	d1e6      	bne.n	8014ede <__gethex+0x2ca>
 8014f10:	ee18 0a10 	vmov	r0, s16
 8014f14:	4621      	mov	r1, r4
 8014f16:	f000 fa61 	bl	80153dc <_Bfree>
 8014f1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	6013      	str	r3, [r2, #0]
 8014f20:	2750      	movs	r7, #80	; 0x50
 8014f22:	e70c      	b.n	8014d3e <__gethex+0x12a>
 8014f24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d1f2      	bne.n	8014f10 <__gethex+0x2fc>
 8014f2a:	e7d8      	b.n	8014ede <__gethex+0x2ca>
 8014f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d1d5      	bne.n	8014ede <__gethex+0x2ca>
 8014f32:	e7ed      	b.n	8014f10 <__gethex+0x2fc>
 8014f34:	1e6f      	subs	r7, r5, #1
 8014f36:	f1ba 0f00 	cmp.w	sl, #0
 8014f3a:	d131      	bne.n	8014fa0 <__gethex+0x38c>
 8014f3c:	b127      	cbz	r7, 8014f48 <__gethex+0x334>
 8014f3e:	4639      	mov	r1, r7
 8014f40:	4620      	mov	r0, r4
 8014f42:	f000 fea8 	bl	8015c96 <__any_on>
 8014f46:	4682      	mov	sl, r0
 8014f48:	117b      	asrs	r3, r7, #5
 8014f4a:	2101      	movs	r1, #1
 8014f4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014f50:	f007 071f 	and.w	r7, r7, #31
 8014f54:	fa01 f707 	lsl.w	r7, r1, r7
 8014f58:	421f      	tst	r7, r3
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	bf18      	it	ne
 8014f60:	f04a 0a02 	orrne.w	sl, sl, #2
 8014f64:	1b76      	subs	r6, r6, r5
 8014f66:	f7ff fdee 	bl	8014b46 <rshift>
 8014f6a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014f6e:	2702      	movs	r7, #2
 8014f70:	f1ba 0f00 	cmp.w	sl, #0
 8014f74:	d048      	beq.n	8015008 <__gethex+0x3f4>
 8014f76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f7a:	2b02      	cmp	r3, #2
 8014f7c:	d015      	beq.n	8014faa <__gethex+0x396>
 8014f7e:	2b03      	cmp	r3, #3
 8014f80:	d017      	beq.n	8014fb2 <__gethex+0x39e>
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d109      	bne.n	8014f9a <__gethex+0x386>
 8014f86:	f01a 0f02 	tst.w	sl, #2
 8014f8a:	d006      	beq.n	8014f9a <__gethex+0x386>
 8014f8c:	f8d9 0000 	ldr.w	r0, [r9]
 8014f90:	ea4a 0a00 	orr.w	sl, sl, r0
 8014f94:	f01a 0f01 	tst.w	sl, #1
 8014f98:	d10e      	bne.n	8014fb8 <__gethex+0x3a4>
 8014f9a:	f047 0710 	orr.w	r7, r7, #16
 8014f9e:	e033      	b.n	8015008 <__gethex+0x3f4>
 8014fa0:	f04f 0a01 	mov.w	sl, #1
 8014fa4:	e7d0      	b.n	8014f48 <__gethex+0x334>
 8014fa6:	2701      	movs	r7, #1
 8014fa8:	e7e2      	b.n	8014f70 <__gethex+0x35c>
 8014faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fac:	f1c3 0301 	rsb	r3, r3, #1
 8014fb0:	9315      	str	r3, [sp, #84]	; 0x54
 8014fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d0f0      	beq.n	8014f9a <__gethex+0x386>
 8014fb8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014fbc:	f104 0314 	add.w	r3, r4, #20
 8014fc0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014fc4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014fc8:	f04f 0c00 	mov.w	ip, #0
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fd2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014fd6:	d01c      	beq.n	8015012 <__gethex+0x3fe>
 8014fd8:	3201      	adds	r2, #1
 8014fda:	6002      	str	r2, [r0, #0]
 8014fdc:	2f02      	cmp	r7, #2
 8014fde:	f104 0314 	add.w	r3, r4, #20
 8014fe2:	d13f      	bne.n	8015064 <__gethex+0x450>
 8014fe4:	f8d8 2000 	ldr.w	r2, [r8]
 8014fe8:	3a01      	subs	r2, #1
 8014fea:	42b2      	cmp	r2, r6
 8014fec:	d10a      	bne.n	8015004 <__gethex+0x3f0>
 8014fee:	1171      	asrs	r1, r6, #5
 8014ff0:	2201      	movs	r2, #1
 8014ff2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ff6:	f006 061f 	and.w	r6, r6, #31
 8014ffa:	fa02 f606 	lsl.w	r6, r2, r6
 8014ffe:	421e      	tst	r6, r3
 8015000:	bf18      	it	ne
 8015002:	4617      	movne	r7, r2
 8015004:	f047 0720 	orr.w	r7, r7, #32
 8015008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801500a:	601c      	str	r4, [r3, #0]
 801500c:	9b04      	ldr	r3, [sp, #16]
 801500e:	601d      	str	r5, [r3, #0]
 8015010:	e695      	b.n	8014d3e <__gethex+0x12a>
 8015012:	4299      	cmp	r1, r3
 8015014:	f843 cc04 	str.w	ip, [r3, #-4]
 8015018:	d8d8      	bhi.n	8014fcc <__gethex+0x3b8>
 801501a:	68a3      	ldr	r3, [r4, #8]
 801501c:	459b      	cmp	fp, r3
 801501e:	db19      	blt.n	8015054 <__gethex+0x440>
 8015020:	6861      	ldr	r1, [r4, #4]
 8015022:	ee18 0a10 	vmov	r0, s16
 8015026:	3101      	adds	r1, #1
 8015028:	f000 f998 	bl	801535c <_Balloc>
 801502c:	4681      	mov	r9, r0
 801502e:	b918      	cbnz	r0, 8015038 <__gethex+0x424>
 8015030:	4b1a      	ldr	r3, [pc, #104]	; (801509c <__gethex+0x488>)
 8015032:	4602      	mov	r2, r0
 8015034:	2184      	movs	r1, #132	; 0x84
 8015036:	e6a8      	b.n	8014d8a <__gethex+0x176>
 8015038:	6922      	ldr	r2, [r4, #16]
 801503a:	3202      	adds	r2, #2
 801503c:	f104 010c 	add.w	r1, r4, #12
 8015040:	0092      	lsls	r2, r2, #2
 8015042:	300c      	adds	r0, #12
 8015044:	f7fc fe3a 	bl	8011cbc <memcpy>
 8015048:	4621      	mov	r1, r4
 801504a:	ee18 0a10 	vmov	r0, s16
 801504e:	f000 f9c5 	bl	80153dc <_Bfree>
 8015052:	464c      	mov	r4, r9
 8015054:	6923      	ldr	r3, [r4, #16]
 8015056:	1c5a      	adds	r2, r3, #1
 8015058:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801505c:	6122      	str	r2, [r4, #16]
 801505e:	2201      	movs	r2, #1
 8015060:	615a      	str	r2, [r3, #20]
 8015062:	e7bb      	b.n	8014fdc <__gethex+0x3c8>
 8015064:	6922      	ldr	r2, [r4, #16]
 8015066:	455a      	cmp	r2, fp
 8015068:	dd0b      	ble.n	8015082 <__gethex+0x46e>
 801506a:	2101      	movs	r1, #1
 801506c:	4620      	mov	r0, r4
 801506e:	f7ff fd6a 	bl	8014b46 <rshift>
 8015072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015076:	3501      	adds	r5, #1
 8015078:	42ab      	cmp	r3, r5
 801507a:	f6ff aed0 	blt.w	8014e1e <__gethex+0x20a>
 801507e:	2701      	movs	r7, #1
 8015080:	e7c0      	b.n	8015004 <__gethex+0x3f0>
 8015082:	f016 061f 	ands.w	r6, r6, #31
 8015086:	d0fa      	beq.n	801507e <__gethex+0x46a>
 8015088:	4453      	add	r3, sl
 801508a:	f1c6 0620 	rsb	r6, r6, #32
 801508e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015092:	f000 fa55 	bl	8015540 <__hi0bits>
 8015096:	42b0      	cmp	r0, r6
 8015098:	dbe7      	blt.n	801506a <__gethex+0x456>
 801509a:	e7f0      	b.n	801507e <__gethex+0x46a>
 801509c:	08018685 	.word	0x08018685

080150a0 <L_shift>:
 80150a0:	f1c2 0208 	rsb	r2, r2, #8
 80150a4:	0092      	lsls	r2, r2, #2
 80150a6:	b570      	push	{r4, r5, r6, lr}
 80150a8:	f1c2 0620 	rsb	r6, r2, #32
 80150ac:	6843      	ldr	r3, [r0, #4]
 80150ae:	6804      	ldr	r4, [r0, #0]
 80150b0:	fa03 f506 	lsl.w	r5, r3, r6
 80150b4:	432c      	orrs	r4, r5
 80150b6:	40d3      	lsrs	r3, r2
 80150b8:	6004      	str	r4, [r0, #0]
 80150ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80150be:	4288      	cmp	r0, r1
 80150c0:	d3f4      	bcc.n	80150ac <L_shift+0xc>
 80150c2:	bd70      	pop	{r4, r5, r6, pc}

080150c4 <__match>:
 80150c4:	b530      	push	{r4, r5, lr}
 80150c6:	6803      	ldr	r3, [r0, #0]
 80150c8:	3301      	adds	r3, #1
 80150ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150ce:	b914      	cbnz	r4, 80150d6 <__match+0x12>
 80150d0:	6003      	str	r3, [r0, #0]
 80150d2:	2001      	movs	r0, #1
 80150d4:	bd30      	pop	{r4, r5, pc}
 80150d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80150de:	2d19      	cmp	r5, #25
 80150e0:	bf98      	it	ls
 80150e2:	3220      	addls	r2, #32
 80150e4:	42a2      	cmp	r2, r4
 80150e6:	d0f0      	beq.n	80150ca <__match+0x6>
 80150e8:	2000      	movs	r0, #0
 80150ea:	e7f3      	b.n	80150d4 <__match+0x10>

080150ec <__hexnan>:
 80150ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f0:	680b      	ldr	r3, [r1, #0]
 80150f2:	115e      	asrs	r6, r3, #5
 80150f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80150f8:	f013 031f 	ands.w	r3, r3, #31
 80150fc:	b087      	sub	sp, #28
 80150fe:	bf18      	it	ne
 8015100:	3604      	addne	r6, #4
 8015102:	2500      	movs	r5, #0
 8015104:	1f37      	subs	r7, r6, #4
 8015106:	4690      	mov	r8, r2
 8015108:	6802      	ldr	r2, [r0, #0]
 801510a:	9301      	str	r3, [sp, #4]
 801510c:	4682      	mov	sl, r0
 801510e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015112:	46b9      	mov	r9, r7
 8015114:	463c      	mov	r4, r7
 8015116:	9502      	str	r5, [sp, #8]
 8015118:	46ab      	mov	fp, r5
 801511a:	7851      	ldrb	r1, [r2, #1]
 801511c:	1c53      	adds	r3, r2, #1
 801511e:	9303      	str	r3, [sp, #12]
 8015120:	b341      	cbz	r1, 8015174 <__hexnan+0x88>
 8015122:	4608      	mov	r0, r1
 8015124:	9205      	str	r2, [sp, #20]
 8015126:	9104      	str	r1, [sp, #16]
 8015128:	f7ff fd5f 	bl	8014bea <__hexdig_fun>
 801512c:	2800      	cmp	r0, #0
 801512e:	d14f      	bne.n	80151d0 <__hexnan+0xe4>
 8015130:	9904      	ldr	r1, [sp, #16]
 8015132:	9a05      	ldr	r2, [sp, #20]
 8015134:	2920      	cmp	r1, #32
 8015136:	d818      	bhi.n	801516a <__hexnan+0x7e>
 8015138:	9b02      	ldr	r3, [sp, #8]
 801513a:	459b      	cmp	fp, r3
 801513c:	dd13      	ble.n	8015166 <__hexnan+0x7a>
 801513e:	454c      	cmp	r4, r9
 8015140:	d206      	bcs.n	8015150 <__hexnan+0x64>
 8015142:	2d07      	cmp	r5, #7
 8015144:	dc04      	bgt.n	8015150 <__hexnan+0x64>
 8015146:	462a      	mov	r2, r5
 8015148:	4649      	mov	r1, r9
 801514a:	4620      	mov	r0, r4
 801514c:	f7ff ffa8 	bl	80150a0 <L_shift>
 8015150:	4544      	cmp	r4, r8
 8015152:	d950      	bls.n	80151f6 <__hexnan+0x10a>
 8015154:	2300      	movs	r3, #0
 8015156:	f1a4 0904 	sub.w	r9, r4, #4
 801515a:	f844 3c04 	str.w	r3, [r4, #-4]
 801515e:	f8cd b008 	str.w	fp, [sp, #8]
 8015162:	464c      	mov	r4, r9
 8015164:	461d      	mov	r5, r3
 8015166:	9a03      	ldr	r2, [sp, #12]
 8015168:	e7d7      	b.n	801511a <__hexnan+0x2e>
 801516a:	2929      	cmp	r1, #41	; 0x29
 801516c:	d156      	bne.n	801521c <__hexnan+0x130>
 801516e:	3202      	adds	r2, #2
 8015170:	f8ca 2000 	str.w	r2, [sl]
 8015174:	f1bb 0f00 	cmp.w	fp, #0
 8015178:	d050      	beq.n	801521c <__hexnan+0x130>
 801517a:	454c      	cmp	r4, r9
 801517c:	d206      	bcs.n	801518c <__hexnan+0xa0>
 801517e:	2d07      	cmp	r5, #7
 8015180:	dc04      	bgt.n	801518c <__hexnan+0xa0>
 8015182:	462a      	mov	r2, r5
 8015184:	4649      	mov	r1, r9
 8015186:	4620      	mov	r0, r4
 8015188:	f7ff ff8a 	bl	80150a0 <L_shift>
 801518c:	4544      	cmp	r4, r8
 801518e:	d934      	bls.n	80151fa <__hexnan+0x10e>
 8015190:	f1a8 0204 	sub.w	r2, r8, #4
 8015194:	4623      	mov	r3, r4
 8015196:	f853 1b04 	ldr.w	r1, [r3], #4
 801519a:	f842 1f04 	str.w	r1, [r2, #4]!
 801519e:	429f      	cmp	r7, r3
 80151a0:	d2f9      	bcs.n	8015196 <__hexnan+0xaa>
 80151a2:	1b3b      	subs	r3, r7, r4
 80151a4:	f023 0303 	bic.w	r3, r3, #3
 80151a8:	3304      	adds	r3, #4
 80151aa:	3401      	adds	r4, #1
 80151ac:	3e03      	subs	r6, #3
 80151ae:	42b4      	cmp	r4, r6
 80151b0:	bf88      	it	hi
 80151b2:	2304      	movhi	r3, #4
 80151b4:	4443      	add	r3, r8
 80151b6:	2200      	movs	r2, #0
 80151b8:	f843 2b04 	str.w	r2, [r3], #4
 80151bc:	429f      	cmp	r7, r3
 80151be:	d2fb      	bcs.n	80151b8 <__hexnan+0xcc>
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	b91b      	cbnz	r3, 80151cc <__hexnan+0xe0>
 80151c4:	4547      	cmp	r7, r8
 80151c6:	d127      	bne.n	8015218 <__hexnan+0x12c>
 80151c8:	2301      	movs	r3, #1
 80151ca:	603b      	str	r3, [r7, #0]
 80151cc:	2005      	movs	r0, #5
 80151ce:	e026      	b.n	801521e <__hexnan+0x132>
 80151d0:	3501      	adds	r5, #1
 80151d2:	2d08      	cmp	r5, #8
 80151d4:	f10b 0b01 	add.w	fp, fp, #1
 80151d8:	dd06      	ble.n	80151e8 <__hexnan+0xfc>
 80151da:	4544      	cmp	r4, r8
 80151dc:	d9c3      	bls.n	8015166 <__hexnan+0x7a>
 80151de:	2300      	movs	r3, #0
 80151e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80151e4:	2501      	movs	r5, #1
 80151e6:	3c04      	subs	r4, #4
 80151e8:	6822      	ldr	r2, [r4, #0]
 80151ea:	f000 000f 	and.w	r0, r0, #15
 80151ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80151f2:	6022      	str	r2, [r4, #0]
 80151f4:	e7b7      	b.n	8015166 <__hexnan+0x7a>
 80151f6:	2508      	movs	r5, #8
 80151f8:	e7b5      	b.n	8015166 <__hexnan+0x7a>
 80151fa:	9b01      	ldr	r3, [sp, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d0df      	beq.n	80151c0 <__hexnan+0xd4>
 8015200:	f04f 32ff 	mov.w	r2, #4294967295
 8015204:	f1c3 0320 	rsb	r3, r3, #32
 8015208:	fa22 f303 	lsr.w	r3, r2, r3
 801520c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015210:	401a      	ands	r2, r3
 8015212:	f846 2c04 	str.w	r2, [r6, #-4]
 8015216:	e7d3      	b.n	80151c0 <__hexnan+0xd4>
 8015218:	3f04      	subs	r7, #4
 801521a:	e7d1      	b.n	80151c0 <__hexnan+0xd4>
 801521c:	2004      	movs	r0, #4
 801521e:	b007      	add	sp, #28
 8015220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015224 <_gettimeofday_r>:
 8015224:	b538      	push	{r3, r4, r5, lr}
 8015226:	4d07      	ldr	r5, [pc, #28]	; (8015244 <_gettimeofday_r+0x20>)
 8015228:	2300      	movs	r3, #0
 801522a:	4604      	mov	r4, r0
 801522c:	4608      	mov	r0, r1
 801522e:	4611      	mov	r1, r2
 8015230:	602b      	str	r3, [r5, #0]
 8015232:	f001 fa2b 	bl	801668c <_gettimeofday>
 8015236:	1c43      	adds	r3, r0, #1
 8015238:	d102      	bne.n	8015240 <_gettimeofday_r+0x1c>
 801523a:	682b      	ldr	r3, [r5, #0]
 801523c:	b103      	cbz	r3, 8015240 <_gettimeofday_r+0x1c>
 801523e:	6023      	str	r3, [r4, #0]
 8015240:	bd38      	pop	{r3, r4, r5, pc}
 8015242:	bf00      	nop
 8015244:	24009e1c 	.word	0x24009e1c

08015248 <_localeconv_r>:
 8015248:	4800      	ldr	r0, [pc, #0]	; (801524c <_localeconv_r+0x4>)
 801524a:	4770      	bx	lr
 801524c:	24000d04 	.word	0x24000d04

08015250 <__retarget_lock_init_recursive>:
 8015250:	4770      	bx	lr

08015252 <__retarget_lock_acquire_recursive>:
 8015252:	4770      	bx	lr

08015254 <__retarget_lock_release_recursive>:
 8015254:	4770      	bx	lr

08015256 <__swhatbuf_r>:
 8015256:	b570      	push	{r4, r5, r6, lr}
 8015258:	460e      	mov	r6, r1
 801525a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801525e:	2900      	cmp	r1, #0
 8015260:	b096      	sub	sp, #88	; 0x58
 8015262:	4614      	mov	r4, r2
 8015264:	461d      	mov	r5, r3
 8015266:	da08      	bge.n	801527a <__swhatbuf_r+0x24>
 8015268:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801526c:	2200      	movs	r2, #0
 801526e:	602a      	str	r2, [r5, #0]
 8015270:	061a      	lsls	r2, r3, #24
 8015272:	d410      	bmi.n	8015296 <__swhatbuf_r+0x40>
 8015274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015278:	e00e      	b.n	8015298 <__swhatbuf_r+0x42>
 801527a:	466a      	mov	r2, sp
 801527c:	f001 f8be 	bl	80163fc <_fstat_r>
 8015280:	2800      	cmp	r0, #0
 8015282:	dbf1      	blt.n	8015268 <__swhatbuf_r+0x12>
 8015284:	9a01      	ldr	r2, [sp, #4]
 8015286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801528a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801528e:	425a      	negs	r2, r3
 8015290:	415a      	adcs	r2, r3
 8015292:	602a      	str	r2, [r5, #0]
 8015294:	e7ee      	b.n	8015274 <__swhatbuf_r+0x1e>
 8015296:	2340      	movs	r3, #64	; 0x40
 8015298:	2000      	movs	r0, #0
 801529a:	6023      	str	r3, [r4, #0]
 801529c:	b016      	add	sp, #88	; 0x58
 801529e:	bd70      	pop	{r4, r5, r6, pc}

080152a0 <__smakebuf_r>:
 80152a0:	898b      	ldrh	r3, [r1, #12]
 80152a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152a4:	079d      	lsls	r5, r3, #30
 80152a6:	4606      	mov	r6, r0
 80152a8:	460c      	mov	r4, r1
 80152aa:	d507      	bpl.n	80152bc <__smakebuf_r+0x1c>
 80152ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	6123      	str	r3, [r4, #16]
 80152b4:	2301      	movs	r3, #1
 80152b6:	6163      	str	r3, [r4, #20]
 80152b8:	b002      	add	sp, #8
 80152ba:	bd70      	pop	{r4, r5, r6, pc}
 80152bc:	ab01      	add	r3, sp, #4
 80152be:	466a      	mov	r2, sp
 80152c0:	f7ff ffc9 	bl	8015256 <__swhatbuf_r>
 80152c4:	9900      	ldr	r1, [sp, #0]
 80152c6:	4605      	mov	r5, r0
 80152c8:	4630      	mov	r0, r6
 80152ca:	f7fc fd79 	bl	8011dc0 <_malloc_r>
 80152ce:	b948      	cbnz	r0, 80152e4 <__smakebuf_r+0x44>
 80152d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152d4:	059a      	lsls	r2, r3, #22
 80152d6:	d4ef      	bmi.n	80152b8 <__smakebuf_r+0x18>
 80152d8:	f023 0303 	bic.w	r3, r3, #3
 80152dc:	f043 0302 	orr.w	r3, r3, #2
 80152e0:	81a3      	strh	r3, [r4, #12]
 80152e2:	e7e3      	b.n	80152ac <__smakebuf_r+0xc>
 80152e4:	4b0d      	ldr	r3, [pc, #52]	; (801531c <__smakebuf_r+0x7c>)
 80152e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80152e8:	89a3      	ldrh	r3, [r4, #12]
 80152ea:	6020      	str	r0, [r4, #0]
 80152ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152f0:	81a3      	strh	r3, [r4, #12]
 80152f2:	9b00      	ldr	r3, [sp, #0]
 80152f4:	6163      	str	r3, [r4, #20]
 80152f6:	9b01      	ldr	r3, [sp, #4]
 80152f8:	6120      	str	r0, [r4, #16]
 80152fa:	b15b      	cbz	r3, 8015314 <__smakebuf_r+0x74>
 80152fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015300:	4630      	mov	r0, r6
 8015302:	f001 f88d 	bl	8016420 <_isatty_r>
 8015306:	b128      	cbz	r0, 8015314 <__smakebuf_r+0x74>
 8015308:	89a3      	ldrh	r3, [r4, #12]
 801530a:	f023 0303 	bic.w	r3, r3, #3
 801530e:	f043 0301 	orr.w	r3, r3, #1
 8015312:	81a3      	strh	r3, [r4, #12]
 8015314:	89a0      	ldrh	r0, [r4, #12]
 8015316:	4305      	orrs	r5, r0
 8015318:	81a5      	strh	r5, [r4, #12]
 801531a:	e7cd      	b.n	80152b8 <__smakebuf_r+0x18>
 801531c:	08014981 	.word	0x08014981

08015320 <__ascii_mbtowc>:
 8015320:	b082      	sub	sp, #8
 8015322:	b901      	cbnz	r1, 8015326 <__ascii_mbtowc+0x6>
 8015324:	a901      	add	r1, sp, #4
 8015326:	b142      	cbz	r2, 801533a <__ascii_mbtowc+0x1a>
 8015328:	b14b      	cbz	r3, 801533e <__ascii_mbtowc+0x1e>
 801532a:	7813      	ldrb	r3, [r2, #0]
 801532c:	600b      	str	r3, [r1, #0]
 801532e:	7812      	ldrb	r2, [r2, #0]
 8015330:	1e10      	subs	r0, r2, #0
 8015332:	bf18      	it	ne
 8015334:	2001      	movne	r0, #1
 8015336:	b002      	add	sp, #8
 8015338:	4770      	bx	lr
 801533a:	4610      	mov	r0, r2
 801533c:	e7fb      	b.n	8015336 <__ascii_mbtowc+0x16>
 801533e:	f06f 0001 	mvn.w	r0, #1
 8015342:	e7f8      	b.n	8015336 <__ascii_mbtowc+0x16>

08015344 <__malloc_lock>:
 8015344:	4801      	ldr	r0, [pc, #4]	; (801534c <__malloc_lock+0x8>)
 8015346:	f7ff bf84 	b.w	8015252 <__retarget_lock_acquire_recursive>
 801534a:	bf00      	nop
 801534c:	24009e18 	.word	0x24009e18

08015350 <__malloc_unlock>:
 8015350:	4801      	ldr	r0, [pc, #4]	; (8015358 <__malloc_unlock+0x8>)
 8015352:	f7ff bf7f 	b.w	8015254 <__retarget_lock_release_recursive>
 8015356:	bf00      	nop
 8015358:	24009e18 	.word	0x24009e18

0801535c <_Balloc>:
 801535c:	b570      	push	{r4, r5, r6, lr}
 801535e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015360:	4604      	mov	r4, r0
 8015362:	460d      	mov	r5, r1
 8015364:	b976      	cbnz	r6, 8015384 <_Balloc+0x28>
 8015366:	2010      	movs	r0, #16
 8015368:	f7fc fca0 	bl	8011cac <malloc>
 801536c:	4602      	mov	r2, r0
 801536e:	6260      	str	r0, [r4, #36]	; 0x24
 8015370:	b920      	cbnz	r0, 801537c <_Balloc+0x20>
 8015372:	4b18      	ldr	r3, [pc, #96]	; (80153d4 <_Balloc+0x78>)
 8015374:	4818      	ldr	r0, [pc, #96]	; (80153d8 <_Balloc+0x7c>)
 8015376:	2166      	movs	r1, #102	; 0x66
 8015378:	f7fe fc04 	bl	8013b84 <__assert_func>
 801537c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015380:	6006      	str	r6, [r0, #0]
 8015382:	60c6      	str	r6, [r0, #12]
 8015384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015386:	68f3      	ldr	r3, [r6, #12]
 8015388:	b183      	cbz	r3, 80153ac <_Balloc+0x50>
 801538a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801538c:	68db      	ldr	r3, [r3, #12]
 801538e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015392:	b9b8      	cbnz	r0, 80153c4 <_Balloc+0x68>
 8015394:	2101      	movs	r1, #1
 8015396:	fa01 f605 	lsl.w	r6, r1, r5
 801539a:	1d72      	adds	r2, r6, #5
 801539c:	0092      	lsls	r2, r2, #2
 801539e:	4620      	mov	r0, r4
 80153a0:	f000 fc9a 	bl	8015cd8 <_calloc_r>
 80153a4:	b160      	cbz	r0, 80153c0 <_Balloc+0x64>
 80153a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80153aa:	e00e      	b.n	80153ca <_Balloc+0x6e>
 80153ac:	2221      	movs	r2, #33	; 0x21
 80153ae:	2104      	movs	r1, #4
 80153b0:	4620      	mov	r0, r4
 80153b2:	f000 fc91 	bl	8015cd8 <_calloc_r>
 80153b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153b8:	60f0      	str	r0, [r6, #12]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1e4      	bne.n	801538a <_Balloc+0x2e>
 80153c0:	2000      	movs	r0, #0
 80153c2:	bd70      	pop	{r4, r5, r6, pc}
 80153c4:	6802      	ldr	r2, [r0, #0]
 80153c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80153ca:	2300      	movs	r3, #0
 80153cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80153d0:	e7f7      	b.n	80153c2 <_Balloc+0x66>
 80153d2:	bf00      	nop
 80153d4:	08018419 	.word	0x08018419
 80153d8:	08018774 	.word	0x08018774

080153dc <_Bfree>:
 80153dc:	b570      	push	{r4, r5, r6, lr}
 80153de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80153e0:	4605      	mov	r5, r0
 80153e2:	460c      	mov	r4, r1
 80153e4:	b976      	cbnz	r6, 8015404 <_Bfree+0x28>
 80153e6:	2010      	movs	r0, #16
 80153e8:	f7fc fc60 	bl	8011cac <malloc>
 80153ec:	4602      	mov	r2, r0
 80153ee:	6268      	str	r0, [r5, #36]	; 0x24
 80153f0:	b920      	cbnz	r0, 80153fc <_Bfree+0x20>
 80153f2:	4b09      	ldr	r3, [pc, #36]	; (8015418 <_Bfree+0x3c>)
 80153f4:	4809      	ldr	r0, [pc, #36]	; (801541c <_Bfree+0x40>)
 80153f6:	218a      	movs	r1, #138	; 0x8a
 80153f8:	f7fe fbc4 	bl	8013b84 <__assert_func>
 80153fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015400:	6006      	str	r6, [r0, #0]
 8015402:	60c6      	str	r6, [r0, #12]
 8015404:	b13c      	cbz	r4, 8015416 <_Bfree+0x3a>
 8015406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015408:	6862      	ldr	r2, [r4, #4]
 801540a:	68db      	ldr	r3, [r3, #12]
 801540c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015410:	6021      	str	r1, [r4, #0]
 8015412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015416:	bd70      	pop	{r4, r5, r6, pc}
 8015418:	08018419 	.word	0x08018419
 801541c:	08018774 	.word	0x08018774

08015420 <__multadd>:
 8015420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015424:	690d      	ldr	r5, [r1, #16]
 8015426:	4607      	mov	r7, r0
 8015428:	460c      	mov	r4, r1
 801542a:	461e      	mov	r6, r3
 801542c:	f101 0c14 	add.w	ip, r1, #20
 8015430:	2000      	movs	r0, #0
 8015432:	f8dc 3000 	ldr.w	r3, [ip]
 8015436:	b299      	uxth	r1, r3
 8015438:	fb02 6101 	mla	r1, r2, r1, r6
 801543c:	0c1e      	lsrs	r6, r3, #16
 801543e:	0c0b      	lsrs	r3, r1, #16
 8015440:	fb02 3306 	mla	r3, r2, r6, r3
 8015444:	b289      	uxth	r1, r1
 8015446:	3001      	adds	r0, #1
 8015448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801544c:	4285      	cmp	r5, r0
 801544e:	f84c 1b04 	str.w	r1, [ip], #4
 8015452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015456:	dcec      	bgt.n	8015432 <__multadd+0x12>
 8015458:	b30e      	cbz	r6, 801549e <__multadd+0x7e>
 801545a:	68a3      	ldr	r3, [r4, #8]
 801545c:	42ab      	cmp	r3, r5
 801545e:	dc19      	bgt.n	8015494 <__multadd+0x74>
 8015460:	6861      	ldr	r1, [r4, #4]
 8015462:	4638      	mov	r0, r7
 8015464:	3101      	adds	r1, #1
 8015466:	f7ff ff79 	bl	801535c <_Balloc>
 801546a:	4680      	mov	r8, r0
 801546c:	b928      	cbnz	r0, 801547a <__multadd+0x5a>
 801546e:	4602      	mov	r2, r0
 8015470:	4b0c      	ldr	r3, [pc, #48]	; (80154a4 <__multadd+0x84>)
 8015472:	480d      	ldr	r0, [pc, #52]	; (80154a8 <__multadd+0x88>)
 8015474:	21b5      	movs	r1, #181	; 0xb5
 8015476:	f7fe fb85 	bl	8013b84 <__assert_func>
 801547a:	6922      	ldr	r2, [r4, #16]
 801547c:	3202      	adds	r2, #2
 801547e:	f104 010c 	add.w	r1, r4, #12
 8015482:	0092      	lsls	r2, r2, #2
 8015484:	300c      	adds	r0, #12
 8015486:	f7fc fc19 	bl	8011cbc <memcpy>
 801548a:	4621      	mov	r1, r4
 801548c:	4638      	mov	r0, r7
 801548e:	f7ff ffa5 	bl	80153dc <_Bfree>
 8015492:	4644      	mov	r4, r8
 8015494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015498:	3501      	adds	r5, #1
 801549a:	615e      	str	r6, [r3, #20]
 801549c:	6125      	str	r5, [r4, #16]
 801549e:	4620      	mov	r0, r4
 80154a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154a4:	08018685 	.word	0x08018685
 80154a8:	08018774 	.word	0x08018774

080154ac <__s2b>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	460c      	mov	r4, r1
 80154b2:	4615      	mov	r5, r2
 80154b4:	461f      	mov	r7, r3
 80154b6:	2209      	movs	r2, #9
 80154b8:	3308      	adds	r3, #8
 80154ba:	4606      	mov	r6, r0
 80154bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80154c0:	2100      	movs	r1, #0
 80154c2:	2201      	movs	r2, #1
 80154c4:	429a      	cmp	r2, r3
 80154c6:	db09      	blt.n	80154dc <__s2b+0x30>
 80154c8:	4630      	mov	r0, r6
 80154ca:	f7ff ff47 	bl	801535c <_Balloc>
 80154ce:	b940      	cbnz	r0, 80154e2 <__s2b+0x36>
 80154d0:	4602      	mov	r2, r0
 80154d2:	4b19      	ldr	r3, [pc, #100]	; (8015538 <__s2b+0x8c>)
 80154d4:	4819      	ldr	r0, [pc, #100]	; (801553c <__s2b+0x90>)
 80154d6:	21ce      	movs	r1, #206	; 0xce
 80154d8:	f7fe fb54 	bl	8013b84 <__assert_func>
 80154dc:	0052      	lsls	r2, r2, #1
 80154de:	3101      	adds	r1, #1
 80154e0:	e7f0      	b.n	80154c4 <__s2b+0x18>
 80154e2:	9b08      	ldr	r3, [sp, #32]
 80154e4:	6143      	str	r3, [r0, #20]
 80154e6:	2d09      	cmp	r5, #9
 80154e8:	f04f 0301 	mov.w	r3, #1
 80154ec:	6103      	str	r3, [r0, #16]
 80154ee:	dd16      	ble.n	801551e <__s2b+0x72>
 80154f0:	f104 0909 	add.w	r9, r4, #9
 80154f4:	46c8      	mov	r8, r9
 80154f6:	442c      	add	r4, r5
 80154f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80154fc:	4601      	mov	r1, r0
 80154fe:	3b30      	subs	r3, #48	; 0x30
 8015500:	220a      	movs	r2, #10
 8015502:	4630      	mov	r0, r6
 8015504:	f7ff ff8c 	bl	8015420 <__multadd>
 8015508:	45a0      	cmp	r8, r4
 801550a:	d1f5      	bne.n	80154f8 <__s2b+0x4c>
 801550c:	f1a5 0408 	sub.w	r4, r5, #8
 8015510:	444c      	add	r4, r9
 8015512:	1b2d      	subs	r5, r5, r4
 8015514:	1963      	adds	r3, r4, r5
 8015516:	42bb      	cmp	r3, r7
 8015518:	db04      	blt.n	8015524 <__s2b+0x78>
 801551a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801551e:	340a      	adds	r4, #10
 8015520:	2509      	movs	r5, #9
 8015522:	e7f6      	b.n	8015512 <__s2b+0x66>
 8015524:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015528:	4601      	mov	r1, r0
 801552a:	3b30      	subs	r3, #48	; 0x30
 801552c:	220a      	movs	r2, #10
 801552e:	4630      	mov	r0, r6
 8015530:	f7ff ff76 	bl	8015420 <__multadd>
 8015534:	e7ee      	b.n	8015514 <__s2b+0x68>
 8015536:	bf00      	nop
 8015538:	08018685 	.word	0x08018685
 801553c:	08018774 	.word	0x08018774

08015540 <__hi0bits>:
 8015540:	0c03      	lsrs	r3, r0, #16
 8015542:	041b      	lsls	r3, r3, #16
 8015544:	b9d3      	cbnz	r3, 801557c <__hi0bits+0x3c>
 8015546:	0400      	lsls	r0, r0, #16
 8015548:	2310      	movs	r3, #16
 801554a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801554e:	bf04      	itt	eq
 8015550:	0200      	lsleq	r0, r0, #8
 8015552:	3308      	addeq	r3, #8
 8015554:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015558:	bf04      	itt	eq
 801555a:	0100      	lsleq	r0, r0, #4
 801555c:	3304      	addeq	r3, #4
 801555e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015562:	bf04      	itt	eq
 8015564:	0080      	lsleq	r0, r0, #2
 8015566:	3302      	addeq	r3, #2
 8015568:	2800      	cmp	r0, #0
 801556a:	db05      	blt.n	8015578 <__hi0bits+0x38>
 801556c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015570:	f103 0301 	add.w	r3, r3, #1
 8015574:	bf08      	it	eq
 8015576:	2320      	moveq	r3, #32
 8015578:	4618      	mov	r0, r3
 801557a:	4770      	bx	lr
 801557c:	2300      	movs	r3, #0
 801557e:	e7e4      	b.n	801554a <__hi0bits+0xa>

08015580 <__lo0bits>:
 8015580:	6803      	ldr	r3, [r0, #0]
 8015582:	f013 0207 	ands.w	r2, r3, #7
 8015586:	4601      	mov	r1, r0
 8015588:	d00b      	beq.n	80155a2 <__lo0bits+0x22>
 801558a:	07da      	lsls	r2, r3, #31
 801558c:	d423      	bmi.n	80155d6 <__lo0bits+0x56>
 801558e:	0798      	lsls	r0, r3, #30
 8015590:	bf49      	itett	mi
 8015592:	085b      	lsrmi	r3, r3, #1
 8015594:	089b      	lsrpl	r3, r3, #2
 8015596:	2001      	movmi	r0, #1
 8015598:	600b      	strmi	r3, [r1, #0]
 801559a:	bf5c      	itt	pl
 801559c:	600b      	strpl	r3, [r1, #0]
 801559e:	2002      	movpl	r0, #2
 80155a0:	4770      	bx	lr
 80155a2:	b298      	uxth	r0, r3
 80155a4:	b9a8      	cbnz	r0, 80155d2 <__lo0bits+0x52>
 80155a6:	0c1b      	lsrs	r3, r3, #16
 80155a8:	2010      	movs	r0, #16
 80155aa:	b2da      	uxtb	r2, r3
 80155ac:	b90a      	cbnz	r2, 80155b2 <__lo0bits+0x32>
 80155ae:	3008      	adds	r0, #8
 80155b0:	0a1b      	lsrs	r3, r3, #8
 80155b2:	071a      	lsls	r2, r3, #28
 80155b4:	bf04      	itt	eq
 80155b6:	091b      	lsreq	r3, r3, #4
 80155b8:	3004      	addeq	r0, #4
 80155ba:	079a      	lsls	r2, r3, #30
 80155bc:	bf04      	itt	eq
 80155be:	089b      	lsreq	r3, r3, #2
 80155c0:	3002      	addeq	r0, #2
 80155c2:	07da      	lsls	r2, r3, #31
 80155c4:	d403      	bmi.n	80155ce <__lo0bits+0x4e>
 80155c6:	085b      	lsrs	r3, r3, #1
 80155c8:	f100 0001 	add.w	r0, r0, #1
 80155cc:	d005      	beq.n	80155da <__lo0bits+0x5a>
 80155ce:	600b      	str	r3, [r1, #0]
 80155d0:	4770      	bx	lr
 80155d2:	4610      	mov	r0, r2
 80155d4:	e7e9      	b.n	80155aa <__lo0bits+0x2a>
 80155d6:	2000      	movs	r0, #0
 80155d8:	4770      	bx	lr
 80155da:	2020      	movs	r0, #32
 80155dc:	4770      	bx	lr
	...

080155e0 <__i2b>:
 80155e0:	b510      	push	{r4, lr}
 80155e2:	460c      	mov	r4, r1
 80155e4:	2101      	movs	r1, #1
 80155e6:	f7ff feb9 	bl	801535c <_Balloc>
 80155ea:	4602      	mov	r2, r0
 80155ec:	b928      	cbnz	r0, 80155fa <__i2b+0x1a>
 80155ee:	4b05      	ldr	r3, [pc, #20]	; (8015604 <__i2b+0x24>)
 80155f0:	4805      	ldr	r0, [pc, #20]	; (8015608 <__i2b+0x28>)
 80155f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80155f6:	f7fe fac5 	bl	8013b84 <__assert_func>
 80155fa:	2301      	movs	r3, #1
 80155fc:	6144      	str	r4, [r0, #20]
 80155fe:	6103      	str	r3, [r0, #16]
 8015600:	bd10      	pop	{r4, pc}
 8015602:	bf00      	nop
 8015604:	08018685 	.word	0x08018685
 8015608:	08018774 	.word	0x08018774

0801560c <__multiply>:
 801560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015610:	4691      	mov	r9, r2
 8015612:	690a      	ldr	r2, [r1, #16]
 8015614:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015618:	429a      	cmp	r2, r3
 801561a:	bfb8      	it	lt
 801561c:	460b      	movlt	r3, r1
 801561e:	460c      	mov	r4, r1
 8015620:	bfbc      	itt	lt
 8015622:	464c      	movlt	r4, r9
 8015624:	4699      	movlt	r9, r3
 8015626:	6927      	ldr	r7, [r4, #16]
 8015628:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801562c:	68a3      	ldr	r3, [r4, #8]
 801562e:	6861      	ldr	r1, [r4, #4]
 8015630:	eb07 060a 	add.w	r6, r7, sl
 8015634:	42b3      	cmp	r3, r6
 8015636:	b085      	sub	sp, #20
 8015638:	bfb8      	it	lt
 801563a:	3101      	addlt	r1, #1
 801563c:	f7ff fe8e 	bl	801535c <_Balloc>
 8015640:	b930      	cbnz	r0, 8015650 <__multiply+0x44>
 8015642:	4602      	mov	r2, r0
 8015644:	4b44      	ldr	r3, [pc, #272]	; (8015758 <__multiply+0x14c>)
 8015646:	4845      	ldr	r0, [pc, #276]	; (801575c <__multiply+0x150>)
 8015648:	f240 115d 	movw	r1, #349	; 0x15d
 801564c:	f7fe fa9a 	bl	8013b84 <__assert_func>
 8015650:	f100 0514 	add.w	r5, r0, #20
 8015654:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015658:	462b      	mov	r3, r5
 801565a:	2200      	movs	r2, #0
 801565c:	4543      	cmp	r3, r8
 801565e:	d321      	bcc.n	80156a4 <__multiply+0x98>
 8015660:	f104 0314 	add.w	r3, r4, #20
 8015664:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015668:	f109 0314 	add.w	r3, r9, #20
 801566c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015670:	9202      	str	r2, [sp, #8]
 8015672:	1b3a      	subs	r2, r7, r4
 8015674:	3a15      	subs	r2, #21
 8015676:	f022 0203 	bic.w	r2, r2, #3
 801567a:	3204      	adds	r2, #4
 801567c:	f104 0115 	add.w	r1, r4, #21
 8015680:	428f      	cmp	r7, r1
 8015682:	bf38      	it	cc
 8015684:	2204      	movcc	r2, #4
 8015686:	9201      	str	r2, [sp, #4]
 8015688:	9a02      	ldr	r2, [sp, #8]
 801568a:	9303      	str	r3, [sp, #12]
 801568c:	429a      	cmp	r2, r3
 801568e:	d80c      	bhi.n	80156aa <__multiply+0x9e>
 8015690:	2e00      	cmp	r6, #0
 8015692:	dd03      	ble.n	801569c <__multiply+0x90>
 8015694:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015698:	2b00      	cmp	r3, #0
 801569a:	d05a      	beq.n	8015752 <__multiply+0x146>
 801569c:	6106      	str	r6, [r0, #16]
 801569e:	b005      	add	sp, #20
 80156a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a4:	f843 2b04 	str.w	r2, [r3], #4
 80156a8:	e7d8      	b.n	801565c <__multiply+0x50>
 80156aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80156ae:	f1ba 0f00 	cmp.w	sl, #0
 80156b2:	d024      	beq.n	80156fe <__multiply+0xf2>
 80156b4:	f104 0e14 	add.w	lr, r4, #20
 80156b8:	46a9      	mov	r9, r5
 80156ba:	f04f 0c00 	mov.w	ip, #0
 80156be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80156c2:	f8d9 1000 	ldr.w	r1, [r9]
 80156c6:	fa1f fb82 	uxth.w	fp, r2
 80156ca:	b289      	uxth	r1, r1
 80156cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80156d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80156d4:	f8d9 2000 	ldr.w	r2, [r9]
 80156d8:	4461      	add	r1, ip
 80156da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80156de:	fb0a c20b 	mla	r2, sl, fp, ip
 80156e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80156e6:	b289      	uxth	r1, r1
 80156e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80156ec:	4577      	cmp	r7, lr
 80156ee:	f849 1b04 	str.w	r1, [r9], #4
 80156f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80156f6:	d8e2      	bhi.n	80156be <__multiply+0xb2>
 80156f8:	9a01      	ldr	r2, [sp, #4]
 80156fa:	f845 c002 	str.w	ip, [r5, r2]
 80156fe:	9a03      	ldr	r2, [sp, #12]
 8015700:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015704:	3304      	adds	r3, #4
 8015706:	f1b9 0f00 	cmp.w	r9, #0
 801570a:	d020      	beq.n	801574e <__multiply+0x142>
 801570c:	6829      	ldr	r1, [r5, #0]
 801570e:	f104 0c14 	add.w	ip, r4, #20
 8015712:	46ae      	mov	lr, r5
 8015714:	f04f 0a00 	mov.w	sl, #0
 8015718:	f8bc b000 	ldrh.w	fp, [ip]
 801571c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015720:	fb09 220b 	mla	r2, r9, fp, r2
 8015724:	4492      	add	sl, r2
 8015726:	b289      	uxth	r1, r1
 8015728:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801572c:	f84e 1b04 	str.w	r1, [lr], #4
 8015730:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015734:	f8be 1000 	ldrh.w	r1, [lr]
 8015738:	0c12      	lsrs	r2, r2, #16
 801573a:	fb09 1102 	mla	r1, r9, r2, r1
 801573e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015742:	4567      	cmp	r7, ip
 8015744:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015748:	d8e6      	bhi.n	8015718 <__multiply+0x10c>
 801574a:	9a01      	ldr	r2, [sp, #4]
 801574c:	50a9      	str	r1, [r5, r2]
 801574e:	3504      	adds	r5, #4
 8015750:	e79a      	b.n	8015688 <__multiply+0x7c>
 8015752:	3e01      	subs	r6, #1
 8015754:	e79c      	b.n	8015690 <__multiply+0x84>
 8015756:	bf00      	nop
 8015758:	08018685 	.word	0x08018685
 801575c:	08018774 	.word	0x08018774

08015760 <__pow5mult>:
 8015760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015764:	4615      	mov	r5, r2
 8015766:	f012 0203 	ands.w	r2, r2, #3
 801576a:	4606      	mov	r6, r0
 801576c:	460f      	mov	r7, r1
 801576e:	d007      	beq.n	8015780 <__pow5mult+0x20>
 8015770:	4c25      	ldr	r4, [pc, #148]	; (8015808 <__pow5mult+0xa8>)
 8015772:	3a01      	subs	r2, #1
 8015774:	2300      	movs	r3, #0
 8015776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801577a:	f7ff fe51 	bl	8015420 <__multadd>
 801577e:	4607      	mov	r7, r0
 8015780:	10ad      	asrs	r5, r5, #2
 8015782:	d03d      	beq.n	8015800 <__pow5mult+0xa0>
 8015784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015786:	b97c      	cbnz	r4, 80157a8 <__pow5mult+0x48>
 8015788:	2010      	movs	r0, #16
 801578a:	f7fc fa8f 	bl	8011cac <malloc>
 801578e:	4602      	mov	r2, r0
 8015790:	6270      	str	r0, [r6, #36]	; 0x24
 8015792:	b928      	cbnz	r0, 80157a0 <__pow5mult+0x40>
 8015794:	4b1d      	ldr	r3, [pc, #116]	; (801580c <__pow5mult+0xac>)
 8015796:	481e      	ldr	r0, [pc, #120]	; (8015810 <__pow5mult+0xb0>)
 8015798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801579c:	f7fe f9f2 	bl	8013b84 <__assert_func>
 80157a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80157a4:	6004      	str	r4, [r0, #0]
 80157a6:	60c4      	str	r4, [r0, #12]
 80157a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80157ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80157b0:	b94c      	cbnz	r4, 80157c6 <__pow5mult+0x66>
 80157b2:	f240 2171 	movw	r1, #625	; 0x271
 80157b6:	4630      	mov	r0, r6
 80157b8:	f7ff ff12 	bl	80155e0 <__i2b>
 80157bc:	2300      	movs	r3, #0
 80157be:	f8c8 0008 	str.w	r0, [r8, #8]
 80157c2:	4604      	mov	r4, r0
 80157c4:	6003      	str	r3, [r0, #0]
 80157c6:	f04f 0900 	mov.w	r9, #0
 80157ca:	07eb      	lsls	r3, r5, #31
 80157cc:	d50a      	bpl.n	80157e4 <__pow5mult+0x84>
 80157ce:	4639      	mov	r1, r7
 80157d0:	4622      	mov	r2, r4
 80157d2:	4630      	mov	r0, r6
 80157d4:	f7ff ff1a 	bl	801560c <__multiply>
 80157d8:	4639      	mov	r1, r7
 80157da:	4680      	mov	r8, r0
 80157dc:	4630      	mov	r0, r6
 80157de:	f7ff fdfd 	bl	80153dc <_Bfree>
 80157e2:	4647      	mov	r7, r8
 80157e4:	106d      	asrs	r5, r5, #1
 80157e6:	d00b      	beq.n	8015800 <__pow5mult+0xa0>
 80157e8:	6820      	ldr	r0, [r4, #0]
 80157ea:	b938      	cbnz	r0, 80157fc <__pow5mult+0x9c>
 80157ec:	4622      	mov	r2, r4
 80157ee:	4621      	mov	r1, r4
 80157f0:	4630      	mov	r0, r6
 80157f2:	f7ff ff0b 	bl	801560c <__multiply>
 80157f6:	6020      	str	r0, [r4, #0]
 80157f8:	f8c0 9000 	str.w	r9, [r0]
 80157fc:	4604      	mov	r4, r0
 80157fe:	e7e4      	b.n	80157ca <__pow5mult+0x6a>
 8015800:	4638      	mov	r0, r7
 8015802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015806:	bf00      	nop
 8015808:	080188c0 	.word	0x080188c0
 801580c:	08018419 	.word	0x08018419
 8015810:	08018774 	.word	0x08018774

08015814 <__lshift>:
 8015814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015818:	460c      	mov	r4, r1
 801581a:	6849      	ldr	r1, [r1, #4]
 801581c:	6923      	ldr	r3, [r4, #16]
 801581e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015822:	68a3      	ldr	r3, [r4, #8]
 8015824:	4607      	mov	r7, r0
 8015826:	4691      	mov	r9, r2
 8015828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801582c:	f108 0601 	add.w	r6, r8, #1
 8015830:	42b3      	cmp	r3, r6
 8015832:	db0b      	blt.n	801584c <__lshift+0x38>
 8015834:	4638      	mov	r0, r7
 8015836:	f7ff fd91 	bl	801535c <_Balloc>
 801583a:	4605      	mov	r5, r0
 801583c:	b948      	cbnz	r0, 8015852 <__lshift+0x3e>
 801583e:	4602      	mov	r2, r0
 8015840:	4b2a      	ldr	r3, [pc, #168]	; (80158ec <__lshift+0xd8>)
 8015842:	482b      	ldr	r0, [pc, #172]	; (80158f0 <__lshift+0xdc>)
 8015844:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015848:	f7fe f99c 	bl	8013b84 <__assert_func>
 801584c:	3101      	adds	r1, #1
 801584e:	005b      	lsls	r3, r3, #1
 8015850:	e7ee      	b.n	8015830 <__lshift+0x1c>
 8015852:	2300      	movs	r3, #0
 8015854:	f100 0114 	add.w	r1, r0, #20
 8015858:	f100 0210 	add.w	r2, r0, #16
 801585c:	4618      	mov	r0, r3
 801585e:	4553      	cmp	r3, sl
 8015860:	db37      	blt.n	80158d2 <__lshift+0xbe>
 8015862:	6920      	ldr	r0, [r4, #16]
 8015864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015868:	f104 0314 	add.w	r3, r4, #20
 801586c:	f019 091f 	ands.w	r9, r9, #31
 8015870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015878:	d02f      	beq.n	80158da <__lshift+0xc6>
 801587a:	f1c9 0e20 	rsb	lr, r9, #32
 801587e:	468a      	mov	sl, r1
 8015880:	f04f 0c00 	mov.w	ip, #0
 8015884:	681a      	ldr	r2, [r3, #0]
 8015886:	fa02 f209 	lsl.w	r2, r2, r9
 801588a:	ea42 020c 	orr.w	r2, r2, ip
 801588e:	f84a 2b04 	str.w	r2, [sl], #4
 8015892:	f853 2b04 	ldr.w	r2, [r3], #4
 8015896:	4298      	cmp	r0, r3
 8015898:	fa22 fc0e 	lsr.w	ip, r2, lr
 801589c:	d8f2      	bhi.n	8015884 <__lshift+0x70>
 801589e:	1b03      	subs	r3, r0, r4
 80158a0:	3b15      	subs	r3, #21
 80158a2:	f023 0303 	bic.w	r3, r3, #3
 80158a6:	3304      	adds	r3, #4
 80158a8:	f104 0215 	add.w	r2, r4, #21
 80158ac:	4290      	cmp	r0, r2
 80158ae:	bf38      	it	cc
 80158b0:	2304      	movcc	r3, #4
 80158b2:	f841 c003 	str.w	ip, [r1, r3]
 80158b6:	f1bc 0f00 	cmp.w	ip, #0
 80158ba:	d001      	beq.n	80158c0 <__lshift+0xac>
 80158bc:	f108 0602 	add.w	r6, r8, #2
 80158c0:	3e01      	subs	r6, #1
 80158c2:	4638      	mov	r0, r7
 80158c4:	612e      	str	r6, [r5, #16]
 80158c6:	4621      	mov	r1, r4
 80158c8:	f7ff fd88 	bl	80153dc <_Bfree>
 80158cc:	4628      	mov	r0, r5
 80158ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80158d6:	3301      	adds	r3, #1
 80158d8:	e7c1      	b.n	801585e <__lshift+0x4a>
 80158da:	3904      	subs	r1, #4
 80158dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80158e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80158e4:	4298      	cmp	r0, r3
 80158e6:	d8f9      	bhi.n	80158dc <__lshift+0xc8>
 80158e8:	e7ea      	b.n	80158c0 <__lshift+0xac>
 80158ea:	bf00      	nop
 80158ec:	08018685 	.word	0x08018685
 80158f0:	08018774 	.word	0x08018774

080158f4 <__mcmp>:
 80158f4:	b530      	push	{r4, r5, lr}
 80158f6:	6902      	ldr	r2, [r0, #16]
 80158f8:	690c      	ldr	r4, [r1, #16]
 80158fa:	1b12      	subs	r2, r2, r4
 80158fc:	d10e      	bne.n	801591c <__mcmp+0x28>
 80158fe:	f100 0314 	add.w	r3, r0, #20
 8015902:	3114      	adds	r1, #20
 8015904:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015908:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801590c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015910:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015914:	42a5      	cmp	r5, r4
 8015916:	d003      	beq.n	8015920 <__mcmp+0x2c>
 8015918:	d305      	bcc.n	8015926 <__mcmp+0x32>
 801591a:	2201      	movs	r2, #1
 801591c:	4610      	mov	r0, r2
 801591e:	bd30      	pop	{r4, r5, pc}
 8015920:	4283      	cmp	r3, r0
 8015922:	d3f3      	bcc.n	801590c <__mcmp+0x18>
 8015924:	e7fa      	b.n	801591c <__mcmp+0x28>
 8015926:	f04f 32ff 	mov.w	r2, #4294967295
 801592a:	e7f7      	b.n	801591c <__mcmp+0x28>

0801592c <__mdiff>:
 801592c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015930:	460c      	mov	r4, r1
 8015932:	4606      	mov	r6, r0
 8015934:	4611      	mov	r1, r2
 8015936:	4620      	mov	r0, r4
 8015938:	4690      	mov	r8, r2
 801593a:	f7ff ffdb 	bl	80158f4 <__mcmp>
 801593e:	1e05      	subs	r5, r0, #0
 8015940:	d110      	bne.n	8015964 <__mdiff+0x38>
 8015942:	4629      	mov	r1, r5
 8015944:	4630      	mov	r0, r6
 8015946:	f7ff fd09 	bl	801535c <_Balloc>
 801594a:	b930      	cbnz	r0, 801595a <__mdiff+0x2e>
 801594c:	4b3a      	ldr	r3, [pc, #232]	; (8015a38 <__mdiff+0x10c>)
 801594e:	4602      	mov	r2, r0
 8015950:	f240 2132 	movw	r1, #562	; 0x232
 8015954:	4839      	ldr	r0, [pc, #228]	; (8015a3c <__mdiff+0x110>)
 8015956:	f7fe f915 	bl	8013b84 <__assert_func>
 801595a:	2301      	movs	r3, #1
 801595c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015964:	bfa4      	itt	ge
 8015966:	4643      	movge	r3, r8
 8015968:	46a0      	movge	r8, r4
 801596a:	4630      	mov	r0, r6
 801596c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015970:	bfa6      	itte	ge
 8015972:	461c      	movge	r4, r3
 8015974:	2500      	movge	r5, #0
 8015976:	2501      	movlt	r5, #1
 8015978:	f7ff fcf0 	bl	801535c <_Balloc>
 801597c:	b920      	cbnz	r0, 8015988 <__mdiff+0x5c>
 801597e:	4b2e      	ldr	r3, [pc, #184]	; (8015a38 <__mdiff+0x10c>)
 8015980:	4602      	mov	r2, r0
 8015982:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015986:	e7e5      	b.n	8015954 <__mdiff+0x28>
 8015988:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801598c:	6926      	ldr	r6, [r4, #16]
 801598e:	60c5      	str	r5, [r0, #12]
 8015990:	f104 0914 	add.w	r9, r4, #20
 8015994:	f108 0514 	add.w	r5, r8, #20
 8015998:	f100 0e14 	add.w	lr, r0, #20
 801599c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80159a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80159a4:	f108 0210 	add.w	r2, r8, #16
 80159a8:	46f2      	mov	sl, lr
 80159aa:	2100      	movs	r1, #0
 80159ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80159b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80159b4:	fa1f f883 	uxth.w	r8, r3
 80159b8:	fa11 f18b 	uxtah	r1, r1, fp
 80159bc:	0c1b      	lsrs	r3, r3, #16
 80159be:	eba1 0808 	sub.w	r8, r1, r8
 80159c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80159c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80159ca:	fa1f f888 	uxth.w	r8, r8
 80159ce:	1419      	asrs	r1, r3, #16
 80159d0:	454e      	cmp	r6, r9
 80159d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80159d6:	f84a 3b04 	str.w	r3, [sl], #4
 80159da:	d8e7      	bhi.n	80159ac <__mdiff+0x80>
 80159dc:	1b33      	subs	r3, r6, r4
 80159de:	3b15      	subs	r3, #21
 80159e0:	f023 0303 	bic.w	r3, r3, #3
 80159e4:	3304      	adds	r3, #4
 80159e6:	3415      	adds	r4, #21
 80159e8:	42a6      	cmp	r6, r4
 80159ea:	bf38      	it	cc
 80159ec:	2304      	movcc	r3, #4
 80159ee:	441d      	add	r5, r3
 80159f0:	4473      	add	r3, lr
 80159f2:	469e      	mov	lr, r3
 80159f4:	462e      	mov	r6, r5
 80159f6:	4566      	cmp	r6, ip
 80159f8:	d30e      	bcc.n	8015a18 <__mdiff+0xec>
 80159fa:	f10c 0203 	add.w	r2, ip, #3
 80159fe:	1b52      	subs	r2, r2, r5
 8015a00:	f022 0203 	bic.w	r2, r2, #3
 8015a04:	3d03      	subs	r5, #3
 8015a06:	45ac      	cmp	ip, r5
 8015a08:	bf38      	it	cc
 8015a0a:	2200      	movcc	r2, #0
 8015a0c:	441a      	add	r2, r3
 8015a0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015a12:	b17b      	cbz	r3, 8015a34 <__mdiff+0x108>
 8015a14:	6107      	str	r7, [r0, #16]
 8015a16:	e7a3      	b.n	8015960 <__mdiff+0x34>
 8015a18:	f856 8b04 	ldr.w	r8, [r6], #4
 8015a1c:	fa11 f288 	uxtah	r2, r1, r8
 8015a20:	1414      	asrs	r4, r2, #16
 8015a22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015a26:	b292      	uxth	r2, r2
 8015a28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015a2c:	f84e 2b04 	str.w	r2, [lr], #4
 8015a30:	1421      	asrs	r1, r4, #16
 8015a32:	e7e0      	b.n	80159f6 <__mdiff+0xca>
 8015a34:	3f01      	subs	r7, #1
 8015a36:	e7ea      	b.n	8015a0e <__mdiff+0xe2>
 8015a38:	08018685 	.word	0x08018685
 8015a3c:	08018774 	.word	0x08018774

08015a40 <__ulp>:
 8015a40:	b082      	sub	sp, #8
 8015a42:	ed8d 0b00 	vstr	d0, [sp]
 8015a46:	9b01      	ldr	r3, [sp, #4]
 8015a48:	4912      	ldr	r1, [pc, #72]	; (8015a94 <__ulp+0x54>)
 8015a4a:	4019      	ands	r1, r3
 8015a4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015a50:	2900      	cmp	r1, #0
 8015a52:	dd05      	ble.n	8015a60 <__ulp+0x20>
 8015a54:	2200      	movs	r2, #0
 8015a56:	460b      	mov	r3, r1
 8015a58:	ec43 2b10 	vmov	d0, r2, r3
 8015a5c:	b002      	add	sp, #8
 8015a5e:	4770      	bx	lr
 8015a60:	4249      	negs	r1, r1
 8015a62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015a66:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015a6a:	f04f 0200 	mov.w	r2, #0
 8015a6e:	f04f 0300 	mov.w	r3, #0
 8015a72:	da04      	bge.n	8015a7e <__ulp+0x3e>
 8015a74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015a78:	fa41 f300 	asr.w	r3, r1, r0
 8015a7c:	e7ec      	b.n	8015a58 <__ulp+0x18>
 8015a7e:	f1a0 0114 	sub.w	r1, r0, #20
 8015a82:	291e      	cmp	r1, #30
 8015a84:	bfda      	itte	le
 8015a86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015a8a:	fa20 f101 	lsrle.w	r1, r0, r1
 8015a8e:	2101      	movgt	r1, #1
 8015a90:	460a      	mov	r2, r1
 8015a92:	e7e1      	b.n	8015a58 <__ulp+0x18>
 8015a94:	7ff00000 	.word	0x7ff00000

08015a98 <__b2d>:
 8015a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a9a:	6905      	ldr	r5, [r0, #16]
 8015a9c:	f100 0714 	add.w	r7, r0, #20
 8015aa0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015aa4:	1f2e      	subs	r6, r5, #4
 8015aa6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015aaa:	4620      	mov	r0, r4
 8015aac:	f7ff fd48 	bl	8015540 <__hi0bits>
 8015ab0:	f1c0 0320 	rsb	r3, r0, #32
 8015ab4:	280a      	cmp	r0, #10
 8015ab6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015b34 <__b2d+0x9c>
 8015aba:	600b      	str	r3, [r1, #0]
 8015abc:	dc14      	bgt.n	8015ae8 <__b2d+0x50>
 8015abe:	f1c0 0e0b 	rsb	lr, r0, #11
 8015ac2:	fa24 f10e 	lsr.w	r1, r4, lr
 8015ac6:	42b7      	cmp	r7, r6
 8015ac8:	ea41 030c 	orr.w	r3, r1, ip
 8015acc:	bf34      	ite	cc
 8015ace:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015ad2:	2100      	movcs	r1, #0
 8015ad4:	3015      	adds	r0, #21
 8015ad6:	fa04 f000 	lsl.w	r0, r4, r0
 8015ada:	fa21 f10e 	lsr.w	r1, r1, lr
 8015ade:	ea40 0201 	orr.w	r2, r0, r1
 8015ae2:	ec43 2b10 	vmov	d0, r2, r3
 8015ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ae8:	42b7      	cmp	r7, r6
 8015aea:	bf3a      	itte	cc
 8015aec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015af0:	f1a5 0608 	subcc.w	r6, r5, #8
 8015af4:	2100      	movcs	r1, #0
 8015af6:	380b      	subs	r0, #11
 8015af8:	d017      	beq.n	8015b2a <__b2d+0x92>
 8015afa:	f1c0 0c20 	rsb	ip, r0, #32
 8015afe:	fa04 f500 	lsl.w	r5, r4, r0
 8015b02:	42be      	cmp	r6, r7
 8015b04:	fa21 f40c 	lsr.w	r4, r1, ip
 8015b08:	ea45 0504 	orr.w	r5, r5, r4
 8015b0c:	bf8c      	ite	hi
 8015b0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015b12:	2400      	movls	r4, #0
 8015b14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015b18:	fa01 f000 	lsl.w	r0, r1, r0
 8015b1c:	fa24 f40c 	lsr.w	r4, r4, ip
 8015b20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015b24:	ea40 0204 	orr.w	r2, r0, r4
 8015b28:	e7db      	b.n	8015ae2 <__b2d+0x4a>
 8015b2a:	ea44 030c 	orr.w	r3, r4, ip
 8015b2e:	460a      	mov	r2, r1
 8015b30:	e7d7      	b.n	8015ae2 <__b2d+0x4a>
 8015b32:	bf00      	nop
 8015b34:	3ff00000 	.word	0x3ff00000

08015b38 <__d2b>:
 8015b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b3c:	4689      	mov	r9, r1
 8015b3e:	2101      	movs	r1, #1
 8015b40:	ec57 6b10 	vmov	r6, r7, d0
 8015b44:	4690      	mov	r8, r2
 8015b46:	f7ff fc09 	bl	801535c <_Balloc>
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	b930      	cbnz	r0, 8015b5c <__d2b+0x24>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	4b25      	ldr	r3, [pc, #148]	; (8015be8 <__d2b+0xb0>)
 8015b52:	4826      	ldr	r0, [pc, #152]	; (8015bec <__d2b+0xb4>)
 8015b54:	f240 310a 	movw	r1, #778	; 0x30a
 8015b58:	f7fe f814 	bl	8013b84 <__assert_func>
 8015b5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015b64:	bb35      	cbnz	r5, 8015bb4 <__d2b+0x7c>
 8015b66:	2e00      	cmp	r6, #0
 8015b68:	9301      	str	r3, [sp, #4]
 8015b6a:	d028      	beq.n	8015bbe <__d2b+0x86>
 8015b6c:	4668      	mov	r0, sp
 8015b6e:	9600      	str	r6, [sp, #0]
 8015b70:	f7ff fd06 	bl	8015580 <__lo0bits>
 8015b74:	9900      	ldr	r1, [sp, #0]
 8015b76:	b300      	cbz	r0, 8015bba <__d2b+0x82>
 8015b78:	9a01      	ldr	r2, [sp, #4]
 8015b7a:	f1c0 0320 	rsb	r3, r0, #32
 8015b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b82:	430b      	orrs	r3, r1
 8015b84:	40c2      	lsrs	r2, r0
 8015b86:	6163      	str	r3, [r4, #20]
 8015b88:	9201      	str	r2, [sp, #4]
 8015b8a:	9b01      	ldr	r3, [sp, #4]
 8015b8c:	61a3      	str	r3, [r4, #24]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	bf14      	ite	ne
 8015b92:	2202      	movne	r2, #2
 8015b94:	2201      	moveq	r2, #1
 8015b96:	6122      	str	r2, [r4, #16]
 8015b98:	b1d5      	cbz	r5, 8015bd0 <__d2b+0x98>
 8015b9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015b9e:	4405      	add	r5, r0
 8015ba0:	f8c9 5000 	str.w	r5, [r9]
 8015ba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015ba8:	f8c8 0000 	str.w	r0, [r8]
 8015bac:	4620      	mov	r0, r4
 8015bae:	b003      	add	sp, #12
 8015bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015bb8:	e7d5      	b.n	8015b66 <__d2b+0x2e>
 8015bba:	6161      	str	r1, [r4, #20]
 8015bbc:	e7e5      	b.n	8015b8a <__d2b+0x52>
 8015bbe:	a801      	add	r0, sp, #4
 8015bc0:	f7ff fcde 	bl	8015580 <__lo0bits>
 8015bc4:	9b01      	ldr	r3, [sp, #4]
 8015bc6:	6163      	str	r3, [r4, #20]
 8015bc8:	2201      	movs	r2, #1
 8015bca:	6122      	str	r2, [r4, #16]
 8015bcc:	3020      	adds	r0, #32
 8015bce:	e7e3      	b.n	8015b98 <__d2b+0x60>
 8015bd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015bd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015bd8:	f8c9 0000 	str.w	r0, [r9]
 8015bdc:	6918      	ldr	r0, [r3, #16]
 8015bde:	f7ff fcaf 	bl	8015540 <__hi0bits>
 8015be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015be6:	e7df      	b.n	8015ba8 <__d2b+0x70>
 8015be8:	08018685 	.word	0x08018685
 8015bec:	08018774 	.word	0x08018774

08015bf0 <__ratio>:
 8015bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf4:	4688      	mov	r8, r1
 8015bf6:	4669      	mov	r1, sp
 8015bf8:	4681      	mov	r9, r0
 8015bfa:	f7ff ff4d 	bl	8015a98 <__b2d>
 8015bfe:	a901      	add	r1, sp, #4
 8015c00:	4640      	mov	r0, r8
 8015c02:	ec55 4b10 	vmov	r4, r5, d0
 8015c06:	ee10 aa10 	vmov	sl, s0
 8015c0a:	f7ff ff45 	bl	8015a98 <__b2d>
 8015c0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015c16:	1a59      	subs	r1, r3, r1
 8015c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c1c:	1ad3      	subs	r3, r2, r3
 8015c1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015c22:	ec57 6b10 	vmov	r6, r7, d0
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	bfd6      	itet	le
 8015c2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015c2e:	462a      	movgt	r2, r5
 8015c30:	463a      	movle	r2, r7
 8015c32:	46ab      	mov	fp, r5
 8015c34:	bfd6      	itet	le
 8015c36:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015c3a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015c3e:	ee00 3a90 	vmovle	s1, r3
 8015c42:	ec4b ab17 	vmov	d7, sl, fp
 8015c46:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8015c4a:	b003      	add	sp, #12
 8015c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c50 <__copybits>:
 8015c50:	3901      	subs	r1, #1
 8015c52:	b570      	push	{r4, r5, r6, lr}
 8015c54:	1149      	asrs	r1, r1, #5
 8015c56:	6914      	ldr	r4, [r2, #16]
 8015c58:	3101      	adds	r1, #1
 8015c5a:	f102 0314 	add.w	r3, r2, #20
 8015c5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015c62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c66:	1f05      	subs	r5, r0, #4
 8015c68:	42a3      	cmp	r3, r4
 8015c6a:	d30c      	bcc.n	8015c86 <__copybits+0x36>
 8015c6c:	1aa3      	subs	r3, r4, r2
 8015c6e:	3b11      	subs	r3, #17
 8015c70:	f023 0303 	bic.w	r3, r3, #3
 8015c74:	3211      	adds	r2, #17
 8015c76:	42a2      	cmp	r2, r4
 8015c78:	bf88      	it	hi
 8015c7a:	2300      	movhi	r3, #0
 8015c7c:	4418      	add	r0, r3
 8015c7e:	2300      	movs	r3, #0
 8015c80:	4288      	cmp	r0, r1
 8015c82:	d305      	bcc.n	8015c90 <__copybits+0x40>
 8015c84:	bd70      	pop	{r4, r5, r6, pc}
 8015c86:	f853 6b04 	ldr.w	r6, [r3], #4
 8015c8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8015c8e:	e7eb      	b.n	8015c68 <__copybits+0x18>
 8015c90:	f840 3b04 	str.w	r3, [r0], #4
 8015c94:	e7f4      	b.n	8015c80 <__copybits+0x30>

08015c96 <__any_on>:
 8015c96:	f100 0214 	add.w	r2, r0, #20
 8015c9a:	6900      	ldr	r0, [r0, #16]
 8015c9c:	114b      	asrs	r3, r1, #5
 8015c9e:	4298      	cmp	r0, r3
 8015ca0:	b510      	push	{r4, lr}
 8015ca2:	db11      	blt.n	8015cc8 <__any_on+0x32>
 8015ca4:	dd0a      	ble.n	8015cbc <__any_on+0x26>
 8015ca6:	f011 011f 	ands.w	r1, r1, #31
 8015caa:	d007      	beq.n	8015cbc <__any_on+0x26>
 8015cac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015cb0:	fa24 f001 	lsr.w	r0, r4, r1
 8015cb4:	fa00 f101 	lsl.w	r1, r0, r1
 8015cb8:	428c      	cmp	r4, r1
 8015cba:	d10b      	bne.n	8015cd4 <__any_on+0x3e>
 8015cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d803      	bhi.n	8015ccc <__any_on+0x36>
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	bd10      	pop	{r4, pc}
 8015cc8:	4603      	mov	r3, r0
 8015cca:	e7f7      	b.n	8015cbc <__any_on+0x26>
 8015ccc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015cd0:	2900      	cmp	r1, #0
 8015cd2:	d0f5      	beq.n	8015cc0 <__any_on+0x2a>
 8015cd4:	2001      	movs	r0, #1
 8015cd6:	e7f6      	b.n	8015cc6 <__any_on+0x30>

08015cd8 <_calloc_r>:
 8015cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cda:	fba1 2402 	umull	r2, r4, r1, r2
 8015cde:	b94c      	cbnz	r4, 8015cf4 <_calloc_r+0x1c>
 8015ce0:	4611      	mov	r1, r2
 8015ce2:	9201      	str	r2, [sp, #4]
 8015ce4:	f7fc f86c 	bl	8011dc0 <_malloc_r>
 8015ce8:	9a01      	ldr	r2, [sp, #4]
 8015cea:	4605      	mov	r5, r0
 8015cec:	b930      	cbnz	r0, 8015cfc <_calloc_r+0x24>
 8015cee:	4628      	mov	r0, r5
 8015cf0:	b003      	add	sp, #12
 8015cf2:	bd30      	pop	{r4, r5, pc}
 8015cf4:	220c      	movs	r2, #12
 8015cf6:	6002      	str	r2, [r0, #0]
 8015cf8:	2500      	movs	r5, #0
 8015cfa:	e7f8      	b.n	8015cee <_calloc_r+0x16>
 8015cfc:	4621      	mov	r1, r4
 8015cfe:	f7fb ffeb 	bl	8011cd8 <memset>
 8015d02:	e7f4      	b.n	8015cee <_calloc_r+0x16>

08015d04 <_realloc_r>:
 8015d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d08:	4680      	mov	r8, r0
 8015d0a:	4614      	mov	r4, r2
 8015d0c:	460e      	mov	r6, r1
 8015d0e:	b921      	cbnz	r1, 8015d1a <_realloc_r+0x16>
 8015d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d14:	4611      	mov	r1, r2
 8015d16:	f7fc b853 	b.w	8011dc0 <_malloc_r>
 8015d1a:	b92a      	cbnz	r2, 8015d28 <_realloc_r+0x24>
 8015d1c:	f7fb ffe4 	bl	8011ce8 <_free_r>
 8015d20:	4625      	mov	r5, r4
 8015d22:	4628      	mov	r0, r5
 8015d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d28:	f000 fbb6 	bl	8016498 <_malloc_usable_size_r>
 8015d2c:	4284      	cmp	r4, r0
 8015d2e:	4607      	mov	r7, r0
 8015d30:	d802      	bhi.n	8015d38 <_realloc_r+0x34>
 8015d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015d36:	d812      	bhi.n	8015d5e <_realloc_r+0x5a>
 8015d38:	4621      	mov	r1, r4
 8015d3a:	4640      	mov	r0, r8
 8015d3c:	f7fc f840 	bl	8011dc0 <_malloc_r>
 8015d40:	4605      	mov	r5, r0
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d0ed      	beq.n	8015d22 <_realloc_r+0x1e>
 8015d46:	42bc      	cmp	r4, r7
 8015d48:	4622      	mov	r2, r4
 8015d4a:	4631      	mov	r1, r6
 8015d4c:	bf28      	it	cs
 8015d4e:	463a      	movcs	r2, r7
 8015d50:	f7fb ffb4 	bl	8011cbc <memcpy>
 8015d54:	4631      	mov	r1, r6
 8015d56:	4640      	mov	r0, r8
 8015d58:	f7fb ffc6 	bl	8011ce8 <_free_r>
 8015d5c:	e7e1      	b.n	8015d22 <_realloc_r+0x1e>
 8015d5e:	4635      	mov	r5, r6
 8015d60:	e7df      	b.n	8015d22 <_realloc_r+0x1e>

08015d62 <__ssputs_r>:
 8015d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d66:	688e      	ldr	r6, [r1, #8]
 8015d68:	429e      	cmp	r6, r3
 8015d6a:	4682      	mov	sl, r0
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	4690      	mov	r8, r2
 8015d70:	461f      	mov	r7, r3
 8015d72:	d838      	bhi.n	8015de6 <__ssputs_r+0x84>
 8015d74:	898a      	ldrh	r2, [r1, #12]
 8015d76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d7a:	d032      	beq.n	8015de2 <__ssputs_r+0x80>
 8015d7c:	6825      	ldr	r5, [r4, #0]
 8015d7e:	6909      	ldr	r1, [r1, #16]
 8015d80:	eba5 0901 	sub.w	r9, r5, r1
 8015d84:	6965      	ldr	r5, [r4, #20]
 8015d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d8e:	3301      	adds	r3, #1
 8015d90:	444b      	add	r3, r9
 8015d92:	106d      	asrs	r5, r5, #1
 8015d94:	429d      	cmp	r5, r3
 8015d96:	bf38      	it	cc
 8015d98:	461d      	movcc	r5, r3
 8015d9a:	0553      	lsls	r3, r2, #21
 8015d9c:	d531      	bpl.n	8015e02 <__ssputs_r+0xa0>
 8015d9e:	4629      	mov	r1, r5
 8015da0:	f7fc f80e 	bl	8011dc0 <_malloc_r>
 8015da4:	4606      	mov	r6, r0
 8015da6:	b950      	cbnz	r0, 8015dbe <__ssputs_r+0x5c>
 8015da8:	230c      	movs	r3, #12
 8015daa:	f8ca 3000 	str.w	r3, [sl]
 8015dae:	89a3      	ldrh	r3, [r4, #12]
 8015db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015db4:	81a3      	strh	r3, [r4, #12]
 8015db6:	f04f 30ff 	mov.w	r0, #4294967295
 8015dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dbe:	6921      	ldr	r1, [r4, #16]
 8015dc0:	464a      	mov	r2, r9
 8015dc2:	f7fb ff7b 	bl	8011cbc <memcpy>
 8015dc6:	89a3      	ldrh	r3, [r4, #12]
 8015dc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dd0:	81a3      	strh	r3, [r4, #12]
 8015dd2:	6126      	str	r6, [r4, #16]
 8015dd4:	6165      	str	r5, [r4, #20]
 8015dd6:	444e      	add	r6, r9
 8015dd8:	eba5 0509 	sub.w	r5, r5, r9
 8015ddc:	6026      	str	r6, [r4, #0]
 8015dde:	60a5      	str	r5, [r4, #8]
 8015de0:	463e      	mov	r6, r7
 8015de2:	42be      	cmp	r6, r7
 8015de4:	d900      	bls.n	8015de8 <__ssputs_r+0x86>
 8015de6:	463e      	mov	r6, r7
 8015de8:	6820      	ldr	r0, [r4, #0]
 8015dea:	4632      	mov	r2, r6
 8015dec:	4641      	mov	r1, r8
 8015dee:	f000 fb39 	bl	8016464 <memmove>
 8015df2:	68a3      	ldr	r3, [r4, #8]
 8015df4:	1b9b      	subs	r3, r3, r6
 8015df6:	60a3      	str	r3, [r4, #8]
 8015df8:	6823      	ldr	r3, [r4, #0]
 8015dfa:	4433      	add	r3, r6
 8015dfc:	6023      	str	r3, [r4, #0]
 8015dfe:	2000      	movs	r0, #0
 8015e00:	e7db      	b.n	8015dba <__ssputs_r+0x58>
 8015e02:	462a      	mov	r2, r5
 8015e04:	f7ff ff7e 	bl	8015d04 <_realloc_r>
 8015e08:	4606      	mov	r6, r0
 8015e0a:	2800      	cmp	r0, #0
 8015e0c:	d1e1      	bne.n	8015dd2 <__ssputs_r+0x70>
 8015e0e:	6921      	ldr	r1, [r4, #16]
 8015e10:	4650      	mov	r0, sl
 8015e12:	f7fb ff69 	bl	8011ce8 <_free_r>
 8015e16:	e7c7      	b.n	8015da8 <__ssputs_r+0x46>

08015e18 <_svfiprintf_r>:
 8015e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e1c:	4698      	mov	r8, r3
 8015e1e:	898b      	ldrh	r3, [r1, #12]
 8015e20:	061b      	lsls	r3, r3, #24
 8015e22:	b09d      	sub	sp, #116	; 0x74
 8015e24:	4607      	mov	r7, r0
 8015e26:	460d      	mov	r5, r1
 8015e28:	4614      	mov	r4, r2
 8015e2a:	d50e      	bpl.n	8015e4a <_svfiprintf_r+0x32>
 8015e2c:	690b      	ldr	r3, [r1, #16]
 8015e2e:	b963      	cbnz	r3, 8015e4a <_svfiprintf_r+0x32>
 8015e30:	2140      	movs	r1, #64	; 0x40
 8015e32:	f7fb ffc5 	bl	8011dc0 <_malloc_r>
 8015e36:	6028      	str	r0, [r5, #0]
 8015e38:	6128      	str	r0, [r5, #16]
 8015e3a:	b920      	cbnz	r0, 8015e46 <_svfiprintf_r+0x2e>
 8015e3c:	230c      	movs	r3, #12
 8015e3e:	603b      	str	r3, [r7, #0]
 8015e40:	f04f 30ff 	mov.w	r0, #4294967295
 8015e44:	e0d1      	b.n	8015fea <_svfiprintf_r+0x1d2>
 8015e46:	2340      	movs	r3, #64	; 0x40
 8015e48:	616b      	str	r3, [r5, #20]
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e4e:	2320      	movs	r3, #32
 8015e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e58:	2330      	movs	r3, #48	; 0x30
 8015e5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016004 <_svfiprintf_r+0x1ec>
 8015e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e62:	f04f 0901 	mov.w	r9, #1
 8015e66:	4623      	mov	r3, r4
 8015e68:	469a      	mov	sl, r3
 8015e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e6e:	b10a      	cbz	r2, 8015e74 <_svfiprintf_r+0x5c>
 8015e70:	2a25      	cmp	r2, #37	; 0x25
 8015e72:	d1f9      	bne.n	8015e68 <_svfiprintf_r+0x50>
 8015e74:	ebba 0b04 	subs.w	fp, sl, r4
 8015e78:	d00b      	beq.n	8015e92 <_svfiprintf_r+0x7a>
 8015e7a:	465b      	mov	r3, fp
 8015e7c:	4622      	mov	r2, r4
 8015e7e:	4629      	mov	r1, r5
 8015e80:	4638      	mov	r0, r7
 8015e82:	f7ff ff6e 	bl	8015d62 <__ssputs_r>
 8015e86:	3001      	adds	r0, #1
 8015e88:	f000 80aa 	beq.w	8015fe0 <_svfiprintf_r+0x1c8>
 8015e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e8e:	445a      	add	r2, fp
 8015e90:	9209      	str	r2, [sp, #36]	; 0x24
 8015e92:	f89a 3000 	ldrb.w	r3, [sl]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f000 80a2 	beq.w	8015fe0 <_svfiprintf_r+0x1c8>
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8015ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ea6:	f10a 0a01 	add.w	sl, sl, #1
 8015eaa:	9304      	str	r3, [sp, #16]
 8015eac:	9307      	str	r3, [sp, #28]
 8015eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8015eb4:	4654      	mov	r4, sl
 8015eb6:	2205      	movs	r2, #5
 8015eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ebc:	4851      	ldr	r0, [pc, #324]	; (8016004 <_svfiprintf_r+0x1ec>)
 8015ebe:	f7ea fa17 	bl	80002f0 <memchr>
 8015ec2:	9a04      	ldr	r2, [sp, #16]
 8015ec4:	b9d8      	cbnz	r0, 8015efe <_svfiprintf_r+0xe6>
 8015ec6:	06d0      	lsls	r0, r2, #27
 8015ec8:	bf44      	itt	mi
 8015eca:	2320      	movmi	r3, #32
 8015ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ed0:	0711      	lsls	r1, r2, #28
 8015ed2:	bf44      	itt	mi
 8015ed4:	232b      	movmi	r3, #43	; 0x2b
 8015ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015eda:	f89a 3000 	ldrb.w	r3, [sl]
 8015ede:	2b2a      	cmp	r3, #42	; 0x2a
 8015ee0:	d015      	beq.n	8015f0e <_svfiprintf_r+0xf6>
 8015ee2:	9a07      	ldr	r2, [sp, #28]
 8015ee4:	4654      	mov	r4, sl
 8015ee6:	2000      	movs	r0, #0
 8015ee8:	f04f 0c0a 	mov.w	ip, #10
 8015eec:	4621      	mov	r1, r4
 8015eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ef2:	3b30      	subs	r3, #48	; 0x30
 8015ef4:	2b09      	cmp	r3, #9
 8015ef6:	d94e      	bls.n	8015f96 <_svfiprintf_r+0x17e>
 8015ef8:	b1b0      	cbz	r0, 8015f28 <_svfiprintf_r+0x110>
 8015efa:	9207      	str	r2, [sp, #28]
 8015efc:	e014      	b.n	8015f28 <_svfiprintf_r+0x110>
 8015efe:	eba0 0308 	sub.w	r3, r0, r8
 8015f02:	fa09 f303 	lsl.w	r3, r9, r3
 8015f06:	4313      	orrs	r3, r2
 8015f08:	9304      	str	r3, [sp, #16]
 8015f0a:	46a2      	mov	sl, r4
 8015f0c:	e7d2      	b.n	8015eb4 <_svfiprintf_r+0x9c>
 8015f0e:	9b03      	ldr	r3, [sp, #12]
 8015f10:	1d19      	adds	r1, r3, #4
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	9103      	str	r1, [sp, #12]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	bfbb      	ittet	lt
 8015f1a:	425b      	neglt	r3, r3
 8015f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8015f20:	9307      	strge	r3, [sp, #28]
 8015f22:	9307      	strlt	r3, [sp, #28]
 8015f24:	bfb8      	it	lt
 8015f26:	9204      	strlt	r2, [sp, #16]
 8015f28:	7823      	ldrb	r3, [r4, #0]
 8015f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8015f2c:	d10c      	bne.n	8015f48 <_svfiprintf_r+0x130>
 8015f2e:	7863      	ldrb	r3, [r4, #1]
 8015f30:	2b2a      	cmp	r3, #42	; 0x2a
 8015f32:	d135      	bne.n	8015fa0 <_svfiprintf_r+0x188>
 8015f34:	9b03      	ldr	r3, [sp, #12]
 8015f36:	1d1a      	adds	r2, r3, #4
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	9203      	str	r2, [sp, #12]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	bfb8      	it	lt
 8015f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f44:	3402      	adds	r4, #2
 8015f46:	9305      	str	r3, [sp, #20]
 8015f48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016014 <_svfiprintf_r+0x1fc>
 8015f4c:	7821      	ldrb	r1, [r4, #0]
 8015f4e:	2203      	movs	r2, #3
 8015f50:	4650      	mov	r0, sl
 8015f52:	f7ea f9cd 	bl	80002f0 <memchr>
 8015f56:	b140      	cbz	r0, 8015f6a <_svfiprintf_r+0x152>
 8015f58:	2340      	movs	r3, #64	; 0x40
 8015f5a:	eba0 000a 	sub.w	r0, r0, sl
 8015f5e:	fa03 f000 	lsl.w	r0, r3, r0
 8015f62:	9b04      	ldr	r3, [sp, #16]
 8015f64:	4303      	orrs	r3, r0
 8015f66:	3401      	adds	r4, #1
 8015f68:	9304      	str	r3, [sp, #16]
 8015f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f6e:	4826      	ldr	r0, [pc, #152]	; (8016008 <_svfiprintf_r+0x1f0>)
 8015f70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f74:	2206      	movs	r2, #6
 8015f76:	f7ea f9bb 	bl	80002f0 <memchr>
 8015f7a:	2800      	cmp	r0, #0
 8015f7c:	d038      	beq.n	8015ff0 <_svfiprintf_r+0x1d8>
 8015f7e:	4b23      	ldr	r3, [pc, #140]	; (801600c <_svfiprintf_r+0x1f4>)
 8015f80:	bb1b      	cbnz	r3, 8015fca <_svfiprintf_r+0x1b2>
 8015f82:	9b03      	ldr	r3, [sp, #12]
 8015f84:	3307      	adds	r3, #7
 8015f86:	f023 0307 	bic.w	r3, r3, #7
 8015f8a:	3308      	adds	r3, #8
 8015f8c:	9303      	str	r3, [sp, #12]
 8015f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f90:	4433      	add	r3, r6
 8015f92:	9309      	str	r3, [sp, #36]	; 0x24
 8015f94:	e767      	b.n	8015e66 <_svfiprintf_r+0x4e>
 8015f96:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f9a:	460c      	mov	r4, r1
 8015f9c:	2001      	movs	r0, #1
 8015f9e:	e7a5      	b.n	8015eec <_svfiprintf_r+0xd4>
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	3401      	adds	r4, #1
 8015fa4:	9305      	str	r3, [sp, #20]
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	f04f 0c0a 	mov.w	ip, #10
 8015fac:	4620      	mov	r0, r4
 8015fae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fb2:	3a30      	subs	r2, #48	; 0x30
 8015fb4:	2a09      	cmp	r2, #9
 8015fb6:	d903      	bls.n	8015fc0 <_svfiprintf_r+0x1a8>
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d0c5      	beq.n	8015f48 <_svfiprintf_r+0x130>
 8015fbc:	9105      	str	r1, [sp, #20]
 8015fbe:	e7c3      	b.n	8015f48 <_svfiprintf_r+0x130>
 8015fc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	e7f0      	b.n	8015fac <_svfiprintf_r+0x194>
 8015fca:	ab03      	add	r3, sp, #12
 8015fcc:	9300      	str	r3, [sp, #0]
 8015fce:	462a      	mov	r2, r5
 8015fd0:	4b0f      	ldr	r3, [pc, #60]	; (8016010 <_svfiprintf_r+0x1f8>)
 8015fd2:	a904      	add	r1, sp, #16
 8015fd4:	4638      	mov	r0, r7
 8015fd6:	f7fb fff7 	bl	8011fc8 <_printf_float>
 8015fda:	1c42      	adds	r2, r0, #1
 8015fdc:	4606      	mov	r6, r0
 8015fde:	d1d6      	bne.n	8015f8e <_svfiprintf_r+0x176>
 8015fe0:	89ab      	ldrh	r3, [r5, #12]
 8015fe2:	065b      	lsls	r3, r3, #25
 8015fe4:	f53f af2c 	bmi.w	8015e40 <_svfiprintf_r+0x28>
 8015fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015fea:	b01d      	add	sp, #116	; 0x74
 8015fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff0:	ab03      	add	r3, sp, #12
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	462a      	mov	r2, r5
 8015ff6:	4b06      	ldr	r3, [pc, #24]	; (8016010 <_svfiprintf_r+0x1f8>)
 8015ff8:	a904      	add	r1, sp, #16
 8015ffa:	4638      	mov	r0, r7
 8015ffc:	f7fc fa70 	bl	80124e0 <_printf_i>
 8016000:	e7eb      	b.n	8015fda <_svfiprintf_r+0x1c2>
 8016002:	bf00      	nop
 8016004:	080188cc 	.word	0x080188cc
 8016008:	080188d6 	.word	0x080188d6
 801600c:	08011fc9 	.word	0x08011fc9
 8016010:	08015d63 	.word	0x08015d63
 8016014:	080188d2 	.word	0x080188d2

08016018 <__sfputc_r>:
 8016018:	6893      	ldr	r3, [r2, #8]
 801601a:	3b01      	subs	r3, #1
 801601c:	2b00      	cmp	r3, #0
 801601e:	b410      	push	{r4}
 8016020:	6093      	str	r3, [r2, #8]
 8016022:	da08      	bge.n	8016036 <__sfputc_r+0x1e>
 8016024:	6994      	ldr	r4, [r2, #24]
 8016026:	42a3      	cmp	r3, r4
 8016028:	db01      	blt.n	801602e <__sfputc_r+0x16>
 801602a:	290a      	cmp	r1, #10
 801602c:	d103      	bne.n	8016036 <__sfputc_r+0x1e>
 801602e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016032:	f7fd bce7 	b.w	8013a04 <__swbuf_r>
 8016036:	6813      	ldr	r3, [r2, #0]
 8016038:	1c58      	adds	r0, r3, #1
 801603a:	6010      	str	r0, [r2, #0]
 801603c:	7019      	strb	r1, [r3, #0]
 801603e:	4608      	mov	r0, r1
 8016040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016044:	4770      	bx	lr

08016046 <__sfputs_r>:
 8016046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016048:	4606      	mov	r6, r0
 801604a:	460f      	mov	r7, r1
 801604c:	4614      	mov	r4, r2
 801604e:	18d5      	adds	r5, r2, r3
 8016050:	42ac      	cmp	r4, r5
 8016052:	d101      	bne.n	8016058 <__sfputs_r+0x12>
 8016054:	2000      	movs	r0, #0
 8016056:	e007      	b.n	8016068 <__sfputs_r+0x22>
 8016058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801605c:	463a      	mov	r2, r7
 801605e:	4630      	mov	r0, r6
 8016060:	f7ff ffda 	bl	8016018 <__sfputc_r>
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d1f3      	bne.n	8016050 <__sfputs_r+0xa>
 8016068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801606c <_vfiprintf_r>:
 801606c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016070:	460d      	mov	r5, r1
 8016072:	b09d      	sub	sp, #116	; 0x74
 8016074:	4614      	mov	r4, r2
 8016076:	4698      	mov	r8, r3
 8016078:	4606      	mov	r6, r0
 801607a:	b118      	cbz	r0, 8016084 <_vfiprintf_r+0x18>
 801607c:	6983      	ldr	r3, [r0, #24]
 801607e:	b90b      	cbnz	r3, 8016084 <_vfiprintf_r+0x18>
 8016080:	f7fe fcb2 	bl	80149e8 <__sinit>
 8016084:	4b89      	ldr	r3, [pc, #548]	; (80162ac <_vfiprintf_r+0x240>)
 8016086:	429d      	cmp	r5, r3
 8016088:	d11b      	bne.n	80160c2 <_vfiprintf_r+0x56>
 801608a:	6875      	ldr	r5, [r6, #4]
 801608c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801608e:	07d9      	lsls	r1, r3, #31
 8016090:	d405      	bmi.n	801609e <_vfiprintf_r+0x32>
 8016092:	89ab      	ldrh	r3, [r5, #12]
 8016094:	059a      	lsls	r2, r3, #22
 8016096:	d402      	bmi.n	801609e <_vfiprintf_r+0x32>
 8016098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801609a:	f7ff f8da 	bl	8015252 <__retarget_lock_acquire_recursive>
 801609e:	89ab      	ldrh	r3, [r5, #12]
 80160a0:	071b      	lsls	r3, r3, #28
 80160a2:	d501      	bpl.n	80160a8 <_vfiprintf_r+0x3c>
 80160a4:	692b      	ldr	r3, [r5, #16]
 80160a6:	b9eb      	cbnz	r3, 80160e4 <_vfiprintf_r+0x78>
 80160a8:	4629      	mov	r1, r5
 80160aa:	4630      	mov	r0, r6
 80160ac:	f7fd fcfc 	bl	8013aa8 <__swsetup_r>
 80160b0:	b1c0      	cbz	r0, 80160e4 <_vfiprintf_r+0x78>
 80160b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160b4:	07dc      	lsls	r4, r3, #31
 80160b6:	d50e      	bpl.n	80160d6 <_vfiprintf_r+0x6a>
 80160b8:	f04f 30ff 	mov.w	r0, #4294967295
 80160bc:	b01d      	add	sp, #116	; 0x74
 80160be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c2:	4b7b      	ldr	r3, [pc, #492]	; (80162b0 <_vfiprintf_r+0x244>)
 80160c4:	429d      	cmp	r5, r3
 80160c6:	d101      	bne.n	80160cc <_vfiprintf_r+0x60>
 80160c8:	68b5      	ldr	r5, [r6, #8]
 80160ca:	e7df      	b.n	801608c <_vfiprintf_r+0x20>
 80160cc:	4b79      	ldr	r3, [pc, #484]	; (80162b4 <_vfiprintf_r+0x248>)
 80160ce:	429d      	cmp	r5, r3
 80160d0:	bf08      	it	eq
 80160d2:	68f5      	ldreq	r5, [r6, #12]
 80160d4:	e7da      	b.n	801608c <_vfiprintf_r+0x20>
 80160d6:	89ab      	ldrh	r3, [r5, #12]
 80160d8:	0598      	lsls	r0, r3, #22
 80160da:	d4ed      	bmi.n	80160b8 <_vfiprintf_r+0x4c>
 80160dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160de:	f7ff f8b9 	bl	8015254 <__retarget_lock_release_recursive>
 80160e2:	e7e9      	b.n	80160b8 <_vfiprintf_r+0x4c>
 80160e4:	2300      	movs	r3, #0
 80160e6:	9309      	str	r3, [sp, #36]	; 0x24
 80160e8:	2320      	movs	r3, #32
 80160ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80160f2:	2330      	movs	r3, #48	; 0x30
 80160f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80162b8 <_vfiprintf_r+0x24c>
 80160f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160fc:	f04f 0901 	mov.w	r9, #1
 8016100:	4623      	mov	r3, r4
 8016102:	469a      	mov	sl, r3
 8016104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016108:	b10a      	cbz	r2, 801610e <_vfiprintf_r+0xa2>
 801610a:	2a25      	cmp	r2, #37	; 0x25
 801610c:	d1f9      	bne.n	8016102 <_vfiprintf_r+0x96>
 801610e:	ebba 0b04 	subs.w	fp, sl, r4
 8016112:	d00b      	beq.n	801612c <_vfiprintf_r+0xc0>
 8016114:	465b      	mov	r3, fp
 8016116:	4622      	mov	r2, r4
 8016118:	4629      	mov	r1, r5
 801611a:	4630      	mov	r0, r6
 801611c:	f7ff ff93 	bl	8016046 <__sfputs_r>
 8016120:	3001      	adds	r0, #1
 8016122:	f000 80aa 	beq.w	801627a <_vfiprintf_r+0x20e>
 8016126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016128:	445a      	add	r2, fp
 801612a:	9209      	str	r2, [sp, #36]	; 0x24
 801612c:	f89a 3000 	ldrb.w	r3, [sl]
 8016130:	2b00      	cmp	r3, #0
 8016132:	f000 80a2 	beq.w	801627a <_vfiprintf_r+0x20e>
 8016136:	2300      	movs	r3, #0
 8016138:	f04f 32ff 	mov.w	r2, #4294967295
 801613c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016140:	f10a 0a01 	add.w	sl, sl, #1
 8016144:	9304      	str	r3, [sp, #16]
 8016146:	9307      	str	r3, [sp, #28]
 8016148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801614c:	931a      	str	r3, [sp, #104]	; 0x68
 801614e:	4654      	mov	r4, sl
 8016150:	2205      	movs	r2, #5
 8016152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016156:	4858      	ldr	r0, [pc, #352]	; (80162b8 <_vfiprintf_r+0x24c>)
 8016158:	f7ea f8ca 	bl	80002f0 <memchr>
 801615c:	9a04      	ldr	r2, [sp, #16]
 801615e:	b9d8      	cbnz	r0, 8016198 <_vfiprintf_r+0x12c>
 8016160:	06d1      	lsls	r1, r2, #27
 8016162:	bf44      	itt	mi
 8016164:	2320      	movmi	r3, #32
 8016166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801616a:	0713      	lsls	r3, r2, #28
 801616c:	bf44      	itt	mi
 801616e:	232b      	movmi	r3, #43	; 0x2b
 8016170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016174:	f89a 3000 	ldrb.w	r3, [sl]
 8016178:	2b2a      	cmp	r3, #42	; 0x2a
 801617a:	d015      	beq.n	80161a8 <_vfiprintf_r+0x13c>
 801617c:	9a07      	ldr	r2, [sp, #28]
 801617e:	4654      	mov	r4, sl
 8016180:	2000      	movs	r0, #0
 8016182:	f04f 0c0a 	mov.w	ip, #10
 8016186:	4621      	mov	r1, r4
 8016188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801618c:	3b30      	subs	r3, #48	; 0x30
 801618e:	2b09      	cmp	r3, #9
 8016190:	d94e      	bls.n	8016230 <_vfiprintf_r+0x1c4>
 8016192:	b1b0      	cbz	r0, 80161c2 <_vfiprintf_r+0x156>
 8016194:	9207      	str	r2, [sp, #28]
 8016196:	e014      	b.n	80161c2 <_vfiprintf_r+0x156>
 8016198:	eba0 0308 	sub.w	r3, r0, r8
 801619c:	fa09 f303 	lsl.w	r3, r9, r3
 80161a0:	4313      	orrs	r3, r2
 80161a2:	9304      	str	r3, [sp, #16]
 80161a4:	46a2      	mov	sl, r4
 80161a6:	e7d2      	b.n	801614e <_vfiprintf_r+0xe2>
 80161a8:	9b03      	ldr	r3, [sp, #12]
 80161aa:	1d19      	adds	r1, r3, #4
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	9103      	str	r1, [sp, #12]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	bfbb      	ittet	lt
 80161b4:	425b      	neglt	r3, r3
 80161b6:	f042 0202 	orrlt.w	r2, r2, #2
 80161ba:	9307      	strge	r3, [sp, #28]
 80161bc:	9307      	strlt	r3, [sp, #28]
 80161be:	bfb8      	it	lt
 80161c0:	9204      	strlt	r2, [sp, #16]
 80161c2:	7823      	ldrb	r3, [r4, #0]
 80161c4:	2b2e      	cmp	r3, #46	; 0x2e
 80161c6:	d10c      	bne.n	80161e2 <_vfiprintf_r+0x176>
 80161c8:	7863      	ldrb	r3, [r4, #1]
 80161ca:	2b2a      	cmp	r3, #42	; 0x2a
 80161cc:	d135      	bne.n	801623a <_vfiprintf_r+0x1ce>
 80161ce:	9b03      	ldr	r3, [sp, #12]
 80161d0:	1d1a      	adds	r2, r3, #4
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	9203      	str	r2, [sp, #12]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	bfb8      	it	lt
 80161da:	f04f 33ff 	movlt.w	r3, #4294967295
 80161de:	3402      	adds	r4, #2
 80161e0:	9305      	str	r3, [sp, #20]
 80161e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80162c8 <_vfiprintf_r+0x25c>
 80161e6:	7821      	ldrb	r1, [r4, #0]
 80161e8:	2203      	movs	r2, #3
 80161ea:	4650      	mov	r0, sl
 80161ec:	f7ea f880 	bl	80002f0 <memchr>
 80161f0:	b140      	cbz	r0, 8016204 <_vfiprintf_r+0x198>
 80161f2:	2340      	movs	r3, #64	; 0x40
 80161f4:	eba0 000a 	sub.w	r0, r0, sl
 80161f8:	fa03 f000 	lsl.w	r0, r3, r0
 80161fc:	9b04      	ldr	r3, [sp, #16]
 80161fe:	4303      	orrs	r3, r0
 8016200:	3401      	adds	r4, #1
 8016202:	9304      	str	r3, [sp, #16]
 8016204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016208:	482c      	ldr	r0, [pc, #176]	; (80162bc <_vfiprintf_r+0x250>)
 801620a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801620e:	2206      	movs	r2, #6
 8016210:	f7ea f86e 	bl	80002f0 <memchr>
 8016214:	2800      	cmp	r0, #0
 8016216:	d03f      	beq.n	8016298 <_vfiprintf_r+0x22c>
 8016218:	4b29      	ldr	r3, [pc, #164]	; (80162c0 <_vfiprintf_r+0x254>)
 801621a:	bb1b      	cbnz	r3, 8016264 <_vfiprintf_r+0x1f8>
 801621c:	9b03      	ldr	r3, [sp, #12]
 801621e:	3307      	adds	r3, #7
 8016220:	f023 0307 	bic.w	r3, r3, #7
 8016224:	3308      	adds	r3, #8
 8016226:	9303      	str	r3, [sp, #12]
 8016228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801622a:	443b      	add	r3, r7
 801622c:	9309      	str	r3, [sp, #36]	; 0x24
 801622e:	e767      	b.n	8016100 <_vfiprintf_r+0x94>
 8016230:	fb0c 3202 	mla	r2, ip, r2, r3
 8016234:	460c      	mov	r4, r1
 8016236:	2001      	movs	r0, #1
 8016238:	e7a5      	b.n	8016186 <_vfiprintf_r+0x11a>
 801623a:	2300      	movs	r3, #0
 801623c:	3401      	adds	r4, #1
 801623e:	9305      	str	r3, [sp, #20]
 8016240:	4619      	mov	r1, r3
 8016242:	f04f 0c0a 	mov.w	ip, #10
 8016246:	4620      	mov	r0, r4
 8016248:	f810 2b01 	ldrb.w	r2, [r0], #1
 801624c:	3a30      	subs	r2, #48	; 0x30
 801624e:	2a09      	cmp	r2, #9
 8016250:	d903      	bls.n	801625a <_vfiprintf_r+0x1ee>
 8016252:	2b00      	cmp	r3, #0
 8016254:	d0c5      	beq.n	80161e2 <_vfiprintf_r+0x176>
 8016256:	9105      	str	r1, [sp, #20]
 8016258:	e7c3      	b.n	80161e2 <_vfiprintf_r+0x176>
 801625a:	fb0c 2101 	mla	r1, ip, r1, r2
 801625e:	4604      	mov	r4, r0
 8016260:	2301      	movs	r3, #1
 8016262:	e7f0      	b.n	8016246 <_vfiprintf_r+0x1da>
 8016264:	ab03      	add	r3, sp, #12
 8016266:	9300      	str	r3, [sp, #0]
 8016268:	462a      	mov	r2, r5
 801626a:	4b16      	ldr	r3, [pc, #88]	; (80162c4 <_vfiprintf_r+0x258>)
 801626c:	a904      	add	r1, sp, #16
 801626e:	4630      	mov	r0, r6
 8016270:	f7fb feaa 	bl	8011fc8 <_printf_float>
 8016274:	4607      	mov	r7, r0
 8016276:	1c78      	adds	r0, r7, #1
 8016278:	d1d6      	bne.n	8016228 <_vfiprintf_r+0x1bc>
 801627a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801627c:	07d9      	lsls	r1, r3, #31
 801627e:	d405      	bmi.n	801628c <_vfiprintf_r+0x220>
 8016280:	89ab      	ldrh	r3, [r5, #12]
 8016282:	059a      	lsls	r2, r3, #22
 8016284:	d402      	bmi.n	801628c <_vfiprintf_r+0x220>
 8016286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016288:	f7fe ffe4 	bl	8015254 <__retarget_lock_release_recursive>
 801628c:	89ab      	ldrh	r3, [r5, #12]
 801628e:	065b      	lsls	r3, r3, #25
 8016290:	f53f af12 	bmi.w	80160b8 <_vfiprintf_r+0x4c>
 8016294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016296:	e711      	b.n	80160bc <_vfiprintf_r+0x50>
 8016298:	ab03      	add	r3, sp, #12
 801629a:	9300      	str	r3, [sp, #0]
 801629c:	462a      	mov	r2, r5
 801629e:	4b09      	ldr	r3, [pc, #36]	; (80162c4 <_vfiprintf_r+0x258>)
 80162a0:	a904      	add	r1, sp, #16
 80162a2:	4630      	mov	r0, r6
 80162a4:	f7fc f91c 	bl	80124e0 <_printf_i>
 80162a8:	e7e4      	b.n	8016274 <_vfiprintf_r+0x208>
 80162aa:	bf00      	nop
 80162ac:	080186b8 	.word	0x080186b8
 80162b0:	080186d8 	.word	0x080186d8
 80162b4:	08018698 	.word	0x08018698
 80162b8:	080188cc 	.word	0x080188cc
 80162bc:	080188d6 	.word	0x080188d6
 80162c0:	08011fc9 	.word	0x08011fc9
 80162c4:	08016047 	.word	0x08016047
 80162c8:	080188d2 	.word	0x080188d2
 80162cc:	00000000 	.word	0x00000000

080162d0 <nan>:
 80162d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80162d8 <nan+0x8>
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop
 80162d8:	00000000 	.word	0x00000000
 80162dc:	7ff80000 	.word	0x7ff80000

080162e0 <__sread>:
 80162e0:	b510      	push	{r4, lr}
 80162e2:	460c      	mov	r4, r1
 80162e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162e8:	f000 f8de 	bl	80164a8 <_read_r>
 80162ec:	2800      	cmp	r0, #0
 80162ee:	bfab      	itete	ge
 80162f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80162f2:	89a3      	ldrhlt	r3, [r4, #12]
 80162f4:	181b      	addge	r3, r3, r0
 80162f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80162fa:	bfac      	ite	ge
 80162fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80162fe:	81a3      	strhlt	r3, [r4, #12]
 8016300:	bd10      	pop	{r4, pc}

08016302 <__swrite>:
 8016302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016306:	461f      	mov	r7, r3
 8016308:	898b      	ldrh	r3, [r1, #12]
 801630a:	05db      	lsls	r3, r3, #23
 801630c:	4605      	mov	r5, r0
 801630e:	460c      	mov	r4, r1
 8016310:	4616      	mov	r6, r2
 8016312:	d505      	bpl.n	8016320 <__swrite+0x1e>
 8016314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016318:	2302      	movs	r3, #2
 801631a:	2200      	movs	r2, #0
 801631c:	f000 f890 	bl	8016440 <_lseek_r>
 8016320:	89a3      	ldrh	r3, [r4, #12]
 8016322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801632a:	81a3      	strh	r3, [r4, #12]
 801632c:	4632      	mov	r2, r6
 801632e:	463b      	mov	r3, r7
 8016330:	4628      	mov	r0, r5
 8016332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016336:	f000 b837 	b.w	80163a8 <_write_r>

0801633a <__sseek>:
 801633a:	b510      	push	{r4, lr}
 801633c:	460c      	mov	r4, r1
 801633e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016342:	f000 f87d 	bl	8016440 <_lseek_r>
 8016346:	1c43      	adds	r3, r0, #1
 8016348:	89a3      	ldrh	r3, [r4, #12]
 801634a:	bf15      	itete	ne
 801634c:	6560      	strne	r0, [r4, #84]	; 0x54
 801634e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016356:	81a3      	strheq	r3, [r4, #12]
 8016358:	bf18      	it	ne
 801635a:	81a3      	strhne	r3, [r4, #12]
 801635c:	bd10      	pop	{r4, pc}

0801635e <__sclose>:
 801635e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016362:	f000 b83b 	b.w	80163dc <_close_r>

08016366 <strncmp>:
 8016366:	b510      	push	{r4, lr}
 8016368:	b17a      	cbz	r2, 801638a <strncmp+0x24>
 801636a:	4603      	mov	r3, r0
 801636c:	3901      	subs	r1, #1
 801636e:	1884      	adds	r4, r0, r2
 8016370:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016374:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016378:	4290      	cmp	r0, r2
 801637a:	d101      	bne.n	8016380 <strncmp+0x1a>
 801637c:	42a3      	cmp	r3, r4
 801637e:	d101      	bne.n	8016384 <strncmp+0x1e>
 8016380:	1a80      	subs	r0, r0, r2
 8016382:	bd10      	pop	{r4, pc}
 8016384:	2800      	cmp	r0, #0
 8016386:	d1f3      	bne.n	8016370 <strncmp+0xa>
 8016388:	e7fa      	b.n	8016380 <strncmp+0x1a>
 801638a:	4610      	mov	r0, r2
 801638c:	e7f9      	b.n	8016382 <strncmp+0x1c>

0801638e <__ascii_wctomb>:
 801638e:	b149      	cbz	r1, 80163a4 <__ascii_wctomb+0x16>
 8016390:	2aff      	cmp	r2, #255	; 0xff
 8016392:	bf85      	ittet	hi
 8016394:	238a      	movhi	r3, #138	; 0x8a
 8016396:	6003      	strhi	r3, [r0, #0]
 8016398:	700a      	strbls	r2, [r1, #0]
 801639a:	f04f 30ff 	movhi.w	r0, #4294967295
 801639e:	bf98      	it	ls
 80163a0:	2001      	movls	r0, #1
 80163a2:	4770      	bx	lr
 80163a4:	4608      	mov	r0, r1
 80163a6:	4770      	bx	lr

080163a8 <_write_r>:
 80163a8:	b538      	push	{r3, r4, r5, lr}
 80163aa:	4d07      	ldr	r5, [pc, #28]	; (80163c8 <_write_r+0x20>)
 80163ac:	4604      	mov	r4, r0
 80163ae:	4608      	mov	r0, r1
 80163b0:	4611      	mov	r1, r2
 80163b2:	2200      	movs	r2, #0
 80163b4:	602a      	str	r2, [r5, #0]
 80163b6:	461a      	mov	r2, r3
 80163b8:	f7eb f948 	bl	800164c <_write>
 80163bc:	1c43      	adds	r3, r0, #1
 80163be:	d102      	bne.n	80163c6 <_write_r+0x1e>
 80163c0:	682b      	ldr	r3, [r5, #0]
 80163c2:	b103      	cbz	r3, 80163c6 <_write_r+0x1e>
 80163c4:	6023      	str	r3, [r4, #0]
 80163c6:	bd38      	pop	{r3, r4, r5, pc}
 80163c8:	24009e1c 	.word	0x24009e1c

080163cc <abort>:
 80163cc:	b508      	push	{r3, lr}
 80163ce:	2006      	movs	r0, #6
 80163d0:	f000 f8a4 	bl	801651c <raise>
 80163d4:	2001      	movs	r0, #1
 80163d6:	f7eb fff6 	bl	80023c6 <_exit>
	...

080163dc <_close_r>:
 80163dc:	b538      	push	{r3, r4, r5, lr}
 80163de:	4d06      	ldr	r5, [pc, #24]	; (80163f8 <_close_r+0x1c>)
 80163e0:	2300      	movs	r3, #0
 80163e2:	4604      	mov	r4, r0
 80163e4:	4608      	mov	r0, r1
 80163e6:	602b      	str	r3, [r5, #0]
 80163e8:	f7eb f8c5 	bl	8001576 <_close>
 80163ec:	1c43      	adds	r3, r0, #1
 80163ee:	d102      	bne.n	80163f6 <_close_r+0x1a>
 80163f0:	682b      	ldr	r3, [r5, #0]
 80163f2:	b103      	cbz	r3, 80163f6 <_close_r+0x1a>
 80163f4:	6023      	str	r3, [r4, #0]
 80163f6:	bd38      	pop	{r3, r4, r5, pc}
 80163f8:	24009e1c 	.word	0x24009e1c

080163fc <_fstat_r>:
 80163fc:	b538      	push	{r3, r4, r5, lr}
 80163fe:	4d07      	ldr	r5, [pc, #28]	; (801641c <_fstat_r+0x20>)
 8016400:	2300      	movs	r3, #0
 8016402:	4604      	mov	r4, r0
 8016404:	4608      	mov	r0, r1
 8016406:	4611      	mov	r1, r2
 8016408:	602b      	str	r3, [r5, #0]
 801640a:	f7eb f8dc 	bl	80015c6 <_fstat>
 801640e:	1c43      	adds	r3, r0, #1
 8016410:	d102      	bne.n	8016418 <_fstat_r+0x1c>
 8016412:	682b      	ldr	r3, [r5, #0]
 8016414:	b103      	cbz	r3, 8016418 <_fstat_r+0x1c>
 8016416:	6023      	str	r3, [r4, #0]
 8016418:	bd38      	pop	{r3, r4, r5, pc}
 801641a:	bf00      	nop
 801641c:	24009e1c 	.word	0x24009e1c

08016420 <_isatty_r>:
 8016420:	b538      	push	{r3, r4, r5, lr}
 8016422:	4d06      	ldr	r5, [pc, #24]	; (801643c <_isatty_r+0x1c>)
 8016424:	2300      	movs	r3, #0
 8016426:	4604      	mov	r4, r0
 8016428:	4608      	mov	r0, r1
 801642a:	602b      	str	r3, [r5, #0]
 801642c:	f7eb f88d 	bl	800154a <_isatty>
 8016430:	1c43      	adds	r3, r0, #1
 8016432:	d102      	bne.n	801643a <_isatty_r+0x1a>
 8016434:	682b      	ldr	r3, [r5, #0]
 8016436:	b103      	cbz	r3, 801643a <_isatty_r+0x1a>
 8016438:	6023      	str	r3, [r4, #0]
 801643a:	bd38      	pop	{r3, r4, r5, pc}
 801643c:	24009e1c 	.word	0x24009e1c

08016440 <_lseek_r>:
 8016440:	b538      	push	{r3, r4, r5, lr}
 8016442:	4d07      	ldr	r5, [pc, #28]	; (8016460 <_lseek_r+0x20>)
 8016444:	4604      	mov	r4, r0
 8016446:	4608      	mov	r0, r1
 8016448:	4611      	mov	r1, r2
 801644a:	2200      	movs	r2, #0
 801644c:	602a      	str	r2, [r5, #0]
 801644e:	461a      	mov	r2, r3
 8016450:	f7eb f8a8 	bl	80015a4 <_lseek>
 8016454:	1c43      	adds	r3, r0, #1
 8016456:	d102      	bne.n	801645e <_lseek_r+0x1e>
 8016458:	682b      	ldr	r3, [r5, #0]
 801645a:	b103      	cbz	r3, 801645e <_lseek_r+0x1e>
 801645c:	6023      	str	r3, [r4, #0]
 801645e:	bd38      	pop	{r3, r4, r5, pc}
 8016460:	24009e1c 	.word	0x24009e1c

08016464 <memmove>:
 8016464:	4288      	cmp	r0, r1
 8016466:	b510      	push	{r4, lr}
 8016468:	eb01 0402 	add.w	r4, r1, r2
 801646c:	d902      	bls.n	8016474 <memmove+0x10>
 801646e:	4284      	cmp	r4, r0
 8016470:	4623      	mov	r3, r4
 8016472:	d807      	bhi.n	8016484 <memmove+0x20>
 8016474:	1e43      	subs	r3, r0, #1
 8016476:	42a1      	cmp	r1, r4
 8016478:	d008      	beq.n	801648c <memmove+0x28>
 801647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801647e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016482:	e7f8      	b.n	8016476 <memmove+0x12>
 8016484:	4402      	add	r2, r0
 8016486:	4601      	mov	r1, r0
 8016488:	428a      	cmp	r2, r1
 801648a:	d100      	bne.n	801648e <memmove+0x2a>
 801648c:	bd10      	pop	{r4, pc}
 801648e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016496:	e7f7      	b.n	8016488 <memmove+0x24>

08016498 <_malloc_usable_size_r>:
 8016498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801649c:	1f18      	subs	r0, r3, #4
 801649e:	2b00      	cmp	r3, #0
 80164a0:	bfbc      	itt	lt
 80164a2:	580b      	ldrlt	r3, [r1, r0]
 80164a4:	18c0      	addlt	r0, r0, r3
 80164a6:	4770      	bx	lr

080164a8 <_read_r>:
 80164a8:	b538      	push	{r3, r4, r5, lr}
 80164aa:	4d07      	ldr	r5, [pc, #28]	; (80164c8 <_read_r+0x20>)
 80164ac:	4604      	mov	r4, r0
 80164ae:	4608      	mov	r0, r1
 80164b0:	4611      	mov	r1, r2
 80164b2:	2200      	movs	r2, #0
 80164b4:	602a      	str	r2, [r5, #0]
 80164b6:	461a      	mov	r2, r3
 80164b8:	f7eb f8a0 	bl	80015fc <_read>
 80164bc:	1c43      	adds	r3, r0, #1
 80164be:	d102      	bne.n	80164c6 <_read_r+0x1e>
 80164c0:	682b      	ldr	r3, [r5, #0]
 80164c2:	b103      	cbz	r3, 80164c6 <_read_r+0x1e>
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	24009e1c 	.word	0x24009e1c

080164cc <_raise_r>:
 80164cc:	291f      	cmp	r1, #31
 80164ce:	b538      	push	{r3, r4, r5, lr}
 80164d0:	4604      	mov	r4, r0
 80164d2:	460d      	mov	r5, r1
 80164d4:	d904      	bls.n	80164e0 <_raise_r+0x14>
 80164d6:	2316      	movs	r3, #22
 80164d8:	6003      	str	r3, [r0, #0]
 80164da:	f04f 30ff 	mov.w	r0, #4294967295
 80164de:	bd38      	pop	{r3, r4, r5, pc}
 80164e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80164e2:	b112      	cbz	r2, 80164ea <_raise_r+0x1e>
 80164e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80164e8:	b94b      	cbnz	r3, 80164fe <_raise_r+0x32>
 80164ea:	4620      	mov	r0, r4
 80164ec:	f000 f830 	bl	8016550 <_getpid_r>
 80164f0:	462a      	mov	r2, r5
 80164f2:	4601      	mov	r1, r0
 80164f4:	4620      	mov	r0, r4
 80164f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164fa:	f000 b817 	b.w	801652c <_kill_r>
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d00a      	beq.n	8016518 <_raise_r+0x4c>
 8016502:	1c59      	adds	r1, r3, #1
 8016504:	d103      	bne.n	801650e <_raise_r+0x42>
 8016506:	2316      	movs	r3, #22
 8016508:	6003      	str	r3, [r0, #0]
 801650a:	2001      	movs	r0, #1
 801650c:	e7e7      	b.n	80164de <_raise_r+0x12>
 801650e:	2400      	movs	r4, #0
 8016510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016514:	4628      	mov	r0, r5
 8016516:	4798      	blx	r3
 8016518:	2000      	movs	r0, #0
 801651a:	e7e0      	b.n	80164de <_raise_r+0x12>

0801651c <raise>:
 801651c:	4b02      	ldr	r3, [pc, #8]	; (8016528 <raise+0xc>)
 801651e:	4601      	mov	r1, r0
 8016520:	6818      	ldr	r0, [r3, #0]
 8016522:	f7ff bfd3 	b.w	80164cc <_raise_r>
 8016526:	bf00      	nop
 8016528:	24000bac 	.word	0x24000bac

0801652c <_kill_r>:
 801652c:	b538      	push	{r3, r4, r5, lr}
 801652e:	4d07      	ldr	r5, [pc, #28]	; (801654c <_kill_r+0x20>)
 8016530:	2300      	movs	r3, #0
 8016532:	4604      	mov	r4, r0
 8016534:	4608      	mov	r0, r1
 8016536:	4611      	mov	r1, r2
 8016538:	602b      	str	r3, [r5, #0]
 801653a:	f7eb ff34 	bl	80023a6 <_kill>
 801653e:	1c43      	adds	r3, r0, #1
 8016540:	d102      	bne.n	8016548 <_kill_r+0x1c>
 8016542:	682b      	ldr	r3, [r5, #0]
 8016544:	b103      	cbz	r3, 8016548 <_kill_r+0x1c>
 8016546:	6023      	str	r3, [r4, #0]
 8016548:	bd38      	pop	{r3, r4, r5, pc}
 801654a:	bf00      	nop
 801654c:	24009e1c 	.word	0x24009e1c

08016550 <_getpid_r>:
 8016550:	f7eb bf21 	b.w	8002396 <_getpid>

08016554 <with_errnof>:
 8016554:	b513      	push	{r0, r1, r4, lr}
 8016556:	4604      	mov	r4, r0
 8016558:	ed8d 0a01 	vstr	s0, [sp, #4]
 801655c:	f7fb fb7c 	bl	8011c58 <__errno>
 8016560:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016564:	6004      	str	r4, [r0, #0]
 8016566:	b002      	add	sp, #8
 8016568:	bd10      	pop	{r4, pc}

0801656a <xflowf>:
 801656a:	b130      	cbz	r0, 801657a <xflowf+0x10>
 801656c:	eef1 7a40 	vneg.f32	s15, s0
 8016570:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016574:	2022      	movs	r0, #34	; 0x22
 8016576:	f7ff bfed 	b.w	8016554 <with_errnof>
 801657a:	eef0 7a40 	vmov.f32	s15, s0
 801657e:	e7f7      	b.n	8016570 <xflowf+0x6>

08016580 <__math_uflowf>:
 8016580:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016588 <__math_uflowf+0x8>
 8016584:	f7ff bff1 	b.w	801656a <xflowf>
 8016588:	10000000 	.word	0x10000000

0801658c <__math_may_uflowf>:
 801658c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016594 <__math_may_uflowf+0x8>
 8016590:	f7ff bfeb 	b.w	801656a <xflowf>
 8016594:	1a200000 	.word	0x1a200000

08016598 <__math_oflowf>:
 8016598:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80165a0 <__math_oflowf+0x8>
 801659c:	f7ff bfe5 	b.w	801656a <xflowf>
 80165a0:	70000000 	.word	0x70000000

080165a4 <expf>:
 80165a4:	ee10 2a10 	vmov	r2, s0
 80165a8:	f240 412a 	movw	r1, #1066	; 0x42a
 80165ac:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80165b0:	428b      	cmp	r3, r1
 80165b2:	b430      	push	{r4, r5}
 80165b4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80165b8:	d92a      	bls.n	8016610 <expf+0x6c>
 80165ba:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80165be:	d058      	beq.n	8016672 <expf+0xce>
 80165c0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80165c4:	d303      	bcc.n	80165ce <expf+0x2a>
 80165c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80165ca:	bc30      	pop	{r4, r5}
 80165cc:	4770      	bx	lr
 80165ce:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016678 <expf+0xd4>
 80165d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80165d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165da:	dd03      	ble.n	80165e4 <expf+0x40>
 80165dc:	bc30      	pop	{r4, r5}
 80165de:	2000      	movs	r0, #0
 80165e0:	f7ff bfda 	b.w	8016598 <__math_oflowf>
 80165e4:	eddf 7a25 	vldr	s15, [pc, #148]	; 801667c <expf+0xd8>
 80165e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80165ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f0:	d503      	bpl.n	80165fa <expf+0x56>
 80165f2:	bc30      	pop	{r4, r5}
 80165f4:	2000      	movs	r0, #0
 80165f6:	f7ff bfc3 	b.w	8016580 <__math_uflowf>
 80165fa:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016680 <expf+0xdc>
 80165fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016606:	d503      	bpl.n	8016610 <expf+0x6c>
 8016608:	bc30      	pop	{r4, r5}
 801660a:	2000      	movs	r0, #0
 801660c:	f7ff bfbe 	b.w	801658c <__math_may_uflowf>
 8016610:	4b1c      	ldr	r3, [pc, #112]	; (8016684 <expf+0xe0>)
 8016612:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016616:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801661a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801661e:	eeb0 7b44 	vmov.f64	d7, d4
 8016622:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016626:	ee17 0a10 	vmov	r0, s14
 801662a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801662e:	f000 021f 	and.w	r2, r0, #31
 8016632:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8016636:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801663a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801663e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8016642:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8016646:	eea5 6b07 	vfma.f64	d6, d5, d7
 801664a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801664e:	684d      	ldr	r5, [r1, #4]
 8016650:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8016654:	2100      	movs	r1, #0
 8016656:	190a      	adds	r2, r1, r4
 8016658:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801665c:	eea5 0b07 	vfma.f64	d0, d5, d7
 8016660:	ec43 2b17 	vmov	d7, r2, r3
 8016664:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016668:	ee20 0b07 	vmul.f64	d0, d0, d7
 801666c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016670:	e7ab      	b.n	80165ca <expf+0x26>
 8016672:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8016688 <expf+0xe4>
 8016676:	e7a8      	b.n	80165ca <expf+0x26>
 8016678:	42b17217 	.word	0x42b17217
 801667c:	c2cff1b4 	.word	0xc2cff1b4
 8016680:	c2ce8ecf 	.word	0xc2ce8ecf
 8016684:	080188e0 	.word	0x080188e0
 8016688:	00000000 	.word	0x00000000

0801668c <_gettimeofday>:
 801668c:	4b02      	ldr	r3, [pc, #8]	; (8016698 <_gettimeofday+0xc>)
 801668e:	2258      	movs	r2, #88	; 0x58
 8016690:	601a      	str	r2, [r3, #0]
 8016692:	f04f 30ff 	mov.w	r0, #4294967295
 8016696:	4770      	bx	lr
 8016698:	24009e1c 	.word	0x24009e1c

0801669c <_init>:
 801669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801669e:	bf00      	nop
 80166a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166a2:	bc08      	pop	{r3}
 80166a4:	469e      	mov	lr, r3
 80166a6:	4770      	bx	lr

080166a8 <_fini>:
 80166a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166aa:	bf00      	nop
 80166ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ae:	bc08      	pop	{r3}
 80166b0:	469e      	mov	lr, r3
 80166b2:	4770      	bx	lr
